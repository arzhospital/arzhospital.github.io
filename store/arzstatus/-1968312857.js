var method_name = "ContentManager.cmsHTMLPageFindall";

var server_time = new Date(2020, 10-1, 10, 7, 18, 4);

var execution_time = 0.031438;

ret = new Array();
ret[0] = new Object();
ret[0].ToString = "Report Section";
ret[0]._ToString = "Report Section";
ret[0].Active = false;
ret[0].AlwaysGenerate = false;
ret[0].Body = "";
ret[0].Date = new Date(2018, 7-1, 11, 7, 19, 3);
ret[0].Description = "";
ret[0].Footer = "";
ret[0].ImageSource = "";
ret[0].Page = "Hosted/COM/ReportSection";
ret[0].PreScript = "";
ret[0].Public = false;
ret[0].Script = "window.ReportSection = class {\r\n\tconstructor(year, companyCode, interval) {\r\n\t\tthis._year = year;\r\n\t\tthis._companyCode = companyCode;\r\n\t\tthis._start = moment().year(this._year).startOf(\'year\');\r\n\t\tthis._end = moment().year(this._year).endOf(\'year\');\r\n\t\tthis._interval = interval || {\r\n\t\t\tMonth: 1,\r\n\t\t\tFormat: \'MMM/YY\'\r\n\t\t};\r\n\t}\r\n\r\n\t_dates() {\r\n\t\tvar ret = [];\r\n\t\tvar startOfParam = \"\";\r\n\t\tfor (var p in this._interval) {\r\n\t\t\tstartOfParam = p.toLowerCase();\r\n\t\t}\r\n\t\tfor (var d = moment(this._start); d <= moment(this._end).add(this._interval).startOf(startOfParam); ret.push(moment(d).toDate()), d.add(this._interval));\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t_pivot(total, format) {\r\n\t\tvar ret = [];\r\n\t\tvar times = sr.groupBy(total, \'PARTITIONID\');\r\n\t\tfor (var i = 0; i < times.length; i++) {\r\n\t\t\tvar groups = sr.groupBy(times[i].values, \'name\');\r\n\t\t\tfor (var j = 0; j < groups.length; j++) {\r\n\t\t\t\tret.push({\r\n\t\t\t\t\tTime: moment(times[i].key).format(format).toString(),\r\n\t\t\t\t\tDimension: groups[j].key,\r\n\t\t\t\t\tAggregation: groups[j].values[0].V0\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t_asZingOptions(data) {\r\n\t\tvar options = {\r\n\t\t\t\"graphset\": []\r\n\t\t};\r\n\r\n\t\tfor (var g = 0; g < data.labels.length; g++) {\r\n\t\t\tvar gset = {\r\n\t\t\t\ttype: data.type || \"bar\",\r\n\t\t\t\toptions: {},\r\n\t\t\t};\r\n\r\n\t\t\tgset[\"stacked\"] = data.labels.length > 0;\r\n\t\t\tgset[\"plot\"] = {\r\n\t\t\t\t\"data-sum\": [],\r\n\t\t\t\t\"value-box\": {\r\n\t\t\t\t\t\"text\": \"%data-sum\",\r\n\t\t\t\t\t//\"jsRule\": \"1+1\",\r\n\t\t\t\t\t\"rules\": [{\r\n\t\t\t\t\t\t\"rule\": \"%stack-top == 0\",\r\n\t\t\t\t\t\t\"visible\": 0\r\n\t\t\t\t\t}]\r\n\t\t\t\t},\r\n\t\t\t\ttooltip: {\r\n\t\t\t\t\ttext: \"%t %v\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tgset[\"plotarea\"] = {\r\n\t\t\t\t\"margin-right\": \"25%\"\r\n\t\t\t};\r\n\t\t\tgset[\"legend\"] = {\r\n\t\t\t\t\"toggle-action\": \"hide\",\r\n\t\t\t\t\"minimize\": \"true\",\r\n\t\t\t\t\"item\": {\r\n\t\t\t\t\t\"cursor\": \"pointer\"\r\n\t\t\t\t},\r\n\t\t\t\t\"draggable\": true,\r\n\t\t\t\t\"drag-handler\": \"icon\"\r\n\t\t\t};\r\n\t\t\tgset[\"title\"] = {\r\n\t\t\t\t\"text\": data.title,\r\n\t\t\t\t\"font-family\": \"arial\",\r\n\t\t\t\t\"x\": \"40px\",\r\n\t\t\t\t\"y\": \"5px\",\r\n\t\t\t\t\"align\": \"left\",\r\n\t\t\t\t\"bold\": false,\r\n\t\t\t\t\"font-size\": \"16px\",\r\n\t\t\t\t\"font-color\": \"#000000\",\r\n\t\t\t\t\"background-color\": \"none\"\r\n\t\t\t};\r\n\t\t\tgset[\"subtitle\"] = {\r\n\t\t\t\t\"text\": \"<i>\" + \"Between \" + moment(data.startDate).format(\"DD/MM/YYYY\") + \" and \" + moment(data.endDate).format(\"DD/MM/YYYY\") + \"</i>\",\r\n\t\t\t\t\"font-family\": \"arial\",\r\n\t\t\t\t\"x\": \"40px\",\r\n\t\t\t\t\"y\": \"25px\",\r\n\t\t\t\t\"align\": \"left\",\r\n\t\t\t\t\"bold\": false,\r\n\t\t\t\t\"font-size\": \"16px\",\r\n\t\t\t\t\"font-color\": \"#7E7E7E\",\r\n\t\t\t\t\"background-color\": \"none\"\r\n\t\t\t};\r\n\r\n\t\t\tgset.labels = [];\r\n\t\t\tfor (var t = 0; t < gset.labels.length; t++) {\r\n\t\t\t\tgset.labels[t] = {\r\n\t\t\t\t\t\"text\": gset.labels[t],\r\n\t\t\t\t\t\"hook\": \"node:plot=2;index=\" + t\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tgset[\"scaleX\"] = {\r\n\t\t\t\t\"values\": [],\r\n\t\t\t};\r\n\t\t\tvar labels = sr.groupBy(data.data, data.dimensions[0]);\r\n\t\t\tfor (var i = 0; i < labels.length; i++) {\r\n\t\t\t\tgset[\"scaleX\"].values.push(moment(labels[i].key).format(data.interval.Format).toString());\r\n\t\t\t}\r\n\r\n\t\t\tgset.series = [];\r\n\t\t\tvar gData = sr.groupBy(data.data, data.labels[g]);\r\n\t\t\tfor (var i = 0; i < gData.length; i++) {\r\n\t\t\t\tvar values = Array(labels.length);\r\n\t\t\t\tfor (var j = 0; j < gData[i].values.length; j++) {\r\n\t\t\t\t\tvar v = gData[i].values[j];\r\n\t\t\t\t\tfor (var l = 0; l < labels.length; l++) {\r\n\t\t\t\t\t\tif (labels[l].key == v[data.dimensions[0]]) {\r\n\t\t\t\t\t\t\tvalues[l] = parseInt(v[data.values[0]]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvalues[l] = values[l] || 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgset.series.push({\r\n\t\t\t\t\tvalues: values,\r\n\t\t\t\t\ttext: gData[i].key,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\toptions.graphset.push(gset);\r\n\t\t}\r\n\t\t//console.log(options);\r\n\t\treturn options;\r\n\t}\r\n\r\n\t_data(total, type, title) {\r\n\t\treturn {\r\n\t\t\ttype: type || \'bar\',\r\n\t\t\tdata: this._topData(total, \"PARTITIONID\", \"V0\", 5),\r\n\t\t\tlabels: [\"name\"],\r\n\t\t\tvalues: [\'V0\'],\r\n\t\t\tdimensions: [\'PARTITIONID\'],\r\n\t\t\ttitle: /*\"Top \" + top + \" \" + */ title || \"\",\r\n\t\t\tstartDate: total[0].PARTITIONID, //this._start,\r\n\t\t\tendDate: total[total.length - 1].PARTITIONID, //this._end,\r\n\t\t\tinterval: this._interval,\r\n\t\t};\r\n\t}\r\n\r\n\t_topData(ar, gField, vField, top) {\r\n\t\t$.each(ar, (_, v) => {\r\n\t\t\tv[vField] = v[vField] || 0;\r\n\t\t});\r\n\r\n\t\tif (!top) {\r\n\t\t\treturn ar;\r\n\t\t}\r\n\r\n\t\tvar ret = [];\r\n\t\t$.each(sr.groupBy(ar, gField), (_, key) => {\r\n\t\t\tkey.values = key.values.sort((a, b) => {\r\n\t\t\t\tif (parseFloat(a[vField]) < parseFloat(b[vField])) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else if (parseFloat(a[vField]) > parseFloat(b[vField])) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tret = ret.concat(key.values.slice(0, top));\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t_On(p, type, start, end) {\r\n\t\tp.OPERATORS = p.OPERATORS || {};\r\n\t\tif (start && !end) {\r\n\t\t\tp[type + \'On\'] = \'${rMax}\' || moment(start).toDate();\r\n\t\t\tp.OPERATORS[type + \'On\'] = \"<=\";\r\n\t\t} else if (!start && end) {\r\n\t\t\tp[type + \'On\'] = \'${rMin}\' || moment(end).toDate();\r\n\t\t\tp.OPERATORS[type + \'On\'] = \">=\";\r\n\t\t} else if (start && end) {\r\n\t\t\tp[type + \'On\'] = \"${rMin}\"; //moment(start).toDate();\r\n\t\t\tp.OPERATORS[type + \'On\'] = \"BETWEEN ${rMax}\"; // + (sr.toDateTime(moment(end).toDate()) || end);\r\n\t\t}\r\n\t}\r\n\r\n\t_takenOn(p) {\r\n\t\treturn this._On(p, \'Taken\', this._start, this._end);\r\n\t}\r\n\r\n\t_startedOn(p) {\r\n\t\treturn this._On(p, \'Started\', this._start);\r\n\t}\r\n\r\n\t_endedOn(p) {\r\n\t\treturn this._On(p, \'Ended\', null, this._end);\r\n\t}\r\n\r\n\t_piv(f, keyFields, filters, _OnType) {\r\n\t\t_OnType = _OnType || [\'taken\'];\r\n\t\tif (!Array.isArray(_OnType)) {\r\n\t\t\t_OnType = [_OnType];\r\n\t\t}\r\n\t\tvar dm = f.DataMap || f;\r\n\t\tvar p = {\r\n\t\t\tActive: true,\r\n\t\t\tBatch: {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tEnabled: true,\r\n\t\t\t},\r\n\t\t\tDataSet: {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tDataMap: dm,\r\n\t\t\t},\r\n\t\t\tPerformanceIdentities: [],\r\n\t\t\tOPERATORS: {\r\n\t\t\t\tPerformanceIdentities: \"INTERSECT\"\r\n\t\t\t},\r\n\t\t};\r\n\t\tvar pi = {\r\n\t\t\tLastID: 0,\r\n\t\t\tActive: true,\r\n\t\t\tPerformance: p,\r\n\t\t};\r\n\r\n\t\t$.map(_OnType, o => this[\'_\' + o + \'On\'](pi.Performance));\r\n\r\n\t\t$.each(keyFields, (__, _kf) => {\r\n\t\t\tvar _pi = {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tDataField: _kf,\r\n\t\t\t\tIdentity: {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tGroup: _kf.Group,\r\n\t\t\t\t\tId: \"${ID\" + pi.LastID++ + \"}\",\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\tpi.Performance.PerformanceIdentities.push(_pi);\r\n\t\t});\r\n\r\n\t\t$.each(filters, (__, _fs) => {\r\n\t\t\tpi.Performance.PerformanceIdentities.push({\r\n\t\t\t\tActive: true,\r\n\t\t\t\tIdentity: _fs,\r\n\t\t\t});\r\n\t\t});\r\n\t\tif (f.DataMap) {\r\n\t\t\tif (!f.CodeField) {\r\n\t\t\t\t// pi is a performance value\r\n\t\t\t\tpi.DataMapValue = f;\r\n\t\t\t} else {\r\n\t\t\t\t// pi is a performance identity\r\n\t\t\t\tpi.Identity = {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tGroup: f.Group,\r\n\t\t\t\t};\r\n\t\t\t\tpi.DataField = f;\r\n\t\t\t}\r\n\t\t} else if (_OnType.indexOf(\'started\') > -1 && _OnType.indexOf(\'ended\') > -1) {\r\n\t\t\treturn {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tGroup: {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tDataFields: [{\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tEnabled: true,\r\n\t\t\t\t\t\tPrimary: true,\r\n\t\t\t\t\t\tDataMap: dm\r\n\t\t\t\t\t}],\r\n\t\t\t\t},\r\n\t\t\t\tPerformanceIdentities: [{\r\n\t\t\t\t\tDataField: {\r\n\t\t\t\t\t\tPrimary: true,\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tEnabled: true,\r\n\t\t\t\t\t\tDataMap: dm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tPerformance: pi.Performance\r\n\t\t\t\t}]\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn pi.Performance;\r\n\t\t}\r\n\r\n\t\treturn pi;\r\n\t}\r\n\r\n\t_propApply(object, fApply) {\r\n\t\tfor (var property in object) {\r\n\t\t\tif (!object.hasOwnProperty(property)) continue;\r\n\t\t\tif (fApply) fApply(object, property, object[property]);\r\n\t\t\tif (typeof object[property] == \"object\") {\r\n\t\t\t\tif (object[property].constructor.toString().indexOf(\"Array()\") > -1 && object[property].length) {\r\n\t\t\t\t\t// array\r\n\t\t\t\t\tfor (var i = 0; i < object[property].length; i++) {\r\n\t\t\t\t\t\tthis._propApply(object[property][i], fApply);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// an object\r\n\t\t\t\t\tthis._propApply(object[property], fApply);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync _runLink(gv, _OnType) {\r\n\t\tif (!gv) return null;\r\n\t\tgv = gv.Name ? gv : await sr._(\"CorporateMeasures.comGroupViewFind\", null, {\r\n\t\t\tEnabled: true,\r\n\t\t\tSubGroupViewLinks: [{\r\n\t\t\t\tName: gv,\r\n\t\t\t\tEnabled: true,\r\n\t\t\t\tOPERATORS: {\r\n\t\t\t\t\tName: \'=\'\r\n\t\t\t\t}\r\n\t\t\t}]\r\n\t\t}, null, 2);\r\n\t\tthis._prepareLink(gv, _OnType);\r\n\r\n\t\treturn this._runAggregation(gv, aggs, kv, pts, _OnType);\r\n\t}\r\n\r\n\t_prepareLink(name, _OnType) {\r\n\t\treturn $.when(\r\n\t\t\tsr._(\'CorporateMeasures.comGroupViewLinkFindall\', null, {\r\n\t\t\t\tName: name\r\n\t\t\t})\r\n\t\t).then(gvl => {\r\n\t\t\tvar calls = [];\r\n\t\t\t$.merge(calls, $.map(gvl, l => this._prepare(l.BaseGroupView.Name, _OnType)));\r\n\t\t\t$.merge(calls, $.map(gvl, l => this._prepare(l.SubGroupView.Name, _OnType)));\r\n\r\n\t\t\treturn $.when(...calls).then((...kvs) => {\r\n\t\t\t\tvar ret = {\r\n\t\t\t\t\tKeys: kvs[0].Keys,\r\n\t\t\t\t\tValues: []\r\n\t\t\t\t};\r\n\t\t\t\t$.each(kvs[1].Values, (_, v) => {\r\n\t\t\t\t\tthis._propApply(v, (o, p, pv) => {\r\n\t\t\t\t\t\tif (p === \"Identity\" && pv.Id && pv.Id.IndexOf(\"${ID\") == -1 && pv.Group && pv.Group.Id == gvl[0].SubDataField.Groupid) {\r\n\t\t\t\t\t\t\t// link with base data field\r\n\t\t\t\t\t\t\tdelete o.Identity.Id;\r\n\t\t\t\t\t\t\to.Identity.PerformanceIdentities = [{\r\n\t\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\t\tDataField: gvl[0].BaseDataField,\r\n\t\t\t\t\t\t\t}];\r\n\t\t\t\t\t\t\tif (kvs[0].Values[0].Batch) {\r\n\t\t\t\t\t\t\t\t// a performance\r\n\t\t\t\t\t\t\t\to.Identity.PerformanceIdentities[0].Performance = kvs[0].Values[0];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar pr = {\r\n\t\t\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\t\t\tDataSet: {\r\n\t\t\t\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\t\t\t\tEnabled: true,\r\n\t\t\t\t\t\t\t\t\t\tDataMap: {\r\n\t\t\t\t\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\t\t\t\t\tId: gvl[0].BaseDataField.DataMapid\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tif (kvs[0].Values[0].DataField) {\r\n\t\t\t\t\t\t\t\t\tpr.PerformanceIdentities = [kvs[0].Values[0]];\r\n\t\t\t\t\t\t\t\t} else if (kvs[0].Values[0].DataMapValue) {\r\n\t\t\t\t\t\t\t\t\tpr.PerformanceValues = [kvs[0].Values[0]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\to.Identity.PerformanceIdentities[0].Performance = pr;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tret.Values.push(v);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconsole.log(\"L: \" + name);\r\n\t\t\t\tconsole.log(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t_prepare(gv, _OnType) {\r\n\t\t_OnType = gv.PartitionField ? gv.PartitionField.split(\',\') : _OnType;\r\n\t\tvar vfs = [];\r\n\r\n\t\t$.merge(vfs, $.map(gv.ValueFields, f => {\r\n\t\t\treturn this._piv(f, gv.KeyFields, gv.Filters, _OnType);\r\n\t\t}));\r\n\t\t$.merge(vfs, $.map(gv.DataMapValues, f => {\r\n\t\t\treturn this._piv(f, gv.KeyFields, gv.Filters, _OnType);\r\n\t\t}));\r\n\r\n\t\tif (!vfs.length) {\r\n\t\t\t// count performances, send datamap instead of field\r\n\t\t\tif (gv.KeyFields.length) {\r\n\t\t\t\tvfs = [this._piv(gv.KeyFields[0].DataMap, gv.KeyFields, gv.Filters, _OnType)];\r\n\t\t\t} else {\r\n\t\t\t\tvfs = [this._piv(gv.DataMap, gv.KeyFields, gv.Filters, _OnType)];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar ret = {\r\n\t\t\tKeys: gv.KeyFields,\r\n\t\t\tValues: vfs,\r\n\t\t};\r\n\r\n\t\tconsole.log(ret);\r\n\t\tconsole.log(gv.Name);\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tasync _run(gv, _OnType) {\r\n\t\tif (!gv) return null;\r\n\r\n\t\tgv = gv.Name ? gv : await sr._(\'CorporateMeasures.comGroupViewFind\', null, {\r\n\t\t\tName: gv,\r\n\t\t\tOPERATORS: {\r\n\t\t\t\tName: \'=\'\r\n\t\t\t}\r\n\t\t}, null, 2);\r\n\t\treturn await this._runAggregation(gv);\r\n\t}\r\n\r\n\tasync _runAggregation(gv, aggs, kv, pts, _OnType) {\r\n\t\tif (gv === null) return;\r\n\t\tif (typeof (aggs) === \"undefined\") aggs = gv.Aggregations || [];\r\n\t\tif (typeof (kv) === \"undefined\") kv = this._prepare(gv, _OnType);\r\n\t\tif (typeof (pts) === \"undefined\") pts = gv.ViewPartitions;\r\n\t\t_OnType = gv.PartitionField ? gv.PartitionField.split(\',\') : _OnType;\r\n\r\n\t\tvar partitions = this._dates();\r\n\t\tif (pts && pts.length) {\r\n\t\t\tpartitions = $.map(pts, p => p.Value);\r\n\t\t\tpartitions.push(1000 * pts[pts.length - 1].Value);\r\n\t\t}\r\n\r\n\t\tvar id_values = [];\r\n\t\tvar pi_values = [];\r\n\t\tvar pv_values = [];\r\n\t\tvar p_values = [];\r\n\t\t$.each(kv.Values, (_, kvv) => {\r\n\t\t\tif (kvv.DataMapValue) pv_values.push(kvv);\r\n\t\t\tif (kvv.DataField) pi_values.push(kvv);\r\n\t\t\tif (kvv.Batch) p_values.push(kvv);\r\n\t\t\tif (kvv.Group) id_values.push(kvv);\r\n\t\t});\r\n\t\tif (pts && pts.length) {\r\n\t\t\t$.each(pv_values, (_, piv) => {\r\n\t\t\t\tif (!piv.Value) {\r\n\t\t\t\t\tpiv.Value = 1;\r\n\t\t\t\t\tpiv.OPERATORS = piv.OPERATORS || {};\r\n\t\t\t\t\tpiv.OPERATORS.Value = \"BETWEEN 1\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfor (var i = aggs.length; i < (pv_values.length + pi_values.length + p_values.length + id_values.length); i++) {\r\n\t\t\taggs.push({\r\n\t\t\t\tCode: \'COUNT\'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\twindow.sr.bAsync = gv.Async;\r\n\t\treturn await sr._(\'CorporateMeasures.comGroupViewAggregation\', null, $.map(kv.Keys, k => {\r\n\t\t\treturn {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tGroup: k.Group\r\n\t\t\t};\r\n\t\t}), id_values, pi_values, pv_values, p_values, partitions, $.map(_OnType, o => o + \'On\'), $.map(aggs, ag => ag.Code), gv.FieldFormatter, window.bTest || false);\r\n\t}\r\n};";
ret[0].Title = "Report Section";
ret[0].Id = 1595;
ret[0].Authorid = 1;
ret[0].Author = new Object();
ret[0].Author.ToString = "Fadi Nammour";
ret[0].Author._ToString = "Fadi Nammour";
ret[0].Author.Active = true;
ret[0].Author.Admin = true;
ret[0].Author.Email = "";
ret[0].Author.FirstName = "Fadi";
ret[0].Author.LastName = "Nammour";
ret[0].Author.Password = "";
ret[0].Author.Username = "admin";
ret[0].Author.Id = 1;
ret[0].Author.FeedbackPages = new Array();
ret[0].Author.PageStatuses = new Array();
ret[0].Author.Pages = new Array();
ret[0].Author.PageHelps = new Array();
ret[0].Author.BugReports = new Array();
ret[0].Author.AuthorDataLayers = new Array();
ret[0].Author.UploadedFiles = new Array();
ret[0].Author.Settings = new Array();
ret[0].SectionPages = new Array();
ret[0].PageMenus = new Array();
ret[0].RelatingPages = new Array();
ret[0].RelatedPages = new Array();
ret[0].PageAccessRules = new Array();
ret[0].BugReports = new Array();
ret[0].PageAccessRights = new Array();
ret[0].PageStatuses = new Array();
ret[0].ReferenceMenus = new Array();
ret[0].PageAccessRequests = new Array();
ret[0].FeedbackPages = new Array();
ret[0].PageHelps = new Array();