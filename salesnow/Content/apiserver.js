{
	"__id": "87141a52ce5bec79cc3256eef4e1de3fb465423b",
	"content": "if(typeof(global)!=="undefined") global.Flatted = require('flatted');

let __g = typeof(global)==="undefined"?window:global;

let salesnow = {
    __script: {
        Date: new Date('2023-08-15T13:28:05.000Z'),
    },
    __secret: JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`IjZhYmVlNDc5LTEyMWEtNDc0ZC1hZDMxLWNhNjY0OGQ3NTQ2MCI=`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),
    __mainClass: 'User',

    hrefs: JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`W3sibGliIjoiTG9nSFRNTCIsInNyYyI6Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vY29uc29sZS1sb2ctaHRtbEAyLjAuMi9jb25zb2xlLWxvZy1odG1sLm1pbi5qcyIsImNhY2hlIjp0cnVlLCJ0b29scyI6W10sImxvYWQiOiJtb2R1bGVzID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiTG9nSFRNTFwiKSA/IENvbnNvbGVMb2dIVE1MLmNvbm5lY3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJMb2dIVE1MXCIpKSA6ICcnIiwicmVxdWlyZXMiOltdfSx7ImxpYiI6IlNRTEpTIiwic3JjIjpbImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3NxbC5qcy8xLjguMC9zcWwtd2FzbS5taW4uanMiXSwiY2FjaGUiOnRydWUsImxvYWQiOiJhc3luYyBtb2R1bGVzID0+IHtcclxuXHRcdHdpbmRvdy5TUUwgPSBhd2FpdCBpbml0U3FsSnMoe1xyXG5cdFx0XHRsb2NhdGVGaWxlOiBmaWxlID0+IGBodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zcWwuanMvMS44LjAvJHtmaWxlfWBcclxuXHRcdH0pO1xyXG5cdH0iLCJ0b29scyI6WyJTcWxEQiJdLCJyZXF1aXJlcyI6W119LHsibGliIjoiZG90LW9iamVjdCIsInNyYyI6Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vZG90LW9iamVjdEAyLjEuNC9pbmRleC5taW4uanMiLCJjYWNoZSI6dHJ1ZSwidG9vbHMiOltdLCJyZXF1aXJlcyI6W119LHsibGliIjoiQXhpb3MiLCJzcmMiOiJodHRwczovL3VucGtnLmNvbS9heGlvcy9kaXN0L2F4aW9zLm1pbi5qcyIsImNhY2hlIjp0cnVlLCJ0b29scyI6W10sInJlcXVpcmVzIjpbXX1d`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),


    __Tools: [
    JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`eyJ0eXBlIjp7Im5hbWUiOiJTcWxEQiIsInR5cGVfTWFwcGluZ3MiOlt7ImFjdGl2ZSI6ZmFsc2UsImNvbnRleHQiOiIoXFxiXFx3KykiLCJjbGFzc05hbWUiOiIoXFxiXFx3KykiLCJzb3VyY2UiOiIoXFxiXFx3KykiLCJ0YXJnZXQiOiIobXQsIHMpID0+IHMudG9Mb3dlckNhc2UoKSIsImVuYWJsZWQiOnRydWUsInR5cGUiOnsibmFtZSI6IlNxbERCIn19XSwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0eXBlX0NvbmZpZ3MiOltdfSwidG9vbF9Db25maWdzIjpbeyJuYW1lIjoiZGF0YWJhc2UiLCJ2YWx1ZSI6IlwiOm1lbW9yeTpcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoic2VydmVyIiwidmFsdWUiOiJcImxvY2FsaG9zdFwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJ1c2VybmFtZSIsInZhbHVlIjoiXCJyb290XCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6InBhc3N3b3JkIiwidmFsdWUiOiJcInJvb3RcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoiY3JlYXRlIiwidmFsdWUiOiIyIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJTeW5jRW50aXR5QXR0cmlidXRlcyIsInZhbHVlIjoidHJ1ZSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoiU3luY1R5cGVkQXR0cmlidXRlcyIsInZhbHVlIjoidHJ1ZSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoidHlwZSIsInZhbHVlIjoiXCJzcWxpdGVcIiIsIm5vZGUiOnsiY29kZSI6IjJlZThjODg4M2FlNCIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6ZmFsc2UsInR5cGUiOnsibmFtZSI6Ik5vZGVKUyJ9fX0seyJuYW1lIjoidHlwZSIsInZhbHVlIjoiXCJzcWxpdGVcIiIsIm5vZGUiOnsiY29kZSI6ImU4ZGUwNmUzZWRjNDQzYWU5ZGZlMWRlNWVjNTJhNGJmIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjpmYWxzZSwidHlwZSI6eyJuYW1lIjoiTm9kZUpTIn19fSx7Im5hbWUiOiJ0eXBlIiwidmFsdWUiOiJcInNxbGl0ZVwiIn1dLCJuYW1lIjoiU3FsREIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInRvb2xfTWFwcGluZ3MiOltdfQ==`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`eyJ0eXBlIjp7Im5hbWUiOiJTYWxlc0ZvcmNlIiwidHlwZV9Db25maWdzIjpbeyJuYW1lIjoicmVzdC51cmwuZ3FsIiwidmFsdWUiOiJcImh0dHBzOi8ve3tpbnN0YW5jZX19Lm15LnNhbGVzZm9yY2UuY29tL3NlcnZpY2VzL2RhdGEvdnt7dmVyc2lvbn19L2dyYXBocWxcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoicmVzdC51cmwiLCJ2YWx1ZSI6IlwiaHR0cHM6Ly97e2luc3RhbmNlfX0ubXkuc2FsZXNmb3JjZS5jb20vc2VydmljZXMvZGF0YS92e3t2ZXJzaW9ufX0vc29iamVjdHMve3t0TmFtZX19L3t7SWR9fVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfV0sImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwidHlwZV9NYXBwaW5ncyI6W119LCJ0b29sX0NvbmZpZ3MiOlt7Im5hbWUiOiJpbnN0YW5jZSIsInZhbHVlIjoiXCJkM3YwMDAwMDA4Y2Y3dWFhLWRldi1lZFwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJ2ZXJzaW9uIiwic2NyaXB0IjoiJzU4LjAnIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJ0YWJsZSIsInNjcmlwdCI6InROYW1lIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJJZCIsInNjcmlwdCI6Il90aGlzLl9faWQiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6IlN5bmNFbnRpdHlBdHRyaWJ1dGVzIiwidmFsdWUiOiJ0cnVlIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJTeW5jVHlwZWRBdHRyaWJ1dGVzIiwidmFsdWUiOiJmYWxzZSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoibGl2ZSIsInZhbHVlIjoiZmFsc2UiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLmNsaWVudF9pZCIsInZhbHVlIjoiXCIzTVZHOWJoa3JOLnRzbVdfcy41VXFHd3NrWUc4MGVmZlE1Z1dDZFdxUEx4ZkN4c2JubHhfMC4uT3hTQUUuZDFzWTNRWHNZdUJieWZ3MzJtMmt2SjVMXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLmNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IlwiRUJFOENEQTdBMTBCNTQyN0NGNjQ2MEMxQ0MxNjU2NURGMjUxMkI3MUEyNzUzQ0Y5N0YxOTcyRUUzNzg2RTZDRVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC5sb2dpbiIsInZhbHVlIjoiXCJmYWRpQG5hbW1vdXIuY29tXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLnBhc3N3b3JkIiwidmFsdWUiOiJcIixXMi5TQ0Y1PnlKUzk+IThcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoibG9naW4ucGFzc3dvcmQiLCJ2YWx1ZSI6IlwiP0QnaG1NZmFKNERGdDU7a1wiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC5ob3N0IiwidmFsdWUiOiJcInt7aW5zdGFuY2V9fS5teS5zYWxlc2ZvcmNlLmNvbVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC5zY29wZSIsInZhbHVlIjoiXCJmdWxsXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLmF1dGhvcml6ZS5jb250ZW50X3R5cGUiLCJ2YWx1ZSI6IlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLmF1dGhvcml6ZS5oZWFkZXJzIiwidmFsdWUiOiJcIntcXFwiQXV0aC1SZXF1ZXN0LVR5cGVcXFwiOiBcXFwiTmFtZWQtVXNlclxcXCJ9XCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLmF1dGhvcml6ZS5ib2R5IiwidmFsdWUiOiJcInJlc3BvbnNlX3R5cGU9Y29kZV9jcmVkZW50aWFscyZjbGllbnRfaWQ9e3tvYXV0aC5jbGllbnRfaWR9fSZyZWRpcmVjdF91cmk9e3tvYXV0aC5yZWRpcmVjdC51cml9fVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC5hdXRob3JpemUubWV0aG9kIiwidmFsdWUiOiJcInBvc3RcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoib2F1dGguYXV0aG9yaXplLnVyaSIsInZhbHVlIjoiXCJodHRwczovL3t7b2F1dGguaG9zdH19L3NlcnZpY2VzL29hdXRoMi9hdXRob3JpemU/cmVzcG9uc2VfdHlwZT1jb2RlJmNsaWVudF9pZD17e29hdXRoLmNsaWVudF9pZH19JnNjb3BlPXt7b2F1dGguc2NvcGV9fSZzdGF0ZT17e29hdXRoLmF1dGhvcml6ZS5zdGF0ZX19JnJlZGlyZWN0X3VyaT17e29hdXRoLnJlZGlyZWN0LnVyaX19XCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLnBvc3QudXJpIiwidmFsdWUiOiJcImh0dHBzOi8ve3tvYXV0aC5ob3N0fX0vc2VydmljZXMvb2F1dGgyL2F1dGhvcml6ZVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC5yZWRpcmVjdC51cmkiLCJ2YWx1ZSI6IlwiaHR0cHM6Ly9hcnpob3NwaXRhbC5naXRodWIuaW8vc2FsZXNub3cvXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLnJlZGlyZWN0LmNvZGUiLCJ2YWx1ZSI6IlwiY29kZVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC5yZWRpcmVjdC5zdGF0ZSIsInZhbHVlIjoiXCJzdGF0ZVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC51c2VyaW5mby51cmkiLCJ2YWx1ZSI6IlwiaHR0cHM6Ly97e29hdXRoLmhvc3R9fS91c2VyaW5mb1wiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC50b2tlbi51cmkiLCJ2YWx1ZSI6IlwiaHR0cHM6Ly97e29hdXRoLmhvc3R9fS9zZXJ2aWNlcy9vYXV0aDIvdG9rZW5cIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoib2F1dGgudG9rZW4uYm9keSIsInZhbHVlIjoiXCJncmFudF90eXBlPXt7b2F1dGgudG9rZW4uZ3JhbnRfdHlwZX19JmNvZGU9e3tvYXV0aC5hdXRob3JpemUuY29kZX19JmNsaWVudF9pZD17e29hdXRoLmNsaWVudF9pZH19JmNsaWVudF9zZWNyZXQ9e3tvYXV0aC5jbGllbnRfc2VjcmV0fX0mcmVkaXJlY3RfdXJpPXt7b2F1dGgucmVkaXJlY3QudXJpfX1cIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoib2F1dGgudG9rZW4ubWV0aG9kIiwidmFsdWUiOiJcIlBPU1RcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoib2F1dGgudG9rZW4uY29udGVudF90eXBlIiwidmFsdWUiOiJcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC50b2tlbi5ncmFudF90eXBlIiwidmFsdWUiOiJcImF1dGhvcml6YXRpb25fY29kZVwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJvYXV0aC50b2tlbi5yZXNwb25zZS50b2tlbl90eXBlIiwidmFsdWUiOiJcInRva2VuX3R5cGVcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoib2F1dGgudG9rZW4ucmVzcG9uc2UuZXhwaXJlc19pbiIsInZhbHVlIjoiXCJleHBpcmVzX2luXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLnRva2VuLnJlc3BvbnNlLmFjY2Vzc190b2tlbiIsInZhbHVlIjoiXCJhY2Nlc3NfdG9rZW5cIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoib2F1dGgudG9rZW4ucmVzcG9uc2UucmVmcmVzaF90b2tlbiIsInZhbHVlIjoiXCJyZWZyZXNoX3Rva2VuXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9XSwibmFtZSI6IlNhbGVzRm9yY2UiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInRvb2xfTWFwcGluZ3MiOltdfQ==`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`eyJ0eXBlIjp7Im5hbWUiOiJGaWxlU3lzdGVtIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0eXBlX0NvbmZpZ3MiOltdLCJ0eXBlX01hcHBpbmdzIjpbXX0sInRvb2xfQ29uZmlncyI6W3sibmFtZSI6InBhdGgucmVhZCIsInZhbHVlIjoiXCJodHRwczovL2Fyemhvc3BpdGFsLmdpdGh1Yi5pby9cIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoibGl2ZSIsInZhbHVlIjoiZmFsc2UiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9XSwibmFtZSI6IkZpbGVTeXN0ZW0iLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInRvb2xfTWFwcGluZ3MiOltdfQ==`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`eyJ0eXBlIjp7Im5hbWUiOiJHaXRIdWIiLCJ0eXBlX0NvbmZpZ3MiOlt7Im5hbWUiOiJ1cmwiLCJ2YWx1ZSI6IlwiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy97e293bmVyfX0ve3tyZXBvc2l0b3J5fX0vY29udGVudHMvXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9XSwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0eXBlX01hcHBpbmdzIjpbXX0sInRvb2xfQ29uZmlncyI6W3sibmFtZSI6InJlcG9zaXRvcnkiLCJ2YWx1ZSI6IlwiYXJ6aG9zcGl0YWwuZ2l0aHViLmlvXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im93bmVyIiwidmFsdWUiOiJcImFyemhvc3BpdGFsXCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6Im9hdXRoLmFjY2Vzc190b2tlbiIsIl9ub2RlIjp7ImNvbnRleHQiOnsiY29kZSI6ImRldiJ9fSwidmFsdWUiOiJcImdpdGh1Yl9wYXRfMTFBTERTVVpRMEZPVzVTTlRYM29qb19vQllqRjkyQWZuT2prTXJJVW9Iem05SXhhU0JUTjZ2MnFtWFY5c0JNa0JYM1RJNFJNTDZGSUFFM2NKNFwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJjcmVhdGUiLCJ2YWx1ZSI6IjIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6IlN5bmNFbnRpdHlBdHRyaWJ1dGVzIiwidmFsdWUiOiJ0cnVlIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJTeW5jVHlwZWRBdHRyaWJ1dGVzIiwidmFsdWUiOiJmYWxzZSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX1dLCJuYW1lIjoiR2l0SHViIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0b29sX01hcHBpbmdzIjpbXX0=`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),JSON.parse(((typeof(this)!=="undefined" && typeof(this._atob)!=="undefined")?this._atob:(typeof(_FrEMD)!=="undefined"?_FrEMD._atob:atob))(`eyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3ciLCJ0eXBlX0NvbmZpZ3MiOlt7Im5hbWUiOiJtYXAuU3RhdGUuY29kZSIsInZhbHVlIjoiXCJ7XFxcIjFcXFwiOiBcXFwiQVxcXCIsIFxcXCIyXFxcIjogXFxcIkJcXFwiLCBcXFwiM1xcXCI6IFxcXCJDXFxcIn1cIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoibWFwLlByaW9yaXR5LmNvZGUiLCJ2YWx1ZSI6Ilwie1xcXCIxXFxcIjogXFxcIkNyaXRpY2FsXFxcIiwgXFxcIjJcXFwiOiBcXFwiSGlnaFxcXCIsIFxcXCIzXFxcIjogXFxcIk1lZGl1bVxcXCIsIFxcXCI0XFxcIjogXFxcIkxvd1xcXCJ9XCIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6InJlc3RhcGkudXJsIiwidmFsdWUiOiJcImh0dHBzOi8ve3tpbnN0YW5jZX19LnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3RhYmxlL1wiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfV0sInR5cGVfTWFwcGluZ3MiOlt7ImNvbnRleHQiOiIoXFxiXFx3KykiLCJjbGFzc05hbWUiOiIoXFxiXFx3KykiLCJzb3VyY2UiOiIoXFxiXFx3KykiLCJ0YXJnZXQiOiIobXQsIHMpID0+IHMudG9Mb3dlckNhc2UoKSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6eyJuYW1lIjoiU2VydmljZU5vdyJ9fSx7ImNvbnRleHQiOiJFbnRpdHlBdHRyaWJ1dGUiLCJjbGFzc05hbWUiOiJeKEluY2lkZW50fFByb2JsZW0pJCIsInNvdXJjZSI6ImNvZGUiLCJ0YXJnZXQiOiJudW1iZXIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0seyJjb250ZXh0IjoiRW50aXR5QXR0cmlidXRlIiwiY2xhc3NOYW1lIjoiXihJbmNpZGVudHxQcm9ibGVtKSQiLCJzb3VyY2UiOiJuYW1lIiwidGFyZ2V0Ijoic2hvcnRfZGVzY3JpcHRpb24iLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0seyJjb250ZXh0IjoiRW50aXR5QXR0cmlidXRlIiwiY2xhc3NOYW1lIjoiXihJbmNpZGVudHxQcm9ibGVtKSQiLCJzb3VyY2UiOiJyZW1hcmsiLCJ0YXJnZXQiOiJkZXNjcmlwdGlvbiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6eyJuYW1lIjoiU2VydmljZU5vdyJ9fSx7ImNvbnRleHQiOiJFbnRpdHlBdHRyaWJ1dGUiLCJjbGFzc05hbWUiOiJJbmNpZGVudCIsInNvdXJjZSI6ImNvZGUiLCJ0YXJnZXQiOiJudW1iZXIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0seyJjb250ZXh0IjoiXihfZnJvbURvY3VtZW50fF90b0RvY3VtZW50KSQiLCJjbGFzc05hbWUiOiJeKEluY2lkZW50fFByb2JsZW0pJCIsInNvdXJjZSI6Il4oc3RhdGV8cHJpb3JpdHkpJCIsIm91dENvbmRpdGlvbiI6InR5cGVvZihvYmpGcm9tKT09PSdvYmplY3QnIiwiaW5Db25kaXRpb24iOiJ0eXBlb2Yob2JqRnJvbVtjb2RlXSk9PT0nc3RyaW5nJyIsIm91dFNjcmlwdCI6Im9ialRvW2NvZGVdID0gX3RoaXMuX2ZsaXAoX3RoaXMuX19jb25maWcoJ21hcC4nK2NvZGVUeXBlKycuY29kZScsIG51bGwsIHt0b29sOiB0b29sfSkpW29iakZyb20uY29kZSgpXSIsImluU2NyaXB0Ijoib2JqVG9bY29kZV0gPSB7Y29kZTogX3RoaXMuX19jb25maWcoJ21hcC4nK2NvZGVUeXBlKycuY29kZScsIG51bGwsIHt0b29sOiB0b29sfSlbb2JqRnJvbVtjb2RlXV19IiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjp7Im5hbWUiOiJTZXJ2aWNlTm93In19XSwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSwidG9vbF9NYXBwaW5ncyI6W3siY2xhc3NOYW1lIjoiVXNlciIsInRhcmdldCI6InVzZXJfbmFtZSIsInNvdXJjZSI6IklkIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0b29sIjp7Im5hbWUiOiJTTk9XT09CIn19LHsiY2xhc3NOYW1lIjoiTW9kZWxfQ2F0ZWdvcnkiLCJzb3VyY2UiOiJNb2RlbF9DYXRlZ29yeSIsInRhcmdldCI6ImNtZGJfbW9kZWxfY2F0ZWdvcnkiLCJjb250ZXh0IjoiRW50aXR5Q2xhc3MiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInRvb2wiOnsibmFtZSI6IlNOT1dPT0IifX0seyJjbGFzc05hbWUiOiJBc3NldCIsInNvdXJjZSI6IkFzc2V0IiwidGFyZ2V0IjoiYWxtX2Fzc2V0IiwiY29udGV4dCI6IkVudGl0eUNsYXNzIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0b29sIjp7Im5hbWUiOiJTTk9XT09CIn19LHsiY2xhc3NOYW1lIjoiTW9kZWxfQ2F0ZWdvcnkiLCJ0YXJnZXQiOiJhc3NldF9jbGFzcyIsInNvdXJjZSI6ImNsYXNzWy53XSoiLCJvdXRTY3JpcHQiOiJvYmpUby5hc3NldF9jbGFzcyA9IG9iakZyb21bY29kZV07IiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJ0b29sIjp7Im5hbWUiOiJTTk9XT09CIn19LHsiY2xhc3NOYW1lIjoiQXNzZXQiLCJ0YXJnZXQiOiJpbnN0YWxsX3N0YXR1cyIsInNvdXJjZSI6InN0YXR1c1sud10qIiwib3V0U2NyaXB0Ijoib2JqVG8uaW5zdGFsbF9zdGF0dXMgPSBvYmpGcm9tW2NvZGVdOyIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwidG9vbCI6eyJuYW1lIjoiU05PV09PQiJ9fSx7ImNsYXNzTmFtZSI6Ik1vZGVsX0NhdGVnb3J5IiwidGFyZ2V0IjoibmFtZSIsInNvdXJjZSI6Im5hbWUiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWUsInRvb2wiOnsibmFtZSI6IlNOT1dPT0IifX0seyJjbGFzc05hbWUiOiJNb2RlbF9DYXRlZ29yeSIsInRhcmdldCI6InBhcmVudF9jYXRlb2dyeSIsInNvdXJjZSI6InBhcmVudCIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwidG9vbCI6eyJuYW1lIjoiU05PV09PQiJ9fSx7ImNsYXNzTmFtZSI6IkV2ZW50Iiwic291cmNlIjoicmVjaXBpZW50IiwidGFyZ2V0Ijoibm9kZSIsIm91dFNjcmlwdCI6IidBUElTRVJWRVI6JyArIF90aGlzLlNjb3BlICsgJzonICsgKF90aGlzLnJlY2lwaWVudCgpIHx8IHt9KS5jb2RlKCkiLCJpblNjcmlwdCI6Im9iai5ub2RlLnNwbGl0KCc6JykubGVuZ3RoPT0xP251bGw6bmV3IG9TY29wZS5Ob2RlKCkuY29kZShvYmoubm9kZS5zcGxpdCgnOicpWzJdKSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwidG9vbCI6eyJuYW1lIjoiU05PV09PQiJ9fV0sInRvb2xfQ29uZmlncyI6W3sibmFtZSI6Imluc3RhbmNlIiwidmFsdWUiOiJcImRldjE3MDMwNFwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJ1c2VybmFtZSIsInZhbHVlIjoiXCJ0dV9ub2RlanNcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoibGl2ZSIsInZhbHVlIjoidHJ1ZSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoicGFzc3dvcmQiLCJ2YWx1ZSI6IlwiKDh4M0dTRWpwRk0zTk1yUFRdcHlba1I8azRQZGpJOVctM0loMih6fSk6NSgoXWI2Lk5QSzh1PTE/Ql80NzEtX1htWSt5U21Be2M0bi0rLF5wdlIxVnNUUHEoJFcucCQ8TztYP1wiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJzeXNfcHJvcGVydGllcy5nbGlkZS5zeXMuZGF0ZV9mb3JtYXQiLCJ2YWx1ZSI6IlwieXl5eS1NTS1kZFwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJzeXNfcHJvcGVydGllcy5nbGlkZS5zeXMudGltZV9mb3JtYXQiLCJ2YWx1ZSI6IlwiSEg6bW06c3NcIiIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX0seyJuYW1lIjoic3lzX3Byb3BlcnRpZXMuZ2xpZGUuc3lzLmRlZmF1bHQudHoiLCJ2YWx1ZSI6IlwiRXVyb3BlL0JlcmxpblwiIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJjcmVhdGUiLCJ2YWx1ZSI6IjIiLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9LHsibmFtZSI6IlN5bmNFbnRpdHlBdHRyaWJ1dGVzIiwidmFsdWUiOiJ0cnVlIiwiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlfSx7Im5hbWUiOiJTeW5jVHlwZWRBdHRyaWJ1dGVzIiwidmFsdWUiOiJmYWxzZSIsImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZX1dLCJhY3RpdmUiOnRydWUsImVuYWJsZWQiOnRydWV9`), (key,value)=>{if(typeof(value)==="string" && value.indexOf("=>")>0) return eval("(" + value + ")"); return value;}),
    ],

};



delete salesnow.GenericServiceAPI;
salesnow.GenericServiceAPI = class GenericServiceAPI {
	async setInterval(fun, minutes, ...args) {
		let fName = fun.toString().split(')')[0] + ')';
		try {
			// this.__time(`${fName}.Loop`);

			this.__time(`${fName}.Call`);
			let ret = await fun(...args.concat([new Date()]));

			this.log(`{Call: ` + this.__time(`${fName}.Call`) + `, Loop: ` + this.__time(`${fName}.Loop`) + '}', 'setInterval', fName);
			if (!ret) {
				this.log(`did not return true, exiting looper (${this.__time(fName)})`, 'setInterval', fName);
				return;
			}
		} catch (ex) {
			this.log(this.__time(fName), 'setInterval', fName, 2, ex);
			console.trace();
		}
		if (!Number(minutes)) {
			this.log(this.__time(fName), 'setInterval', fName, 0, "Not repeating. Minutes is " + minutes);
			return;
		}
		await new Promise(r => setTimeout(r, minutes * 60 * 1000));
		await this.setInterval(fun, minutes, ...args);
	}

	async _execute(scope, m, fRouter, fScript, oParams = {}) {
		let __beforeRules = oParams.__beforeRules || [];
		let __afterRules = oParams.__afterRules || [];
		delete oParams.__beforeRules;
		delete oParams.__afterRules;

		__beforeRules.concat(__afterRules).forEach(r => r.Script = this.runScript(`async (log, warn, error, scope, node${Object.keys(oParams).length?', ':''}${Object.keys(oParams).join(',')}) => {${r.Script}}`));

		let lParams = Object.entries(oParams).map(x => x[1]);
		let results = [];

		if (this.DSConnect) await this.DSConnect();

		let nodes = [];
		if (!scope._node || !fRouter) {
			nodes.push(null);
		} else {
			if (scope._node) {
				if (await this._Script(fRouter, m, 'Router', scope, scope._node, ...lParams)) {
					nodes.push(scope._node);
				}

				this._fixNode(scope);

				if (scope._node._parent && (await this._Script(fRouter, m, 'Router', scope, scope._node._parent, ...lParams))) {
					// this.log(scope._node._parent, '_execute', 'adding parent');
					nodes.push(scope._node._parent);
				} else if (scope.Event && this.EntityClass.Name !== "Event") {
					// nodes.push(new scope.Node());
				}

				this._fixNode(scope);
				for await (const cn of scope._node.parent_Nodes()) {
					if (await this._Script(fRouter, m, 'Script', scope, cn, ...lParams)) {
						// this.log(cn, '_execute', 'adding child node');
						nodes.push(cn);
					}
				}
			}

			// remove any nulls
			nodes = nodes.flat().filter(n => n);

			if (!nodes.length) {
				nodes.push(scope._node);
			}

			// this.log(nodes.length, '_execute', 'nodes.length');
		}

		for await (const n of nodes) {
			this._fixNode(scope);
			let nRet = null;
			this.log(`${m} @ ${n?.code() || 'LOCAL'}`, '_execute', `${this.EntityClass.Name}`);
			if (!n || this._sameNode(scope._node, n)) {
				// local script
				for await (const r of __beforeRules) {
					await this._Script(r.Script, m, r.Name || 'BeforeRule', scope, null, ...lParams);
				}

				nRet = await this._Script(fScript, m, 'Script', scope, ...lParams);

				for await (const r of __afterRules) {
					await this._Script(r.Script, m, r.Name || 'AfterRule', scope, null, ...lParams);
				}
			} else {
				nRet = await this._invokeNode(n, m, oParams);
			}

			results.push({
				node: n,
				ret: nRet
			});
		}
		// this.log(results, '_execute', 'Results');

		let errors = results.filter(r => r.ret && r.ret.__exception) /*.filter(r => !this._sameNode(scope._node, r.node))*/ .map(r => ({
			node: r.node ? {
				code: r.node.code(),
				address: r.node.address()
			} : null,
			__exception: r.ret.__exception
		}));
		if (errors.length) {
			this.log("_execute", m, "errors", 1, errors);
		}

		return results;
	}

	_sameNode(n1, n2) {
		if (typeof(n2) === "undefined" && typeof(n1) !== "undefined") {
			n2 = n1;
			n1 = this;
		}

		if (!n1 || !n2) return false;

		if (typeof(n1._code) === "undefined" || typeof(n2._code) === "undefined") return false;

		if (n1.constructor.name != "Node" || n2.constructor.name != "Node") {
			return false;
		}

		if (n1._code_coop || n2._code_coop) return false;

		if (n1._code == n2._code) return true;

		return this.Equals(n1, n2);
	}

	_fixNode(scope) {
		// on NodeJS for some reason, _node is sometimes an array!
		try {
			scope = scope || this.__scope();
			if (Array.isArray(scope._node)) scope._node = scope._node[0];
		} catch (ex) {
			this.log('_fixNode', typeof(this), 1, ex, this.constructor.name);
		}
	}

	log(obj, m, type, level, ...msg) {
		try {
			let debug = this.Debug;
			let levels = ["info", "warn", "error", "critical"];

			debug = debug || Object.fromEntries(new Map(levels.map(l => [l, '*'])));

			let functions = Object.assign({}, ...levels.map(l => ({
				[l]: debug[l] ? debug[l].split(',') : []
			})));

			let css = 'background: #00ff00; color: #008000';
			let fg = '\x1b[32m';
			switch (Number(level)) {
				case 1:
					css = 'background: #ffff00; color: #000080';
					fg = '\x1b[33m';
					break;
				case 2:
					css = 'background: #b22222; color: #ffffff';
					fg = '\x1b[31m';
					break;
				case 3:
					css = 'background: #b22222; color: #ffffff';
					fg = '\x1b[31m[CRITICAL]';
					break;
			}

			if (functions[levels[Number(level) || 0]].every(f => !['*.*', '*.' + m, '*', m, this.EntityClass.Name + '.' + m, this.EntityClass.Name + '.*'].includes(f))) {
				// console.log('no method', functions, functions[levels[Number(level) || 0]], m, ['*.*', '*.' + m, '*', m, this.EntityClass.Name + '.' + m, this.EntityClass.Name + '.*']);
				return;
			}

			if (typeof(global) !== 'undefined') {
				console.log(fg + "%s\x1b[0m", `${type || '<type>'}: ${this.Scope}.${this.EntityClass.Name}.${m || '<method>'}()`, ...(typeof(obj) === 'undefined' ? (msg || []) : [obj].concat(msg || [])));
			} else {
				console.log(`%c ${type || '<type>'}: ${this.Scope}.${this.EntityClass.Name}.${m || '<method>'}()`, css, ...(typeof(obj) === 'undefined' ? (msg || []) : [obj].concat(msg || [])));
			}
		} catch (ex) {
			console.log(ex);
			//this.log(ex, m, type, 3);
		}
	}

	async _Script(script, m, type, scope, ...sfArgs) {
		if (typeof(script) === 'undefined') return;

		return await (async (type, ...sArgs) => {
			let log = (obj, ...msg) => this.log(obj, m, type, 0, ...msg);
			let warn = (obj, ...msg) => this.log(obj, m, type, 1, ...msg);
			let error = (obj, ...msg) => this.log(obj, m, type, 2, ...msg);

			try {
				let ret = null;

				if (typeof(script) === 'string') script = this.runScript(script);
				if (typeof(script) === 'function') {
					ret = await script(log, warn, error, scope, m, ...sArgs);
				}

				this._fixNode();
				return ret;
			} catch (ex) {
				if (typeof(window) !== 'undefined') {
					error(ex, 2, ...sArgs, script);
				} else {
					error(ex, 2);
				}
			}
		})(type, ...sfArgs);
	}
};


salesnow.User = class User extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJfYXV0aG9yaXplLnVzZXJuYW1lIjoiZmFkaSIsIl9hdXRob3JpemUucGFzc3dvcmQiOiIxMjMiLCJfYXV0aG9yaXplLnRlc3RVc2VyIjp7ImFjdGl2ZSI6dHJ1ZSwiZW5hYmxlZCI6dHJ1ZSwiZ2VuZGVyIjp7ImNvZGUiOiJNIiwibmFtZSI6Ik1hbGUifSwiY29kZSI6ImZhZGkiLCJuYW1lIjoiRmFkaSJ9fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "username",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_username();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "password",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_password();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "department",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_department();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_manager_Departments();

		this.clear_caller_Incidents();

		this.clear_contact_Incidents();

		this.clear_user_Group_Members();

	}

	get EntityClass() {
		let ec = {

			Name: "User",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// if(this._department_set && this._department) this._department.Tool = tool;

		// (this.manager_Departments() || []).forEach(t => t.Tool = tool);

		// (this.caller_Incidents() || []).forEach(t => t.Tool = tool);

		// (this.contact_Incidents() || []).forEach(t => t.Tool = tool);

		// (this.user_Group_Members() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for username **/
	username(v, co, id) {
		if (co) this._username_coop = co;

		var ev = this.EntityValue("username");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._username != v) {
				this._username_set = new Date(); // a change in value

			}

			this._username = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._username);
		}
	}

	clear_username() {
		this._username_set = null;
		this._username = null;
		this._username_coop = "";
		return this;
	}

	/** end: setters and getters for username **/

	/** start: setters and getters for password **/
	password(v, co, id) {
		if (co) this._password_coop = co;

		var ev = this.EntityValue("password");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._password != v) {
				this._password_set = new Date(); // a change in value

			}

			this._password = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._password);
		}
	}

	clear_password() {
		this._password_set = null;
		this._password = null;
		this._password_coop = "";
		return this;
	}

	/** end: setters and getters for password **/

	/** start: setters and getters for department **/
	department(v, co, id) {
		if (co) this._department_coop = co;

		var ev = this.EntityValue("department");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '44fae1bd-0084-4c96-96e3-87587ec1601d' && _v.EntityClass.Name !== 'Department') {
					this.log(undefined, 'department', 'EntityObject', 1, "GOT HERE", _v, "44fae1bd-0084-4c96-96e3-87587ec1601d", _v.EntityClass.Name, "Department");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._department != v) {
				this._department_set = new Date(); // a change in value

				this.log(undefined, 'department', 'EntityObject', 0, "Set after", this._department ? this._department.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._department_set = v.Set_On;*/

			}

			this._department = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._department);
		}
	}

	clear_department() {
		this._department_set = null;
		this._department = null;
		this._department_coop = "";
		return this;
	}

	/** end: setters and getters for department **/

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for manager_Departments **/
	manager_Departments(v, co) {
		if (typeof(v) === "undefined") return this._manager_Departments;

		if (v && v.toEntityObject && v.EntityClass.Id !== '44fae1bd-0084-4c96-96e3-87587ec1601d' && v.EntityClass.Name !== 'Department') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._manager_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'manager_Departments', 'EntityObject', 1, "manager has no constructor", _v);
			} else if (_v.constructor.name != "Department") {
				this.log(undefined, 'manager_Departments', 'EntityObject', 1, "manager not valid", _v, _v.constructor.name, "Department");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.manager(this);
			}
		});

		this._manager_Departments.push(...v);
		this._manager_Departments_set = new Date();
		if (co) this._manager_Departments_coop = co;

		return this;
	}
	clear_manager_Departments() {
		this._manager_Departments_set = null;
		this._manager_Departments = new Array();
		this._manager_Departments_coop = null;
		return this;
	}
	/** end: setters and getters for manager_Departments **/

	/** start: setters and getters for caller_Incidents **/
	caller_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._caller_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._caller_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'caller_Incidents', 'EntityObject', 1, "caller has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'caller_Incidents', 'EntityObject', 1, "caller not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.caller(this);
			}
		});

		this._caller_Incidents.push(...v);
		this._caller_Incidents_set = new Date();
		if (co) this._caller_Incidents_coop = co;

		return this;
	}
	clear_caller_Incidents() {
		this._caller_Incidents_set = null;
		this._caller_Incidents = new Array();
		this._caller_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for caller_Incidents **/

	/** start: setters and getters for contact_Incidents **/
	contact_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._contact_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._contact_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'contact_Incidents', 'EntityObject', 1, "contact has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'contact_Incidents', 'EntityObject', 1, "contact not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.contact(this);
			}
		});

		this._contact_Incidents.push(...v);
		this._contact_Incidents_set = new Date();
		if (co) this._contact_Incidents_coop = co;

		return this;
	}
	clear_contact_Incidents() {
		this._contact_Incidents_set = null;
		this._contact_Incidents = new Array();
		this._contact_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for contact_Incidents **/

	/** start: setters and getters for user_Group_Members **/
	user_Group_Members(v, co) {
		if (typeof(v) === "undefined") return this._user_Group_Members;

		if (v && v.toEntityObject && v.EntityClass.Id !== '90329d62-6d6a-4b15-ba61-fd5b76b76719' && v.EntityClass.Name !== 'Group Member') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._user_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'user_Group_Members', 'EntityObject', 1, "user has no constructor", _v);
			} else if (_v.constructor.name != "Group_Member") {
				this.log(undefined, 'user_Group_Members', 'EntityObject', 1, "user not valid", _v, _v.constructor.name, "Group_Member");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.user(this);
			}
		});

		this._user_Group_Members.push(...v);
		this._user_Group_Members_set = new Date();
		if (co) this._user_Group_Members_coop = co;

		return this;
	}
	clear_user_Group_Members() {
		this._user_Group_Members_set = null;
		this._user_Group_Members = new Array();
		this._user_Group_Members_coop = null;
		return this;
	}
	/** end: setters and getters for user_Group_Members **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._username_set,

			this._password_set,

			this._department_set,

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._manager_Departments_set,

			this._caller_Incidents_set,

			this._contact_Incidents_set,

			this._user_Group_Members_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._username_set = this._username_set;
		ret._username_coop = this._username_coop;
		ret.username = this.username() ? this.username() : this.username();

		ret._password_set = this._password_set;
		ret._password_coop = this._password_coop;
		ret.password = this.password() ? this.password() : this.password();

		ret._department_set = this._department_set;
		ret._department_coop = this._department_coop;
		ret.department = this.department() ? this.department()._flatten(depth - 1) : this.department();

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.manager_Departments = this.manager_Departments().map(t => t ? t._flatten(depth - 1) : t);

		ret.caller_Incidents = this.caller_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		ret.contact_Incidents = this.contact_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		ret.user_Group_Members = this.user_Group_Members().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"username": (obj, v, eaCode = this._nCode('username', undefined)) => {

					obj[eaCode] = v;

				},

				"password": (obj, v, eaCode = this._nCode('password', undefined)) => {

					obj[eaCode] = v;

				},

				"department": (obj, v, eaCode = this._nCode('department', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				manager_Departments: (obj, v, eaCode = this._nCode('manager_Users', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

				caller_Incidents: (obj, v, eaCode = this._nCode('caller_Users', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

				contact_Incidents: (obj, v, eaCode = this._nCode('contact_Users', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

				user_Group_Members: (obj, v, eaCode = this._nCode('user_Users', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		if (!username && !password && !salesnow.__token && this.Test['_authorize.username']) {
			username = this.Test['_authorize.username'];
			password = this.Test['_authorize.password'];
		}

		if (bServer) {
			if (username && !salesnow._testUser) {
				salesnow._testUser = await new salesnow.User()._fromDocument(this.Test['_authorize.testUser'] || {}).active(true).enabled(true).username(username).password(password).store();
			}
			let ret = await this.username(username, '=').password(password, '=').active(true).enabled(true).find();
			this.log(undefined, '_authorize', 'EntityObject', 0, "Server: " + bServer + ", Obj:", ret);

			if (ret) {
				if (typeof(jsonwebtoken) !== 'undefined') {
					ret = jsonwebtoken.sign(ret._toDocument(), this.__config('secret'), {
						expiresIn: '1800s'
					});
				} else {
					ret = this._btoa(JSON.stringify(ret._toDocument()));
				}
			}

			ret = {
				access_token: ret,
			};
			this.log(undefined, '_authorize', 'EntityObject', 0, "Server: " + bServer + ", token: ", ret);
			return ret;
		} else {
			let client_id = this.__config('client_id');
			let client_secret = this.__config('secret');

			if (!username && !password && salesnow.__token) {
				this.log(undefined, '_authorize', 'EntityObject', 0, "No username/password and token already exists");
				return;
			}

			salesnow.__token = await new salesnow.User().username(username).password(password).authorize();

		}

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

			if (s.name.value == "department") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for department', s);
				let sObj = new salesnow.Department().department_Users(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

		});

		return ret;
	}

	async _server(options = {}) {
		if (options.clearConsole && typeof(clear) !== 'undefined') clear();

		if (typeof(window) !== 'undefined' && salesnow.hrefs) {
			for await (const l of salesnow.hrefs.map(n => n.lib)) {
				await this.require(l, salesnow.hrefs);
			}
		}

		let secure = this.__config('secure');
		if (typeof(global) !== 'undefined') {
			// globals
			var globalModules = {
				express: 'express',
				https: 'https',
				http: 'http',
				selfsigned: 'selfsigned',
				util: 'util',
				cors: 'cors',
				bodyParser: 'body-parser',
				axios: 'axios',
				//crypto: 'crypto',
				os: 'os',
				DotObject: 'dot-object',

				minimist: 'minimist',

				fs: 'fs',

				jsonwebtoken: 'jsonwebtoken',

				sqlite: 'sqlite3',
				mysql: 'mysql',

			};

			// this.log(undefined, '_server', 'EntityObject', 0, "npm install " + Object.values(globalModules).join(' '));
			let missingGlobalModules = Object.entries(globalModules).map(e => {
				try {
					global[e[0]] = require(e[1]);
				} catch (ex) {
					this.log(undefined, '_server', 'EntityObject', 1, ex);
					return e[1];
				}
			}).filter(e => e);
			if (missingGlobalModules.length) this.log(undefined, '_server', 'EntityObject', 1, "npm install " + missingGlobalModules.join(' '));
		}

		if (options.initSelf) {
			if (this.init) {
				await this._wait(500);
				if (options.loadTools) await this._loadTools(options.saveTools);

				await this.init();

				let sqlTool = (salesnow.Tools || []).find(t => t.__dmlStatements);
				if (options.copyDML && sqlTool) {
					let dmls = sqlTool.__dmlStatements;
					if (sqlTool.type.name == 'SqlDB') dmls = [ /*"Customers", "Orders", "Shippings", */ "demo"].map(t => `drop table if exists ${t}`).concat(dmls);
					_FrEMD._copyTextToClipboard(dmls.join(';\n'));
				}
			}
		}

		// refresh script
		this.setInterval(async (s) => {
			salesnow.__Content = salesnow.__Content || new salesnow.Content().name('API Server').code('apiserver');
			let ct = await salesnow.__Content.find();
			if (!ct) return;

			if (((ct.date().getTime() - salesnow.__Content.date().getTime()) / 1000) > 5) {
				await ct.store();

				salesnow.__Content.date(ct.date());
				salesnow.__Content.content(null);
			}
			return true;
		}, 0.5, (typeof(process) !== 'undefined' && process.argv.slice(2).length) ? process.argv.slice(2)[0] : 'salesnow');

		if (typeof(global) !== 'undefined') {
			const app = express();

			app.use(cors());

			app.use(express.urlencoded({
				extended: true,
				limit: '50mb'
			}));
			app.use(bodyParser.json({
				verify: (req, res, buf) => req.rawBody = buf
			}));

			global.authenticate = async (req, res, next) => {
				const authHeader = req.headers['authorization'];
				const token = authHeader && authHeader.split(' ')[1];

				if (token == null) return res.sendStatus(401);

				jsonwebtoken.verify(token, this.__config('secret'), (err, obj) => {
					if (err) return res.sendStatus(403);

					req.__authorization = obj;
					next();
				});
			};

			app.post('/method/User/authorize', (req, res) => this._inboundCall(req, res, "User", "authorize"));
			app.get('/method/User/authorize', (req, res) => this._inboundCall(req, res, "User", "authorize"));

			app.post('/method/:class/:method', global.authenticate, (req, res) => this._inboundCall(req, res));
			app.get('/method/:class/:method', global.authenticate, (req, res) => this._inboundCall(req, res));

			if (this.__config('email.host')) {
				salesnow.transporter = nodemailer.createTransport({
					service: this.__config('email.host'),
					auth: this.__config('email.user') ? {
						user: this.__config('email.user'),
						pass: this.__config('email.password'),
					} : undefined,
				});

				/*
				await salesnow.transporter.sendMail({
				    from: this.__config('email.sender'),
				    to,
				    subject,
				    text,
				});
				*/
			}

			let port = salesnow._node ? (salesnow._node.port() || 3000) : 3000;
			let address = "0.0.0.0";

			if (this.__config('CORSProxy')) {
				cors_proxy.createServer({
					originWhitelist: [], // Allow all origins
					requireHeader: ['origin', 'x-requested-with'],
					removeHeaders: ['cookie', 'cookie2']
				}).listen(8000, address, function() {
					console.log('Running CORS Anywhere on ' + address + ':' + '8000');
				});
			}

			let listen = async () => this.log(undefined, '_server', 'EntityObject', 0, `salesnow[${this.ipAddress()}] listening at http${secure?'s':''}://${address}:${port}`);
			if (secure) {
				let cert = null;
				if (this.__config('secure.private')) {
					cert = {
						private: (await fs.promises.readFile(this.__config('secure.private'))),
						cert: (await fs.promises.readFile(this.__config('secure.cert'))),
					};
				} else {
					cert = selfsigned.generate([{
						name: 'commonName',
						value: 'nammour.com'
					}], {
						days: 365
					});
				}
				global.exServer = https.createServer({
					key: cert.private,
					cert: cert.cert
				}, app).listen(port, address, listen);
			} else {
				global.exServer = http.createServer(app).listen(port, address, listen);
			}
		}
	}

	async _inboundCall(req, res, cName, mName) {
		let ret = {};
		try {
			ret = await new salesnow[req.params.class || cName]()._invoke(req.params.method || mName, req.body, req.query, req.__authorization);
		} catch (ex) {
			this.log(undefined, '_inboundCall', 'EntityObject', 2, ex);
			ret = {
				Exception: "Exception: " + ex,
			};
		}

		if (typeof(Flatted) !== "undefined" && req.query["json"] != "true" && req.body && req.body.__flatted) ret = {
			__flatted: Flatted.stringify(ret)
		};

		if (ret && typeof(ret) === "number") ret = ret.toString();
		res.send(ret);
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

				case "init": {

					break;
				}

				case "authorize": {

					break;
				}

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/User/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "init": {

				break;
			}

			case "authorize": {

				salesnow.__token = {
					token_type: "Bearer",
					access_token: ret
				};

				break;
			}

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.User(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.User(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "init": {

				break;
			}

			case "authorize": {

				break;
			}

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `User._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `User._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.User._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.User.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		if (salesnow.Tools && salesnow.Tools.length) {
			this.log(undefined, '_loadTools', 'EntityObject', 0, `[${source}]: Tools already loaded`);
			return salesnow.Tools;
		}

		this.log(undefined, '_loadTools', 'EntityObject', 0, `[${source}]: Loading tools...`);

		delete salesnow._storeEntityClass;
		delete salesnow.__config;

		let tools = [{
			type: {
				name: "SqlDB",
			},
			tool_Configs: [{
				name: "create",
				value: 3,
			}, {
				name: "type",
				value: "sqlite",
			}, {
				name: "SyncEntityAttributes",
				value: true,
			}, {
				name: "SyncTypedAttributes",
				value: true,
			}]
		}];

		try {
			let fName = "APISERVER__loadTools.json";
			if (typeof(global) !== 'undefined' && fs.existsSync(fName)) tools = this.runScript(await fs.promises.readFile(fName)) || tools;
			if (this.__config("github.tools")) tools = this.runScript(await axios.get(this.__config("github.tools") + fName, {
				validateStatus: status => status < 500
			}).data) || tools;

			let tData = null;
			if (this.sr()) tData = await this.sr()._("ContentManager.cmsStoredScriptFind", null, {
				Name: fName,
				Active: true,
				Enabled: true
			});
			if (!tData) {
				this.log(undefined, '_loadTools', 'EntityObject', 0, `[${source}]: Tools not in CMS`);
			} else {
				tools = this.runScript(tData.Script) || tools;
			}

			tools = salesnow.__Tools || tools;
			delete salesnow.__Tools;
		} catch (ex) {
			this.log(undefined, '_loadTools', 'EntityObject', 1, ex);
		}

		tools.filter(t => typeof(t.active) === "undefined" || (typeof(t.active) === "undefined" && t.active)).forEach(t => {
			t.name = t.name || t.type.name;

			t.active = typeof(t.active) !== 'undefined' ? t.active : true;
			t.enabled = typeof(t.enabled) !== 'undefined' ? t.enabled : true;
			t.type.active = typeof(t.type.active) !== 'undefined' ? t.type.active : true;
			t.type.enabled = typeof(t.type.enabled) !== 'undefined' ? t.type.enabled : true;

			t.tool_Configs = t.tool_Configs || [];
			t.tool_Configs.forEach(c => {
				c.active = typeof(c.active) !== 'undefined' ? c.active : true;
				c.enabled = typeof(c.enabled) !== 'undefined' ? c.enabled : true;
			});

			t.type.type_Configs = t.type.type_Configs || [];
			t.type.type_Configs.forEach(c => {
				c.active = typeof(c.active) !== 'undefined' ? c.active : true;
				c.enabled = typeof(c.enabled) !== 'undefined' ? c.enabled : true;
			});

			t.type.type_Mappings = t.type.type_Mappings || [];
			t.type.type_Mappings.forEach(m => {
				m.active = typeof(m.active) !== 'undefined' ? m.active : true;
				m.enabled = typeof(m.enabled) !== 'undefined' ? m.enabled : true;
				m.type = {
					name: t.type.name
				};
			});

			t.tool_Mappings = t.tool_Mappings || [];
			t.tool_Mappings.forEach(m => {
				m.active = typeof(m.active) !== 'undefined' ? m.active : true;
				m.enabled = typeof(m.enabled) !== 'undefined' ? m.enabled : true;
				m.tool = {
					name: t.name
				};
			});
		});
		tools = tools.filter(t => JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIsIlNOT1dPT0IiLCJTYWxlc0ZvcmNlIiwiR2l0SHViIiwiRmlsZVN5c3RlbSJd`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		}).find(_t => (typeof(_t) === 'string' ? _t : _t.name) == t.name));

		tools.forEach(t => ['tool_Configs', 'type.type_Configs'].forEach(sConfig => {
			DotObject.set(sConfig, DotObject.pick(sConfig, t).filter(c => typeof(c.value) !== "object").concat(DotObject.pick(sConfig, t).filter(c => typeof(c.value) === "object").map(c => Object.keys(c.value).map(ncode => {
				let _c = {
					name: c.name,
					value: c.value[ncode],
				};
				if (ncode != "default") {
					_c.node = {
						code: ncode,
						active: true,
						enabled: false, // otherwise it starts getting events
						type: {
							name: "NodeJS",
						}
					};
				}
				return _c;
			}).flat()).flat()), t);
			DotObject.pick(sConfig, t).forEach(c => c.value = JSON.stringify(c.value));
		}));

		this.log(undefined, '_loadTools', 'EntityObject', 0, `[${source}]: Tools are ${tools.length}`);

		salesnow.Tools = tools;

		salesnow.Tools.filter(t => !t.axios).forEach(t => {
			t.axios = axios.create();
			t.axios.interceptors.request.use(async config => {
				try {
					config.meta = config.meta || {};
					config.meta.counter = 4;

					let tokenUri = this.__config("oauth.token.uri", null, {
						tool: t
					});
					let refreshUri = this.__config("oauth.refresh.uri", null, {
						tool: t
					});
					let authUri = this.__config("oauth.authorize.uri", null, {
						tool: t
					});
					let token = this.__config("oauth.access_token", null, {
						tool: t,
						node: salesnow._node
					});
					if (!config.headers.Authorization && [tokenUri, refreshUri, authUri].indexOf(config.url) < 0) {
						if (!token && salesnow._node) {
							let authCode = this.__config('oauth.authorize.code', null, {
								tool: t
							});
							let authMethod = this.__config('oauth.authorize.method', null, {
								tool: t
							});

							if (authMethod) {
								let flow = (!authCode && authMethod == 'post') ? 'authorize' : 'token';
								// get the token
								// the tokenUri might have a dependency on the authorization code
								tokenUri = this.__config(`oauth.${flow}.uri`, null, {
									tool: t
								});
								let tconfig = {
									url: tokenUri,
									method: this.__config(`oauth.${flow}.method`, 'post', {
										tool: t
									}),
									headers: Object.assign({
										"Content-Type": this.__config(`oauth.${flow}.content_type`, "text/json", {
											tool: t
										}),
										"Authorization": "Basic " + this._btoa(this.__config("oauth.login", null, {
											tool: t
										}) + ":" + this.__config("oauth.password", null, {
											tool: t
										})),
									}, this.__config(`oauth.${flow}.headers`, "{}", {
										tool: t
									})),
									data: this.__config(`oauth.${flow}.body`, null, {
										tool: t
									}),
								};
								let tres = await t.axios(tconfig);
								this.log(undefined, '_loadTools', 'EntityObject', 0, "Token fetched", flow, tconfig, tres.data);
								['access_token', 'token_type', 'expires_in', 'refresh_token'].forEach(ta => this.__config(`oauth.${ta}`, null, {
									tool: t,
									node: salesnow._node,
									newValue: tres.data[this.__config(`oauth.token.response.${ta}`, ta, {
										tool: t
									})]
								}));
								token = this.__config("oauth.access_token", null, {
									tool: t,
									node: salesnow._node
								});
							}
						}
						if (token) config.headers.Authorization = this.__config("oauth.token_type", "Bearer", {
							tool: t
						}) + " " + token;
					}
				} catch (ex) {
					this.log(undefined, '_loadTools', 'EntityObject', 2, "axios.request", ex);
				}
				return config;
			}, async error => {});
			t.axios.interceptors.response.use(response => {
				return response;
			}, async error => {
				this.log(undefined, '_loadTools', 'EntityObject', 0, "axios response error", error);
				try {
					const originalRequest = error.config;
					if (this.__config("oauth.access_token", null, {
							tool: t
						}) && error.response && error.response.status === 401 && !originalRequest._retry && originalRequest.headers.Authorization.indexOf(this.__config("oauth.access_token", null, {
							tool: t
						})) > 0) {
						originalRequest._retry = true;
						// await (get the token or refresh it)

						originalRequest.headers.Authorization = this.__config("oauth.access_type", "Bearer", {
							tool: t
						}) + " " + this.__config("oauth.access_token", null, {
							tool: t
						});
						return t.axios(originalRequest);
					}
					return Promise.reject(error);
				} catch (ex) {
					this.log(undefined, '_loadTools', 'EntityObject', 2, "Resp Interceptor", ex, error);
				}
			});
		});

		this.log(undefined, '_loadTools', 'EntityObject', 0, "Exiting");
		return tools;

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		try {
			if (typeof(str) !== 'string') return str;
			let rex = `${prefix}([^${postfix}]+)${postfix}`;
			(str.match(new RegExp(rex, "g")) || []).forEach(m => str = str.replace(m, m => fun(m.replace(prefix, '').replace(postfix, ''))));

			return str;
		} catch (ex) {
			this.log(undefined, '_parametrize', 'EntityObject', 2, ex);
		}

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			if (this._department_set && this.department()) this.department().__sync_on(d);

			// this.manager_Users().forEach(t => t.__sync_on(d));

			// this.caller_Users().forEach(t => t.__sync_on(d));

			// this.contact_Users().forEach(t => t.__sync_on(d));

			// this.user_Users().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.User(this.Id)

			.username(this.username(), this._username_coop)

			.password(this.password(), this._password_coop)

			.department(this.department(), this._department_coop)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.manager_Departments(this.manager_Departments(), this._manager_Departments_coop)

			.caller_Incidents(this.caller_Incidents(), this._caller_Incidents_coop)

			.contact_Incidents(this.contact_Incidents(), this._contact_Incidents_coop)

			.user_Group_Members(this.user_Group_Members(), this._user_Group_Members_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'User';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJkZXBhcnRtZW50IjoiRGVwYXJ0bWVudCJ9`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		try {
			if (Array.isArray(objFrom)) return objFrom.map(o => this._map(code, bReverse, context, o, objTo, className, tool, codeType));

			let sField = bReverse ? 'target' : 'source';
			let sScript = (bReverse ? 'out' : 'in') + 'Script';
			let sCond = (bReverse ? 'out' : 'in') + 'Condition';
			let tField = bReverse ? 'source' : 'target';
			let tScript = (bReverse ? 'in' : 'out') + 'Script';
			let tCond = (bReverse ? 'in' : 'out') + 'Condition';

			let _match = (s, r) => {
				let answer = s.match(new RegExp(r, 'g'));
				return s == r || ((answer && answer.length) ? true : false);
			}

			let test = m => ({
				valid: m.active && m.enabled,
				context: _match(context, m.context),
				class: _match(className, m.className),
				sField: typeof(code) === 'undefined' || _match(code, m[sField]),
				sScript: typeof(code) === 'undefined' || typeof(m[sScript]) !== 'undefined',
				target: (m[tField] || m[tScript]) != null,
				text: code + ',' + sField + ',' + tField,
			});

			let ms = (tool.tool_Mappings || []).concat(tool.type.type_Mappings || []);

			ms = ms.filter(m => test(m).valid && test(m).context && test(m).class && (test(m).sField || test(m).sScript) && test(m).target).sort(m => -m.order);
			if (ms.length) this.log(undefined, '_map', 'EntityObject', 0, `${className}.${code}`, this._beautify(ms.map(m => ({
				m,
				test: test(m)
			})), 'javascript'));

			ms.filter(m => m[sField] && m[tField]).forEach(m => {
				if (m.context == 'EntityClass') {} else if (typeof(m[tField]) === 'function') {
					// replace
					if (typeof(code) !== 'undefined') {
						code = code.replace(new RegExp(m[sField], 'g'), m[tField]);
					} else {
						//DotObject.copy(m[sField], m[tField], objFrom, objTo);
					}
				} else {
					if (typeof(code) !== 'undefined') {
						code = m[tField];
					} else {
						DotObject.copy(m[sField], m[tField], objFrom, objTo);
					}
				}
				this.log(undefined, '_map', 'EntityObject', 0, `[${context}]/${className}.${code}: ${m[sField]} => ${m[tField]}`);
			});
			ms.forEach(m => {

				if (m[tScript]) {
					this.log(undefined, '_map', 'EntityObject', 0, `[${m.context}]/${m.className}.${code}(${tScript}): ${m[tScript]}`, m);
					this._Script(`async (log, warn, error, scope, method, m, objFrom, objTo, code, _this, className, tool, codeType) => {if(
((oScope) => {
    let ret = ${m[tCond]};
    if(typeof(ret)==="function"){
        ret = ret(oScope);
    }
    return ret;
})(salesnow)
){${m[tScript]}}}`, tScript, 'Mapping', salesnow, m, objFrom, objTo, code, this, className, tool, codeType);
				}

			});

			if (typeof(code) === 'undefined') {
				return objTo;
			}

			return code;
		} catch (ex) {
			this.log(undefined, '_map', 'EntityObject', 2, ex);
		}

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "User";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		try {
			options = options || {};
			options._this = options._this || this;
			options._class = options._class || 'User';
			options.tool = options.tool || options._this.Tool || this.Tool;
			if (typeof(options.tool) === 'object' && options.tool.constructor.name == 'Tool') options.tool = (salesnow.Tools || []).find(t => t.name == options.tool.name());

			if (typeof(options.tool) === 'string') options.tool = (salesnow.Tools || []).find(t => t.name == options.tool || t.type.name == options.tool);
			if (typeof(options.tool) !== 'object') this.log(undefined, '__config', 'EntityObject', 1, options.tool);
			if (!options.tool) this.log(undefined, '__config', 'EntityObject', 1, "tool not defined", options._this.Tool, salesnow.Tools, options._this.Tools);
			//options.noCache = true;
			if (!options.noCache) salesnow.__config = salesnow.__config || {};

			let nID = salesnow._node ? salesnow._node.code() : "default";

			let ret = nullValue;
			if (typeof(ret) === 'undefined') {
				ret = null;

				// use scope cache (improves performance)
				if (!options.noCache && salesnow.__config.hasOwnProperty(`${options._class}.${options.tool.name}.${nID}.${n}`)) return salesnow.__config[`${options._class}.${options.tool.name}.${nID}.${n}`];
			}

			// tool_Configs, type_Configs: allow class-level and node-level - done
			if (options.tool.type.type_Configs || options.tool.tool_Configs) {
				let cfs = [].concat(options.tool.type.type_Configs, options.tool.tool_Configs);
				let tconf = cfs.filter(c => c && c.name == n && c.node && c.node.code == nID).concat(cfs.filter(c => c && c.name == n && !c.node));
				if (tconf.length) {
					if (tconf[0].script) {
						ret = this.runScript(`(${Object.keys(options).join(', ')}) => ${tconf[0].script}`)(...Object.values(options));
					} else {
						ret = tconf[0].value;
						try {
							[1, 2, 3].forEach(a => ret = JSON.parse(ret));
						} catch (jex) {}
					}
				}
				if (options.newValue) {
					let tc = tconf.length ? tconf[0] : {};
					if (options.node) tc.node = {
						code: options.node.code()
					};
					tc.value = options.newValue;
					tc.name = n;
					if (!tconf.length) {
						(options.tool.tool_Configs || options.tool.type.type_Configs).push(tc);
					}
					ret = options.newValue;
				}
			}

			// model Config: Config is class level, node not possible - pending
			let mconf = options._this.Config ? options._this.Config[n] : undefined;
			if (typeof(mconf) !== "undefined") ret = mconf;

			// command line: allow class-level and node-level - pending
			if (typeof(global) !== 'undefined' && global.minimist) {
				ret = global.minimist(process.argv.slice(2))[n] || ret;
			}

			// request: allow class-level and node-level - pending
			ret = this.$_REQUEST(n) || ret;

			// config replacement
			ret = this._parametrize(ret, p => this.__config(p, null, options));

			//this.log(undefined, '__config', 'EntityObject', 0, n, ret, options);
			if (!options.noCache) salesnow.__config[`${options._class}.${options.tool.name}.${nID}.${n}`] = ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '__config', 'EntityObject', 1, n, nullValue, options._class, options.tool.tool_Configs, ex);
		}

	}

	/**
	 * Summary. init.
	 *
	 * Description. .
	 *
	 * @since      x.x.x
	 * @deprecated x.x.x Use new_function_name() instead.
	 * @access     public
	 *
	 * @class
	 * @augments parent
	 * @mixes    mixin
	 *
	 * @alias    realName
	 * @memberof namespace
	 *
	 * @see  Function/class relied on
	 * @link URL
	 * @global
	 *
	 * @fires   eventName
	 * @fires   className#eventName
	 * @listens event:eventName
	 * @listens className~event:eventName
	 * @param {type}   var           Description.
	 * @param {type}   [var]         Description of optional variable.
	 * @param {type}   [var=default] Description of optional variable with default variable.
	 * @param {Object} objectVar     Description.
	 * @param {type}   objectVar.key Description of a key in the objectVar parameter.
	 *
	 * @yield {type} Yielded value description.
	 *
	 * @return {type} Return value description.
	 */
	async init() {

		let answer = null;

		let results = await this._execute(salesnow, "init", async (log, warn, error, oScope, method = "init", _node, ) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "init", ) => {

			this.__time('salesnow.User.init');

			var errors = {

				"01": (() => {

					let answer =

						typeof(window) === 'undefined'
					// this.log(undefined, 'init', 'EntityObject', 0, "answer", "01", answer);
					return answer;
				})() ? ('Not running in a browser' || 'Validation Error') : '',

			};
			Object.keys(errors).filter(k => !errors[k]).forEach(k => delete errors[k]);
			if (Object.keys(errors).length) {
				Object.keys(errors).filter(k => k.startsWith('-')).forEach(k => {
					this.log(undefined, 'init', 'EntityObject', 0, {
						[k]: errors[k]
					});
					delete errors[k];
				});
				if (Object.values(errors).length) {
					return {
						__exception: errors,
					};
				}
				return;
			}

			let code = '123';
			if (this.sr().bLocal) {
				let o = new oScope.Incident(null, 'SNOWOOB')._fromDocument({
					number: "INC0009009",
					state: "1",
					priority: "4",
					description: "what if"
				}, true);
				//log(o._toDocument());log(o._toDocument(true));

				o.Tool = "SalesForce";

				let s = o._toSFQuery(null, null, true);
				await new oScope.Content(null, 'GitHub').name(code).code(code).remark(s).enabled(true).store();
			} else {
				let lastQ = null;
				this.setInterval(async cq => {
					cq = await cq.find();
					if (cq.content() != lastQ) {
						lastQ = cq.content();
						log("new query");
						await new oScope.User(null, 'SalesForce')._rest(null, null, lastQ, null, {
							url: 'rest.url.gql'
						});
					}
					if (!cq.enabled()) log("Exiting Query loop");
					return cq.enabled();
				}, 0.5, new oScope.Content(null, 'GitHub').code(code));
			}

		}, {
			__beforeRules: [],
			__afterRules: [],
		});

		// take out the invalid node results
		results = results.filter(r => r && r.ret);

		// has any node generated a validation exception?
		let __ex = results.find(r => r.ret.__exception);
		if (__ex) return __ex.ret;

		return results.length ? results[0].ret : null;

	}

	/**
	 * Summary. authorize.
	 *
	 * Description. .
	 *
	 * @since      x.x.x
	 * @deprecated x.x.x Use new_function_name() instead.
	 * @access     public
	 *
	 * @class
	 * @augments parent
	 * @mixes    mixin
	 *
	 * @alias    realName
	 * @memberof namespace
	 *
	 * @see  Function/class relied on
	 * @link URL
	 * @global
	 *
	 * @fires   eventName
	 * @fires   className#eventName
	 * @listens event:eventName
	 * @listens className~event:eventName
	 * @param {type}   var           Description.
	 * @param {type}   [var]         Description of optional variable.
	 * @param {type}   [var=default] Description of optional variable with default variable.
	 * @param {Object} objectVar     Description.
	 * @param {type}   objectVar.key Description of a key in the objectVar parameter.
	 *
	 * @yield {type} Yielded value description.
	 *
	 * @return {type} Return value description.
	 */
	async authorize() {

		let answer = null;

		let results = await this._execute(salesnow, "authorize", async (log, warn, error, oScope, method = "authorize", _node, ) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "authorize", ) => {

			this.__time('salesnow.User.authorize');

			var errors = {

				"01": (() => {

					let answer =

						!this._username_set
					// this.log(undefined, 'authorize', 'EntityObject', 0, "answer", "01", answer);
					return answer;
				})() ? ('Username not Set' || 'Validation Error') : '',

				"02": (() => {

					let answer =

						!this._password_set
					// this.log(undefined, 'authorize', 'EntityObject', 0, "answer", "02", answer);
					return answer;
				})() ? ('Password not Set' || 'Validation Error') : '',

			};
			Object.keys(errors).filter(k => !errors[k]).forEach(k => delete errors[k]);
			if (Object.keys(errors).length) {
				Object.keys(errors).filter(k => k.startsWith('-')).forEach(k => {
					this.log(undefined, 'authorize', 'EntityObject', 0, {
						[k]: errors[k]
					});
					delete errors[k];
				});
				if (Object.values(errors).length) {
					return {
						__exception: errors,
					};
				}
				return;
			}

			return await this._authorize(null, null, true)

		}, {
			__beforeRules: [],
			__afterRules: [],
		});

		// take out the invalid node results
		results = results.filter(r => r && r.ret);

		// has any node generated a validation exception?
		let __ex = results.find(r => r.ret.__exception);
		if (__ex) return __ex.ret;

		return results.length ? results[0].ret : null;

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		try {
			let Id = this.Id;
			let config = {
				url: this.__config(options.url || 'restapi.url', null, Object.assign(options, {
					tName,
					_this: this._toDocument(true)
				})),
				method: method ? method : (data ? "post" : "get"),
				params: params,
				headers: {
					'Access-Control-Allow-Origin': '*',
				},
				data: data,
			};
			this.log(undefined, '_rest', 'EntityObject', 0, config);
			let ret = [];
			if (this.__config('live', true)) ret = (await this.Tool.axios(config)).data.result;
			this.log(undefined, '_rest', 'EntityObject', 0, JSON.stringify(ret, null, 4));
			return ret;
		} catch (ex) {
			this.log(undefined, '_rest', 'EntityObject', 2, ex);
		}

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('username', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('password', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('department', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*User*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"username": (obj, v, eaCode = this._nCode('username', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('username', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"password": (obj, v, eaCode = this._nCode('password', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('password', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"department": (obj, v, eaCode = this._nCode('department', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('department', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			manager_Departments: (obj, v, eaCode = this._nCode('manager_Users', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

			caller_Incidents: (obj, v, eaCode = this._nCode('caller_Users', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

			contact_Incidents: (obj, v, eaCode = this._nCode('contact_Users', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

			user_Group_Members: (obj, v, eaCode = this._nCode('user_Users', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*User*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("username")) || !fields) {
			this.username(table["username"]);
		}

		if ((fields && fields.indexOf("password")) || !fields) {
			this.password(table["password"]);
		}

		if ((fields && fields.indexOf("department")) || !fields) {
			this.department(table["department"]);
		}

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		if (!this.Tool.db || !sql || !sql.trim()) {
			if (!this.Tool.db) this.log(undefined, '_sql', 'EntityObject', 0, sql, " <==SKIPPED==>");
			return [];
		}

		if (sql.indexOf(';\n') > 0) {
			for await (const sqlS of sql.split(';\n')) {
				await this._sql(sqlS.trim());
			}
			return;
		}

		let ret = null;

		try {
			ret = await new Promise((resolve, reject) => {
				let _resolve = (_ret, _sql) => {
					if (_sql && _sql.indexOf('select')) this.Tool.__dmlStatements.push(_sql);
					return resolve(_ret);
				}

				let db = this.Tool.db;
				let type = this.__config('type');

				let fun = "";

				// Query list of statement starting keywords        
				let qList = ["select", "insert", "update", "delete"];
				if (this.__config('database.transactions', true)) {
					qList = qList.concat(["begin", "start", "commit"]);
				}
				let bQuery = qList.indexOf(sql.substring(0, sql.indexOf(' ')).trim().toLowerCase()) >= 0;

				if (bQuery) {
					// query
					if (type == 'mysql') fun = 'query';
					if (type == 'sqlite') fun = 'all';
				} else {
					// DML
					if (type == 'mysql') fun = 'query';
					if (type == 'sqlite') fun = 'run';

					this.Tool.dmlCache = this.Tool.dmlCache || {};
					if (this.Tool.dmlCache[this.hashCode(sql)]) return _resolve(0);
					this.Tool.dmlCache[this.hashCode(sql)] = sql;
				}
				if (type == 'sqlite' && typeof(window) !== 'undefined') fun = "";
				if (fun && !db[fun]) fun = "";

				sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;

				this.log(undefined, '_sql', 'EntityObject', 0, `${type}.${fun}`, sql);
				if (salesnow.__sqlTransaction) salesnow.__sqlTransaction.sqls.push(sql);

				if (fun) {
					let ret = db[fun](sql, [], (error, rows) => {
						if (error) {
							reject(error);
						} else {
							_resolve(rows, sql);
						}
					});
				} else if (type == 'snowflake') {
					this.Tool.db.execute({
						sqlText: sql,
						complete: function(err, stmt, rows) {
							if (err) {
								reject(err);
							} else {
								_resolve(rows, sql);
							}
						}
					});
				} else if (type == 'sqlite') {
					// sqlite in the browser
					try {
						let ret = null;
						ret = db.exec(sql);
						if (!ret || !ret.length) return _resolve(ret, sql);

						ret = ret[0].values.map(r => Object.fromEntries(new Map(ret[0].columns.map((c, i) => [c, r[i]]))));
						// this.log(undefined, '_sql', 'EntityObject', 0, ret);
						_resolve(ret, sql);
					} catch (ex) {
						reject(ex);
					}
				}
			});
		} catch (ex) {
			this.log(undefined, '_sql', 'EntityObject', 2, `
ERROR:
${ex}

While Sending Query 
${sql}
`);
		}

		//this is not enough. We select outer joins, so sub-attributes will be also null. Either recursive or to ignore when used, for example through _toDocument
		false && ret.forEach(r => {
			Object.keys(r).forEach(k => {
				if (r[k] == null) delete r[k];
			});
		});

		if (Array.isArray(ret)) ret = ret.map(r => DotObject.object(r));
		return ret;

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('username', undefined)) {

		try {
			return `salesnow/${_class}/${obj[eaCode]}.js`;
		} catch (ex) {
			this.log(undefined, '_fileName', 'EntityObject', 2, ex);
		}

	}

	async _github(file, content) {

		try {
			// ToDo: use _rest() instead
			let config = {
				method: content ? 'put' : 'get',
				url: this.__config('url') + file,
				headers: {
					'Accept': 'application/vnd.github+json',
					'X-GitHub-Api-Version': '2022-11-28',
				},
			};
			if (content) {
				// first get the sha of the file
				config.data = JSON.stringify({
					message: "deployed by _github()",
					sha: content[this.__config('idField', '__id')],
					content: `${this._btoa(typeof(content)==='object'?JSON.stringify(content, null, '\t'):content)}`,
				});
			} else {
				config.validateStatus = status => status < 500;
			}
			let ret = await this.Tool.axios(config);
			ret = ret ? ret.data : null;
			if (!ret) return ret;

			ret = content ? ret.content : ret;
			let _this = ret.content ? JSON.parse(this._atob(ret.content)) : this;
			_this[this.__config('idField', '__id')] = ret.sha;

			this.log(undefined, '_github', 'EntityObject', 0, file, config.method, _this);
			return _this;
		} catch (ex) {
			this.log(undefined, '_github', 'EntityObject', 2, ex);
		}

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			username: (obj, v, eaCode = this._nCode('username', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			password: (obj, v, eaCode = this._nCode('password', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			department: (obj, v, eaCode = this._nCode('department', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Department', undefined)]: v ? v._toSFQuery()[this._nCode('Department', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			username: (obj, v, eaCode = this._nCode('username', undefined)) => {

				obj[eaCode] = v;

			},

			password: (obj, v, eaCode = this._nCode('password', undefined)) => {

				obj[eaCode] = v;

			},

			department: (obj, v, eaCode = this._nCode('department', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("username", obj, this.username());

		_options("password", obj, this.password());

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "64c40568-af8e-4a72-b8d1-11f7c41715d7" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.User = salesnow._unRecurse.User || {};
			salesnow._unRecurse.User[fun] = salesnow._unRecurse.User[fun] || {};
			salesnow._unRecurse.User[fun][_id] = salesnow._unRecurse.User[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.User[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.User[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		if (!this.department() || (this.department()

				&&
				!this.department().department_Users().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("department", obj, this.department());
		}

		_options("manager_Departments", obj, this.manager_Departments());

		_options("caller_Incidents", obj, this.caller_Incidents());

		_options("contact_Incidents", obj, this.contact_Incidents());

		_options("user_Group_Members", obj, this.user_Group_Members());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['username', 'password', 'department', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['manager_Departments', 'caller_Incidents', 'contact_Incidents', 'user_Group_Members']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("username", obj);

		_options("password", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "64c40568-af8e-4a72-b8d1-11f7c41715d7" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.User = salesnow._unRecurse.User || {};
			salesnow._unRecurse.User[fun] = salesnow._unRecurse.User[fun] || {};
			salesnow._unRecurse.User[fun][_id] = salesnow._unRecurse.User[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.User[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.User[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("department", obj);

		_options("manager_Departments", obj);

		_options("caller_Incidents", obj);

		_options("contact_Incidents", obj);

		_options("user_Group_Members", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['username', 'password', 'department', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['manager_Departments', 'caller_Incidents', 'contact_Incidents', 'user_Group_Members']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("username")) || !fields) && this._username_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.username();

			fValue = "'" + v + "'";

			ret[this._nCode('username', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("password")) || !fields) && this._password_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.password();

			fValue = "'" + v + "'";

			ret[this._nCode('password', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("department")) || !fields) && this._department_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.department();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('department', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('username', undefined), this._nCode('password', undefined), this._nCode('department', undefined) + ".id", this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.username) fields.push(`${this._nCode('username', undefined)}`);

			if (this.__fieldGroups.password) fields.push(`${this._nCode('password', undefined)}`);

			if (this.__fieldGroups.department) fields.push(`${this._nCode('department', undefined)+"id"}`);

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				username: (obj, eaCode = this._nCode('username', undefined)) => {
					this.username(obj[eaCode]);
				},

				password: (obj, eaCode = this._nCode('password', undefined)) => {
					this.password(obj[eaCode]);
				},

				department: (obj, eaCode = this._nCode('department', undefined)) => {
					this.department(obj[eaCode]);
				},

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

			department: (obj, v, eaCode = this._nCode('department', undefined)) => obj[eaCode] = new salesnow.Department(null, this.Tool)._toSelectHeader(),

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.username) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.username}(${this._Q()}${this._nCode('username', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.password) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.password}(${this._Q()}${this._nCode('password', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.department) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.department}(${this._Q()}${this._nCode('department', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			username: (obj, v, eaCode = this._nCode('username', undefined)) => {
				if (!this._username_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._username_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._username_coop == "LIKE" || !this._username_coop) ? "%" : "") + v + ((this._username_coop == "LIKE" || !this._username_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			password: (obj, v, eaCode = this._nCode('password', undefined)) => {
				if (!this._password_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._password_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._password_coop == "LIKE" || !this._password_coop) ? "%" : "") + v + ((this._password_coop == "LIKE" || !this._password_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			department: (obj, v, eaCode = this._nCode('department', undefined)) => {
				if (!this._department_set) return;

				let coop = this._department_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			manager_Departments: (obj, v, eaCode = this._nCode('manager_Users', undefined)) => {
				if (!this._manager_Departments_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("manager.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._manager_Departments_coop == '!=' || this._manager_Departments_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._manager_Departments_coop == '=' || this._manager_Departments_coop == 'IN') {} else if (this._manager_Departments_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*manager_Departments*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

			caller_Incidents: (obj, v, eaCode = this._nCode('caller_Users', undefined)) => {
				if (!this._caller_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("caller.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._caller_Incidents_coop == '!=' || this._caller_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._caller_Incidents_coop == '=' || this._caller_Incidents_coop == 'IN') {} else if (this._caller_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*caller_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

			contact_Incidents: (obj, v, eaCode = this._nCode('contact_Users', undefined)) => {
				if (!this._contact_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("contact.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._contact_Incidents_coop == '!=' || this._contact_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._contact_Incidents_coop == '=' || this._contact_Incidents_coop == 'IN') {} else if (this._contact_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*contact_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

			user_Group_Members: (obj, v, eaCode = this._nCode('user_Users', undefined)) => {
				if (!this._user_Group_Members_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("user.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._user_Group_Members_coop == '!=' || this._user_Group_Members_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._user_Group_Members_coop == '=' || this._user_Group_Members_coop == 'IN') {} else if (this._user_Group_Members_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*user_Group_Members*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.username) sql += `${this._Q()}${this._nCode('username', undefined)}${this._Q()} ${this.__fieldGroups.username}`;

			if (this.__fieldGroups.password) sql += `${this._Q()}${this._nCode('password', undefined)}${this._Q()} ${this.__fieldGroups.password}`;

			if (this.__fieldGroups.department) sql += `${this._Q()}${this._nCode('department', undefined)+"id"}${this._Q()} ${this.__fieldGroups.department}`;

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			department: (obj, v, eaCode = this._nCode('department', undefined)) => obj.department = v._toPaths(),

			manager_Departments: (obj, v, eaCode = this._nCode('manager_Users', undefined)) => obj.manager_Departments = v.map(_v => _v._toPaths()),

			caller_Incidents: (obj, v, eaCode = this._nCode('caller_Users', undefined)) => obj.caller_Incidents = v.map(_v => _v._toPaths()),

			contact_Incidents: (obj, v, eaCode = this._nCode('contact_Users', undefined)) => obj.contact_Incidents = v.map(_v => _v._toPaths()),

			user_Group_Members: (obj, v, eaCode = this._nCode('user_Users', undefined)) => obj.user_Group_Members = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.User) return;
			salesnow._storeEntityClass.User = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.User()

					.department(new salesnow.Department())

					.manager_Departments(new salesnow.Department())

					.caller_Incidents(new salesnow.Incident())

					.contact_Incidents(new salesnow.Incident())

					.user_Group_Members(new salesnow.Group_Member())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		try {
			if (!tool) {
				this.log(undefined, 'DSConnect', 'EntityObject', 2, "Tool is null", this.Tools.length, salesnow.Tools.length);
				return;
			} else if (!tool.type) {
				this.log(undefined, 'DSConnect', 'EntityObject', 2, "Tool.type is null", tool, this.Tools.length, salesnow.Tools.length);
				return;
			} else if (typeof(tool.db) !== "undefined") {
				this.log(undefined, 'DSConnect', 'EntityObject', 0, "Tool already connected!");
				return;
			} else if (salesnow._node && /*salesnow._node._parent_set && */ salesnow._node.parent()._sameNode(salesnow._node.parent())) {
				this.log(undefined, 'DSConnect', 'EntityObject', 0, "Node has a valid parent, no local SQL possible");
				return;
			}

			tool.__dmlStatements = tool.__dmlStatements || [];

			if (tool.type.name == "SqlDB") {

				if (typeof(global) !== 'undefined' && global[this.__config('type', null, {
						tool: tool
					})]) {
					if (global[this.__config('type', null, {
							tool: tool
						})].Database) {
						tool.db = new global[this.__config('type', null, tool)].Database(this.__config('database', null, {
							tool: tool
						}) || "./salesnow.db");
					} else if (global[this.__config('type', null, {
							tool: tool
						})].createConnection) {
						tool.db = global[this.__config('type', null, {
							tool: tool
						})].createConnection({
							host: this.__config('server', null, {
								tool: tool
							}),
							user: this.__config('username', null, {
								tool: tool
							}),
							password: this.__config('password', null, {
								tool: tool
							}),
							database: this.__config('database', null, {
								tool: tool
							}) || "salesnow",
						});
					}
				} else if (typeof(global) === 'undefined' && this.__config('type', null, {
						tool: tool
					}) === 'sqlite') {
					// sqlite in browser
					tool.db = new SQL.Database();
				}

				await this._storeEntityClass();
			}

			if (tool.type.name == "ServiceNow") {

				if (typeof(tool.sys_scope) === "undefined") {
					// tool.sys_scope = (await this._rest("sys_app", {sys_scope: this.__config("scope", null, {tool: tool}) || "global"}))[0].sys_id;
				}
				if (typeof(tool.sys_properties) === "undefined") {
					// loading some platform stuff
					tool.sys_properties = {};
					let condition = Object.keys(tool.sys_properties).filter(k => !tool.sys_properties[k]).join(',');
					if (condition) {
						(await this._rest("sys_properties", {
							name: "IN" + condition
						})).forEach(r => tool.sys_properties[r.name] = r.value);
					}
				}

				await this._storeEntityClass();
			}

			if (tool.type.name == "SalesForce") {

				await this._storeEntityClass();
			}

			if (tool.type.name == "GitHub") {

				await this._storeEntityClass();
			}

		} catch (ex) {
			this.log(undefined, 'DSConnect', 'EntityObject', 2, ex);
		}
		return this;

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "User") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				username: (obj, v) => {

					obj.username = v == query.username();

					if (
						(this._username_set && !query._username_set) ||
						false
					) obj.username = true;

					if (
						(!this._username_set && query._username_set) ||

						false
					) obj.username = false;
				},

				password: (obj, v) => {

					obj.password = v == query.password();

					if (
						(this._password_set && !query._password_set) ||
						false
					) obj.password = true;

					if (
						(!this._password_set && query._password_set) ||

						false
					) obj.password = false;
				},

				department: (obj, v) => {

					obj.department = v ? v._matches(query ? query.department() : null) : true;

					if (
						(this._department_set && !query._department_set) ||
						false
					) obj.department = true;

					if (
						(!this._department_set && query._department_set) ||

						(this.department() && !this.department()._matches(query.department())) ||

						false
					) obj.department = false;
				},

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				manager_Departments: (obj, v) => {
					obj.manager_Departments = v.map(_v => query.manager_Departments().any(q => _v._matches(q)));
				},

				caller_Incidents: (obj, v) => {
					obj.caller_Incidents = v.map(_v => query.caller_Incidents().any(q => _v._matches(q)));
				},

				contact_Incidents: (obj, v) => {
					obj.contact_Incidents = v.map(_v => query.contact_Incidents().any(q => _v._matches(q)));
				},

				user_Group_Members: (obj, v) => {
					obj.user_Group_Members = v.map(_v => query.user_Group_Members().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				department: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For department");
					obj.department = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				manager_Departments: (obj, v) => {
					obj.manager_Departments = v.map(_v => _v._matching(query)).flat();
				},

				caller_Incidents: (obj, v) => {
					obj.caller_Incidents = v.map(_v => _v._matching(query)).flat();
				},

				contact_Incidents: (obj, v) => {
					obj.contact_Incidents = v.map(_v => _v._matching(query)).flat();
				},

				user_Group_Members: (obj, v) => {
					obj.user_Group_Members = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._username_set ? false : true)

				&&
				(this._password_set ? false : true)

				&&
				(this._department_set ? false : true)

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				department: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.department(ret);
					}
				},

				manager_Departments: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.manager_Departments()[i] = ret;
					});
				},

				caller_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.caller_Incidents()[i] = ret;
					});
				},

				contact_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.contact_Incidents()[i] = ret;
					});
				},

				user_Group_Members: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.user_Group_Members()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			username: (obj, v, eaCode = (bTool ? this._nCode('username', undefined) : "username")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._username_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.username(ref);

			},

			password: (obj, v, eaCode = (bTool ? this._nCode('password', undefined) : "password")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._password_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.password(ref);

			},

			department: (obj, v, eaCode = (bTool ? this._nCode('department', undefined) : "department")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._department_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.department() || new salesnow.Department())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.department(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference department", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			manager_Departments: (obj, v, eaCode = (bTool ? this._nCode('manager_Users', undefined) : "manager_Departments")) => this.manager_Departments(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Department()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

			caller_Incidents: (obj, v, eaCode = (bTool ? this._nCode('caller_Users', undefined) : "caller_Incidents")) => this.caller_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

			contact_Incidents: (obj, v, eaCode = (bTool ? this._nCode('contact_Users', undefined) : "contact_Incidents")) => this.contact_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

			user_Group_Members: (obj, v, eaCode = (bTool ? this._nCode('user_Users', undefined) : "user_Group_Members")) => this.user_Group_Members(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Group_Member()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"username": (obj, v, eaCode = (bTool ? this._nCode('username', undefined) : "username")) => {

				obj[eaCode] = v;

				if (this._username_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._username_coop;
				}
			},

			"password": (obj, v, eaCode = (bTool ? this._nCode('password', undefined) : "password")) => {

				obj[eaCode] = v;

				if (this._password_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._password_coop;
				}
			},

			"department": (obj, v, eaCode = (bTool ? this._nCode('department', undefined) : "department")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._department_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._department_coop;
				}
			},

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			manager_Departments: (obj, v, eaCode = (bTool ? this._nCode('manager_Users', undefined) : "manager_Departments")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._manager_Departments_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._manager_Departments_coop;
				}
			},

			caller_Incidents: (obj, v, eaCode = (bTool ? this._nCode('caller_Users', undefined) : "caller_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._caller_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._caller_Incidents_coop;
				}
			},

			contact_Incidents: (obj, v, eaCode = (bTool ? this._nCode('contact_Users', undefined) : "contact_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._contact_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._contact_Incidents_coop;
				}
			},

			user_Group_Members: (obj, v, eaCode = (bTool ? this._nCode('user_Users', undefined) : "user_Group_Members")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._user_Group_Members_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._user_Group_Members_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return (async (fun, callBack) => {
				if (this.s_ErrorMessages && this.s_ErrorMessages.length > 0) {
					alert(
						'The following errors were found in your data:\n' +
						this.s_ErrorMessages
					);
					this.s_ErrorMessages = '';
					return null;
				}

				this.buildURL();

				if (typeof(document) !== "undefined")(
					this.fLoadingStart ||
					function() {
						if (document.body) document.body.style.cursor = 'wait';
					}
				)();

				var args = Array();
				for (var i = 2; i < arguments.length; i++) {
					args[i - 2] = arguments[i];
				}

				var postData = this.param(args);
				if (fun.indexOf('.') < 0) {
					fun = this.systemName + '.' + fun;
				} else if (fun.indexOf('.') == 0) {
					// a non-layer method
					fun = fun.substring(1);
				}

				if (callBack && this.ActiveRequest) {
					this.ActiveRequest = null;
					//return false;
				}

				var hCode = this.hashCode(
					fun.substring(fun.indexOf('.') + 1) + postData
				);

				this.CRNL = this.CRNL || "\n";
				postData +=
					this.CRNL +
					this.CRNL +
					'<!--<pid>' +
					hCode +
					'</pid>-->' +
					this.CRNL;

				if (fun.indexOf('cmsMethodResultFind') < 0) {
					// avoid overwrite of async calls
					this.ActiveRequest = {
						URL: this.srURL + '&name=' + fun,
						PostData: postData,
						Date: new Date(),
						CallBack: callBack,
						Company: typeof company !== 'undefined' && company ? {
							Code: company.Code,
						} : null,
						TextResponse: null,
						hash: hCode,
					};
				}

				if (typeof(window) !== "undefined" && !this.bLocal) {
					// live
					try {
						var _theUrl =
							(this.Store ||
								'/store/' +
								(window.company && window.company.Code ?
									window.company.Code + '/' :
									'/')) +
							hCode +
							'.js?rand=' +
							Math.random();
						let request = await this.cacheResult();
						var responseText = null;
						if (!request) {
							try {
								responseText = await $.get(_theUrl);
							} catch (ex) {}
						} else {
							responseText = request.TextResponse;
						}
						if (!responseText) {
							console.log(
								'Live Mode, no response text for ' +
								this.ActiveRequest.hash +
								' - ' +
								this.$_REQUEST('name', this.ActiveRequest.URL)
							);
							return null;
						}

						var _ret = null;
						var _exception = null;
						try {
							_ret = this.runSRScript(responseText);
							_exception = _ret._exception;
							if (_ret.server_time) {
								let td = new Date().getTime() - _ret.server_time.getTime();
								try {
									window.timeDifference = td;
								} catch (ex) {
									global.timeDifference = td;
								}
							}
						} catch (e) {
							_exception = e;
						}

						if (!_ret && !_exception) {
							return await null; //this.doHeadlessCall(callBack);
						} else {
							//this.ActiveRequest = null;
							if (callBack != null) {
								try {
									callBack(
										_ret.ret || (_exception ? responseText : null),
										_exception
									);
								} catch (e) {
									this.ShowError(
										'Error in Callback:\n\n' +
										callBack +
										'\n\n' +
										e.message
									);
								}
							}
							(
								window.sr.fLoadingEnd ||
								(() => {
									this.resetCursor();
								})
							)();
							return (
								(_ret ? _ret.ret : null) ||
								(_exception ? responseText : null)
							);
						}
					} catch (e) {
						console.log(e);
						return false;
					}
				} else {
					return (async () => {
						/*try {
							let scope = fun.split('.')[0].replace(/([a-z0-9])([A-Z])/g, '$1 $2').replace(' ', '').toLowerCase();
							let api = fun.split('.')[1].replace(/([a-z0-9])([A-Z])/g, '$1 $2').split(' ').slice(1, -1).join('').replace(' ', '');
							let fName = fun.split('.')[1].replace(/([a-z0-9])([A-Z])/g, '$1 $2').split(' ').slice(-1)[0].toLowerCase().replace('findall', 'findAll');
							if (typeof(window) !== 'undefined' && window[scope] && ['insert', 'delete', 'update', 'find', 'findAll'].indexOf(fName) > -1) {
								let sCall = `await new ${scope}.${api}().${fName}(...args)`;
								let o = new window[scope][api]();
								Object.keys(args[0]).filter(k => k !== "OPERATORS").forEach(k => {
									o[k.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, (match, index) => {
										if (+match === 0) return "";
										return index === 0 ? match.toLowerCase() : match.toUpperCase();
									})](args[0][k], args[0].OPERATORS?.[k]);
								});
								console.log(sCall, o._toDocument(), args);
								//return await o[fName]();
							}
						} catch (ex) {
							console.log("_() Exception: " + ex);
						}*/

						return await this.sendXML(
							this.srURL + '&name=' + fun,
							postData,
							callBack
						);
					})();
				}
			})(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return ((srURL) => {
				if (!srURL) {
					this.srURL = this.$_REQUEST('sr');
					if (!this.srURL) {
						if (typeof(window) === "undefined") {
							let ip = this.ipAddress();
							if (ip && (ip.startsWith("182.168.") || ip == "192.168.1.253" || ip == '195.112.215.218')) {
								this.srURL = "http://182.168.70.80";
							} else {
								this.srURL = "http://arz.nammour.com:7080";
							}
						}
						this.srURL += '/method/ServiceRouter.ashx';
					}
				} else {
					this.srURL = srURL;
				}
				this.srURL += '?srversion=1';
				if (this.$_REQUEST('gzip')) {
					this.srURL += '&gzip=' + this.$_REQUEST('gzip');
				} else {
					this.srURL += '&gzip=true';
				}
				if (this.bCache) {
					this.srURL += '&cache=' + this.bCache;
				}
				if (!this.$_REQUEST('rand', this.srURL)) {
					this.srURL += '&rand=' + Math.random();
				}

				if (this.bDebug) {
					this.srURL += '&DEBUG=true';
				}

				if (
					this.bAsync &&
					this.bLocal &&
					!this.$_REQUEST('async', this.srURL)
				) {
					this.srURL += '&async=true';
					if (this.runAfter) {
						this.srURL += '&runafter=' + this.runAfter;
					}
					this.bAsync = false;
				}

				//this.ShowDebug('this.srURL=' + this.srURL);

				return this.srURL;
			})(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return ((key, url) => {
				if (typeof(window) === "undefined") return null;

				let ret = undefined;
				if (url) {
					try {
						ret = new URL(url).searchParams.get(key);
					} catch (ex) {
						var regex = new RegExp('[\\?|&]' + key + '=([^&#]*)');
						var results = regex.exec('?' + url.split('?')[1]);
						ret = (results === null) ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
					}
				} else {
					ret = new URLSearchParams(window.location.search).get(key);
				}

				return ret === null ? '' : ret;
			})(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return ((args) => {
				this.CRNL = this.CRNL || "\n";
				var ret =
					'/*' +
					this.CRNL +
					'<![CDATA[' +
					this.CRNL +
					'PARAMETERS' +
					this.CRNL +
					']]>' +
					this.CRNL +
					'*/' +
					this.CRNL +
					this.CRNL +
					'<p>' +
					this.CRNL;
				for (var i = 0; i < args.length; i++) {
					var xml = this._toXML(args[i]);
					if (false) {
						// xml contains characters that would not arrive properly and should be converted to base64
						xml = btoa(xml);
					}
					ret += '<p' + i + '>' + this.CRNL + xml + '' + this.CRNL;
					ret += '</p' + i + '>' + this.CRNL;
				}
				ret += '</p>' + this.CRNL;
				return ret;
			})(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return ((o, level) => {
				if (!level) level = 0;
				var s = '';
				if (o == null) return s;
				switch (typeof o) {
					case 'string':
						s += '<![CDATA[' + o + ']]>';
						break;
					case 'number':
					case 'boolean':
						s += o.toString();
						break;
					case 'object':
						// Date
						if (
							o.constructor &&
							o.constructor.toString().indexOf('function Date()') > -1 &&
							o.constructor.name == "Date"
						) {
							var year = o.getUTCFullYear().toString();
							var month = (o.getUTCMonth() + 1).toString();
							month = month.length == 1 ? '0' + month : month;
							var date = o.getUTCDate().toString();
							date = date.length == 1 ? '0' + date : date;
							var hours = o.getUTCHours().toString();
							hours = hours.length == 1 ? '0' + hours : hours;
							var minutes = o.getUTCMinutes().toString();
							minutes = minutes.length == 1 ? '0' + minutes : minutes;
							var seconds = o.getUTCSeconds().toString();
							seconds = seconds.length == 1 ? '0' + seconds : seconds;
							var milliseconds = o.getUTCMilliseconds().toString();
							var tzminutes = Math.abs(o.getTimezoneOffset());
							var tzhours = 0;
							while (tzminutes >= 60) {
								tzhours++;
								tzminutes -= 60;
							}
							tzminutes =
								tzminutes.toString().length == 1 ?
								'0' + tzminutes.toString() :
								tzminutes.toString();
							tzhours =
								tzhours.toString().length == 1 ?
								'0' + tzhours.toString() :
								tzhours.toString();
							var timezone =
								(o.getTimezoneOffset() < 0 ? '+' : '-') +
								tzhours +
								':' +
								tzminutes;
							//s += year + "-" + month + "-" + date + "T" + hours + ":" + minutes + ":" + seconds + "." + milliseconds + timezone;
							s +=
								month +
								'/' +
								date +
								'/' +
								year +
								' ' +
								hours +
								':' +
								minutes +
								':' +
								seconds;
						}
						// Array
						else if (
							o.constructor &&
							o.constructor.toString().indexOf('Array()') > -1
						) {
							for (var p in o) {
								if (p == 'OPERATORS' || p == 'ORS') continue;
								s += '<Object>';
								if (!isNaN(p)) {
									// linear array
									if (o[p] == null) {
										// null entry in the array
										s += '<Id>0</Id>';
									} else {
										/function\s+(\w*)\s*\(/gi.exec(
											o[p].constructor.toString()
										);
										var type = RegExp.$1;
										switch (type) {
											case '':
												type = typeof o[p];
											case 'String':
												type = 'string';
												break;
											case 'Number':
												type = 'int';
												break;
											case 'Boolean':
												type = 'bool';
												break;
											case 'Date':
												type = 'DateTime';
												break;
										}
										s += this._toXML(o[p], level++);
									}
								} else {
									// associative array
									s +=
										'<' +
										p +
										this.coop(o, p) +
										'>' +
										this._toXML(o[p], level++) +
										'</' +
										p +
										'>';
								}
								s += '</Object>' + this.CRNL;
							}
						}
						// Object or custom function
						else {
							if (o == null || o.Id == 0) {} else if (false && o.Id) {
								// this is creating a problem, better send all the object
								// do not send other data if we have a value for the Id
								s += '<Id>' + this._toXML(o.Id, level++) + '</Id>';
							} else {
								for (var p in o) {
									if (p == 'OPERATORS' || p == 'ORS') continue;
									s +=
										'<' +
										p +
										this.coop(o, p) +
										this.OR(o, p) +
										'>' +
										this._toXML(o[p], level++) +
										'</' +
										p +
										'>';
								}
							}
						}
						break;
				}
				return s;
			})(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return ((o, p) => {
				if (!o.OPERATORS || !o.OPERATORS[p]) {
					return '';
				}
				return (
					" coop='" +
					this.myReplace(o.OPERATORS[p], ['<', '>'], ['&lt;', '&gt;']) +
					"'"
				);
			})(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return ((o, p) => {
				return o.ORS && o.ORS[p] ?
					" OR='" +
					this.myReplace(o.ORS[p], ['<', '>'], ['&lt;', '&gt;']) +
					"'" :
					'';
			})(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return ((s, fc, rc) => {
				if (typeof s !== 'string') return s;

				var ret = '';
				for (var i = 0; i < s.length; i++) {
					var rs = s.charAt(i);
					for (var j = 0; j < fc.length; j++) {
						if (s.charAt(i) == fc[j]) {
							rs = s.charAt(i).replace(fc[j], rc[j]);
						}
					}
					ret += rs;
				}
				return ret;
			})(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return (async (url, postData, callBack) => {
				if (typeof(window) !== "undefined" && !window.SR) window.SR = this;

				if ((typeof(window) !== "undefined" && window.jQuery) || (typeof(window) === "undefined" && typeof(axios) !== "undefined")) {
					let request = await this.cacheResult(null, null, callBack);
					if (request) {
						let result = await this.processResponse(
							44,
							callBack,
							request.TextResponse,
							url
						);
						return await this.processResult(result);
					} else {
						// jquery call
						var ajax = {};
						if (this.bPost || postData.length > (this.nMaxURLLength || 100)) {
							ajax.url = url;
							ajax.type = 'POST';
							ajax.beforeSend = (request) => {
								request.setRequestHeader(
									'Content-Type',
									'multipart/form-data; boundary=--------------'
								);
							};
							ajax.data =
								'POSTDATA=\r\n' /*+ "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n"*/ +
								postData;
						} else {
							ajax.url = url + '&POSTCODE=' + this.toHex(postData);
							ajax.type = 'GET';
						}

						let ret = null;
						if (typeof(jQuery) !== "undefined") {
							ret = await $.ajax(ajax);
						} else if (typeof(axios) !== "undefined") {
							ret = await axios(ajax);
							ret = ret.data;
						}
						ret = await this.processResult(
							this.processResponse(4, callBack, ret, url)
						);
						return ret;
					}
				} else {
					var xmlHTTP = this.getXmlHTTP();
					if (!xmlHTTP) return false;
					if (callBack != null) {
						window.xmlHTTP.onreadystatechange = function() {
							if (window.xmlHTTP.readyState == 4) {
								if ($.when) {
									$.when(
										window.SR.processResponse(
											window.xmlHTTP.readyState,
											callBack,
											window.xmlHTTP.responseText,
											url
										)
									).then((result) => window.SR.processResult(result));
								} else {
									window.SR.processResult(
										window.SR.processResponse(
											window.xmlHTTP.readyState,
											callBack,
											window.xmlHTTP.responseText,
											url
										)
									);
								}
							}
						};
					}

					if (this.bPost || postData.length > this.nMaxURLLength) {
						window.xmlHTTP.open('POST', url, callBack != null);
						window.xmlHTTP.setRequestHeader(
							'Content-Type',
							'multipart/form-data; boundary=--------------'
						); // fool cross-domain checking in chrome
						window.xmlHTTP.send(
							'POSTDATA=\r\n' /*+ "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n"*/ +
							postData
						);
					} else {
						xmlHTTP.open(
							'GET',
							url + '&POSTCODE=' + this.toHex(postData),
							callBack != null
						);
						xmlHTTP.send(null);
					}

					if (callBack == null && xmlHTTP.readyState == 4) {
						var _url = url + '&POSTCODE=' + this.toHex(postData);
						if ($.when) {
							return $.when(
								this.processResponse(
									xmlHTTP.readyState,
									callBack,
									xmlHTTP.responseText,
									_url
								)
							).then((result) => {
								return this.processResult(result);
							});
						} else {
							this.processResult(
								this.processResponse(
									xmlHTTP.readyState,
									callBack,
									xmlHTTP.responseText,
									_url
								)
							);
						}
					}
				}
			})(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return ((readyState, callBack, responseText, url) => {
				if ([4, 44].indexOf(readyState) == -1) return;

				var sMethodName = this.$_REQUEST('name', url);

				try {
					if (readyState == 4) {
						let res = (async () => {
							return await this.cacheResult(null, responseText);
						})();
					}

					//ret = null;
					//server_time = null;
					//_exception = null;
					var bScriptError = false;
					var _ret = null;
					try {
						_ret = this.runSRScript(responseText);
					} catch (e) {
						if (typeof(window) === "undefined") throw e;
						bScriptError = true;
					}

					if (_ret && _ret.server_time) {
						let td = new Date().getTime() - _ret.server_time.getTime();

						try {
							window.timeDifference = td;
						} catch (ex) {
							global.timeDifference = td;
						}
					}

					if (_ret && _ret._exception) {
						this.ShowDebug(_exception.Message);
					}

					if (callBack != null) {
						var callRet = null;
						try {
							callRet = callBack(_ret.ret, _ret._exception);
						} catch (e) {
							this.ShowError(
								'Error in Callback:\n\n' + callBack + '\n\n' + e.message
							);
						}
						if (
							typeof _ret.method_name !== 'undefined' &&
							typeof sMethodName !== 'undefined' &&
							sMethodName != _ret.method_name
						) {
							this.ShowError(
								'Mismatch in Method between server and client:\nServer Method Name: ' +
								_ret.method_name +
								'\nClient Method Name: ' +
								sMethodName
							);
						}
						(
							this.fLoadingEnd ||
							function() {
								window.sr.resetCursor();
							}
						)();

						return (
							callRet || _ret.ret || (bScriptError ? responseText : null)
						);
					} else {
						if (typeof(window) !== "undefined") this.resetCursor();
						return (_ret ? _ret.ret : null) || (bScriptError ? responseText : null);
					}
				} catch (e) {
					if (typeof(window) === "undefined") {
						throw e;
					}
					this.resetCursor();
					this.ShowError('Error in code: ' + e.message + '\n' + responseText);
				}

				return null;
			})(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return (async (res) => {
				if (!res || !res.Code || !res.StoredMethod) {
					this.ActiveRequest = null;
					return res;
				}

				// for sure a method result from an async call
				if (res.Result) {
					// we got a result
					var __ret = null;
					try {
						__ret = this.processResponse(4, null, res.Result, null);
					} catch (e) {
						__ret = res.Result;
					}
					this.ActiveRequest = null;
					return __ret;
				}

				var timeout = res.RunAfter - res.Date;
				if (timeout <= 0) {
					// negative timeout means that it was supposed to be run but did not for some reason (delay, failure, etc...)
					// same date as runafter means that we are using the immediate async execution. i.e. there is no need for the runner thread task
					timeout = 30000;
				} else if (timeout > 5 * 60 * 1000) {
					// more than we can wait, we return a reference to the result
					console.log(
						'We cannot wait ' +
						Math.floor(timeout / 1000) +
						' seconds. Returning result.'
					);
					return res;
				}
				console.log(
					'Making the next call in ' +
					Math.floor(timeout / 1000) +
					' seconds.'
				);

				await new Promise((resolve) => setTimeout(resolve, timeout));
				if (!this.ActiveRequest) {
					console.log('No ActiveRequest, exiting...');
					return null;
				}
				try {
					let ret = await $.ajax({
						url: '/method/a.ashx?name=ContentManager.cmsMethodResultFind&p0={Code}' +
							res.Code +
							'{/Code}{Id}' +
							res.Id +
							'{/Id}&rand=' +
							Math.random(),
					});
					ret = this.processResponse(4, null, ret, this.ActiveRequest.URL);
					ret = await this.processResult(ret);
					return ret;
				} catch (ex) {
					console.log('processResult', ex);
					return await this._('ContentManager.cmsMethodResultFind', null, {
						Code: res.Code,
						Id: res.Id,
					});
				}
			})(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return ((d) => {
				let td = 0;
				try {
					td = window.timeDifference;
				} catch (ex) {
					td = global.timeDifference;
				}
				return this.addMSeconds(d || new Date(), -td);
			})(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return ((o, ms) => {
				return new Date(o.getTime() + ms);
			})(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return ((s) => {
				if (!s) return null;

				let cLines = s.split('\n');
				try {
					if (typeof(esprima) !== 'undefined') {
						esprima.parse(s, {
							es6: true
						});
					}
				} catch (ex) {
					if (cLines[ex.lineNumber - 1].indexOf('for await') < 0) {
						console.log("runScript() " + ex.description, ex.lineNumber, cLines[ex.lineNumber - 1]);
						return;
					}
				}

				if (typeof(window) !== "undefined") {
					try {
						if (window._content && window._content.eval) {
							var output = window._content.eval(s);
							return output;
						}
					} catch (e) {
						this.ShowError('FF SCRIPT: \n' + e.message + '\n' + s);
					}
					try {
						if (window.execScript) {
							if (s.indexOf('\r\n') > 0) {
								// a multi-line statement
								window.execScript(s);
								return null;
							} else {
								// a single-line statement
								newV = null;
								var newS = 'newV = ' + s;
								window.execScript(newS);
								return newV;
							}
						}
					} catch (e) {
						this.ShowError('IE6 SCRIPT: \n' + e.message + '\n' + s);
					}

					try {
						if (window.execScript) {
							if (s.indexOf('\r\n') > 0) {
								// a multi-line statement
								window.execScript(s);
								return null;
							} else {
								// a single-line statement
								newV = null;
								var newS = 'newV = ' + s;
								eval(newS);
								return newV;
							}
						}
					} catch (e) {
						this.ShowError('IE7 SCRIPT: \n' + e.message + '\n' + s);
					}

					try {
						var fn = function() {
							var ret = window.eval.call(window, s);
							return ret;
						};

						return fn();
					} catch (e) {
						this.ShowError('TAG SCRIPT: \n' + e.message + '\n' + s);
					}
				}

				try {
					s = s.replace(/new Date\(0001/g, 'new Date(1');
					return eval(s);
				} catch (e) {
					this.ShowError('EVAL SCRIPT: \n' + e.message + '\n' + s);
				}
			})(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return ((s) => {
				return this.runScript(
					'(() => { var ret = null; ' +
					s +
					' if(typeof(window)!=="undefined"){window.method_name = method_name; window.server_time = server_time; window._exception = typeof(_exception)==="undefined"?null:_exception; window.execution_time = execution_time;} return {_exception: typeof(_exception)==="undefined"?null:_exception, method_name: method_name, server_time: server_time, execution_time: execution_time, ret: ret};})();'
				);
			})(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return ((s) => {
				var hash = 0,
					i,
					chr,
					len;
				if (s.length == 0) return hash;
				for (i = 0, len = s.length; i < len; i++) {
					chr = s.charCodeAt(i);
					hash = (hash << 5) - hash + chr;
					hash |= 0; // Convert to 32bit integer
				}
				return hash;
			})(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return ((ar, field) => {
				if (!ar || !field) return null;

				var keys = [];
				ar.forEach(a => {
					var key = null;
					field.split('.').forEach(f => key = (key || a)[f]);
					let k = keys.find(k => this.Equals(k.key, key));
					if (k) {
						k.values.push(a);
					} else {
						keys.push({
							key: key,
							values: [a],
						});
					}
				});
				return keys;
			})(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return ((s, bIgnoreDebug) => {
				if (typeof(window) === "undefined") {
					console.log("ShowDebug: " + s);
				}
				if (this.bDebug || bIgnoreDebug) this.ShowMessage(s);
			})(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return (async (request, textresponse) => {
				if (!this.bCacheResult) return;
				request = request || this.ActiveRequest;

				if (!request) {
					return;
				}

				if (
					textresponse &&
					textresponse.indexOf('ret.Code = ') > -1 &&
					textresponse.indexOf('ret.RunAfter = ') > -1 &&
					textresponse.indexOf('ret.Result = ""') > -1
				) {
					console.log('textresponse contians incomplete method result');
					return null;
				}

				var sMethod = this.$_REQUEST('name', request.URL);
				sMethod = sMethod.substring(sMethod.lastIndexOf('.') + 1);
				try {
					var _usable = (r) => {
						var item =
							(r &&
								r.hash == request.hash &&
								(r.URL == request.URL || this.$_REQUEST('name', r.URL) == sMethod) &&
								r.TextResponse &&
								(typeof r.Expires === 'undefined' ||
									new Date(r.Expires) > new Date())) ?
							r :
							null;
						if (textresponse) {
							item = item || request;
							item.TextResponse = textresponse;
							item.Expires = new Date(
								new Date().getTime() +
								parseFloat(
									this.nCacheExpireHours || this.$_REQUEST('nCacheExpireHours') || 1
								) *
								60 *
								60 *
								1000
							);
						}

						return item;
					};

					if (
						this.bCacheResult == 'kvstore' &&
						typeof window.company.restiodbSettings !== 'undefined'
					) {
						var ajax = (key, value, id) => {
							var ret = company.restiodbSettings();
							ret.url += 'kvstore';
							if (value) {
								if (id) {
									// update record
									ret.url += '/' + id;
									ret.method = 'PUT';
								} else {
									// new record
									ret.method = 'POST';
								}
								ret.data = JSON.stringify({
									key: key,
									value: JSON.stringify(value, null, 4),
								});
							} else {
								if (id) {
									// delete record
									ret.url += '/' + id;
									ret.method = 'DELETE';
								} else {
									ret.method = 'GET';
									ret.url += '?q={"key":' + key + '}';
								}
							}
							//console.log('method', ret.method);
							return ret;
						};

						let record = await $.ajax(ajax(request.hash));
						let r =
							record && record.length ?
							JSON.parse(record[0].value) :
							null;
						let item = _usable(r);

						if (!item) {
							if (r) {
								await $.ajax(ajax(request.hash, null, record[0]._id));
							}
							return null;
						}

						if (!r || item.Expires > r.Expires) {
							await $.ajax(
								ajax(item.hash, item, r ? record[0]._id : null)
							);
							return item;
						}

						return item;
					} else if (this.bCacheResult == 'sr') {
						var ajax = (key, value, id) => {
							var method = 'Find';
							var ret = {
								url: '/method/a.ashx?name=ContentManager.cmsMethodResult',
								processData: false,
								type: 'POST',
							};
							if (value) {
								if (id) {
									// update record
									method = 'Update';
								} else {
									// new record
									method = 'Insert';
								}
								ret.beforeSend = (request) => {
									request.setRequestHeader(
										'Content-Type',
										'multipart/form-data; boundary=--------------'
									);
								};
							} else {
								ret.type = 'GET';
								if (id) {
									// delete record
									method = 'Delete';
								} else {
									// get record
									method = 'Find';
								}
								method +=
									'&p0={Code}' +
									(company ? company.Code + '-' : '') +
									key +
									'{/Code}';
							}
							ret.url += method;
							if (ret.type != 'GET') {
								delete item.PostData; // because we have the cache key
								var p0 = {
									Code: (company ? company.Code + '-' : '') + key,
									Completed: new Date(),
									Date: this.ActiveRequest ?
										this.ActiveRequest.Date : new Date(),
									Result: btoa(unescape(encodeURIComponent(JSON.stringify(item)))), //item.TextResponse,
									StoredMethod: {
										Name: sMethod,
									},
								};
								if (id) {
									p0.Id = id;
								}
								ret.data =
									'POSTDATA=\r\n' /*+ "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n"*/ +
									this.param([p0]);
							}
							return ret;
						};

						let record = this.runScript /*runSRScript*/(
							'(() => { var ret = null; ' +
							(await $.ajax(ajax(request.hash))) +
							'return ret;})();'
						);
						let r = record ? JSON.parse(record.Result) : null;
						let item = _usable(r);

						if (!item) {
							if (r) {
								try {
									await $.ajax(ajax(request.hash, null, record.Id));
								} catch (ex) {}
							}
							return null;
						}

						if (!r || item.Expires > r.Expires) {
							await $.ajax(
								ajax(item.hash, item, r && record ? record.Id : null)
							);
							return item;
						}

						return item;
					} else if (this.bCacheResult == 'github') {
						if (request.URL.indexOf('cmsMethodResult') >= 0) return null;
						let res = null;
						try {
							res = await $.ajax({
								url: 'https://arzhospital.github.io/' +
									company.Store +
									'/' +
									request.hash +
									'.js',
								dataType: 'jsonp',
								processResult: false,
							});
							return {
								TextResponse: res,
							};
						} catch (ex) {
							console.log('ERRORS:', ex);
							return null;
						}
					} else if (this.bCacheResult == 'local') {
						var srCache = localStorage.getItem('srCache');
						if (srCache == null) {
							srCache = {
								Requests: {},
							};
						} else {
							srCache = JSON.parse(srCache);
						}

						var r = srCache.Requests[request.hash];
						var item = _usable(r);

						if (!item) {
							delete srCache.Requests[request.hash];
							localStorage.setItem('srCache', JSON.stringify(srCache));
							return null;
						}

						if (!r || item.Expires > r.Expires) {
							srCache.Requests[item.hash] = item;
							localStorage.setItem('srCache', JSON.stringify(srCache));
							return item;
						}

						return item;
					}
				} catch (ex) {
					console.log(ex);
					throw ex;
				}
			})(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return ((s) => {
				if (typeof s !== 'string') return s;

				var arr1 = [];
				for (var n = 0, l = s.length; n < l; n++) {
					var hex = Number(s.charCodeAt(n)).toString(16);
					arr1.push(hex);
				}
				return arr1.join('');
			})(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return ((s) => {
				console.log(s);
				if (this.bShowErrors) this.ShowMessage(s);
			})(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return ((o1, o2) => {
				if (o1 == o2) return true;

				if (
					o1 &&
					o1.__OBJECTID &&
					o2 &&
					o2.__OBJECTID &&
					o1.__OBJECTID == o2.__OBJECTID
				)
					return true;
				if (o1 && o1.__ROWID && o2 && o2.__ROWID && o1.__ROWID == o2.__ROWID)
					return true;
				if (o1 && o1.Id && o2 && o2.Id && o1.Id == o2.Id) return true;

				return false;
			})(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return (() => {
				try {
					if (typeof(window) !== 'undefined') return null;
					if (typeof(global) === 'undefined' || typeof(global.os) === 'undefined') {
						// console.log("ipAddress(): Invalid global or global.os not defined");
						return null;
					}
					return [].concat(...Object.values(global.os.networkInterfaces())).find((details) => details.family === 'IPv4' && !details.internal).address;
				} catch (ex) {
					console.log("ipAddress(): " + ex);
					return null;
				}
			})(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return ((ea) => {
				try {
					if (ea.EntityType) return "Entity";
					return Object.keys(ea).filter(k => !k.indexOf("Is") && k !== "IsUnique").find(k => ea[k]).replace('Is', '');
				} catch (ex) {
					return null;
				}
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return ((a) => {
				return a.filter((ag, i) => !a.find((_ag, _i) => _ag.Name == ag.Name && _i > i && i == _i));
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return ((obj) => {
				return Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return (async (scope, filename) => {
				let oScope = this.__scope(scope);

				let s = {
					Enabled: true,
					Name: "APISERVER::" + scope,
				};
				if (oScope.__script && oScope.__script.Date) {
					s.Date = oScope.__script.Date;
					s.OPERATORS = {
						Date: ">"
					}
				}
				let script = await this.sr()._(`ContentManager.cmsStoredScriptFind`, null, s);
				if (script && script.Script) {
					script.Script = this._atob(script.Script);
				} else {
					// console.log("_refreshAPI: script is null");
					return 1;
				}

				if (!oScope || !oScope.__script || (script && script.Script && ((script.Date.getTime() - oScope.__script.Date.getTime()) / 1000) > 5)) {
					if (filename) {
						console.log("[" + scope + "] New Updated Version, overwritting " + filename, script.Date, (oScope && oScope.__script) ? oScope.__script.Date : null);
					}

					if (filename && typeof(global) !== 'undefined') {
						await global.util.promisify(global.fs.writeFile)(filename, script.Script);
					} else if (filename) {
						await this.sr()._('ContentManager.cmsSaveFileBody', null, filename, this._btoa(script.Script));
					}

					if (!oScope) return;
					oScope.__script = script;
				} else {
					if (typeof(window) !== 'undefined')
						console.log(`[${scope}] Same or older version, skipping update`, script ? script.Date : null, oScope.__script ? oScope.__script.Date : null);
				}

				delete oScope.__script.Script;
				return oScope.__script;
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return ((scope) => {
				let ret = (typeof(window) !== 'undefined' ? window : global);
				if (scope) ret = ret[scope];
				return ret;
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return (() => {
				return (typeof(window) !== 'undefined' && window.SR) ? window.SR : this;
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return ((a) => {
				return typeof(atob) === "undefined" ? Buffer.from(a, 'base64').toString('binary') : atob(a);
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return ((b) => {
				return typeof(btoa) === "undefined" ? Buffer.from(b).toString('base64') : btoa(unescape(encodeURIComponent(b)));
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return ((name = "global") => {
				let d = new Date() || this.sr().serverDate();
				this.__scope().__times = this.__scope().__times || {};
				this.__scope().__times[name] = this.__scope().__times[name] || d;

				let s = Math.round(((d - this.__scope().__times[name]) / 1000) * 100, 2) / 100;
				this.__scope().__times[name] = d;
				return (s + 's');
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return (async (ms) => {
				await new Promise(resolve => setTimeout(resolve, ms));
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return ((ea, dbType) => {
				let type = typeof(ea) === "string" ? ea : this._attr(ea);
				switch (type) {
					case "String":
						return "VARCHAR(255)";
					case "Text":
					case "Object":
						return `${dbType=='sqlite'?'VARCHAR':'TEXT'}(4000)`;
					case "Bool":
						return "TINYINT"; //BIT
					case "Date":
						return "DATETIME";
					case "Int":
						return "INTEGER";
					case "Long":
						return "BIGINT";
					case "Entity":
						return "VARCHAR(255)";
					case "Image":
					case "File":
						return "BLOB";
					default:
						return type + "(40)";
				}
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return ((id, len) => {
				let ret = null;

				if (!ret && typeof(global) !== 'undefined' && typeof(crypto) !== 'undefined') ret = crypto.randomUUID();
				if (!ret && typeof(uuidv4) !== "undefined") ret = uuidv4();

				if (!ret) ret = (((id ? Number(id) : new Date().getTime() / 10) | 0).toString(16)) + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, () => {
					return ((id ? id : Math.random()) * 16 | 0).toString(16);
				}).toLowerCase().substring(0, len || 24).replace(/\-/g, '');

				//let pool = (this.__scope().__uuidPool = this.__scope().__uuidPool || []);
				//if (pool.find(u => u == ret)) return this._uuid(id, len);
				//pool.push(ret);

				return ret;
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return (async (libName, hrefs) => {
				for await (const n of (hrefs || this.hrefs).filter(l => l.lib === libName && this._include(l))) {
					n.requires = n.requires || [];
					for await (const r of n.requires.filter(r => r != libName)) {
						await this.require(r, hrefs);
					}

					if (typeof(this._css) !== 'undefined') {
						for (const c of Array.isArray(n.css) ? n.css : [n.css]) {
							this._css(c);
						}
					}
					var modules = [];
					for await (const s of Array.isArray(n.src) ? n.src : [n.src]) {
						try {
							if (s.Name) {
								// stored script
								let _sc = await sr._("ContentManager.cmsStoredScriptFind", null, s);
								await sr.runScript(_sc.Script);
							} else if (n.module) {
								modules.push(await import(s));
							} else if (typeof($) !== 'undefined' && typeof($.ajax) !== 'undefined') {

								await $.ajax({
									url: n.cache ? s : this.randURL(s),
									dataType: "script",
									cache: n.cache ? 'force-cache' : 'default'
								});
							} else {
								await new Promise(r => {
									let script = document.createElement('script');
									script.onload = () => r();
									script.src = s;
									(document.body || document.head).appendChild(script);
								});
							}
						} catch (ex) {
							console.log("require[" + n.lib + "] Exception: " + ex, s);
						}
					}
					if (n.load) {
						try {
							await n.load(modules);
						} catch (ex) {
							console.log("Exception in load() of " + n.lib, ex);
						}
					}
				}
				console.log("require[" + libName + "]");
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return ((_href) => {
				return !(_href.disabled || (_href.type && this.isMobile() && _href.type != "mobile") || (_href.type && !this.isMobile() && _href.type == "mobile"));
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return ((value, type) => {
				try {
					if (typeof(beautifier) !== "undefined") {
						var options = {
							"indent_size": "1",
							"indent_char": "\t",
							"max_preserve_newlines": "2",
							"preserve_newlines": true,
							"keep_array_indentation": false,
							"break_chained_methods": false,
							"indent_scripts": "normal",
							"brace_style": "collapse",
							"space_before_conditional": true,
							"unescape_strings": false,
							"jslint_happy": false,
							"end_with_newline": false,
							"wrap_line_length": "0",
							"indent_inner_html": false,
							"comma_first": false,
							"e4x": true,
							"indent_empty_lines": false
						};
						if (['csharp', 'javascript'].indexOf(type) > -1) {
							value = beautifier.js(typeof(value) !== 'string' ? JSON.stringify(value) : value, options);
						} else if (['html'].indexOf(type) > -1) {
							value = beautifier.html(value, options);
						}
					}
				} catch (ex) {}
				return value;
			})(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	byDepartment(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_department"] && (a["_department"].Equals ? a["_department"].Equals(r) : sr.Equals(a["_department"], r))) {
					r._department_Users.push(a);
				}
			});
		});
		return ret;
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.User.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.User(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.username(this.username(), '=');
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

					if (this._department_set && this.department() && !(await this.department().store())) this.clear_department();

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._manager_Departments_set) {
						for await (const ta of this.manager_Departments()) {
							await ta.store();
						}
					}

					if (this._caller_Incidents_set) {
						for await (const ta of this.caller_Incidents()) {
							await ta.store();
						}
					}

					if (this._contact_Incidents_set) {
						for await (const ta of this.contact_Incidents()) {
							await ta.store();
						}
					}

					if (this._user_Group_Members_set) {
						for await (const ta of this.user_Group_Members()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.User.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._username_set) {

					obj.username = this.username();

				}

				if (this._password_set) {

					obj.password = this.password();

				}

				if (this._department_set) {

					obj.department = this._department.Id;

				}

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("User").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.User.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.User.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.User(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		try {
			if (depth > 1) {
				for await (const r of ret) {

					if (r._department_set) {
						r.department(await r._department.find(depth - 1));
					}

					r.manager_Departments(await new salesnow.Department(null, r.Tool).manager(r).findAll(depth - 1));

					r.caller_Incidents(await new salesnow.Incident(null, r.Tool).caller(r).findAll(depth - 1));

					r.contact_Incidents(await new salesnow.Incident(null, r.Tool).contact(r).findAll(depth - 1));

					r.user_Group_Members(await new salesnow.Group_Member(null, r.Tool).user(r).findAll(depth - 1));

				}
			}

			let refs = [];
			if (!Array.isArray(ret)) ret = [ret];

			refs.push(...ret.filter(r => r.EntityClass));
			for await (const o of (objs || [])) {
				let ofa = [];
				if (o._toEMSObject) {
					ofa = await this._fromEMSValues(await o._toEMSObject(true, true).findAll(depth));
				} else {
					ofa = await o.findAll(depth);
				}
				refs.push(...ofa);
			}
			refs = refs.filter(r => r);
			refs.forEach(r => {
				for (var p in r) {
					if (p.startsWith('_') && r[p] && r[p + "_set"] && r[p].Id && refs.find(o => o.Id == r[p].Id)) {
						r[p.substring(1)](refs.find(o => o.Id == r[p].Id));
					}
				}
			});

			return ret;
		} catch (ex) {
			this.log(undefined, '_findReferences', 'EntityObject', 2, ex);
		}

	}

};

salesnow.Content = class Content extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJGaWxlU3lzdGVtIiwiR2l0SHViIl0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "content",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_content();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

	}

	get EntityClass() {
		let ec = {

			Name: "Content",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for content **/
	content(v, co, id) {
		if (co) this._content_coop = co;

		var ev = this.EntityValue("content");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._content != v) {
				this._content_set = new Date(); // a change in value

			}

			this._content = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._content);
		}
	}

	clear_content() {
		this._content_set = null;
		this._content = null;
		this._content_coop = "";
		return this;
	}

	/** end: setters and getters for content **/

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._content_set,

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._content_set = this._content_set;
		ret._content_coop = this._content_coop;
		ret.content = this.content() ? this.content() : this.content();

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"content": (obj, v, eaCode = this._nCode('content', undefined)) => {

					obj[eaCode] = v;

				},

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Content/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Content(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Content(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Content._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Content._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "FileSystem") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Content._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Content.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Content");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Content(this.Id)

			.content(this.content(), this._content_coop)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Content';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Content";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Content'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('content', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Content*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"content": (obj, v, eaCode = this._nCode('content', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('content', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

		}, "_toSQLTable");

		// ret.sql += '/*Content*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("content")) || !fields) {
			this.content(table["content"]);
		}

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		try {
			let ret = null;
			let uri = this.__config(`path.${content?'write':'read'}`, './') + file;
			if (this.__config('live', true)) {
				if (typeof(content) !== 'undefined') {
					// write
					if (typeof(global) !== 'undefined') {
						ret = global.fs.writeFileSync(uri, content);
					} else {
						this.log(undefined, '_filesystem', 'EntityObject', 1, "Cannot write to file system");
					}
				} else {
					// read
					if (uri.startsWith('http') && uri.indexOf('://') > 0) {
						ret = await this.Tool.axios.get(uri);
					} else if (typeof(global) !== 'undefined') {
						ret = global.fs.readFileSync(uri);
					}
				}
			}

			this.log(undefined, '_filesystem', 'EntityObject', 0, uri, ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_filesystem', 'EntityObject', 2, ex);
		}

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			content: (obj, v, eaCode = this._nCode('content', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			content: (obj, v, eaCode = this._nCode('content', undefined)) => {

				obj[eaCode] = v;

			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("content", obj, this.content());

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "d99d83d5-0300-454f-80b6-dfea0b7031a6" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Content = salesnow._unRecurse.Content || {};
			salesnow._unRecurse.Content[fun] = salesnow._unRecurse.Content[fun] || {};
			salesnow._unRecurse.Content[fun][_id] = salesnow._unRecurse.Content[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Content[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Content[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['content', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("content", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "d99d83d5-0300-454f-80b6-dfea0b7031a6" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Content = salesnow._unRecurse.Content || {};
			salesnow._unRecurse.Content[fun] = salesnow._unRecurse.Content[fun] || {};
			salesnow._unRecurse.Content[fun][_id] = salesnow._unRecurse.Content[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Content[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Content[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['content', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("content")) || !fields) && this._content_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.content();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('content', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('content', undefined), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				content: (obj, eaCode = this._nCode('content', undefined)) => {
					this.content(obj[eaCode]);
				},

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			content: (obj, v, eaCode = this._nCode('content', undefined)) => {
				if (!this._content_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Content) return;
			salesnow._storeEntityClass.Content = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "FileSystem") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Content") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				content: (obj, v) => {

					obj.content = v == query.content();

					if (
						(this._content_set && !query._content_set) ||
						false
					) obj.content = true;

					if (
						(!this._content_set && query._content_set) ||

						false
					) obj.content = false;
				},

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._content_set ? false : true)

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			content: (obj, v, eaCode = (bTool ? this._nCode('content', undefined) : "content")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._content_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.content(ref);

			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"content": (obj, v, eaCode = (bTool ? this._nCode('content', undefined) : "content")) => {

				obj[eaCode] = v;

				if (this._content_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._content_coop;
				}
			},

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Content.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Content(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "FileSystem") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "FileSystem") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Content.insert');

			if (this.Tool.type.name == "FileSystem") {

				await this._filesystem(this._fileName(), this._toDocument(true));

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Content.update');

			let ret = null;

			if (this.Tool.type.name == "FileSystem") {

				await this._filesystem(this._fileName(), this._toDocument(true));

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Content.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "FileSystem") {

				ret = [await this._filesystem(this._fileName())];

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Content(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Department = class Department extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "manager",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_manager();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_department_Users();

	}

	get EntityClass() {
		let ec = {

			Name: "Department",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// if(this._manager_set && this._manager) this._manager.Tool = tool;

		// (this.department_Users() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for manager **/
	manager(v, co, id) {
		if (co) this._manager_coop = co;

		var ev = this.EntityValue("manager");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '64c40568-af8e-4a72-b8d1-11f7c41715d7' && _v.EntityClass.Name !== 'User') {
					this.log(undefined, 'manager', 'EntityObject', 1, "GOT HERE", _v, "64c40568-af8e-4a72-b8d1-11f7c41715d7", _v.EntityClass.Name, "User");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._manager != v) {
				this._manager_set = new Date(); // a change in value

				this.log(undefined, 'manager', 'EntityObject', 0, "Set after", this._manager ? this._manager.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._manager_set = v.Set_On;*/

			}

			this._manager = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._manager);
		}
	}

	clear_manager() {
		this._manager_set = null;
		this._manager = null;
		this._manager_coop = "";
		return this;
	}

	/** end: setters and getters for manager **/

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for department_Users **/
	department_Users(v, co) {
		if (typeof(v) === "undefined") return this._department_Users;

		if (v && v.toEntityObject && v.EntityClass.Id !== '64c40568-af8e-4a72-b8d1-11f7c41715d7' && v.EntityClass.Name !== 'User') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._department_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'department_Users', 'EntityObject', 1, "department has no constructor", _v);
			} else if (_v.constructor.name != "User") {
				this.log(undefined, 'department_Users', 'EntityObject', 1, "department not valid", _v, _v.constructor.name, "User");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.department(this);
			}
		});

		this._department_Users.push(...v);
		this._department_Users_set = new Date();
		if (co) this._department_Users_coop = co;

		return this;
	}
	clear_department_Users() {
		this._department_Users_set = null;
		this._department_Users = new Array();
		this._department_Users_coop = null;
		return this;
	}
	/** end: setters and getters for department_Users **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._manager_set,

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._department_Users_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._manager_set = this._manager_set;
		ret._manager_coop = this._manager_coop;
		ret.manager = this.manager() ? this.manager()._flatten(depth - 1) : this.manager();

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.department_Users = this.department_Users().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"manager": (obj, v, eaCode = this._nCode('manager', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				department_Users: (obj, v, eaCode = this._nCode('department_Departments', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

			if (s.name.value == "manager") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for manager', s);
				let sObj = new salesnow.User().manager_Departments(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Department/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Department(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Department(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Department._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Department._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Department._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Department.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Department");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			if (this._manager_set && this.manager()) this.manager().__sync_on(d);

			// this.department_Departments().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Department(this.Id)

			.manager(this.manager(), this._manager_coop)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.department_Users(this.department_Users(), this._department_Users_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Department';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJtYW5hZ2VyIjoiVXNlciJ9`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Department";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Department'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('manager', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Department*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"manager": (obj, v, eaCode = this._nCode('manager', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('manager', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			department_Users: (obj, v, eaCode = this._nCode('department_Departments', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*Department*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("manager")) || !fields) {
			this.manager(table["manager"]);
		}

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('name', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			manager: (obj, v, eaCode = this._nCode('manager', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('User', undefined)]: v ? v._toSFQuery()[this._nCode('User', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			manager: (obj, v, eaCode = this._nCode('manager', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "44fae1bd-0084-4c96-96e3-87587ec1601d" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Department = salesnow._unRecurse.Department || {};
			salesnow._unRecurse.Department[fun] = salesnow._unRecurse.Department[fun] || {};
			salesnow._unRecurse.Department[fun][_id] = salesnow._unRecurse.Department[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Department[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Department[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		if (!this.manager() || (this.manager()

				&&
				!this.manager().manager_Departments().find(_o => this === _o || this.Equals(_o))

				&&
				!this.manager().caller_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.manager().contact_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.manager().user_Group_Members().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("manager", obj, this.manager());
		}

		_options("department_Users", obj, this.department_Users());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['manager', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['department_Users']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "44fae1bd-0084-4c96-96e3-87587ec1601d" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Department = salesnow._unRecurse.Department || {};
			salesnow._unRecurse.Department[fun] = salesnow._unRecurse.Department[fun] || {};
			salesnow._unRecurse.Department[fun][_id] = salesnow._unRecurse.Department[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Department[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Department[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("manager", obj);

		_options("department_Users", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['manager', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['department_Users']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("manager")) || !fields) && this._manager_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.manager();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('manager', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('manager', undefined) + ".id", this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.manager) fields.push(`${this._nCode('manager', undefined)+"id"}`);

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				manager: (obj, eaCode = this._nCode('manager', undefined)) => {
					this.manager(obj[eaCode]);
				},

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

			manager: (obj, v, eaCode = this._nCode('manager', undefined)) => obj[eaCode] = new salesnow.User(null, this.Tool)._toSelectHeader(),

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.manager) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.manager}(${this._Q()}${this._nCode('manager', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			manager: (obj, v, eaCode = this._nCode('manager', undefined)) => {
				if (!this._manager_set) return;

				let coop = this._manager_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			department_Users: (obj, v, eaCode = this._nCode('department_Departments', undefined)) => {
				if (!this._department_Users_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("department.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._department_Users_coop == '!=' || this._department_Users_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._department_Users_coop == '=' || this._department_Users_coop == 'IN') {} else if (this._department_Users_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*department_Users*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.manager) sql += `${this._Q()}${this._nCode('manager', undefined)+"id"}${this._Q()} ${this.__fieldGroups.manager}`;

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			manager: (obj, v, eaCode = this._nCode('manager', undefined)) => obj.manager = v._toPaths(),

			department_Users: (obj, v, eaCode = this._nCode('department_Departments', undefined)) => obj.department_Users = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Department) return;
			salesnow._storeEntityClass.Department = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Department()

					.manager(new salesnow.User())

					.department_Users(new salesnow.User())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Department") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				manager: (obj, v) => {

					obj.manager = v ? v._matches(query ? query.manager() : null) : true;

					if (
						(this._manager_set && !query._manager_set) ||
						false
					) obj.manager = true;

					if (
						(!this._manager_set && query._manager_set) ||

						(this.manager() && !this.manager()._matches(query.manager())) ||

						false
					) obj.manager = false;
				},

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				department_Users: (obj, v) => {
					obj.department_Users = v.map(_v => query.department_Users().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				manager: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For manager");
					obj.manager = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				department_Users: (obj, v) => {
					obj.department_Users = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._manager_set ? false : true)

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				manager: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.manager(ret);
					}
				},

				department_Users: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.department_Users()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			manager: (obj, v, eaCode = (bTool ? this._nCode('manager', undefined) : "manager")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._manager_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.manager() || new salesnow.User())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.manager(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference manager", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			department_Users: (obj, v, eaCode = (bTool ? this._nCode('department_Departments', undefined) : "department_Users")) => this.department_Users(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.User()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"manager": (obj, v, eaCode = (bTool ? this._nCode('manager', undefined) : "manager")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._manager_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._manager_coop;
				}
			},

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			department_Users: (obj, v, eaCode = (bTool ? this._nCode('department_Departments', undefined) : "department_Users")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._department_Users_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._department_Users_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	byUser(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_manager"] && (a["_manager"].Equals ? a["_manager"].Equals(r) : sr.Equals(a["_manager"], r))) {
					r._manager_Departments.push(a);
				}
			});
		});
		return ret;
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = true;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Department.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Department(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.name(this.name(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

					if (this._manager_set && this.manager() && !(await this.manager().store())) this.clear_manager();

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._department_Users_set) {
						for await (const ta of this.department_Users()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Department.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._manager_set) {

					obj.manager = this._manager.Id;

				}

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Department").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Department.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Department.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Department(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Priority = class Priority extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_priority_Incidents();

	}

	get EntityClass() {
		let ec = {

			Name: "Priority",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// (this.priority_Incidents() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for priority_Incidents **/
	priority_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._priority_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._priority_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'priority_Incidents', 'EntityObject', 1, "priority has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'priority_Incidents', 'EntityObject', 1, "priority not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.priority(this);
			}
		});

		this._priority_Incidents.push(...v);
		this._priority_Incidents_set = new Date();
		if (co) this._priority_Incidents_coop = co;

		return this;
	}
	clear_priority_Incidents() {
		this._priority_Incidents_set = null;
		this._priority_Incidents = new Array();
		this._priority_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for priority_Incidents **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._priority_Incidents_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.priority_Incidents = this.priority_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				priority_Incidents: (obj, v, eaCode = this._nCode('priority_Prioritys', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Priority/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Priority(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Priority(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Priority._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Priority._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Priority._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Priority.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Priority");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			// this.priority_Prioritys().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Priority(this.Id)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.priority_Incidents(this.priority_Incidents(), this._priority_Incidents_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Priority';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Priority";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Priority'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Priority*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			priority_Incidents: (obj, v, eaCode = this._nCode('priority_Prioritys', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*Priority*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "c202bfc0-7e98-43d1-adcd-5139da7162c4" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Priority = salesnow._unRecurse.Priority || {};
			salesnow._unRecurse.Priority[fun] = salesnow._unRecurse.Priority[fun] || {};
			salesnow._unRecurse.Priority[fun][_id] = salesnow._unRecurse.Priority[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Priority[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Priority[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		_options("priority_Incidents", obj, this.priority_Incidents());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['priority_Incidents']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "c202bfc0-7e98-43d1-adcd-5139da7162c4" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Priority = salesnow._unRecurse.Priority || {};
			salesnow._unRecurse.Priority[fun] = salesnow._unRecurse.Priority[fun] || {};
			salesnow._unRecurse.Priority[fun][_id] = salesnow._unRecurse.Priority[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Priority[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Priority[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("priority_Incidents", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['priority_Incidents']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			priority_Incidents: (obj, v, eaCode = this._nCode('priority_Prioritys', undefined)) => {
				if (!this._priority_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("priority.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._priority_Incidents_coop == '!=' || this._priority_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._priority_Incidents_coop == '=' || this._priority_Incidents_coop == 'IN') {} else if (this._priority_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*priority_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			priority_Incidents: (obj, v, eaCode = this._nCode('priority_Prioritys', undefined)) => obj.priority_Incidents = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Priority) return;
			salesnow._storeEntityClass.Priority = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Priority()

					.priority_Incidents(new salesnow.Incident())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Priority") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				priority_Incidents: (obj, v) => {
					obj.priority_Incidents = v.map(_v => query.priority_Incidents().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				priority_Incidents: (obj, v) => {
					obj.priority_Incidents = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				priority_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.priority_Incidents()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			priority_Incidents: (obj, v, eaCode = (bTool ? this._nCode('priority_Prioritys', undefined) : "priority_Incidents")) => this.priority_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			priority_Incidents: (obj, v, eaCode = (bTool ? this._nCode('priority_Prioritys', undefined) : "priority_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._priority_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._priority_Incidents_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Priority.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Priority(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._priority_Incidents_set) {
						for await (const ta of this.priority_Incidents()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Priority.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Priority").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Priority.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Priority.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Priority(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Reason = class Reason extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_close_reason_Incidents();

	}

	get EntityClass() {
		let ec = {

			Name: "Reason",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// (this.close_reason_Incidents() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for close_reason_Incidents **/
	close_reason_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._close_reason_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._close_reason_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'close_reason_Incidents', 'EntityObject', 1, "close_reason has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'close_reason_Incidents', 'EntityObject', 1, "close_reason not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.close_reason(this);
			}
		});

		this._close_reason_Incidents.push(...v);
		this._close_reason_Incidents_set = new Date();
		if (co) this._close_reason_Incidents_coop = co;

		return this;
	}
	clear_close_reason_Incidents() {
		this._close_reason_Incidents_set = null;
		this._close_reason_Incidents = new Array();
		this._close_reason_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for close_reason_Incidents **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._close_reason_Incidents_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.close_reason_Incidents = this.close_reason_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				close_reason_Incidents: (obj, v, eaCode = this._nCode('close_reason_Reasons', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Reason/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Reason(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Reason(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Reason._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Reason._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Reason._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Reason.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Reason");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			// this.close_reason_Reasons().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Reason(this.Id)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.close_reason_Incidents(this.close_reason_Incidents(), this._close_reason_Incidents_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Reason';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Reason";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Reason'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Reason*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			close_reason_Incidents: (obj, v, eaCode = this._nCode('close_reason_Reasons', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*Reason*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "7aa81175-e159-4181-8fa4-cb5322149a8b" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Reason = salesnow._unRecurse.Reason || {};
			salesnow._unRecurse.Reason[fun] = salesnow._unRecurse.Reason[fun] || {};
			salesnow._unRecurse.Reason[fun][_id] = salesnow._unRecurse.Reason[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Reason[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Reason[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		_options("close_reason_Incidents", obj, this.close_reason_Incidents());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['close_reason_Incidents']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "7aa81175-e159-4181-8fa4-cb5322149a8b" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Reason = salesnow._unRecurse.Reason || {};
			salesnow._unRecurse.Reason[fun] = salesnow._unRecurse.Reason[fun] || {};
			salesnow._unRecurse.Reason[fun][_id] = salesnow._unRecurse.Reason[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Reason[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Reason[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("close_reason_Incidents", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['close_reason_Incidents']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			close_reason_Incidents: (obj, v, eaCode = this._nCode('close_reason_Reasons', undefined)) => {
				if (!this._close_reason_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("close_reason.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._close_reason_Incidents_coop == '!=' || this._close_reason_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._close_reason_Incidents_coop == '=' || this._close_reason_Incidents_coop == 'IN') {} else if (this._close_reason_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*close_reason_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			close_reason_Incidents: (obj, v, eaCode = this._nCode('close_reason_Reasons', undefined)) => obj.close_reason_Incidents = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Reason) return;
			salesnow._storeEntityClass.Reason = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Reason()

					.close_reason_Incidents(new salesnow.Incident())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Reason") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				close_reason_Incidents: (obj, v) => {
					obj.close_reason_Incidents = v.map(_v => query.close_reason_Incidents().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				close_reason_Incidents: (obj, v) => {
					obj.close_reason_Incidents = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				close_reason_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.close_reason_Incidents()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			close_reason_Incidents: (obj, v, eaCode = (bTool ? this._nCode('close_reason_Reasons', undefined) : "close_reason_Incidents")) => this.close_reason_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			close_reason_Incidents: (obj, v, eaCode = (bTool ? this._nCode('close_reason_Reasons', undefined) : "close_reason_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._close_reason_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._close_reason_Incidents_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Reason.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Reason(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._close_reason_Incidents_set) {
						for await (const ta of this.close_reason_Incidents()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Reason.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Reason").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Reason.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Reason.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Reason(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Symptom = class Symptom extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_symptom_Incidents();

	}

	get EntityClass() {
		let ec = {

			Name: "Symptom",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// (this.symptom_Incidents() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for symptom_Incidents **/
	symptom_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._symptom_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._symptom_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'symptom_Incidents', 'EntityObject', 1, "symptom has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'symptom_Incidents', 'EntityObject', 1, "symptom not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.symptom(this);
			}
		});

		this._symptom_Incidents.push(...v);
		this._symptom_Incidents_set = new Date();
		if (co) this._symptom_Incidents_coop = co;

		return this;
	}
	clear_symptom_Incidents() {
		this._symptom_Incidents_set = null;
		this._symptom_Incidents = new Array();
		this._symptom_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for symptom_Incidents **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._symptom_Incidents_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.symptom_Incidents = this.symptom_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				symptom_Incidents: (obj, v, eaCode = this._nCode('symptom_Symptoms', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Symptom/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Symptom(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Symptom(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Symptom._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Symptom._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Symptom._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Symptom.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Symptom");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			// this.symptom_Symptoms().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Symptom(this.Id)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.symptom_Incidents(this.symptom_Incidents(), this._symptom_Incidents_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Symptom';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Symptom";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Symptom'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Symptom*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			symptom_Incidents: (obj, v, eaCode = this._nCode('symptom_Symptoms', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*Symptom*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "33fd4194-a90a-482f-9a81-d370cf5e4018" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Symptom = salesnow._unRecurse.Symptom || {};
			salesnow._unRecurse.Symptom[fun] = salesnow._unRecurse.Symptom[fun] || {};
			salesnow._unRecurse.Symptom[fun][_id] = salesnow._unRecurse.Symptom[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Symptom[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Symptom[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		_options("symptom_Incidents", obj, this.symptom_Incidents());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['symptom_Incidents']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "33fd4194-a90a-482f-9a81-d370cf5e4018" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Symptom = salesnow._unRecurse.Symptom || {};
			salesnow._unRecurse.Symptom[fun] = salesnow._unRecurse.Symptom[fun] || {};
			salesnow._unRecurse.Symptom[fun][_id] = salesnow._unRecurse.Symptom[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Symptom[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Symptom[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("symptom_Incidents", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['symptom_Incidents']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			symptom_Incidents: (obj, v, eaCode = this._nCode('symptom_Symptoms', undefined)) => {
				if (!this._symptom_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("symptom.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._symptom_Incidents_coop == '!=' || this._symptom_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._symptom_Incidents_coop == '=' || this._symptom_Incidents_coop == 'IN') {} else if (this._symptom_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*symptom_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			symptom_Incidents: (obj, v, eaCode = this._nCode('symptom_Symptoms', undefined)) => obj.symptom_Incidents = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Symptom) return;
			salesnow._storeEntityClass.Symptom = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Symptom()

					.symptom_Incidents(new salesnow.Incident())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Symptom") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				symptom_Incidents: (obj, v) => {
					obj.symptom_Incidents = v.map(_v => query.symptom_Incidents().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				symptom_Incidents: (obj, v) => {
					obj.symptom_Incidents = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				symptom_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.symptom_Incidents()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			symptom_Incidents: (obj, v, eaCode = (bTool ? this._nCode('symptom_Symptoms', undefined) : "symptom_Incidents")) => this.symptom_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			symptom_Incidents: (obj, v, eaCode = (bTool ? this._nCode('symptom_Symptoms', undefined) : "symptom_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._symptom_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._symptom_Incidents_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Symptom.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Symptom(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._symptom_Incidents_set) {
						for await (const ta of this.symptom_Incidents()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Symptom.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Symptom").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Symptom.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Symptom.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Symptom(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Incident = class Incident extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "location",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_location();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "group",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_group();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "state",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_state();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "symptom",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_symptom();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "close_reason",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_close_reason();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "priority",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_priority();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "caller",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_caller();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "contact",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_contact();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

	}

	get EntityClass() {
		let ec = {

			Name: "Incident",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// if(this._location_set && this._location) this._location.Tool = tool;

		// if(this._group_set && this._group) this._group.Tool = tool;

		// if(this._state_set && this._state) this._state.Tool = tool;

		// if(this._symptom_set && this._symptom) this._symptom.Tool = tool;

		// if(this._close_reason_set && this._close_reason) this._close_reason.Tool = tool;

		// if(this._priority_set && this._priority) this._priority.Tool = tool;

		// if(this._caller_set && this._caller) this._caller.Tool = tool;

		// if(this._contact_set && this._contact) this._contact.Tool = tool;

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for location **/
	location(v, co, id) {
		if (co) this._location_coop = co;

		var ev = this.EntityValue("location");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== 'b6dcfc12-3c79-4dbd-9cbe-da2d4f7a29fd' && _v.EntityClass.Name !== 'Location') {
					this.log(undefined, 'location', 'EntityObject', 1, "GOT HERE", _v, "b6dcfc12-3c79-4dbd-9cbe-da2d4f7a29fd", _v.EntityClass.Name, "Location");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._location != v) {
				this._location_set = new Date(); // a change in value

				this.log(undefined, 'location', 'EntityObject', 0, "Set after", this._location ? this._location.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._location_set = v.Set_On;*/

			}

			this._location = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._location);
		}
	}

	clear_location() {
		this._location_set = null;
		this._location = null;
		this._location_coop = "";
		return this;
	}

	/** end: setters and getters for location **/

	/** start: setters and getters for group **/
	group(v, co, id) {
		if (co) this._group_coop = co;

		var ev = this.EntityValue("group");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '58a584d1-a205-48af-8dbf-0fa476a007a6' && _v.EntityClass.Name !== 'Group') {
					this.log(undefined, 'group', 'EntityObject', 1, "GOT HERE", _v, "58a584d1-a205-48af-8dbf-0fa476a007a6", _v.EntityClass.Name, "Group");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._group != v) {
				this._group_set = new Date(); // a change in value

				this.log(undefined, 'group', 'EntityObject', 0, "Set after", this._group ? this._group.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._group_set = v.Set_On;*/

			}

			this._group = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._group);
		}
	}

	clear_group() {
		this._group_set = null;
		this._group = null;
		this._group_coop = "";
		return this;
	}

	/** end: setters and getters for group **/

	/** start: setters and getters for state **/
	state(v, co, id) {
		if (co) this._state_coop = co;

		var ev = this.EntityValue("state");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '50dd58b8-15a1-4923-a664-14d40dc9a698' && _v.EntityClass.Name !== 'State') {
					this.log(undefined, 'state', 'EntityObject', 1, "GOT HERE", _v, "50dd58b8-15a1-4923-a664-14d40dc9a698", _v.EntityClass.Name, "State");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._state != v) {
				this._state_set = new Date(); // a change in value

				this.log(undefined, 'state', 'EntityObject', 0, "Set after", this._state ? this._state.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._state_set = v.Set_On;*/

			}

			this._state = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._state);
		}
	}

	clear_state() {
		this._state_set = null;
		this._state = null;
		this._state_coop = "";
		return this;
	}

	/** end: setters and getters for state **/

	/** start: setters and getters for symptom **/
	symptom(v, co, id) {
		if (co) this._symptom_coop = co;

		var ev = this.EntityValue("symptom");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '33fd4194-a90a-482f-9a81-d370cf5e4018' && _v.EntityClass.Name !== 'Symptom') {
					this.log(undefined, 'symptom', 'EntityObject', 1, "GOT HERE", _v, "33fd4194-a90a-482f-9a81-d370cf5e4018", _v.EntityClass.Name, "Symptom");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._symptom != v) {
				this._symptom_set = new Date(); // a change in value

				this.log(undefined, 'symptom', 'EntityObject', 0, "Set after", this._symptom ? this._symptom.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._symptom_set = v.Set_On;*/

			}

			this._symptom = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._symptom);
		}
	}

	clear_symptom() {
		this._symptom_set = null;
		this._symptom = null;
		this._symptom_coop = "";
		return this;
	}

	/** end: setters and getters for symptom **/

	/** start: setters and getters for close_reason **/
	close_reason(v, co, id) {
		if (co) this._close_reason_coop = co;

		var ev = this.EntityValue("close_reason");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '7aa81175-e159-4181-8fa4-cb5322149a8b' && _v.EntityClass.Name !== 'Reason') {
					this.log(undefined, 'close_reason', 'EntityObject', 1, "GOT HERE", _v, "7aa81175-e159-4181-8fa4-cb5322149a8b", _v.EntityClass.Name, "Reason");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._close_reason != v) {
				this._close_reason_set = new Date(); // a change in value

				this.log(undefined, 'close_reason', 'EntityObject', 0, "Set after", this._close_reason ? this._close_reason.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._close_reason_set = v.Set_On;*/

			}

			this._close_reason = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._close_reason);
		}
	}

	clear_close_reason() {
		this._close_reason_set = null;
		this._close_reason = null;
		this._close_reason_coop = "";
		return this;
	}

	/** end: setters and getters for close_reason **/

	/** start: setters and getters for priority **/
	priority(v, co, id) {
		if (co) this._priority_coop = co;

		var ev = this.EntityValue("priority");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== 'c202bfc0-7e98-43d1-adcd-5139da7162c4' && _v.EntityClass.Name !== 'Priority') {
					this.log(undefined, 'priority', 'EntityObject', 1, "GOT HERE", _v, "c202bfc0-7e98-43d1-adcd-5139da7162c4", _v.EntityClass.Name, "Priority");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._priority != v) {
				this._priority_set = new Date(); // a change in value

				this.log(undefined, 'priority', 'EntityObject', 0, "Set after", this._priority ? this._priority.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._priority_set = v.Set_On;*/

			}

			this._priority = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._priority);
		}
	}

	clear_priority() {
		this._priority_set = null;
		this._priority = null;
		this._priority_coop = "";
		return this;
	}

	/** end: setters and getters for priority **/

	/** start: setters and getters for caller **/
	caller(v, co, id) {
		if (co) this._caller_coop = co;

		var ev = this.EntityValue("caller");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '64c40568-af8e-4a72-b8d1-11f7c41715d7' && _v.EntityClass.Name !== 'User') {
					this.log(undefined, 'caller', 'EntityObject', 1, "GOT HERE", _v, "64c40568-af8e-4a72-b8d1-11f7c41715d7", _v.EntityClass.Name, "User");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._caller != v) {
				this._caller_set = new Date(); // a change in value

				this.log(undefined, 'caller', 'EntityObject', 0, "Set after", this._caller ? this._caller.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._caller_set = v.Set_On;*/

			}

			this._caller = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._caller);
		}
	}

	clear_caller() {
		this._caller_set = null;
		this._caller = null;
		this._caller_coop = "";
		return this;
	}

	/** end: setters and getters for caller **/

	/** start: setters and getters for contact **/
	contact(v, co, id) {
		if (co) this._contact_coop = co;

		var ev = this.EntityValue("contact");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '64c40568-af8e-4a72-b8d1-11f7c41715d7' && _v.EntityClass.Name !== 'User') {
					this.log(undefined, 'contact', 'EntityObject', 1, "GOT HERE", _v, "64c40568-af8e-4a72-b8d1-11f7c41715d7", _v.EntityClass.Name, "User");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._contact != v) {
				this._contact_set = new Date(); // a change in value

				this.log(undefined, 'contact', 'EntityObject', 0, "Set after", this._contact ? this._contact.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._contact_set = v.Set_On;*/

			}

			this._contact = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._contact);
		}
	}

	clear_contact() {
		this._contact_set = null;
		this._contact = null;
		this._contact_coop = "";
		return this;
	}

	/** end: setters and getters for contact **/

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._location_set,

			this._group_set,

			this._state_set,

			this._symptom_set,

			this._close_reason_set,

			this._priority_set,

			this._caller_set,

			this._contact_set,

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._location_set = this._location_set;
		ret._location_coop = this._location_coop;
		ret.location = this.location() ? this.location()._flatten(depth - 1) : this.location();

		ret._group_set = this._group_set;
		ret._group_coop = this._group_coop;
		ret.group = this.group() ? this.group()._flatten(depth - 1) : this.group();

		ret._state_set = this._state_set;
		ret._state_coop = this._state_coop;
		ret.state = this.state() ? this.state()._flatten(depth - 1) : this.state();

		ret._symptom_set = this._symptom_set;
		ret._symptom_coop = this._symptom_coop;
		ret.symptom = this.symptom() ? this.symptom()._flatten(depth - 1) : this.symptom();

		ret._close_reason_set = this._close_reason_set;
		ret._close_reason_coop = this._close_reason_coop;
		ret.close_reason = this.close_reason() ? this.close_reason()._flatten(depth - 1) : this.close_reason();

		ret._priority_set = this._priority_set;
		ret._priority_coop = this._priority_coop;
		ret.priority = this.priority() ? this.priority()._flatten(depth - 1) : this.priority();

		ret._caller_set = this._caller_set;
		ret._caller_coop = this._caller_coop;
		ret.caller = this.caller() ? this.caller()._flatten(depth - 1) : this.caller();

		ret._contact_set = this._contact_set;
		ret._contact_coop = this._contact_coop;
		ret.contact = this.contact() ? this.contact()._flatten(depth - 1) : this.contact();

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"location": (obj, v, eaCode = this._nCode('location', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"group": (obj, v, eaCode = this._nCode('group', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"state": (obj, v, eaCode = this._nCode('state', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"symptom": (obj, v, eaCode = this._nCode('symptom', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"close_reason": (obj, v, eaCode = this._nCode('close_reason', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"priority": (obj, v, eaCode = this._nCode('priority', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"caller": (obj, v, eaCode = this._nCode('caller', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"contact": (obj, v, eaCode = this._nCode('contact', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

			if (s.name.value == "location") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for location', s);
				let sObj = new salesnow.Location().location_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "group") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for group', s);
				let sObj = new salesnow.Group().group_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "state") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for state', s);
				let sObj = new salesnow.State().state_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "symptom") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for symptom', s);
				let sObj = new salesnow.Symptom().symptom_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "close_reason") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for close_reason', s);
				let sObj = new salesnow.Reason().close_reason_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "priority") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for priority', s);
				let sObj = new salesnow.Priority().priority_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "caller") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for caller', s);
				let sObj = new salesnow.User().caller_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "contact") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for contact', s);
				let sObj = new salesnow.User().contact_Incidents(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

				case "testSync": {

					break;
				}

				case "inProgress": {

					data.reason = data.reason ? data.reason

						:
						undefined;

					break;
				}

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Incident/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "testSync": {

				if (!bRaw) ret = new salesnow.Incident(null, this.Tool)._fromDocument(ret);

				break;
			}

			case "inProgress": {

				break;
			}

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Incident(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Incident(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "testSync": {

				break;
			}

			case "inProgress": {

				arArgs.push(_params.reason);

				break;
			}

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Incident._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Incident._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Incident._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Incident.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Incident");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			if (this._location_set && this.location()) this.location().__sync_on(d);

			if (this._group_set && this.group()) this.group().__sync_on(d);

			if (this._state_set && this.state()) this.state().__sync_on(d);

			if (this._symptom_set && this.symptom()) this.symptom().__sync_on(d);

			if (this._close_reason_set && this.close_reason()) this.close_reason().__sync_on(d);

			if (this._priority_set && this.priority()) this.priority().__sync_on(d);

			if (this._caller_set && this.caller()) this.caller().__sync_on(d);

			if (this._contact_set && this.contact()) this.contact().__sync_on(d);

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Incident(this.Id)

			.location(this.location(), this._location_coop)

			.group(this.group(), this._group_coop)

			.state(this.state(), this._state_coop)

			.symptom(this.symptom(), this._symptom_coop)

			.close_reason(this.close_reason(), this._close_reason_coop)

			.priority(this.priority(), this._priority_coop)

			.caller(this.caller(), this._caller_coop)

			.contact(this.contact(), this._contact_coop)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Incident';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJsb2NhdGlvbiI6IkxvY2F0aW9uIiwiZ3JvdXAiOiJHcm91cCIsInN0YXRlIjoiU3RhdGUiLCJzeW1wdG9tIjoiU3ltcHRvbSIsImNsb3NlX3JlYXNvbiI6IlJlYXNvbiIsInByaW9yaXR5IjoiUHJpb3JpdHkiLCJjYWxsZXIiOiJVc2VyIiwiY29udGFjdCI6IlVzZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Incident";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Incident'
		}, options || {}));

	}

	/**
	 * Summary. testSync.
	 *
	 * Description. .
	 *
	 * @since      x.x.x
	 * @deprecated x.x.x Use new_function_name() instead.
	 * @access     public
	 *
	 * @class
	 * @augments parent
	 * @mixes    mixin
	 *
	 * @alias    realName
	 * @memberof namespace
	 *
	 * @see  Function/class relied on
	 * @link URL
	 * @global
	 *
	 * @fires   eventName
	 * @fires   className#eventName
	 * @listens event:eventName
	 * @listens className~event:eventName
	 * @param {type}   var           Description.
	 * @param {type}   [var]         Description of optional variable.
	 * @param {type}   [var=default] Description of optional variable with default variable.
	 * @param {Object} objectVar     Description.
	 * @param {type}   objectVar.key Description of a key in the objectVar parameter.
	 *
	 * @yield {type} Yielded value description.
	 *
	 * @return {type} Return value description.
	 */
	async testSync() {

		let answer = new salesnow.Incident();

		let results = await this._execute(salesnow, "testSync", async (log, warn, error, oScope, method = "testSync", _node, ) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "testSync", ) => {

			this.__time('salesnow.Incident.testSync');

			var errors = {

			};
			Object.keys(errors).filter(k => !errors[k]).forEach(k => delete errors[k]);
			if (Object.keys(errors).length) {
				Object.keys(errors).filter(k => k.startsWith('-')).forEach(k => {
					this.log(undefined, 'testSync', 'EntityObject', 0, {
						[k]: errors[k]
					});
					delete errors[k];
				});
				if (Object.values(errors).length) {
					return {
						__exception: errors,
					};
				}
				return;
			}

			let inc = await new oScope.Incident().number("INC1234").title("Testing").group(new oScope.Group().name("Group1")).state(new oScope.State().name("Assigned")).priority(new oScope.Priority().name("High").code("P1")).caller(new oScope.User().username("fadi").name("Fadi")).store();
			inc.Tool = "MongoDB";
			return await inc.store();

		}, {
			__beforeRules: [],
			__afterRules: [],
		});

		// take out the invalid node results
		results = results.filter(r => r && r.ret);

		// has any node generated a validation exception?
		let __ex = results.find(r => r.ret.__exception);
		if (__ex) return __ex.ret;

		return results.length ? results[0].ret : null;

	}

	/**
	 * Summary. inProgress.
	 *
	 * Description. .
	 *
	 * @since      x.x.x
	 * @deprecated x.x.x Use new_function_name() instead.
	 * @access     public
	 *
	 * @class
	 * @augments parent
	 * @mixes    mixin
	 *
	 * @alias    realName
	 * @memberof namespace
	 *
	 * @see  Function/class relied on
	 * @link URL
	 * @global
	 *
	 * @fires   eventName
	 * @fires   className#eventName
	 * @listens event:eventName
	 * @listens className~event:eventName
	 * @param {type}   var           Description.
	 * @param {type}   [var]         Description of optional variable.
	 * @param {type}   [var=default] Description of optional variable with default variable.
	 * @param {Object} objectVar     Description.
	 * @param {type}   objectVar.key Description of a key in the objectVar parameter.
	 *
	 * @yield {type} Yielded value description.
	 *
	 * @return {type} Return value description.
	 */
	async inProgress(reason) {

		let answer = false;

		let results = await this._execute(salesnow, "inProgress", async (log, warn, error, oScope, method = "inProgress", _node, reason) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "inProgress", reason) => {

			this.__time('salesnow.Incident.inProgress');

			var errors = {

			};
			Object.keys(errors).filter(k => !errors[k]).forEach(k => delete errors[k]);
			if (Object.keys(errors).length) {
				Object.keys(errors).filter(k => k.startsWith('-')).forEach(k => {
					this.log(undefined, 'inProgress', 'EntityObject', 0, {
						[k]: errors[k]
					});
					delete errors[k];
				});
				if (Object.values(errors).length) {
					return {
						__exception: errors,
					};
				}
				return;
			}

		}, {
			__beforeRules: [],
			__afterRules: [],
			reason: reason
		});

		// take out the invalid node results
		results = results.filter(r => r && r.ret);

		// has any node generated a validation exception?
		let __ex = results.find(r => r.ret.__exception);
		if (__ex) return __ex.ret;

		return results.length ? results[0].ret : null;

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('location', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('group', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('state', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('symptom', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('close_reason', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('priority', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('caller', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('contact', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Incident*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"location": (obj, v, eaCode = this._nCode('location', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('location', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"group": (obj, v, eaCode = this._nCode('group', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('group', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"state": (obj, v, eaCode = this._nCode('state', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('state', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"symptom": (obj, v, eaCode = this._nCode('symptom', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('symptom', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"close_reason": (obj, v, eaCode = this._nCode('close_reason', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('close_reason', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"priority": (obj, v, eaCode = this._nCode('priority', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('priority', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"caller": (obj, v, eaCode = this._nCode('caller', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('caller', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"contact": (obj, v, eaCode = this._nCode('contact', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('contact', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

		}, "_toSQLTable");

		// ret.sql += '/*Incident*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("location")) || !fields) {
			this.location(table["location"]);
		}

		if ((fields && fields.indexOf("group")) || !fields) {
			this.group(table["group"]);
		}

		if ((fields && fields.indexOf("state")) || !fields) {
			this.state(table["state"]);
		}

		if ((fields && fields.indexOf("symptom")) || !fields) {
			this.symptom(table["symptom"]);
		}

		if ((fields && fields.indexOf("close_reason")) || !fields) {
			this.close_reason(table["close_reason"]);
		}

		if ((fields && fields.indexOf("priority")) || !fields) {
			this.priority(table["priority"]);
		}

		if ((fields && fields.indexOf("caller")) || !fields) {
			this.caller(table["caller"]);
		}

		if ((fields && fields.indexOf("contact")) || !fields) {
			this.contact(table["contact"]);
		}

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			location: (obj, v, eaCode = this._nCode('location', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Location', undefined)]: v ? v._toSFQuery()[this._nCode('Location', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			group: (obj, v, eaCode = this._nCode('group', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Group', undefined)]: v ? v._toSFQuery()[this._nCode('Group', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			state: (obj, v, eaCode = this._nCode('state', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('State', undefined)]: v ? v._toSFQuery()[this._nCode('State', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			symptom: (obj, v, eaCode = this._nCode('symptom', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Symptom', undefined)]: v ? v._toSFQuery()[this._nCode('Symptom', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			close_reason: (obj, v, eaCode = this._nCode('close_reason', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Reason', undefined)]: v ? v._toSFQuery()[this._nCode('Reason', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			priority: (obj, v, eaCode = this._nCode('priority', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Priority', undefined)]: v ? v._toSFQuery()[this._nCode('Priority', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			caller: (obj, v, eaCode = this._nCode('caller', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('User', undefined)]: v ? v._toSFQuery()[this._nCode('User', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			contact: (obj, v, eaCode = this._nCode('contact', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('User', undefined)]: v ? v._toSFQuery()[this._nCode('User', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			location: (obj, v, eaCode = this._nCode('location', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			group: (obj, v, eaCode = this._nCode('group', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			state: (obj, v, eaCode = this._nCode('state', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			symptom: (obj, v, eaCode = this._nCode('symptom', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			close_reason: (obj, v, eaCode = this._nCode('close_reason', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			priority: (obj, v, eaCode = this._nCode('priority', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			caller: (obj, v, eaCode = this._nCode('caller', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			contact: (obj, v, eaCode = this._nCode('contact', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "892b7f15-12ff-409a-9d9b-5843237ab3a5" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Incident = salesnow._unRecurse.Incident || {};
			salesnow._unRecurse.Incident[fun] = salesnow._unRecurse.Incident[fun] || {};
			salesnow._unRecurse.Incident[fun][_id] = salesnow._unRecurse.Incident[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Incident[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Incident[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		if (!this.location() || (this.location()

				&&
				!this.location().location_Incidents().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("location", obj, this.location());
		}

		if (!this.group() || (this.group()

				&&
				!this.group().group_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.group().group_Group_Members().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("group", obj, this.group());
		}

		if (!this.state() || (this.state()

				&&
				!this.state().state_Incidents().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("state", obj, this.state());
		}

		if (!this.symptom() || (this.symptom()

				&&
				!this.symptom().symptom_Incidents().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("symptom", obj, this.symptom());
		}

		if (!this.close_reason() || (this.close_reason()

				&&
				!this.close_reason().close_reason_Incidents().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("close_reason", obj, this.close_reason());
		}

		if (!this.priority() || (this.priority()

				&&
				!this.priority().priority_Incidents().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("priority", obj, this.priority());
		}

		if (!this.caller() || (this.caller()

				&&
				!this.caller().manager_Departments().find(_o => this === _o || this.Equals(_o))

				&&
				!this.caller().caller_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.caller().contact_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.caller().user_Group_Members().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("caller", obj, this.caller());
		}

		if (!this.contact() || (this.contact()

				&&
				!this.contact().manager_Departments().find(_o => this === _o || this.Equals(_o))

				&&
				!this.contact().caller_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.contact().contact_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.contact().user_Group_Members().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("contact", obj, this.contact());
		}

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['location', 'group', 'state', 'symptom', 'close_reason', 'priority', 'caller', 'contact', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "892b7f15-12ff-409a-9d9b-5843237ab3a5" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Incident = salesnow._unRecurse.Incident || {};
			salesnow._unRecurse.Incident[fun] = salesnow._unRecurse.Incident[fun] || {};
			salesnow._unRecurse.Incident[fun][_id] = salesnow._unRecurse.Incident[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Incident[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Incident[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("location", obj);

		_options("group", obj);

		_options("state", obj);

		_options("symptom", obj);

		_options("close_reason", obj);

		_options("priority", obj);

		_options("caller", obj);

		_options("contact", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['location', 'group', 'state', 'symptom', 'close_reason', 'priority', 'caller', 'contact', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("location")) || !fields) && this._location_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.location();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('location', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("group")) || !fields) && this._group_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.group();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('group', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("state")) || !fields) && this._state_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.state();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('state', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("symptom")) || !fields) && this._symptom_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.symptom();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('symptom', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("close_reason")) || !fields) && this._close_reason_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.close_reason();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('close_reason', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("priority")) || !fields) && this._priority_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.priority();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('priority', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("caller")) || !fields) && this._caller_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.caller();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('caller', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("contact")) || !fields) && this._contact_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.contact();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('contact', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('location', undefined) + ".id", this._nCode('group', undefined) + ".id", this._nCode('state', undefined) + ".id", this._nCode('symptom', undefined) + ".id", this._nCode('close_reason', undefined) + ".id", this._nCode('priority', undefined) + ".id", this._nCode('caller', undefined) + ".id", this._nCode('contact', undefined) + ".id", this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.location) fields.push(`${this._nCode('location', undefined)+"id"}`);

			if (this.__fieldGroups.group) fields.push(`${this._nCode('group', undefined)+"id"}`);

			if (this.__fieldGroups.state) fields.push(`${this._nCode('state', undefined)+"id"}`);

			if (this.__fieldGroups.symptom) fields.push(`${this._nCode('symptom', undefined)+"id"}`);

			if (this.__fieldGroups.close_reason) fields.push(`${this._nCode('close_reason', undefined)+"id"}`);

			if (this.__fieldGroups.priority) fields.push(`${this._nCode('priority', undefined)+"id"}`);

			if (this.__fieldGroups.caller) fields.push(`${this._nCode('caller', undefined)+"id"}`);

			if (this.__fieldGroups.contact) fields.push(`${this._nCode('contact', undefined)+"id"}`);

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				location: (obj, eaCode = this._nCode('location', undefined)) => {
					this.location(obj[eaCode]);
				},

				group: (obj, eaCode = this._nCode('group', undefined)) => {
					this.group(obj[eaCode]);
				},

				state: (obj, eaCode = this._nCode('state', undefined)) => {
					this.state(obj[eaCode]);
				},

				symptom: (obj, eaCode = this._nCode('symptom', undefined)) => {
					this.symptom(obj[eaCode]);
				},

				close_reason: (obj, eaCode = this._nCode('close_reason', undefined)) => {
					this.close_reason(obj[eaCode]);
				},

				priority: (obj, eaCode = this._nCode('priority', undefined)) => {
					this.priority(obj[eaCode]);
				},

				caller: (obj, eaCode = this._nCode('caller', undefined)) => {
					this.caller(obj[eaCode]);
				},

				contact: (obj, eaCode = this._nCode('contact', undefined)) => {
					this.contact(obj[eaCode]);
				},

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

			location: (obj, v, eaCode = this._nCode('location', undefined)) => obj[eaCode] = new salesnow.Location(null, this.Tool)._toSelectHeader(),

			group: (obj, v, eaCode = this._nCode('group', undefined)) => obj[eaCode] = new salesnow.Group(null, this.Tool)._toSelectHeader(),

			state: (obj, v, eaCode = this._nCode('state', undefined)) => obj[eaCode] = new salesnow.State(null, this.Tool)._toSelectHeader(),

			symptom: (obj, v, eaCode = this._nCode('symptom', undefined)) => obj[eaCode] = new salesnow.Symptom(null, this.Tool)._toSelectHeader(),

			close_reason: (obj, v, eaCode = this._nCode('close_reason', undefined)) => obj[eaCode] = new salesnow.Reason(null, this.Tool)._toSelectHeader(),

			priority: (obj, v, eaCode = this._nCode('priority', undefined)) => obj[eaCode] = new salesnow.Priority(null, this.Tool)._toSelectHeader(),

			caller: (obj, v, eaCode = this._nCode('caller', undefined)) => obj[eaCode] = new salesnow.User(null, this.Tool)._toSelectHeader(),

			contact: (obj, v, eaCode = this._nCode('contact', undefined)) => obj[eaCode] = new salesnow.User(null, this.Tool)._toSelectHeader(),

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.location) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.location}(${this._Q()}${this._nCode('location', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.group) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.group}(${this._Q()}${this._nCode('group', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.state) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.state}(${this._Q()}${this._nCode('state', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.symptom) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.symptom}(${this._Q()}${this._nCode('symptom', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.close_reason) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.close_reason}(${this._Q()}${this._nCode('close_reason', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.priority) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.priority}(${this._Q()}${this._nCode('priority', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.caller) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.caller}(${this._Q()}${this._nCode('caller', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.contact) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.contact}(${this._Q()}${this._nCode('contact', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			location: (obj, v, eaCode = this._nCode('location', undefined)) => {
				if (!this._location_set) return;

				let coop = this._location_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			group: (obj, v, eaCode = this._nCode('group', undefined)) => {
				if (!this._group_set) return;

				let coop = this._group_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			state: (obj, v, eaCode = this._nCode('state', undefined)) => {
				if (!this._state_set) return;

				let coop = this._state_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			symptom: (obj, v, eaCode = this._nCode('symptom', undefined)) => {
				if (!this._symptom_set) return;

				let coop = this._symptom_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			close_reason: (obj, v, eaCode = this._nCode('close_reason', undefined)) => {
				if (!this._close_reason_set) return;

				let coop = this._close_reason_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			priority: (obj, v, eaCode = this._nCode('priority', undefined)) => {
				if (!this._priority_set) return;

				let coop = this._priority_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			caller: (obj, v, eaCode = this._nCode('caller', undefined)) => {
				if (!this._caller_set) return;

				let coop = this._caller_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			contact: (obj, v, eaCode = this._nCode('contact', undefined)) => {
				if (!this._contact_set) return;

				let coop = this._contact_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.location) sql += `${this._Q()}${this._nCode('location', undefined)+"id"}${this._Q()} ${this.__fieldGroups.location}`;

			if (this.__fieldGroups.group) sql += `${this._Q()}${this._nCode('group', undefined)+"id"}${this._Q()} ${this.__fieldGroups.group}`;

			if (this.__fieldGroups.state) sql += `${this._Q()}${this._nCode('state', undefined)+"id"}${this._Q()} ${this.__fieldGroups.state}`;

			if (this.__fieldGroups.symptom) sql += `${this._Q()}${this._nCode('symptom', undefined)+"id"}${this._Q()} ${this.__fieldGroups.symptom}`;

			if (this.__fieldGroups.close_reason) sql += `${this._Q()}${this._nCode('close_reason', undefined)+"id"}${this._Q()} ${this.__fieldGroups.close_reason}`;

			if (this.__fieldGroups.priority) sql += `${this._Q()}${this._nCode('priority', undefined)+"id"}${this._Q()} ${this.__fieldGroups.priority}`;

			if (this.__fieldGroups.caller) sql += `${this._Q()}${this._nCode('caller', undefined)+"id"}${this._Q()} ${this.__fieldGroups.caller}`;

			if (this.__fieldGroups.contact) sql += `${this._Q()}${this._nCode('contact', undefined)+"id"}${this._Q()} ${this.__fieldGroups.contact}`;

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			location: (obj, v, eaCode = this._nCode('location', undefined)) => obj.location = v._toPaths(),

			group: (obj, v, eaCode = this._nCode('group', undefined)) => obj.group = v._toPaths(),

			state: (obj, v, eaCode = this._nCode('state', undefined)) => obj.state = v._toPaths(),

			symptom: (obj, v, eaCode = this._nCode('symptom', undefined)) => obj.symptom = v._toPaths(),

			close_reason: (obj, v, eaCode = this._nCode('close_reason', undefined)) => obj.close_reason = v._toPaths(),

			priority: (obj, v, eaCode = this._nCode('priority', undefined)) => obj.priority = v._toPaths(),

			caller: (obj, v, eaCode = this._nCode('caller', undefined)) => obj.caller = v._toPaths(),

			contact: (obj, v, eaCode = this._nCode('contact', undefined)) => obj.contact = v._toPaths(),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Incident) return;
			salesnow._storeEntityClass.Incident = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Incident()

					.location(new salesnow.Location())

					.group(new salesnow.Group())

					.state(new salesnow.State())

					.symptom(new salesnow.Symptom())

					.close_reason(new salesnow.Reason())

					.priority(new salesnow.Priority())

					.caller(new salesnow.User())

					.contact(new salesnow.User())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Incident") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				location: (obj, v) => {

					obj.location = v ? v._matches(query ? query.location() : null) : true;

					if (
						(this._location_set && !query._location_set) ||
						false
					) obj.location = true;

					if (
						(!this._location_set && query._location_set) ||

						(this.location() && !this.location()._matches(query.location())) ||

						false
					) obj.location = false;
				},

				group: (obj, v) => {

					obj.group = v ? v._matches(query ? query.group() : null) : true;

					if (
						(this._group_set && !query._group_set) ||
						false
					) obj.group = true;

					if (
						(!this._group_set && query._group_set) ||

						(this.group() && !this.group()._matches(query.group())) ||

						false
					) obj.group = false;
				},

				state: (obj, v) => {

					obj.state = v ? v._matches(query ? query.state() : null) : true;

					if (
						(this._state_set && !query._state_set) ||
						false
					) obj.state = true;

					if (
						(!this._state_set && query._state_set) ||

						(this.state() && !this.state()._matches(query.state())) ||

						false
					) obj.state = false;
				},

				symptom: (obj, v) => {

					obj.symptom = v ? v._matches(query ? query.symptom() : null) : true;

					if (
						(this._symptom_set && !query._symptom_set) ||
						false
					) obj.symptom = true;

					if (
						(!this._symptom_set && query._symptom_set) ||

						(this.symptom() && !this.symptom()._matches(query.symptom())) ||

						false
					) obj.symptom = false;
				},

				close_reason: (obj, v) => {

					obj.close_reason = v ? v._matches(query ? query.close_reason() : null) : true;

					if (
						(this._close_reason_set && !query._close_reason_set) ||
						false
					) obj.close_reason = true;

					if (
						(!this._close_reason_set && query._close_reason_set) ||

						(this.close_reason() && !this.close_reason()._matches(query.close_reason())) ||

						false
					) obj.close_reason = false;
				},

				priority: (obj, v) => {

					obj.priority = v ? v._matches(query ? query.priority() : null) : true;

					if (
						(this._priority_set && !query._priority_set) ||
						false
					) obj.priority = true;

					if (
						(!this._priority_set && query._priority_set) ||

						(this.priority() && !this.priority()._matches(query.priority())) ||

						false
					) obj.priority = false;
				},

				caller: (obj, v) => {

					obj.caller = v ? v._matches(query ? query.caller() : null) : true;

					if (
						(this._caller_set && !query._caller_set) ||
						false
					) obj.caller = true;

					if (
						(!this._caller_set && query._caller_set) ||

						(this.caller() && !this.caller()._matches(query.caller())) ||

						false
					) obj.caller = false;
				},

				contact: (obj, v) => {

					obj.contact = v ? v._matches(query ? query.contact() : null) : true;

					if (
						(this._contact_set && !query._contact_set) ||
						false
					) obj.contact = true;

					if (
						(!this._contact_set && query._contact_set) ||

						(this.contact() && !this.contact()._matches(query.contact())) ||

						false
					) obj.contact = false;
				},

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				location: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For location");
					obj.location = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				group: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For group");
					obj.group = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				state: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For state");
					obj.state = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				symptom: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For symptom");
					obj.symptom = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				close_reason: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For close_reason");
					obj.close_reason = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				priority: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For priority");
					obj.priority = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				caller: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For caller");
					obj.caller = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				contact: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For contact");
					obj.contact = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._location_set ? false : true)

				&&
				(this._group_set ? false : true)

				&&
				(this._state_set ? false : true)

				&&
				(this._symptom_set ? false : true)

				&&
				(this._close_reason_set ? false : true)

				&&
				(this._priority_set ? false : true)

				&&
				(this._caller_set ? false : true)

				&&
				(this._contact_set ? false : true)

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				location: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.location(ret);
					}
				},

				group: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.group(ret);
					}
				},

				state: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.state(ret);
					}
				},

				symptom: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.symptom(ret);
					}
				},

				close_reason: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.close_reason(ret);
					}
				},

				priority: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.priority(ret);
					}
				},

				caller: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.caller(ret);
					}
				},

				contact: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.contact(ret);
					}
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			location: (obj, v, eaCode = (bTool ? this._nCode('location', undefined) : "location")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._location_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.location() || new salesnow.Location())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.location(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference location", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			group: (obj, v, eaCode = (bTool ? this._nCode('group', undefined) : "group")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._group_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.group() || new salesnow.Group())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.group(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference group", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			state: (obj, v, eaCode = (bTool ? this._nCode('state', undefined) : "state")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._state_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.state() || new salesnow.State())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.state(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference state", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			symptom: (obj, v, eaCode = (bTool ? this._nCode('symptom', undefined) : "symptom")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._symptom_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.symptom() || new salesnow.Symptom())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.symptom(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference symptom", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			close_reason: (obj, v, eaCode = (bTool ? this._nCode('close_reason', undefined) : "close_reason")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._close_reason_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.close_reason() || new salesnow.Reason())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.close_reason(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference close_reason", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			priority: (obj, v, eaCode = (bTool ? this._nCode('priority', undefined) : "priority")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._priority_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.priority() || new salesnow.Priority())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.priority(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference priority", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			caller: (obj, v, eaCode = (bTool ? this._nCode('caller', undefined) : "caller")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._caller_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.caller() || new salesnow.User())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.caller(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference caller", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			contact: (obj, v, eaCode = (bTool ? this._nCode('contact', undefined) : "contact")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._contact_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.contact() || new salesnow.User())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.contact(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference contact", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"location": (obj, v, eaCode = (bTool ? this._nCode('location', undefined) : "location")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._location_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._location_coop;
				}
			},

			"group": (obj, v, eaCode = (bTool ? this._nCode('group', undefined) : "group")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._group_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._group_coop;
				}
			},

			"state": (obj, v, eaCode = (bTool ? this._nCode('state', undefined) : "state")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._state_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._state_coop;
				}
			},

			"symptom": (obj, v, eaCode = (bTool ? this._nCode('symptom', undefined) : "symptom")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._symptom_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._symptom_coop;
				}
			},

			"close_reason": (obj, v, eaCode = (bTool ? this._nCode('close_reason', undefined) : "close_reason")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._close_reason_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._close_reason_coop;
				}
			},

			"priority": (obj, v, eaCode = (bTool ? this._nCode('priority', undefined) : "priority")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._priority_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._priority_coop;
				}
			},

			"caller": (obj, v, eaCode = (bTool ? this._nCode('caller', undefined) : "caller")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._caller_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._caller_coop;
				}
			},

			"contact": (obj, v, eaCode = (bTool ? this._nCode('contact', undefined) : "contact")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._contact_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._contact_coop;
				}
			},

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	byLocation(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_location"] && (a["_location"].Equals ? a["_location"].Equals(r) : sr.Equals(a["_location"], r))) {
					r._location_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	byGroup(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_group"] && (a["_group"].Equals ? a["_group"].Equals(r) : sr.Equals(a["_group"], r))) {
					r._group_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	byState(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_state"] && (a["_state"].Equals ? a["_state"].Equals(r) : sr.Equals(a["_state"], r))) {
					r._state_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	bySymptom(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_symptom"] && (a["_symptom"].Equals ? a["_symptom"].Equals(r) : sr.Equals(a["_symptom"], r))) {
					r._symptom_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	byReason(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_close_reason"] && (a["_close_reason"].Equals ? a["_close_reason"].Equals(r) : sr.Equals(a["_close_reason"], r))) {
					r._close_reason_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	byPriority(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_priority"] && (a["_priority"].Equals ? a["_priority"].Equals(r) : sr.Equals(a["_priority"], r))) {
					r._priority_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	byUser(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_caller"] && (a["_caller"].Equals ? a["_caller"].Equals(r) : sr.Equals(a["_caller"], r))) {
					r._caller_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	byUser(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_contact"] && (a["_contact"].Equals ? a["_contact"].Equals(r) : sr.Equals(a["_contact"], r))) {
					r._contact_Incidents.push(a);
				}
			});
		});
		return ret;
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Incident.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Incident(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

					if (this._location_set && this.location() && !(await this.location().store())) this.clear_location();

					if (this._group_set && this.group() && !(await this.group().store())) this.clear_group();

					if (this._state_set && this.state() && !(await this.state().store())) this.clear_state();

					if (this._symptom_set && this.symptom() && !(await this.symptom().store())) this.clear_symptom();

					if (this._close_reason_set && this.close_reason() && !(await this.close_reason().store())) this.clear_close_reason();

					if (this._priority_set && this.priority() && !(await this.priority().store())) this.clear_priority();

					if (this._caller_set && this.caller() && !(await this.caller().store())) this.clear_caller();

					if (this._contact_set && this.contact() && !(await this.contact().store())) this.clear_contact();

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Incident.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._location_set) {

					obj.location = this._location.Id;

				}

				if (this._group_set) {

					obj.group = this._group.Id;

				}

				if (this._state_set) {

					obj.state = this._state.Id;

				}

				if (this._symptom_set) {

					obj.symptom = this._symptom.Id;

				}

				if (this._close_reason_set) {

					obj.close_reason = this._close_reason.Id;

				}

				if (this._priority_set) {

					obj.priority = this._priority.Id;

				}

				if (this._caller_set) {

					obj.caller = this._caller.Id;

				}

				if (this._contact_set) {

					obj.contact = this._contact.Id;

				}

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Incident").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Incident.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Incident.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Incident(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.State = class State extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_state_Incidents();

	}

	get EntityClass() {
		let ec = {

			Name: "State",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// (this.state_Incidents() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for state_Incidents **/
	state_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._state_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._state_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'state_Incidents', 'EntityObject', 1, "state has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'state_Incidents', 'EntityObject', 1, "state not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.state(this);
			}
		});

		this._state_Incidents.push(...v);
		this._state_Incidents_set = new Date();
		if (co) this._state_Incidents_coop = co;

		return this;
	}
	clear_state_Incidents() {
		this._state_Incidents_set = null;
		this._state_Incidents = new Array();
		this._state_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for state_Incidents **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._state_Incidents_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.state_Incidents = this.state_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				state_Incidents: (obj, v, eaCode = this._nCode('state_States', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/State/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.State(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.State(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `State._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `State._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.State._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.State.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "State");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			// this.state_States().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.State(this.Id)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.state_Incidents(this.state_Incidents(), this._state_Incidents_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'State';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "State";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'State'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*State*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			state_Incidents: (obj, v, eaCode = this._nCode('state_States', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*State*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "50dd58b8-15a1-4923-a664-14d40dc9a698" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.State = salesnow._unRecurse.State || {};
			salesnow._unRecurse.State[fun] = salesnow._unRecurse.State[fun] || {};
			salesnow._unRecurse.State[fun][_id] = salesnow._unRecurse.State[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.State[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.State[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		_options("state_Incidents", obj, this.state_Incidents());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['state_Incidents']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "50dd58b8-15a1-4923-a664-14d40dc9a698" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.State = salesnow._unRecurse.State || {};
			salesnow._unRecurse.State[fun] = salesnow._unRecurse.State[fun] || {};
			salesnow._unRecurse.State[fun][_id] = salesnow._unRecurse.State[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.State[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.State[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("state_Incidents", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['state_Incidents']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			state_Incidents: (obj, v, eaCode = this._nCode('state_States', undefined)) => {
				if (!this._state_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("state.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._state_Incidents_coop == '!=' || this._state_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._state_Incidents_coop == '=' || this._state_Incidents_coop == 'IN') {} else if (this._state_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*state_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			state_Incidents: (obj, v, eaCode = this._nCode('state_States', undefined)) => obj.state_Incidents = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.State) return;
			salesnow._storeEntityClass.State = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.State()

					.state_Incidents(new salesnow.Incident())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "State") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				state_Incidents: (obj, v) => {
					obj.state_Incidents = v.map(_v => query.state_Incidents().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				state_Incidents: (obj, v) => {
					obj.state_Incidents = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				state_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.state_Incidents()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			state_Incidents: (obj, v, eaCode = (bTool ? this._nCode('state_States', undefined) : "state_Incidents")) => this.state_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			state_Incidents: (obj, v, eaCode = (bTool ? this._nCode('state_States', undefined) : "state_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._state_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._state_Incidents_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.State.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.State(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._state_Incidents_set) {
						for await (const ta of this.state_Incidents()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.State.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("State").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.State.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.State.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.State(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Group = class Group extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "openIncidentThreashold",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_openIncidentThreashold();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_group_Incidents();

		this.clear_group_Group_Members();

	}

	get EntityClass() {
		let ec = {

			Name: "Group",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// (this.group_Incidents() || []).forEach(t => t.Tool = tool);

		// (this.group_Group_Members() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for openIncidentThreashold **/
	openIncidentThreashold(v, co, id) {
		if (co) this._openIncidentThreashold_coop = co;

		var ev = this.EntityValue("openIncidentThreashold");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._openIncidentThreashold != v) {
				this._openIncidentThreashold_set = new Date(); // a change in value

			}

			this._openIncidentThreashold = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._openIncidentThreashold);
		}
	}

	clear_openIncidentThreashold() {
		this._openIncidentThreashold_set = null;
		this._openIncidentThreashold = null;
		this._openIncidentThreashold_coop = "";
		return this;
	}

	/** end: setters and getters for openIncidentThreashold **/

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for group_Incidents **/
	group_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._group_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._group_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'group_Incidents', 'EntityObject', 1, "group has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'group_Incidents', 'EntityObject', 1, "group not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.group(this);
			}
		});

		this._group_Incidents.push(...v);
		this._group_Incidents_set = new Date();
		if (co) this._group_Incidents_coop = co;

		return this;
	}
	clear_group_Incidents() {
		this._group_Incidents_set = null;
		this._group_Incidents = new Array();
		this._group_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for group_Incidents **/

	/** start: setters and getters for group_Group_Members **/
	group_Group_Members(v, co) {
		if (typeof(v) === "undefined") return this._group_Group_Members;

		if (v && v.toEntityObject && v.EntityClass.Id !== '90329d62-6d6a-4b15-ba61-fd5b76b76719' && v.EntityClass.Name !== 'Group Member') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._group_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'group_Group_Members', 'EntityObject', 1, "group has no constructor", _v);
			} else if (_v.constructor.name != "Group_Member") {
				this.log(undefined, 'group_Group_Members', 'EntityObject', 1, "group not valid", _v, _v.constructor.name, "Group_Member");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.group(this);
			}
		});

		this._group_Group_Members.push(...v);
		this._group_Group_Members_set = new Date();
		if (co) this._group_Group_Members_coop = co;

		return this;
	}
	clear_group_Group_Members() {
		this._group_Group_Members_set = null;
		this._group_Group_Members = new Array();
		this._group_Group_Members_coop = null;
		return this;
	}
	/** end: setters and getters for group_Group_Members **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._openIncidentThreashold_set,

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._group_Incidents_set,

			this._group_Group_Members_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._openIncidentThreashold_set = this._openIncidentThreashold_set;
		ret._openIncidentThreashold_coop = this._openIncidentThreashold_coop;
		ret.openIncidentThreashold = this.openIncidentThreashold() ? this.openIncidentThreashold() : this.openIncidentThreashold();

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.group_Incidents = this.group_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		ret.group_Group_Members = this.group_Group_Members().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"openIncidentThreashold": (obj, v, eaCode = this._nCode('openIncidentThreashold', undefined)) => {

					obj[eaCode] = v;

				},

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				group_Incidents: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

				group_Group_Members: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Group/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Group(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Group(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Group._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Group._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Group._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Group.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Group");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			// this.group_Groups().forEach(t => t.__sync_on(d));

			// this.group_Groups().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Group(this.Id)

			.openIncidentThreashold(this.openIncidentThreashold(), this._openIncidentThreashold_coop)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.group_Incidents(this.group_Incidents(), this._group_Incidents_coop)

			.group_Group_Members(this.group_Group_Members(), this._group_Group_Members_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Group';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Group";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Group'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('openIncidentThreashold', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Group*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"openIncidentThreashold": (obj, v, eaCode = this._nCode('openIncidentThreashold', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('openIncidentThreashold', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			group_Incidents: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

			group_Group_Members: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*Group*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("openIncidentThreashold")) || !fields) {
			this.openIncidentThreashold(table["openIncidentThreashold"]);
		}

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('code', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			openIncidentThreashold: (obj, v, eaCode = this._nCode('openIncidentThreashold', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			openIncidentThreashold: (obj, v, eaCode = this._nCode('openIncidentThreashold', undefined)) => {

				obj[eaCode] = v;

			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("openIncidentThreashold", obj, this.openIncidentThreashold());

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "58a584d1-a205-48af-8dbf-0fa476a007a6" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Group = salesnow._unRecurse.Group || {};
			salesnow._unRecurse.Group[fun] = salesnow._unRecurse.Group[fun] || {};
			salesnow._unRecurse.Group[fun][_id] = salesnow._unRecurse.Group[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Group[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Group[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		_options("group_Incidents", obj, this.group_Incidents());

		_options("group_Group_Members", obj, this.group_Group_Members());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['openIncidentThreashold', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['group_Incidents', 'group_Group_Members']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("openIncidentThreashold", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "58a584d1-a205-48af-8dbf-0fa476a007a6" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Group = salesnow._unRecurse.Group || {};
			salesnow._unRecurse.Group[fun] = salesnow._unRecurse.Group[fun] || {};
			salesnow._unRecurse.Group[fun][_id] = salesnow._unRecurse.Group[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Group[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Group[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("group_Incidents", obj);

		_options("group_Group_Members", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['openIncidentThreashold', 'active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['group_Incidents', 'group_Group_Members']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("openIncidentThreashold")) || !fields) && this._openIncidentThreashold_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.openIncidentThreashold();

			fValue = v || '0';

			ret[this._nCode('openIncidentThreashold', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('openIncidentThreashold', undefined), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.openIncidentThreashold) fields.push(`${this._nCode('openIncidentThreashold', undefined)}`);

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				openIncidentThreashold: (obj, eaCode = this._nCode('openIncidentThreashold', undefined)) => {
					this.openIncidentThreashold(obj[eaCode]);
				},

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.openIncidentThreashold) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.openIncidentThreashold}(${this._Q()}${this._nCode('openIncidentThreashold', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			openIncidentThreashold: (obj, v, eaCode = this._nCode('openIncidentThreashold', undefined)) => {
				if (!this._openIncidentThreashold_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._openIncidentThreashold_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			group_Incidents: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => {
				if (!this._group_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("group.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._group_Incidents_coop == '!=' || this._group_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._group_Incidents_coop == '=' || this._group_Incidents_coop == 'IN') {} else if (this._group_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*group_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

			group_Group_Members: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => {
				if (!this._group_Group_Members_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("group.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._group_Group_Members_coop == '!=' || this._group_Group_Members_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._group_Group_Members_coop == '=' || this._group_Group_Members_coop == 'IN') {} else if (this._group_Group_Members_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*group_Group_Members*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.openIncidentThreashold) sql += `${this._Q()}${this._nCode('openIncidentThreashold', undefined)}${this._Q()} ${this.__fieldGroups.openIncidentThreashold}`;

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			group_Incidents: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => obj.group_Incidents = v.map(_v => _v._toPaths()),

			group_Group_Members: (obj, v, eaCode = this._nCode('group_Groups', undefined)) => obj.group_Group_Members = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Group) return;
			salesnow._storeEntityClass.Group = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Group()

					.group_Incidents(new salesnow.Incident())

					.group_Group_Members(new salesnow.Group_Member())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Group") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				openIncidentThreashold: (obj, v) => {

					obj.openIncidentThreashold = v == query.openIncidentThreashold();

					if (
						(this._openIncidentThreashold_set && !query._openIncidentThreashold_set) ||
						false
					) obj.openIncidentThreashold = true;

					if (
						(!this._openIncidentThreashold_set && query._openIncidentThreashold_set) ||

						false
					) obj.openIncidentThreashold = false;
				},

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				group_Incidents: (obj, v) => {
					obj.group_Incidents = v.map(_v => query.group_Incidents().any(q => _v._matches(q)));
				},

				group_Group_Members: (obj, v) => {
					obj.group_Group_Members = v.map(_v => query.group_Group_Members().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				group_Incidents: (obj, v) => {
					obj.group_Incidents = v.map(_v => _v._matching(query)).flat();
				},

				group_Group_Members: (obj, v) => {
					obj.group_Group_Members = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._openIncidentThreashold_set ? false : true)

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				group_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.group_Incidents()[i] = ret;
					});
				},

				group_Group_Members: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.group_Group_Members()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			openIncidentThreashold: (obj, v, eaCode = (bTool ? this._nCode('openIncidentThreashold', undefined) : "openIncidentThreashold")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._openIncidentThreashold_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.openIncidentThreashold(ref);

			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			group_Incidents: (obj, v, eaCode = (bTool ? this._nCode('group_Groups', undefined) : "group_Incidents")) => this.group_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

			group_Group_Members: (obj, v, eaCode = (bTool ? this._nCode('group_Groups', undefined) : "group_Group_Members")) => this.group_Group_Members(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Group_Member()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"openIncidentThreashold": (obj, v, eaCode = (bTool ? this._nCode('openIncidentThreashold', undefined) : "openIncidentThreashold")) => {

				obj[eaCode] = v;

				if (this._openIncidentThreashold_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._openIncidentThreashold_coop;
				}
			},

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			group_Incidents: (obj, v, eaCode = (bTool ? this._nCode('group_Groups', undefined) : "group_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._group_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._group_Incidents_coop;
				}
			},

			group_Group_Members: (obj, v, eaCode = (bTool ? this._nCode('group_Groups', undefined) : "group_Group_Members")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._group_Group_Members_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._group_Group_Members_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = false;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Group.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Group(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.code(this.code(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._group_Incidents_set) {
						for await (const ta of this.group_Incidents()) {
							await ta.store();
						}
					}

					if (this._group_Group_Members_set) {
						for await (const ta of this.group_Group_Members()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Group.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._openIncidentThreashold_set) {

					obj.openIncidentThreashold = this.openIncidentThreashold();

				}

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Group").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Group.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Group.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Group(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Group_Member = class Group_Member extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "group",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_group();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "user",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_user();

	}

	get EntityClass() {
		let ec = {

			Name: "Group Member",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// if(this._group_set && this._group) this._group.Tool = tool;

		// if(this._user_set && this._user) this._user.Tool = tool;

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for group **/
	group(v, co, id) {
		if (co) this._group_coop = co;

		var ev = this.EntityValue("group");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '58a584d1-a205-48af-8dbf-0fa476a007a6' && _v.EntityClass.Name !== 'Group') {
					this.log(undefined, 'group', 'EntityObject', 1, "GOT HERE", _v, "58a584d1-a205-48af-8dbf-0fa476a007a6", _v.EntityClass.Name, "Group");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._group != v) {
				this._group_set = new Date(); // a change in value

				this.log(undefined, 'group', 'EntityObject', 0, "Set after", this._group ? this._group.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._group_set = v.Set_On;*/

			}

			this._group = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._group);
		}
	}

	clear_group() {
		this._group_set = null;
		this._group = null;
		this._group_coop = "";
		return this;
	}

	/** end: setters and getters for group **/

	/** start: setters and getters for user **/
	user(v, co, id) {
		if (co) this._user_coop = co;

		var ev = this.EntityValue("user");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (_v && _v.toEntityObject && _v.EntityClass.Id !== '64c40568-af8e-4a72-b8d1-11f7c41715d7' && _v.EntityClass.Name !== 'User') {
					this.log(undefined, 'user', 'EntityObject', 1, "GOT HERE", _v, "64c40568-af8e-4a72-b8d1-11f7c41715d7", _v.EntityClass.Name, "User");
				} else {
					_v = ((_v && !this.Id && _v.toEntityObject) ? _v.toEntityObject() : _v);
				}

				return _v;

			})(v);

			delete ev.ObjectValueid;
			ev.ObjectValue = v;

			if (true || this._user != v) {
				this._user_set = new Date(); // a change in value

				this.log(undefined, 'user', 'EntityObject', 0, "Set after", this._user ? this._user.Set_On : null, v ? v.Set_On : null);
				/*if(v) this._user_set = v.Set_On;*/

			}

			this._user = v;
			if (co) ev.OPERATORS.EntityValue = co;

			return this;
		} else {
			return this.i18n(ev, this._user);
		}
	}

	clear_user() {
		this._user_set = null;
		this._user = null;
		this._user_coop = "";
		return this;
	}

	/** end: setters and getters for user **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._group_set,

			this._user_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._group_set = this._group_set;
		ret._group_coop = this._group_coop;
		ret.group = this.group() ? this.group()._flatten(depth - 1) : this.group();

		ret._user_set = this._user_set;
		ret._user_coop = this._user_coop;
		ret.user = this.user() ? this.user()._flatten(depth - 1) : this.user();

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"group": (obj, v, eaCode = this._nCode('group', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

				"user": (obj, v, eaCode = this._nCode('user', undefined)) => {

					if (v) {
						let h = options.cache ? options.cache.find(_h => _h.obj == v) : null;
						obj[eaCode] = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: obj[eaCode]
						});
					} else {
						obj[eaCode] = v;
					}

				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

			if (s.name.value == "group") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for group', s);
				let sObj = new salesnow.Group().group_Group_Members(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

			if (s.name.value == "user") {
				this.log(undefined, '_qlSelections', 'EntityObject', 0, 'Reference for user', s);
				let sObj = new salesnow.User().user_Group_Members(this);
				ret.push(sObj);
				ret.push(...sObj._qlSelections(s.selectionSet));
			}

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Group_Member/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Group_Member(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Group_Member(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Group_Member._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Group_Member._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Group_Member._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Group_Member.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Group Member");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			if (this._group_set && this.group()) this.group().__sync_on(d);

			if (this._user_set && this.user()) this.user().__sync_on(d);

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Group_Member(this.Id)

			.group(this.group(), this._group_coop)

			.user(this.user(), this._user_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Group_Member';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJncm91cCI6Ikdyb3VwIiwidXNlciI6IlVzZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Group_Member";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Group_Member'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('group', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('user', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Group_Member*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"group": (obj, v, eaCode = this._nCode('group', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('group', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

			"user": (obj, v, eaCode = this._nCode('user', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('user', undefined)}id${this._Q()} ${this._sqlType("Entity", this.__config('type'))}`;

				obj.sql = (v ? v._toSQLTable() : '') + obj.sql;

			},

		}, "_toSQLTable");

		// ret.sql += '/*Group_Member*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("group")) || !fields) {
			this.group(table["group"]);
		}

		if ((fields && fields.indexOf("user")) || !fields) {
			this.user(table["user"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('group', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			group: (obj, v, eaCode = this._nCode('group', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('Group', undefined)]: v ? v._toSFQuery()[this._nCode('Group', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			user: (obj, v, eaCode = this._nCode('user', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

						{
							inq: {
								ApiName: 'Id',
								[this._nCode('User', undefined)]: v ? v._toSFQuery()[this._nCode('User', undefined)].params.where.and : [],
							},
						}

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			group: (obj, v, eaCode = this._nCode('group', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

			user: (obj, v, eaCode = this._nCode('user', undefined)) => {

				obj[eaCode] = v ? v._toSNQuery() : null;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "90329d62-6d6a-4b15-ba61-fd5b76b76719" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Group_Member = salesnow._unRecurse.Group_Member || {};
			salesnow._unRecurse.Group_Member[fun] = salesnow._unRecurse.Group_Member[fun] || {};
			salesnow._unRecurse.Group_Member[fun][_id] = salesnow._unRecurse.Group_Member[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Group_Member[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Group_Member[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		if (!this.group() || (this.group()

				&&
				!this.group().group_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.group().group_Group_Members().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("group", obj, this.group());
		}

		if (!this.user() || (this.user()

				&&
				!this.user().manager_Departments().find(_o => this === _o || this.Equals(_o))

				&&
				!this.user().caller_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.user().contact_Incidents().find(_o => this === _o || this.Equals(_o))

				&&
				!this.user().user_Group_Members().find(_o => this === _o || this.Equals(_o))

			)) {
			_options("user", obj, this.user());
		}

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['group', 'user']).concat(['']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "90329d62-6d6a-4b15-ba61-fd5b76b76719" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Group_Member = salesnow._unRecurse.Group_Member || {};
			salesnow._unRecurse.Group_Member[fun] = salesnow._unRecurse.Group_Member[fun] || {};
			salesnow._unRecurse.Group_Member[fun][_id] = salesnow._unRecurse.Group_Member[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Group_Member[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Group_Member[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("group", obj);

		_options("user", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['group', 'user']).concat(['']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("group")) || !fields) && this._group_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.group();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('group', undefined) + "id"] = fValue;
		}

		if (((fields && fields.indexOf("user")) || !fields) && this._user_set && (!bNoRef || false)) {
			let fValue = null;
			let v = this.user();

			if (v && (v.__sync_on() || v.Id == v.Id)) {
				fValue = "'" + v.Id + "'";
			} else {
				fValue = 0;
			}

			ret[this._nCode('user', undefined) + "id"] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('group', undefined) + ".id", this._nCode('user', undefined) + ".id"];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.group) fields.push(`${this._nCode('group', undefined)+"id"}`);

			if (this.__fieldGroups.user) fields.push(`${this._nCode('user', undefined)+"id"}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				group: (obj, eaCode = this._nCode('group', undefined)) => {
					this.group(obj[eaCode]);
				},

				user: (obj, eaCode = this._nCode('user', undefined)) => {
					this.user(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

			group: (obj, v, eaCode = this._nCode('group', undefined)) => obj[eaCode] = new salesnow.Group(null, this.Tool)._toSelectHeader(),

			user: (obj, v, eaCode = this._nCode('user', undefined)) => obj[eaCode] = new salesnow.User(null, this.Tool)._toSelectHeader(),

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.group) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.group}(${this._Q()}${this._nCode('group', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.user) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.user}(${this._Q()}${this._nCode('user', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			group: (obj, v, eaCode = this._nCode('group', undefined)) => {
				if (!this._group_set) return;

				let coop = this._group_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			user: (obj, v, eaCode = this._nCode('user', undefined)) => {
				if (!this._user_set) return;

				let coop = this._user_coop;
				switch (coop) {
					case "!=":
						coop = "NOT IN";
					case "=":
						coop = "IN";
					case "":
						coop = "IN";
				}

				if (v) {
					obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v._toSelectSQL(v.__config('idField')||'__id')})`;
				} else {
					obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
				}
				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.group) sql += `${this._Q()}${this._nCode('group', undefined)+"id"}${this._Q()} ${this.__fieldGroups.group}`;

			if (this.__fieldGroups.user) sql += `${this._Q()}${this._nCode('user', undefined)+"id"}${this._Q()} ${this.__fieldGroups.user}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			group: (obj, v, eaCode = this._nCode('group', undefined)) => obj.group = v._toPaths(),

			user: (obj, v, eaCode = this._nCode('user', undefined)) => obj.user = v._toPaths(),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Group_Member) return;
			salesnow._storeEntityClass.Group_Member = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Group_Member()

					.group(new salesnow.Group())

					.user(new salesnow.User())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Group Member") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				group: (obj, v) => {

					obj.group = v ? v._matches(query ? query.group() : null) : true;

					if (
						(this._group_set && !query._group_set) ||
						false
					) obj.group = true;

					if (
						(!this._group_set && query._group_set) ||

						(this.group() && !this.group()._matches(query.group())) ||

						false
					) obj.group = false;
				},

				user: (obj, v) => {

					obj.user = v ? v._matches(query ? query.user() : null) : true;

					if (
						(this._user_set && !query._user_set) ||
						false
					) obj.user = true;

					if (
						(!this._user_set && query._user_set) ||

						(this.user() && !this.user()._matches(query.user())) ||

						false
					) obj.user = false;
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				group: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For group");
					obj.group = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

				user: (obj, v) => {
					this.log(undefined, '_matching', 'EntityObject', 0, "For user");
					obj.user = v ? [v._matching(query) ? v : null].concat(v._matching(query)).filter(m => m) : [];
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._group_set ? false : true)

				&&
				(this._user_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				group: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.group(ret);
					}
				},

				user: (obj, v) => {
					if (v) {
						let ret = v._deReference(root);
						if (ret != v) this.user(ret);
					}
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			group: (obj, v, eaCode = (bTool ? this._nCode('group', undefined) : "group")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._group_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.group() || new salesnow.Group())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.group(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference group", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

			user: (obj, v, eaCode = (bTool ? this._nCode('user', undefined) : "user")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._user_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "RestDBIO") ref = ref[0];
				if (!ref) return;

				let oRef = (this.user() || new salesnow.User())._fromDocument(ref, bTool);

				if (!bTool || oRef.__ID[this.Tool.name] || !this.__ID[this.Tool.name]) {
					this.user(oRef);
				} else {
					// this.log(undefined, '_fromDocument', 'EntityObject', 0, "Empty Reference user", oRef.__ID[this.Tool.name], this.__ID[this.Tool.name], ref);
				}

			},

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"group": (obj, v, eaCode = (bTool ? this._nCode('group', undefined) : "group")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._group_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._group_coop;
				}
			},

			"user": (obj, v, eaCode = (bTool ? this._nCode('user', undefined) : "user")) => {

				obj[eaCode] = v ? v._toDocument(bTool, bFull, bNull) : null;

				if (this._user_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._user_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	byGroup(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_group"] && (a["_group"].Equals ? a["_group"].Equals(r) : sr.Equals(a["_group"], r))) {
					r._group_Group_Members.push(a);
				}
			});
		});
		return ret;
	}

	byUser(ar) {
		var ret = [];
		ar.forEach(a => {
			ret.forEach(r => {
				if (a["_user"] && (a["_user"].Equals ? a["_user"].Equals(r) : sr.Equals(a["_user"], r))) {
					r._user_Group_Members.push(a);
				}
			});
		});
		return ret;
	}

	toString() {

		return this.Id;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Group_Member.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Group_Member(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.group(this.group(), '=');
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.user(this.user(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (this.__config("SyncEntityAttributes")) {

					if (this._group_set && this.group() && !(await this.group().store())) this.clear_group();

					if (this._user_set && this.user() && !(await this.user().store())) this.clear_user();

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Group_Member.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._group_set) {

					obj.group = this._group.Id;

				}

				if (this._user_set) {

					obj.user = this._user.Id;

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Group_Member").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Group_Member.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Group_Member.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Group_Member(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};

salesnow.Location = class Location extends salesnow.GenericServiceAPI {
	constructor(id, tool) {
		super(id, tool);

		this.Scope = "salesnow";
		this.Debug = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJjcml0aWNhbCI6IioiLCJlcnJvciI6IioiLCJ3YXJuIjoiKiIsImluZm8iOiIqLmluaXQsKi5fcmVzdCwqLl9sb2FkVG9vbHMsKi5fZmlsZXN5c3RlbSwqLl9zZXJ2ZXIifQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Config = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJzZWNyZXQiOiJvU0t3Z1oyc0tGT1RJSmNiQWZVSVE0Q2o5cXNINDhubCIsInBsYXlncm91bmQiOnRydWUsImdSUEMiOnRydWUsInN0b3JlLnNlbnNpdGl2aXR5IjoxLCJjb21wYW55IjoicmVzdW1lIn0=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Test = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`eyJVc2VyIjp7Il9hdXRob3JpemUudXNlcm5hbWUiOiJmYWRpIiwiX2F1dGhvcml6ZS5wYXNzd29yZCI6IjEyMyIsIl9hdXRob3JpemUudGVzdFVzZXIiOnsiYWN0aXZlIjp0cnVlLCJlbmFibGVkIjp0cnVlLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCJuYW1lIjoiTWFsZSJ9LCJjb2RlIjoiZmFkaSIsIm5hbWUiOiJGYWRpIn19fQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Tools = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`WyJTcWxEQiIseyJuYW1lIjoiU05PV09PQiIsInR5cGUiOnsibmFtZSI6IlNlcnZpY2VOb3cifX0sIlNhbGVzRm9yY2UiLCJHaXRIdWIiXQ==`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});
		this.Mappings = JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`W10=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		});

		// avoid super, keep this here
		this.__ID = this.__ID || {};
		this.Tool = tool;
		this.Id = id;

		this.ValueEntities = [];

		this.Date = null;

		this.clear_THIS();
		this.EntityValues = [];

		this.EntityValues.push({
			EntityAttribute: {

				Name: "active",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_active();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "enabled",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_enabled();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "code",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_code();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "order",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_order();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "date",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_date();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "name",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_name();

		this.EntityValues.push({
			EntityAttribute: {

				Name: "remark",
				OPERATORS: {
					Name: "="
				},
				EntityClass: this.EntityClass,
			},
			OPERATORS: {}
		});
		this.clear_remark();

		this.clear_location_Incidents();

	}

	get EntityClass() {
		let ec = {

			Name: "Location",
			OPERATORS: {
				Name: "="
			},
		};

		// that's why we need it as a getter
		if (!Number(ec.Id) && salesnow.EntityClasses) {
			let cid = salesnow.EntityClasses.find(c => Number(c.Id) && c.Name == ec.Name);
			if (cid) ec.Id = cid.Id;
		}
		return ec;
	}

	get Id() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	set Id(id) {
		if (!this.Tool) {
			this.log(undefined, 'set Id', 'EntityObject', 0, "Empty Tool", this.Tools.length, salesnow.Tools.length);
			return;
		}
		this.__ID[this.Tool.name] = id;
	}

	get Tool() {
		if (typeof(this.__Tool) !== 'undefined') return this.__Tool;
		let noTool = {
			name: '',
			type: {
				name: ''
			},
		};
		if (typeof(salesnow.Tools) !== "undefined" && !Array.isArray(salesnow.Tools)) {
			this.log(undefined, 'get Tool', 'EntityObject', 2, "salesnow.Tools is not an array: ", salesnow.Tools);
			return noTool;
		}
		let ret = this.Tools.find(t => (salesnow.Tools || []).find(_t => t == _t.name || t.name == _t.name));
		if (typeof(ret) !== 'undefined') ret = (salesnow.Tools || []).find(t => t.name == ret || t.name == ret.name);
		if (typeof(ret) === 'undefined') return noTool;
		return ret;
	}

	set Tool(tool) {
		if (typeof(tool) === 'undefined') return;
		if (typeof(tool) === "string") {
			tool = {
				name: tool
			};
		}
		if (tool.EntityClass) {
			tool = tool._toDocument();
		}
		if (typeof(tool.name) === 'undefined' && typeof(tool.type.name) === 'undefined') return;
		tool.type = tool.type || {
			name: tool.name
		};

		if (!tool.type && !tool.name) {
			this.log(undefined, 'set Tool', 'EntityObject', 1, "Empty Tool object");
			return;
		}

		let t = (salesnow.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
		if (!t) {
			this.log(undefined, 'set Tool', 'EntityObject', 0, "no matching tool", tool, salesnow.Tools);
			return;
		}

		this.__Tool = t;

		// (this.location_Incidents() || []).forEach(t => t.Tool = tool);

		return this;
	}

	THIS(v, co) {
		if (typeof(v) === 'undefined') return this._THIS;
		if (!v) return this;
		v = Array.isArray(v) ? v : [v];
		this._THIS = v.filter(_v => typeof(_v) === 'object' && _v.EntityClass && _v.EntityClass.Name == this.EntityClass.Name && _v.Scope == this.Scope);
		if (co) this._THIS_coop = co;
		return this;
	}

	clear_THIS() {
		this._THIS = [];
		this._THIS_coop = '';
		return this;
	}

	/** start: setters and getters for active **/
	active(v, co, id) {
		if (co) this._active_coop = co;

		var ev = this.EntityValue("active");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._active != v) {
				this._active_set = new Date(); // a change in value

			}

			this._active = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._active);
		}
	}

	clear_active() {
		this._active_set = null;
		this._active = null;
		this._active_coop = "";
		return this;
	}

	/** end: setters and getters for active **/

	/** start: setters and getters for enabled **/
	enabled(v, co, id) {
		if (co) this._enabled_coop = co;

		var ev = this.EntityValue("enabled");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = ["true", "1", "yes", true, 1].includes(_v);

				return _v;

			})(v);

			ev.BoolValue = v;

			if (true || this._enabled != v) {
				this._enabled_set = new Date(); // a change in value

			}

			this._enabled = v;
			if (co) ev.OPERATORS.BoolValue = co;

			return this;
		} else {
			return this.i18n(ev, this._enabled);
		}
	}

	clear_enabled() {
		this._enabled_set = null;
		this._enabled = null;
		this._enabled_coop = "";
		return this;
	}

	/** end: setters and getters for enabled **/

	/** start: setters and getters for code **/
	code(v, co, id) {
		if (co) this._code_coop = co;

		var ev = this.EntityValue("code");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._code != v) {
				this._code_set = new Date(); // a change in value

			}

			this._code = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._code);
		}
	}

	clear_code() {
		this._code_set = null;
		this._code = null;
		this._code_coop = "";
		return this;
	}

	/** end: setters and getters for code **/

	/** start: setters and getters for order **/
	order(v, co, id) {
		if (co) this._order_coop = co;

		var ev = this.EntityValue("order");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (isNaN(_v)) _v = 0;

				return _v;

			})(v);

			ev.IntValue = v;

			if (true || this._order != v) {
				this._order_set = new Date(); // a change in value

			}

			this._order = v;
			if (co) ev.OPERATORS.IntValue = co;

			return this;
		} else {
			return this.i18n(ev, this._order);
		}
	}

	clear_order() {
		this._order_set = null;
		this._order = null;
		this._order_coop = "";
		return this;
	}

	/** end: setters and getters for order **/

	/** start: setters and getters for date **/
	date(v, co, id) {
		if (co) this._date_coop = co;

		var ev = this.EntityValue("date");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				_v = Object.prototype.toString.call(_v) === '[object Date]' ? _v : (new Date(_v));
				if (isNaN(_v.getTime())) _v = null;

				return _v;

			})(v);

			ev.DateValue = v;

			if (true || this._date != v) {
				this._date_set = new Date(); // a change in value

			}

			this._date = v;
			if (co) ev.OPERATORS.DateValue = co;

			return this;
		} else {
			return this.i18n(ev, this._date);
		}
	}

	clear_date() {
		this._date_set = null;
		this._date = null;
		this._date_coop = "";
		return this;
	}

	/** end: setters and getters for date **/

	/** start: setters and getters for name **/
	name(v, co, id) {
		if (co) this._name_coop = co;

		var ev = this.EntityValue("name");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				return _v;

			})(v);

			ev.StringValue = v;

			if (true || this._name != v) {
				this._name_set = new Date(); // a change in value

			}

			this._name = v;
			if (co) ev.OPERATORS.StringValue = co;

			return this;
		} else {
			return this.i18n(ev, this._name);
		}
	}

	clear_name() {
		this._name_set = null;
		this._name = null;
		this._name_coop = "";
		return this;
	}

	/** end: setters and getters for name **/

	/** start: setters and getters for remark **/
	remark(v, co, id) {
		if (co) this._remark_coop = co;

		var ev = this.EntityValue("remark");
		if (!ev) {
			return this;
		}

		if (id) ev.Id = id;

		if (typeof(v) !== 'undefined') {
			// values were given, therefore a setter

			v = (_v => {

				if (typeof(_v) === 'object') _v = JSON.stringify(_v);

				return _v;

			})(v);

			ev.TextValue = v;

			if (true || this._remark != v) {
				this._remark_set = new Date(); // a change in value

			}

			this._remark = v;
			if (co) ev.OPERATORS.TextValue = co;

			return this;
		} else {
			return this.i18n(ev, this._remark);
		}
	}

	clear_remark() {
		this._remark_set = null;
		this._remark = null;
		this._remark_coop = "";
		return this;
	}

	/** end: setters and getters for remark **/

	/** start: setters and getters for location_Incidents **/
	location_Incidents(v, co) {
		if (typeof(v) === "undefined") return this._location_Incidents;

		if (v && v.toEntityObject && v.EntityClass.Id !== '892b7f15-12ff-409a-9d9b-5843237ab3a5' && v.EntityClass.Name !== 'Incident') return this;

		v = Array.isArray(v) ? v : [v];

		v.filter(_v => _v && !_v._location_set).forEach(_v => {
			if (!_v.constructor) {
				this.log(undefined, 'location_Incidents', 'EntityObject', 1, "location has no constructor", _v);
			} else if (_v.constructor.name != "Incident") {
				this.log(undefined, 'location_Incidents', 'EntityObject', 1, "location not valid", _v, _v.constructor.name, "Incident");
			} else if (true || this.__sync_on() || this.Id == this.Id || _v.__sync_on() || _v.Id == _v.Id) { // experimental condition, was always true
				_v.location(this);
			}
		});

		this._location_Incidents.push(...v);
		this._location_Incidents_set = new Date();
		if (co) this._location_Incidents_coop = co;

		return this;
	}
	clear_location_Incidents() {
		this._location_Incidents_set = null;
		this._location_Incidents = new Array();
		this._location_Incidents_coop = null;
		return this;
	}
	/** end: setters and getters for location_Incidents **/

	get Set_On() {
		let ret = new Date(Math.max(

			this._active_set,

			this._enabled_set,

			this._code_set,

			this._order_set,

			this._date_set,

			this._name_set,

			this._remark_set,

			this._location_Incidents_set,

		));

		if (!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
		return ret;
	}

	_flatten(depth) {
		let ret = {};
		if (!depth) return ret;

		ret._active_set = this._active_set;
		ret._active_coop = this._active_coop;
		ret.active = this.active() ? this.active() : this.active();

		ret._enabled_set = this._enabled_set;
		ret._enabled_coop = this._enabled_coop;
		ret.enabled = this.enabled() ? this.enabled() : this.enabled();

		ret._code_set = this._code_set;
		ret._code_coop = this._code_coop;
		ret.code = this.code() ? this.code() : this.code();

		ret._order_set = this._order_set;
		ret._order_coop = this._order_coop;
		ret.order = this.order() ? this.order() : this.order();

		ret._date_set = this._date_set;
		ret._date_coop = this._date_coop;
		ret.date = this.date() ? this.date() : this.date();

		ret._name_set = this._name_set;
		ret._name_coop = this._name_coop;
		ret.name = this.name() ? this.name() : this.name();

		ret._remark_set = this._remark_set;
		ret._remark_coop = this._remark_coop;
		ret.remark = this.remark() ? this.remark() : this.remark();

		ret.location_Incidents = this.location_Incidents().map(t => t ? t._flatten(depth - 1) : t);

		return ret;
	}

	_toHash(args, options) {
		options = options || {};
		options.cacheLimit = options.cacheLimit || 5;

		let oHash = {
			args: args,
			_this: {} // this._prune(this) does not work because Id is not excluded for queries; this._prune(this._toDocument()) creates circulars
		};

		if (true || options.depth) {
			oHash._this = this._flatten(options.depth || 3);
		} else {
			oHash._this = this.__export(oHash._this, {
				OPERATORS: true,
				Id: (obj, v) => obj.Id = v,

				"active": (obj, v, eaCode = this._nCode('active', undefined)) => {

					obj[eaCode] = v;

				},

				"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {

					obj[eaCode] = v;

				},

				"code": (obj, v, eaCode = this._nCode('code', undefined)) => {

					obj[eaCode] = v;

				},

				"order": (obj, v, eaCode = this._nCode('order', undefined)) => {

					obj[eaCode] = v;

				},

				"date": (obj, v, eaCode = this._nCode('date', undefined)) => {

					obj[eaCode] = v;

				},

				"name": (obj, v, eaCode = this._nCode('name', undefined)) => {

					obj[eaCode] = v;

				},

				"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {

					obj[eaCode] = v;

				},

				location_Incidents: (obj, v, eaCode = this._nCode('location_Locations', undefined)) => {
					obj[eaCode] = (v || []).map(_v => {
						let h = options.cache ? options.cache.find(_h => _h.obj == _v) : null;
						let ret = h ? h.hash : ((options.cache && options.cache.length < options.cacheLimit) ? _v._toHash(null, options) : null);
						if (options.cache && !h) options.cache.push({
							obj: v,
							hash: ret
						});
						return ret;
					});
				},

			}, "_toHash");
		}

		return options.NoCode ? oHash : this.hashCode(JSON.stringify(oHash));
	}

	async _authorize(username, password, bServer) {

		return await new salesnow.User()._authorize(username, password, bServer);

	}

	_qlSelections(sSet) {
		let ret = [];
		if (!sSet || !sSet.selections) return ret;

		sSet.selections.filter(s => s.selectionSet).forEach(s => {

		});

		return ret;
	}

	async _invokeNode(n, method, data, event, bRaw) {
		// if(!n) return null;

		if (typeof(salesnow._node) === 'undefined') {
			this.log(undefined, '_invokeNode', 'EntityObject', 1, "salesnow._node not defined");
			return null;
		}

		if (event) {

			this.log(undefined, '_invokeNode', 'EntityObject', 2, "Event cannot be defined without the Event class");
			return null;

		}

		let ret = null;

		data = data || {};

		if (typeof(data) === "object") {
			data.__this = data.__this || this._toDocument();
			switch (method) {

			}
		}

		if (!n || salesnow._node._sameNode(n)) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, "Callback");
			ret = await this._invoke(method, data);
		} else if (n.address() && n._sameNode(n) /*actual node*/ ) {
			// this.log(undefined, '_invokeNode', 'EntityObject', 0, n._address, n._port, method);
			try {
				let config = {
					headers: {},
				};
				if (salesnow.__token) config.headers.Authorization = `${salesnow.__token.token_type} ${salesnow.__token.access_token}`;
				ret = await axios.post(`http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/Location/${method}`, data, config);
			} catch (ex) {
				this.log(undefined, '_invokeNode', 'EntityObject', 2, ex);
			}
		} else {

		}

		if (!ret) return null;
		ret = ret.data || ret;
		if (typeof(Flatted) !== "undefined" && ret.__flatted) ret = Flatted.parse(ret.__flatted);

		if (ret.__exception) {
			// an exception occurred at the server
			this.log(undefined, '_invokeNode', 'EntityObject', 2, `Exception at ${n._address}`, ret.__exception);
			return ret;
		}

		switch (method) {

			case "insert":
			case "update":
			case "store":
			case "delete":
			case "find": {
				if (!bRaw) ret = new salesnow.Location(null, this.Tool)._fromDocument(ret);
				break;
			}
			case "findAll": {
				if (ret && !Array.isArray(ret)) {
					this.log(undefined, '_invokeNode', 'EntityObject', 1, "Not an Array in FindAll", ret);
					ret = [ret];
				}
				if (!bRaw && ret.map) ret = ret.map(p => new salesnow.Location(null, this.Tool)._fromDocument(p));
				break;
			}

			default: {}
		}

		return ret;
	}

	async _invoke(method, body, query, authObj) {
		this.log(undefined, '_invoke', 'EntityObject', 0, method, query, body);

		if (typeof(body) === 'string' || (typeof(Buffer) !== 'undefined' && Buffer.isBuffer(body))) {
			try {
				body = JSON.parse(body.toString());
			} catch (ex) {
				this.log(undefined, '_invoke', 'EntityObject', 0, "Body is not a valid JSON", body);
				return;
			}
		}

		let _params = query ? Object.assign(query, body) : body;
		if (typeof(_params) === 'string') _params = JSON.parse(_params);

		if (_params) {
			_params = DotObject.object(_params);
		} else {
			_params = {};
		}

		if (typeof(Flatted) !== "undefined" && _params.__flatted) _params = Flatted.parse(_params.__flatted);

		if (_params.__this) {
			_params.__this = DotObject.object(_params.__this);
			this._fromDocument(_params.__this)._deReference();
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, "_params", _params);

		let arArgs = [];
		switch (method) {

			case "findAll": {
				arArgs.push(_params.depth);
				arArgs.push(_params.objs);
				arArgs.push(_params.start);
				arArgs.push(_params.end);
				break;
			}
			case "find": {
				arArgs.push(_params.depth);
				break;
			}

			default: {
				break;
			}
		}

		let obj = this;

		let ret = null;
		if (!obj) {
			ret = {
				__exception: {
					'-1': `Location._invoke: obj is undefined`
				}
			};
		} else if (!obj[method]) {
			ret = {
				__exception: {
					'-2': `Location._invoke: method ${obj.constructor.name}(${method}) is not found`,
					'obj': obj
				}
			};
		} else {
			ret = await obj[method](...arArgs);
		}

		if (this.Tool.type.name == "SqlDB") {

			if (false && salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end) {
				ret = {
					__exception: {
						'-4': "Uncommitted transactions: " + salesnow.__sqlTransaction.sqls.length,
						'obj': obj
					}
				}
			}

		}

		if (this.Tool.type.name == "ServiceNow") {

		}

		if (this.Tool.type.name == "SalesForce") {

		}

		if (this.Tool.type.name == "GitHub") {

		}

		if (ret && !ret.__exception) {
			salesnow._unRecurse = {};
			if (Array.isArray(ret)) {
				ret = ret.map(r => {
					if (r && r._toDocument) {
						delete salesnow._unRecurse.Location._toDocument;
						return r._toDocument(false, true);
					} else return r;
				});
			} else {
				ret = (ret && ret._toDocument) ? ret._toDocument(false, true) : ret;
			}
		}

		this.log(undefined, '_invoke', 'EntityObject', 0, `${method}: ${this.__time('salesnow.Location.' + method)}`);
		return ret;
	}

	async _loadTools(bStore, source) {

		return new salesnow.User()._loadTools(bStore, source || "Location");

	}

	_parametrize(str, fun, prefix = '{{', postfix = '}}') {

		return new salesnow.User()._parametrize(str, fun, prefix, postfix);

	}

	__sync_on(d) {
		this.___sync_on = this.___sync_on || {};

		if (d) {
			this.___sync_on[this.Tool.name] = d;

			// this.location_Locations().forEach(t => t.__sync_on(d));

			return this;
		}

		return this.___sync_on[this.Tool.name];
	}

	_clone() {
		return new salesnow.Location(this.Id)

			.active(this.active(), this._active_coop)

			.enabled(this.enabled(), this._enabled_coop)

			.code(this.code(), this._code_coop)

			.order(this.order(), this._order_coop)

			.date(this.date(), this._date_coop)

			.name(this.name(), this._name_coop)

			.remark(this.remark(), this._remark_coop)

			.location_Incidents(this.location_Incidents(), this._location_Incidents_coop)

	}

	_map(code, bReverse, context, objFrom, objTo, className, tool, codeType) {
		context = context || 'EntityAttribute';
		//objFrom = objFrom || this._toDocument();
		//objTo = objTo || {};
		className = className || 'Location';
		tool = tool || this.Tool;
		codeType = codeType || JSON.parse(((typeof(this) !== "undefined" && typeof(this._atob) !== "undefined") ? this._atob : (typeof(_FrEMD) !== "undefined" ? _FrEMD._atob : atob))(`e30=`), (key, value) => {
			if (typeof(value) === "string" && value.indexOf("=>") > 0) return eval("(" + value + ")");
			return value;
		})[code];

		return new salesnow.User()._map(code, bReverse, context, objFrom, objTo, className, tool, codeType);

	}

	_nCode(code, oCode) {
		try {
			let context = 'EntityAttribute';
			if (!code && !oCode) {
				context = 'EntityClass';
				code = "Location";
				if (this.Tool.type.name == "ServiceNow" && this.__config('scope')) {
					code = this.__config('scope') + "_st_" + code;
				}
				oCode = undefined;
			}
			let ret = code;
			if (oCode && typeof(oCode) === 'object') {
				ret = oCode[this.Tool.name] || ret;
			}

			ret = this._map(code, false, context) || ret;
			return ret;
		} catch (ex) {
			this.log(undefined, '_nCode', 'EntityObject', 1, ex);
			return code;
		}
	}

	__config(n, nullValue, options) {

		return new salesnow.User().__config(n, nullValue, Object.assign({
			_this: this,
			tool: this.Tool,
			_class: 'Location'
		}, options || {}));

	}

	async _rest(tName = this._nCode(), params, data, method, options = {}) {

		return await new salesnow.User(undefined, this.Tool)._rest(this._nCode(), params, data, method, options);

	}

	_toSQLTable() {
		let ret = {
			sql: `CREATE TABLE IF NOT EXISTS ${this._Q()}${this._nCode()}${this._Q()} (
        ${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY
    
        ,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}
    
        ,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}
    
        `
		};
		ret.sql += '/*Location*/);\n';

		ret = this.__export(ret, {
			Full: true,
			Null: true,
			//Id: (obj, v) => obj.sql += `${this._Q()}${this.__config('idField', '__id')}${this._Q()} CHAR(25) PRIMARY KEY`,

			"active": (obj, v, eaCode = this._nCode('active', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"enabled": (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this._sqlType("Bool", this.__config('type'))}`;

			},

			"code": (obj, v, eaCode = this._nCode('code', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"order": (obj, v, eaCode = this._nCode('order', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this._sqlType("Int", this.__config('type'))}`;

			},

			"date": (obj, v, eaCode = this._nCode('date', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this._sqlType("Date", this.__config('type'))}`;

			},

			"name": (obj, v, eaCode = this._nCode('name', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this._sqlType("String", this.__config('type'))}`;

			},

			"remark": (obj, v, eaCode = this._nCode('remark', undefined)) => {
				// obj.sql += `,${this._Q()}${this._nCode('remark', undefined)}${this._Q()} ${this._sqlType("Text", this.__config('type'))}`;

			},

			location_Incidents: (obj, v, eaCode = this._nCode('location_Locations', undefined)) => obj.sql = v.map(_v => _v._toSQLTable()) + obj.sql,

		}, "_toSQLTable");

		// ret.sql += '/*Location*/);\n';

		ret.sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(ret.sql) : ret.sql;

		this.log(undefined, '_toSQLTable', 'EntityObject', 0, ret.sql);
		return ret.sql;
	}

	_fromSQLTable(table, fields) {
		// table is a json array

		if ((fields && fields.indexOf("active")) || !fields) {
			this.active(table["active"]);
		}

		if ((fields && fields.indexOf("enabled")) || !fields) {
			this.enabled(table["enabled"]);
		}

		if ((fields && fields.indexOf("code")) || !fields) {
			this.code(table["code"]);
		}

		if ((fields && fields.indexOf("order")) || !fields) {
			this.order(table["order"]);
		}

		if ((fields && fields.indexOf("date")) || !fields) {
			this.date(table["date"]);
		}

		if ((fields && fields.indexOf("name")) || !fields) {
			this.name(table["name"]);
		}

		if ((fields && fields.indexOf("remark")) || !fields) {
			this.remark(table["remark"]);
		}

		return this;
	}

	async _sql(sql, source = this) {

		return await new salesnow.User()._sql(sql, this);

	}

	async _filesystem(file, content) {

		return await new salesnow.Content()._filesystem(file, content);

	}

	_fileName(_class = this._nCode(), obj = this._toDocument(true), eaCode = this._nCode('name', undefined)) {

		return new salesnow.User()._fileName(_class, obj, eaCode);

	}

	async _github(file, content) {

		return await new salesnow.User(null, this.Tool)._github(file, content);

	}

	_toSFQuery(fields, objs, bString) {
		let ret = this.__export({
			[this._nCode()]: {
				params: {
					where: {
						and: [],
						or: []
					}
				},
				edges: {
					node: {}
				}
			}
		}, {
			//OPERATORS: true,
			Id: (obj, v) => obj[this._nCode()].params.where.and.push({
				Id: {
					eq: v
				}
			}),

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							(v ? v.toISOString() : null)

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				let op = 'eq';
				let cond = {
					[eaCode]: {
						[op]:

							v

					}
				};
				obj[this._nCode()].params.where.and.push(cond);
			},

		}, "_toSFQuery");

		//Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		if (bString) {
			ret = {
				query: {
					[this._nCode() + 'Query']: {
						uiapi: {
							query: ret
						}
					}
				}
			};
			ret = JSON.stringify(ret, null, 4);
		}

		this.log(undefined, '_toSFQuery', 'EntityObject', 0, ret);
		return ret;
	}

	_toSNQuery(fields, objs) {
		let ret = this.__export({}, {
			OPERATORS: true,
			Id: (obj, v) => obj.sys_id = v,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {

				obj[eaCode] = v;

			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {

				obj[eaCode] = v;

			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {

				obj[eaCode] = v;

			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {

				obj[eaCode] = v;

			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {

				let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
				let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
				if ((v.getHours() == 0 && v.getMinutes() == 0 && v.getSeconds() == 0) || this._date_coop == '=' || !this._date_coop) {
					obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
				} else if (this._date_coop !== 'BETWEEN') {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
				} else {
					obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
				}

			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {

				obj[eaCode] = v;

			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {

				obj[eaCode] = v;

			},

		}, "_toSNQuery");

		Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k]) !== 'undefined').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

		delete ret.OPERATORS;
		Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

		ret = DotObject.dot(ret);

		// avoid sending with no comparison operators
		Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^"));

		this.log(undefined, '_toSNQuery', 'EntityObject', 0, ret);
		return ret;
	}

	__export(obj, options, fun, ...fArgs) {
		if (!obj) return this;

		let _options = (field, obj, eaObj) => {
			try {
				if (options._fields && !options._fields.includes(field)) return;
				if (typeof(options[field]) !== "function") {
					this.log(undefined, '__export', 'EntityObject', 0, `${fun}.options.${field} is not a function`);
					return;
				}
				if (!options.Null) {
					if (field != 'Id' && !this['_' + field + '_set']) return;
					if (Array.isArray(eaObj) && typeof(eaObj.length) !== 'undefined' && !eaObj.length) return;
				}
				if (options.OPERATORS && this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {
					[field]: this['_' + field + '_coop']
				});

				let _ret = options[field](obj, eaObj);

				if (options._map) this._map(field, false, fun, eaObj, obj);
				return _ret;
			} catch (ex) {
				if (!ex.toString().indexOf('RangeError: ')) {
					salesnow.__exportAbort = true;
				}
				this.log(undefined, '__export', 'EntityObject', 1, `Error in ${fun}._options.${field}: ${ex}`, ex);
			}
		};

		if (options.Full || this.__sync_on() || this.Id == this.Id) _options("Id", obj, this.Id);

		_options("active", obj, this.active());

		_options("enabled", obj, this.enabled());

		_options("code", obj, this.code());

		_options("order", obj, this.order());

		_options("date", obj, this.date());

		_options("name", obj, this.name());

		_options("remark", obj, this.remark());

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__export', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(obj) === 'undefined') {
				this.log(undefined, '__export.unRecurse', 'EntityObject', 1, "Null input", obj, fun, fArgs);
				return obj;
			} else if (typeof(obj) === 'string') {
				_id = this.hashCode(obj);
			} else {
				_id = obj._id || obj.id || obj.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (obj.Id && obj.Id == obj.Id) {
					_id = obj.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (obj.EntityClass) {
					_id = obj.EntityClass.Id || obj.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "b6dcfc12-3c79-4dbd-9cbe-da2d4f7a29fd" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Location = salesnow._unRecurse.Location || {};
			salesnow._unRecurse.Location[fun] = salesnow._unRecurse.Location[fun] || {};
			salesnow._unRecurse.Location[fun][_id] = salesnow._unRecurse.Location[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Location[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, obj, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, obj, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__export.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, obj);
			salesnow._unRecurse.Location[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: obj,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__export.unRecurse', 'EntityObject', 2, obj, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("_THIS", obj, this._THIS);

		_options("location_Incidents", obj, this.location_Incidents());

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['location_Incidents']).includes(k)).forEach(k => _options(k, obj, true));

		return obj;
	}

	__import(obj, options, fun, ...fArgs) {
		// if(!obj) return this;
		if (typeof(obj) !== 'object') {
			this.log(undefined, '__import', 'EntityObject', 1, `${fun}: Not an object: ${typeof(obj)}`, obj);
			return this;
		}

		let _options = (field, obj) => {
			if (options._fields && !options._fields.includes(field)) return;
			if (!obj) return;
			if (Array.isArray(obj) && !obj.length) return;

			try {
				if (options._map) this._map(field, true, fun, obj, obj);
				if (options[field] && typeof(options[field]) === "function") return options[field](obj);
			} catch (ex) {
				this.log(undefined, '__import', 'EntityObject', 1, `Error ${ex} in ${fun}.options.${field}`, ex);
			}
		};

		_options("_THIS", obj);
		_options("Id", obj);

		_options("active", obj);

		_options("enabled", obj);

		_options("code", obj);

		_options("order", obj);

		_options("date", obj);

		_options("name", obj);

		_options("remark", obj);

		// can we do deReference here?

		let v = undefined;
		try {
			salesnow.unRecurseAbort = salesnow.unRecurseAbort || {};
			if (salesnow.unRecurseAbort[fun]) {
				this.log(undefined, '__import', 'EntityObject', 1, `Aborting as per salesnow.unRecurseAbort.${fun}`);

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			let _id = null;
			if (typeof(this) === 'undefined') {
				this.log(undefined, '__import.unRecurse', 'EntityObject', 1, "Null input", this, fun, fArgs);
				return this;
			} else if (typeof(this) === 'string') {
				_id = this.hashCode(this);
			} else {
				_id = this._id || this.id || this.ID;
			}

			if (typeof(_id) === 'undefined' || !_id) {
				if (this.Id && this.Id == this.Id) {
					_id = this.Id;
				} else if (this.Id == this.Id) {
					_id = this.Id;
				} else if (this.EntityClass) {
					_id = this.EntityClass.Id || this.EntityClass.Name;
				} else {
					_id = this.EntityClass.Id || "b6dcfc12-3c79-4dbd-9cbe-da2d4f7a29fd" || "NULL";
				}
			}

			salesnow._unRecurse = salesnow._unRecurse || {};
			salesnow._unRecurse.Location = salesnow._unRecurse.Location || {};
			salesnow._unRecurse.Location[fun] = salesnow._unRecurse.Location[fun] || {};
			salesnow._unRecurse.Location[fun][_id] = salesnow._unRecurse.Location[fun][_id] || {};

			let _hash = this._toHash(fArgs, {
				depth: (["_toHash"].indexOf(fun) >= 0) ? 3 : undefined,
				cache: (["_toHash"].indexOf(fun) >= 0) ? [] : undefined
			});

			v = salesnow._unRecurse.Location[fun][_id][_hash];
			if (v && Math.abs(new Date().getTime() - v.date) < (1000 * 0.2)) {
				let thisSetOn = ((["_toHash"].indexOf(fun) >= 0) ? new Date(0) : (this.Set_On || new Date(0)));
				if (thisSetOn >= v.date) {
					// a newer copy is created AFTER/DURING the recursive call!!
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Spawning in fun", _id, _hash, fun, this, v);
				} else if ((v.date - thisSetOn.getTime()) >= 0) {
					v.reused++;
					this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Selected hash", _id, _hash, fun, this, v);
				}

				if (typeof(v) === 'undefined') return v;
				return (v.obj && v.obj._id) ? {
					_id: v.obj._id
				} : v.obj;
				return v.obj;

			}

			this.log(undefined, '__import.unRecurse', 'EntityObject', 0, "Pushing hash", _id, _hash, fun, this);
			salesnow._unRecurse.Location[fun][_id][_hash] = {
				date: new Date().getTime(),
				args: JSON.stringify(fArgs),
				obj: this,
				reused: 0,
			};
		} catch (unRecEx) {
			if (!unRecEx.toString().indexOf('RangeError: ')) {
				salesnow.unRecurseAbort[fun] = true;
			}
			this.log(undefined, '__import.unRecurse', 'EntityObject', 2, this, fun, fArgs, unRecEx.toString());

			if (typeof(v) === 'undefined') return v;
			return (v.obj && v.obj._id) ? {
				_id: v.obj._id
			} : v.obj;
			return v.obj;

		}

		_options("location_Incidents", obj);

		Object.keys(options).filter(k => typeof(options[k]) === 'function' && !['Id', '_THIS'].concat(['active', 'enabled', 'code', 'order', 'date', 'name', 'remark']).concat(['location_Incidents']).includes(k)).forEach(k => _options(k, obj));

		return this;
	}

	_toDBObject(fields, bNoRef) {
		if (!this.Id) {
			this.log(undefined, '_toDBObject', 'EntityObject', 2, "Invalid ID", this.EntityClass.Name, this.Tool);
		}
		let ret = {
			[this.__config('idField', '__id')]: "'" + this.Id + "'"
		};

		if (((fields && fields.indexOf("active")) || !fields) && this._active_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.active();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('active', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("enabled")) || !fields) && this._enabled_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.enabled();

			fValue = v ? 1 : 0;
			if (this.Tool.type.name == 'Neo4j') fValue = fValue ? 'True' : 'False';

			ret[this._nCode('enabled', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("code")) || !fields) && this._code_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.code();

			fValue = "'" + v + "'";

			ret[this._nCode('code', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("order")) || !fields) && this._order_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.order();

			fValue = v || '0';

			ret[this._nCode('order', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("date")) || !fields) && this._date_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.date();

			try {
				fValue = "'" + (v ? v.toISOString() : "1970-1-1") + "'";
				if (this.__config('type') == 'mysql') {
					fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
				}
			} catch (ex) {
				fValue = "'" + v + "'";
			}
			if (this.Tool.type.name == 'Neo4j') fValue = 'datetime(' + fValue + ')';

			ret[this._nCode('date', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("name")) || !fields) && this._name_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.name();

			fValue = "'" + v + "'";

			ret[this._nCode('name', undefined) + ""] = fValue;
		}

		if (((fields && fields.indexOf("remark")) || !fields) && this._remark_set && (!bNoRef || true)) {
			let fValue = null;
			let v = this.remark();

			fValue = "'" + ((v && v.replace) ? v.replace(/\'/g, "\'\'") : v) + "'";

			ret[this._nCode('remark', undefined) + ""] = fValue;
		}

		this.log(undefined, '_toDBObject', 'EntityObject', 0, ret);
		return ret;
	}

	_Q() {
		let _o = '"';
		let _q = _o;

		if (['SalesForce'].indexOf(this.Tool.type.name) == 0) {
			_o = _q = "";
		} else if (this.__config('type') == 'mysql' || this.Tool.type.name == 'Neo4j') {
			_o = _q = '`';
		} else if (this.__config('type') == 'sqlserver') {
			_o = '[';
			_q = ']';
		} else if (this.__config('apiKey') == 'airtable') {
			_o = '{';
			_q = '}';
		}
		return _o ? _q : _o;
	}

	_fieldGroups(fgs = {}) {
		this.__fieldGroups = fgs;
		return this;
	}

	_fieldAggregates(fas = {}) {
		this.__fieldAggregates = fas;
		return this;
	}

	_toFieldsSQL(fields) {

		fields = fields || [this.__config('idField', '__id'), this._nCode('active', undefined), this._nCode('enabled', undefined), this._nCode('code', undefined), this._nCode('order', undefined), this._nCode('date', undefined), this._nCode('name', undefined), this._nCode('remark', undefined)];
		fields = Array.isArray(fields) ? fields : [fields];

		if (this.__fieldGroups) {
			// {field: order}
			fields = [];

			if (this.__fieldGroups.active) fields.push(`${this._nCode('active', undefined)}`);

			if (this.__fieldGroups.enabled) fields.push(`${this._nCode('enabled', undefined)}`);

			if (this.__fieldGroups.code) fields.push(`${this._nCode('code', undefined)}`);

			if (this.__fieldGroups.order) fields.push(`${this._nCode('order', undefined)}`);

			if (this.__fieldGroups.date) fields.push(`${this._nCode('date', undefined)}`);

			if (this.__fieldGroups.name) fields.push(`${this._nCode('name', undefined)}`);

		}
		return fields;
	}

	_fromDBObject(r = {}) {
		try {
			return this.__import(r, {
				Id: obj => this.Id = obj[this.__config('idField', '__id')],

				active: (obj, eaCode = this._nCode('active', undefined)) => {
					this.active(obj[eaCode]);
				},

				enabled: (obj, eaCode = this._nCode('enabled', undefined)) => {
					this.enabled(obj[eaCode]);
				},

				code: (obj, eaCode = this._nCode('code', undefined)) => {
					this.code(obj[eaCode]);
				},

				order: (obj, eaCode = this._nCode('order', undefined)) => {
					this.order(obj[eaCode]);
				},

				date: (obj, eaCode = this._nCode('date', undefined)) => {
					this.date(obj[eaCode]);
				},

				name: (obj, eaCode = this._nCode('name', undefined)) => {
					this.name(obj[eaCode]);
				},

				remark: (obj, eaCode = this._nCode('remark', undefined)) => {
					this.remark(obj[eaCode]);
				},

			}, "_fromDBObject");
		} catch (ex) {
			this.log(undefined, '_fromDBObject', 'EntityObject', 2, ex);
		}
	}

	_toSelectHeader(fields) {
		let ret = {
			table: this._nCode(),
			fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
			joins: {},
		};

		if (fields) return ret;

		ret.joins = this.__export({}, {
			// Null: true,

		}, "_toSelectHeader");

		this.log(undefined, '_toSelectHeader', 'EntityObject', 0, ret);

		return ret;
	}

	_toSelectSQL(fields) {
		let sql = "select ";

		let tPref = `${this._Q()}${this._nCode()}${this._Q()}`;

		let header = this._toSelectHeader(fields);

		sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
		Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));

		if (this.__fieldAggregates) {
			// {field: function}

			if (this.__fieldAggregates.active) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.active}(${this._Q()}${this._nCode('active', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.enabled) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.enabled}(${this._Q()}${this._nCode('enabled', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.code) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.code}(${this._Q()}${this._nCode('code', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.order) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.order}(${this._Q()}${this._nCode('order', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.date) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.date}(${this._Q()}${this._nCode('date', undefined)}${this._Q()})`;

			if (this.__fieldAggregates.name) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.name}(${this._Q()}${this._nCode('name', undefined)}${this._Q()})`;

		}

		sql += ` from ${tPref} `;

		Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} `);

		sql += ` where 1=1`;

		sql = this.__export({
			sql: sql
		}, {
			_fields: (this.__sync_on() || this.Id == this.Id) ? ['Id'] : undefined,
			Null: true,
			_THIS: obj => {
				if (!this._THIS || !this._THIS.length) return;

				obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t._toSelectSQL(t.__config('idField') || '__id')).join(' UNION ALL ') + ")";
			},
			Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`,

			active: (obj, v, eaCode = this._nCode('active', undefined)) => {
				if (!this._active_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			enabled: (obj, v, eaCode = this._nCode('enabled', undefined)) => {
				if (!this._enabled_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + "=" + " ";

				if (typeof(v) === "boolean") {
					obj.sql += "'" + (v ? "1" : "0") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			code: (obj, v, eaCode = this._nCode('code', undefined)) => {
				if (!this._code_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._code_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + v + ((this._code_coop == "LIKE" || !this._code_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			order: (obj, v, eaCode = this._nCode('order', undefined)) => {
				if (!this._order_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._order_coop || "LIKE") + " ";

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			date: (obj, v, eaCode = this._nCode('date', undefined)) => {
				if (!this._date_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._date_coop || "LIKE") + " ";

				if (v && v.toISOString) {
					if (this.__config('type') == 'sqlite') {
						obj.sql += "strftime('%s', '" + v.toISOString() + "')";
					} else {
						obj.sql += "'" + v.toISOString() + "'";
					}
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			name: (obj, v, eaCode = this._nCode('name', undefined)) => {
				if (!this._name_set) return;

				obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + (this._name_coop || "LIKE") + " ";

				if (typeof(v) === "string") {
					obj.sql += "'" + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + v + ((this._name_coop == "LIKE" || !this._name_coop) ? "%" : "") + "'";
					return;
				}

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			remark: (obj, v, eaCode = this._nCode('remark', undefined)) => {
				if (!this._remark_set) return;

				return;

				if (v && v.EntityClass) {
					obj.sql += "(" + v._toSelectSQL() + ")";
				} else {
					obj.sql += "'" + v + "'";
				}
			},

			location_Incidents: (obj, v, eaCode = this._nCode('location_Locations', undefined)) => {
				if (!this._location_Incidents_set) return;

				let squeries = (v || []).filter(t => t).map(t => t._toSelectSQL("location.id"));

				let jOP = 'UNION ALL';
				let inOP = 'IN';

				obj.sql += ``;

				if (this._location_Incidents_coop == '!=' || this._location_Incidents_coop == 'NOT IN') {
					inOP = 'NOT IN';
				} else if (this._location_Incidents_coop == '=' || this._location_Incidents_coop == 'IN') {} else if (this._location_Incidents_coop == '==') {
					jOP = 'INTERSECT';
				}

				obj.sql += `and /*location_Incidents*/ ${tPref}.${this._Q()}${this.__config('idField', '__id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
			},

		}, "_toSelectSQL", fields).sql;

		if (this.__fieldGroups) {
			if (Object.keys(this.__fieldGroups).length) sql += " group by ";

			if (this.__fieldGroups.active) sql += `${this._Q()}${this._nCode('active', undefined)}${this._Q()} ${this.__fieldGroups.active}`;

			if (this.__fieldGroups.enabled) sql += `${this._Q()}${this._nCode('enabled', undefined)}${this._Q()} ${this.__fieldGroups.enabled}`;

			if (this.__fieldGroups.code) sql += `${this._Q()}${this._nCode('code', undefined)}${this._Q()} ${this.__fieldGroups.code}`;

			if (this.__fieldGroups.order) sql += `${this._Q()}${this._nCode('order', undefined)}${this._Q()} ${this.__fieldGroups.order}`;

			if (this.__fieldGroups.date) sql += `${this._Q()}${this._nCode('date', undefined)}${this._Q()} ${this.__fieldGroups.date}`;

			if (this.__fieldGroups.name) sql += `${this._Q()}${this._nCode('name', undefined)}${this._Q()} ${this.__fieldGroups.name}`;

		}

		if (sql.endsWith("where 1=1")) {
			// sql = sql.replace("where 1=1", "where 1=0");
		} else {
			sql = sql.replace("where 1=1 and ", "where ");
		}

		sql = typeof(sqlFormatter) !== 'undefined' ? sqlFormatter.format(sql) : sql;
		this.log(undefined, '_toSelectSQL', 'EntityObject', 0, sql);

		return sql;
	}

	_toPaths() {
		let ret = this.__export({}, {
			_THIS: obj => {},

			location_Incidents: (obj, v, eaCode = this._nCode('location_Locations', undefined)) => obj.location_Incidents = v.map(_v => _v._toPaths()),

		}, "_toPaths");
		// return ret;
		return Object.keys(ret).map(k => ({
			[k]: ret[k]
		}));
	}

	_toUpdateSQL(fields) {
		let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
		let sql = `update ${this._Q()}${this._nCode()}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', '__id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
		this.log(undefined, '_toUpdateSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_toInsertSQL(fields) {
		let obj = this._toDBObject(fields);
		let sql = `insert into ${this._Q()}${this._nCode()}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
		this.log(undefined, '_toInsertSQL', 'EntityObject', 0, sql);
		return sql;
	}

	_copyFrom(obj) {
		if (!obj) return null;
		return this._revert(obj);
	}

	async _storeEntityClass(depth) {
		try {
			if (typeof(depth) === "undefined") depth = this.__config("create");
			if (!depth) return;

			salesnow._storeEntityClass = salesnow._storeEntityClass || {};
			if (salesnow._storeEntityClass.Location) return;
			salesnow._storeEntityClass.Location = true;

			this.log(undefined, '_storeEntityClass', 'EntityObject', 0, `storing '${this.Tool.type.name}' model with depth ${depth}`);

			if (this.Tool.type.name == "SqlDB") {

				let sql = new salesnow.Location()

					.location_Incidents(new salesnow.Incident())

					._toSQLTable(depth);
				this.log(undefined, '_storeEntityClass', 'EntityObject', 0, sql);
				await this._sql(sql);

			}

			if (this.Tool.type.name == "ServiceNow") {

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

			}

		} catch (ex) {
			this.log(undefined, '_storeEntityClass', 'EntityObject', 2, ex);
		}
		return this;
	}

	async DSConnect(tool = this.Tool) {

		return await new salesnow.User().DSConnect(tool);

	}
	/* End: Util functions */

	_matches(query) {
		try {
			if (!query || !query.EntityClass || query.EntityClass.Name != "Location") return false;

			let oMatch = this.__export({}, {
				Full: true,
				Null: true,
				Id: (obj, v) => obj._id = this.Id == query.Id,

				active: (obj, v) => {

					obj.active = v == query.active();

					if (
						(this._active_set && !query._active_set) ||
						false
					) obj.active = true;

					if (
						(!this._active_set && query._active_set) ||

						false
					) obj.active = false;
				},

				enabled: (obj, v) => {

					obj.enabled = v == query.enabled();

					if (
						(this._enabled_set && !query._enabled_set) ||
						false
					) obj.enabled = true;

					if (
						(!this._enabled_set && query._enabled_set) ||

						false
					) obj.enabled = false;
				},

				code: (obj, v) => {

					obj.code = v == query.code();

					if (
						(this._code_set && !query._code_set) ||
						false
					) obj.code = true;

					if (
						(!this._code_set && query._code_set) ||

						false
					) obj.code = false;
				},

				order: (obj, v) => {

					obj.order = v == query.order();

					if (
						(this._order_set && !query._order_set) ||
						false
					) obj.order = true;

					if (
						(!this._order_set && query._order_set) ||

						false
					) obj.order = false;
				},

				date: (obj, v) => {

					obj.date = v == query.date();

					if (
						(this._date_set && !query._date_set) ||
						false
					) obj.date = true;

					if (
						(!this._date_set && query._date_set) ||

						false
					) obj.date = false;
				},

				name: (obj, v) => {

					obj.name = v == query.name();

					if (
						(this._name_set && !query._name_set) ||
						false
					) obj.name = true;

					if (
						(!this._name_set && query._name_set) ||

						false
					) obj.name = false;
				},

				remark: (obj, v) => {

					obj.remark = v == query.remark();

					if (
						(this._remark_set && !query._remark_set) ||
						false
					) obj.remark = true;

					if (
						(!this._remark_set && query._remark_set) ||

						false
					) obj.remark = false;
				},

				location_Incidents: (obj, v) => {
					obj.location_Incidents = v.map(_v => query.location_Incidents().any(q => _v._matches(q)));
				},

			}, "_matches");

			this.log(undefined, '_matches', 'EntityObject', 0, oMatch);

			return Object.keys(oMatch).every(k => oMatch[k]);
		} catch (ex) {
			this.log(undefined, '_matches', 'EntityObject', 2, ex);
		}
	}

	_matching(query) {
		try {
			let ret = [];

			let matches = this.__export({}, {

				location_Incidents: (obj, v) => {
					obj.location_Incidents = v.map(_v => _v._matching(query)).flat();
				},

			}, "_matching");

			this.log(undefined, '_matching', 'EntityObject', 0, "matches", matches);

			ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m != query);

			this.log(undefined, '_matching', 'EntityObject', 0, "ret", ret);
			return ret;
		} catch (ex) {
			this.log(undefined, '_matching', 'EntityObject', 2, ex);
		}
	}

	_deReference(root) {
		try {
			if (!root) root = this;

			let isQuery = true

				&&
				(this._active_set ? false : true)

				&&
				(this._enabled_set ? false : true)

				&&
				(this._code_set ? false : true)

				&&
				(this._order_set ? false : true)

				&&
				(this._date_set ? false : true)

				&&
				(this._name_set ? false : true)

				&&
				(this._remark_set ? false : true);

			if (root != this && isQuery) {
				let myMatches = root._matching(this);
				if (!myMatches.length) return this;
				this.log(undefined, '_deReference', 'EntityObject', 0, "Query", myMatches.legth);
				return myMatches[0];
			}

			this.__export({}, {

				location_Incidents: (obj, v) => {
					v.filter(ta => ta).forEach((ta, i) => {
						let ret = ta._deReference(root);
						if (ret != ta) this.location_Incidents()[i] = ret;
					});
				},

			}, "_deReference");

			return this;
		} catch (ex) {
			this.log(undefined, '_deReference', 'EntityObject', 2, ex);
		}
	}

	_fromDocument(obj, bTool, bNoNull) {
		if (!obj) return this;
		if (obj._fromDocument) return obj;

		if (typeof(obj) === 'string') {
			try {
				obj = JSON.parse(obj);
			} catch (ex) {
				this.log(undefined, '_fromDocument', 'EntityObject', 1, "Invalid JSON", obj);
			}
		}

		this.__import(obj, {
			_map: bTool,
			_THIS: obj => this.THIS(obj.THIS, obj.OPERATORS ? obj.OPERATORS.THIS : undefined),
			Id: obj => {
				this.Id = obj[this.__config('idField', '__id', {
					tool: obj.__tool
				})];
				if (obj.__tool) {
					try {
						this.Tool = obj.__tool;
					} catch (ex) {
						this.log(undefined, '_fromDocument', 'EntityObject', 2, ex);
					}
				}
			},

			active: (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._active_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.active(ref);

			},

			enabled: (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._enabled_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.enabled(ref);

			},

			code: (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._code_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.code(ref);

			},

			order: (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._order_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.order(ref);

			},

			date: (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._date_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				if (this.Tool.type.name == "SqlDB") {
					if (typeof(moment) !== "undefined" && typeof(this.Tool.sys_properties) !== "undefined") {
						ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
					} else {
						ref = new Date(ref);
					}
				} else {
					ref = new Date(Date.parse(ref + " GMT"));
				}
				this.date(ref);

			},

			name: (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._name_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.name(ref);

			},

			remark: (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {
				if (obj.OPERATORS && obj.OPERATORS[eaCode]) {
					this._remark_coop = obj.OPERATORS[eaCode];
				}

				let ref = obj[eaCode];
				if (typeof(ref) === 'undefined') return;
				if (bNoNull && ref === null) return;

				this.remark(ref);

			},

			location_Incidents: (obj, v, eaCode = (bTool ? this._nCode('location_Locations', undefined) : "location_Incidents")) => this.location_Incidents(obj[eaCode] ? obj[eaCode].map(_v => new salesnow.Incident()._fromDocument(_v, bTool)) : undefined, obj.OPERATORS ? obj.OPERATORS[eaCode] : undefined),

		}, "_fromDocument");

		return this;
	}

	_toDocument(bTool, bFull, bNull) {
		let ret = {};

		if (!bTool) {
			ret.__generated = new Date();
			if (this.Tool.name) {
				ret.__tool = {
					name: this.Tool.name,
					type: {
						name: this.Tool.type.name,
					}
				};
			}
			if (salesnow._node) {
				ret.__node = {
					code: salesnow._node.code()
				};
			}
		}

		return this.__export(ret, {
			Full: bFull,
			Null: bNull,
			_map: bTool,
			_THIS: (obj, v) => {
				if (bTool) return;
				obj.THIS = this._THIS.map(t => t._toDocument(bTool, bFull, bNull));
				obj.OPERATORS = obj.OPERATORS || {};
				obj.OPERATORS.THIS = this._THIS_coop;
			},
			Id: (obj, v) => obj[this.__config('idField', '__id')] = v,

			"active": (obj, v, eaCode = (bTool ? this._nCode('active', undefined) : "active")) => {

				obj[eaCode] = v;

				if (this._active_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._active_coop;
				}
			},

			"enabled": (obj, v, eaCode = (bTool ? this._nCode('enabled', undefined) : "enabled")) => {

				obj[eaCode] = v;

				if (this._enabled_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._enabled_coop;
				}
			},

			"code": (obj, v, eaCode = (bTool ? this._nCode('code', undefined) : "code")) => {

				obj[eaCode] = v;

				if (this._code_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._code_coop;
				}
			},

			"order": (obj, v, eaCode = (bTool ? this._nCode('order', undefined) : "order")) => {

				obj[eaCode] = v;

				if (this._order_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._order_coop;
				}
			},

			"date": (obj, v, eaCode = (bTool ? this._nCode('date', undefined) : "date")) => {

				obj[eaCode] = v ? v.toISOString() : null;
				if (this.Tool.type.name == "ServiceNow") obj[eaCode] = obj[eaCode].replace(/\.[0-9]*Z/g, '');

				if (this._date_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._date_coop;
				}
			},

			"name": (obj, v, eaCode = (bTool ? this._nCode('name', undefined) : "name")) => {

				obj[eaCode] = v;

				if (this._name_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._name_coop;
				}
			},

			"remark": (obj, v, eaCode = (bTool ? this._nCode('remark', undefined) : "remark")) => {

				obj[eaCode] = v;

				if (this._remark_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._remark_coop;
				}
			},

			location_Incidents: (obj, v, eaCode = (bTool ? this._nCode('location_Locations', undefined) : "location_Incidents")) => {
				obj[eaCode] = v.map(_v => _v._toDocument(bTool, bFull, bNull));
				if (this._location_Incidents_coop) {
					obj.OPERATORS = obj.OPERATORS || {};
					obj.OPERATORS[eaCode] = this._location_Incidents_coop;
				}
			},

		}, "_toDocument", bTool, bFull, bNull);
	}

	async get(name) {
		if (!this.Id) return null;
		var t = null;
		$.each(name.split('.'), (_, f) => {
			t = {
				EntityObject: t ? {
					Active: true,
					ValueEntities: [t]
				} : {
					Active: true,
					Id: this.Id
				},
				EntityAttribute: {
					Name: f,
					OPERATORS: {
						Name: "="
					}
				}
			};
		});
		return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
			this.log(undefined, 'get', 'EntityObject', 0, ev);
			if (ev === null) return null;
			if (ev.EntityAttribute.IsString) return ev.StringValue;
			if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
			if (ev.EntityAttribute.IsInt) return ev.IntValue;
			if (ev.EntityAttribute.IsLong) return ev.LongValue;
			if (ev.EntityAttribute.IsText) return ev.TextValue;
			if (ev.EntityAttribute.IsBool) return ev.BoolValue;

			if (!ev.ObjectValue) return null;

			return new salesnow[$.grep(salesnow.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
		});
	}

	/* START: sr function copies */

	/* CLONE::START: sr._() */
	_(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._(...params);
		} else {
			return new salesnow.User()._(...params);
		}
	}
	/* CLONE::END  : sr._() */

	/* CLONE::START: sr.buildURL() */
	buildURL(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.buildURL(...params);
		} else {
			return new salesnow.User().buildURL(...params);
		}
	}
	/* CLONE::END  : sr.buildURL() */

	/* CLONE::START: sr.$_REQUEST() */
	$_REQUEST(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.$_REQUEST(...params);
		} else {
			return new salesnow.User().$_REQUEST(...params);
		}
	}
	/* CLONE::END  : sr.$_REQUEST() */

	/* CLONE::START: sr.param() */
	param(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.param(...params);
		} else {
			return new salesnow.User().param(...params);
		}
	}
	/* CLONE::END  : sr.param() */

	/* CLONE::START: sr._toXML() */
	_toXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr._toXML(...params);
		} else {
			return new salesnow.User()._toXML(...params);
		}
	}
	/* CLONE::END  : sr._toXML() */

	/* CLONE::START: sr.coop() */
	coop(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.coop(...params);
		} else {
			return new salesnow.User().coop(...params);
		}
	}
	/* CLONE::END  : sr.coop() */

	/* CLONE::START: sr.OR() */
	OR(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.OR(...params);
		} else {
			return new salesnow.User().OR(...params);
		}
	}
	/* CLONE::END  : sr.OR() */

	/* CLONE::START: sr.myReplace() */
	myReplace(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.myReplace(...params);
		} else {
			return new salesnow.User().myReplace(...params);
		}
	}
	/* CLONE::END  : sr.myReplace() */

	/* CLONE::START: sr.sendXML() */
	sendXML(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.sendXML(...params);
		} else {
			return new salesnow.User().sendXML(...params);
		}
	}
	/* CLONE::END  : sr.sendXML() */

	/* CLONE::START: sr.processResponse() */
	processResponse(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResponse(...params);
		} else {
			return new salesnow.User().processResponse(...params);
		}
	}
	/* CLONE::END  : sr.processResponse() */

	/* CLONE::START: sr.processResult() */
	processResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.processResult(...params);
		} else {
			return new salesnow.User().processResult(...params);
		}
	}
	/* CLONE::END  : sr.processResult() */

	/* CLONE::START: sr.serverDate() */
	serverDate(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.serverDate(...params);
		} else {
			return new salesnow.User().serverDate(...params);
		}
	}
	/* CLONE::END  : sr.serverDate() */

	/* CLONE::START: sr.addMSeconds() */
	addMSeconds(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.addMSeconds(...params);
		} else {
			return new salesnow.User().addMSeconds(...params);
		}
	}
	/* CLONE::END  : sr.addMSeconds() */

	/* CLONE::START: sr.runScript() */
	runScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runScript(...params);
		} else {
			return new salesnow.User().runScript(...params);
		}
	}
	/* CLONE::END  : sr.runScript() */

	/* CLONE::START: sr.runSRScript() */
	runSRScript(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.runSRScript(...params);
		} else {
			return new salesnow.User().runSRScript(...params);
		}
	}
	/* CLONE::END  : sr.runSRScript() */

	/* CLONE::START: sr.hashCode() */
	hashCode(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.hashCode(...params);
		} else {
			return new salesnow.User().hashCode(...params);
		}
	}
	/* CLONE::END  : sr.hashCode() */

	/* CLONE::START: sr.groupBy() */
	groupBy(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.groupBy(...params);
		} else {
			return new salesnow.User().groupBy(...params);
		}
	}
	/* CLONE::END  : sr.groupBy() */

	/* CLONE::START: sr.ShowDebug() */
	ShowDebug(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowDebug(...params);
		} else {
			return new salesnow.User().ShowDebug(...params);
		}
	}
	/* CLONE::END  : sr.ShowDebug() */

	/* CLONE::START: sr.cacheResult() */
	cacheResult(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.cacheResult(...params);
		} else {
			return new salesnow.User().cacheResult(...params);
		}
	}
	/* CLONE::END  : sr.cacheResult() */

	/* CLONE::START: sr.toHex() */
	toHex(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.toHex(...params);
		} else {
			return new salesnow.User().toHex(...params);
		}
	}
	/* CLONE::END  : sr.toHex() */

	/* CLONE::START: sr.ShowError() */
	ShowError(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ShowError(...params);
		} else {
			return new salesnow.User().ShowError(...params);
		}
	}
	/* CLONE::END  : sr.ShowError() */

	/* CLONE::START: sr.Equals() */
	Equals(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.Equals(...params);
		} else {
			return new salesnow.User().Equals(...params);
		}
	}
	/* CLONE::END  : sr.Equals() */

	/* CLONE::START: sr.ipAddress() */
	ipAddress(...params) {
		if (typeof(window) !== "undefined" && typeof(window.sr) !== "undefined") {
			return window.sr.ipAddress(...params);
		} else {
			return new salesnow.User().ipAddress(...params);
		}
	}
	/* CLONE::END  : sr.ipAddress() */

	/* END: sr function copies */

	/* START: _FrEMD function copies */

	/* CLONE::START: _FrEMD._attr() */
	_attr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._attr(...params);
		} else {
			return new salesnow.User()._attr(...params);
		}
	}
	/* CLONE::END  : _FrEMD._attr() */

	/* CLONE::START: _FrEMD._unique() */
	_unique(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._unique(...params);
		} else {
			return new salesnow.User()._unique(...params);
		}
	}
	/* CLONE::END  : _FrEMD._unique() */

	/* CLONE::START: _FrEMD._flip() */
	_flip(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._flip(...params);
		} else {
			return new salesnow.User()._flip(...params);
		}
	}
	/* CLONE::END  : _FrEMD._flip() */

	/* CLONE::START: _FrEMD._refreshAPI() */
	_refreshAPI(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._refreshAPI(...params);
		} else {
			return new salesnow.User()._refreshAPI(...params);
		}
	}
	/* CLONE::END  : _FrEMD._refreshAPI() */

	/* CLONE::START: _FrEMD.__scope() */
	__scope(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__scope(...params);
		} else {
			return new salesnow.User().__scope(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__scope() */

	/* CLONE::START: _FrEMD.sr() */
	sr(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.sr(...params);
		} else {
			return new salesnow.User().sr(...params);
		}
	}
	/* CLONE::END  : _FrEMD.sr() */

	/* CLONE::START: _FrEMD._atob() */
	_atob(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._atob(...params);
		} else {
			return new salesnow.User()._atob(...params);
		}
	}
	/* CLONE::END  : _FrEMD._atob() */

	/* CLONE::START: _FrEMD._btoa() */
	_btoa(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._btoa(...params);
		} else {
			return new salesnow.User()._btoa(...params);
		}
	}
	/* CLONE::END  : _FrEMD._btoa() */

	/* CLONE::START: _FrEMD.__time() */
	__time(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.__time(...params);
		} else {
			return new salesnow.User().__time(...params);
		}
	}
	/* CLONE::END  : _FrEMD.__time() */

	/* CLONE::START: _FrEMD._wait() */
	_wait(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._wait(...params);
		} else {
			return new salesnow.User()._wait(...params);
		}
	}
	/* CLONE::END  : _FrEMD._wait() */

	/* CLONE::START: _FrEMD._sqlType() */
	_sqlType(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._sqlType(...params);
		} else {
			return new salesnow.User()._sqlType(...params);
		}
	}
	/* CLONE::END  : _FrEMD._sqlType() */

	/* CLONE::START: _FrEMD._uuid() */
	_uuid(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._uuid(...params);
		} else {
			return new salesnow.User()._uuid(...params);
		}
	}
	/* CLONE::END  : _FrEMD._uuid() */

	/* CLONE::START: _FrEMD.require() */
	require(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD.require(...params);
		} else {
			return new salesnow.User().require(...params);
		}
	}
	/* CLONE::END  : _FrEMD.require() */

	/* CLONE::START: _FrEMD._include() */
	_include(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._include(...params);
		} else {
			return new salesnow.User()._include(...params);
		}
	}
	/* CLONE::END  : _FrEMD._include() */

	/* CLONE::START: _FrEMD._beautify() */
	_beautify(...params) {
		if (typeof(window) !== "undefined" && typeof(window._FrEMD) !== "undefined") {
			return window._FrEMD._beautify(...params);
		} else {
			return new salesnow.User()._beautify(...params);
		}
	}
	/* CLONE::END  : _FrEMD._beautify() */

	/* END: _FrEMD function copies */

	i18n(ev, v) {
		if (typeof(window) === "undefined" || typeof(window.i18n_store) === "undefined") return v;

		if (!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString) {
			return v;
		} else {
			return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
		}
	}

	toString() {

		return this._name;

	}

	EntityValue(aName) {
		let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);

		if (!ret) {
			// an attribute that has yet no known entity value
			ret = {
				Active: true,
				OPERATORS: {},
				EntityAttribute: {
					Name: aName,
					Active: true,
					EntityClass: {
						Id: this.EntityClass.Id
					}
				}
			};
			this.EntityValues.push(ret);
		}

		return ret;
	}

	async find(depth = 1) {
		return (await this.findAll(depth))[0];
	}

	__assertValid(bSync) {
		let error = {};

		if (
			/*
			((oScope) => {
			    let ret = true;
			    if(typeof(ret)==="function"){
			        ret = ret(oScope);
			    }
			    return ret;
			})(salesnow)
			 || */
			((oScope) => {
				let ret = true;
				if (typeof(ret) === "function") {
					ret = ret(oScope);
				}
				return ret;
			})(salesnow)
		) {
			error.name = {};
			if (!this._name_set) error.name["01"] = "Not Set";

			if (!Object.keys(error.name).length) delete error.name;
		}

		if (Object.keys(error).length) {
			this.__assertError = error;
			this.log(undefined, '__assertValid', 'EntityObject', 2, JSON.stringify(error, null, 4), this._toDocument());
			return false;
		} else {
			delete this.__assertError;
			return true;
		}
	}

	async store() {
		let results = await this._execute(salesnow, "store", async (log, warn, error, oScope, method = "store", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "store") => {
			/*** START LOCAL store() ***/
			this.__time('salesnow.Location.store'); // or inside execute?

			delete salesnow._unRecurse;
			let bUpdate = false;
			let bInsert = false;

			if (this.__config('store.disabled')) {
				this.log(undefined, 'store', 'EntityObject', 1, "storing disabled");
			} else if (!this.__sync_on()) {
				let _this = new salesnow.Location(null, this.Tool);

				let bFind = false;
				if (this.Id == this.Id) {
					bFind = true;
					_this.Id = this.Id;
				}

				if (
					((oScope) => {
						let ret = true;
						if (typeof(ret) === "function") {
							ret = ret(oScope);
						}
						return ret;
					})(salesnow)
				) {
					bFind = true;
					_this.name(this.name(), '=');
				}

				if (bFind) {
					_this = await _this.find();
				} else _this = null;
				if (_this) {
					this.Id = _this.Id;
					this.log(undefined, 'store', 'EntityObject', 0, "_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
					bUpdate = true;
				} else {
					this.Id = this.Id; // to enforce the Id and not get a new one every time
					bInsert = true;
				}
			} else if (Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)) {
				this.log(undefined, 'store', 'EntityObject', 0, "Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) + "<" + this.__config('store.sensitivity', 5));
			} else {
				//this.log(undefined, 'store', 'EntityObject', 0, "Going to update [" + this.Id + "]");
				bUpdate = true;
			}

			if (!bUpdate && !bInsert) {
				this.log(undefined, 'store', 'EntityObject', 0, "No data changes");
			} else {

				if (this.Tool.type.name == "SqlDB") {

					if (typeof(salesnow.__sqlTransaction) === "undefined" || salesnow.__sqlTransaction.end) {
						await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
						salesnow.__sqlTransaction = {
							Owner: this,
							sqls: [],
							start: new Date(),
							end: null
						};
					}

				}

				if (this.Tool.type.name == "ServiceNow") {

				}

				if (this.Tool.type.name == "SalesForce") {

				}

				if (this.Tool.type.name == "GitHub") {

				}

				if (!this._active_set) {
					this.active(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._enabled_set) {
					this.enabled(
						((oScope) => {
							let ret = true;
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (!this._date_set) {
					this.date(
						((oScope) => {
							let ret = new Date();
							if (typeof(ret) === "function") {
								ret = ret(oScope);
							}
							return ret;
						})(salesnow)
					);
				}

				if (this.__config("SyncEntityAttributes")) {

				}

				if (!this.__assertValid(true)) return null;

				//await this._storeEntityClass(); // in case Tool changes

				this.log(undefined, 'store', 'EntityObject', 0, `About to Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
				if (bUpdate) await this.update();
				if (bInsert) await this.insert();

				if (this.__config("SyncTypedAttributes")) {

					if (this._location_Incidents_set) {
						for await (const ta of this.location_Incidents()) {
							await ta.store();
						}
					}

				}

				if (bUpdate || bInsert) {

					if (this.Tool.type.name == "SqlDB") {

						if (salesnow.__sqlTransaction && !salesnow.__sqlTransaction.end && salesnow.__sqlTransaction.Owner == this) {
							await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
							salesnow.__sqlTransaction.end = new Date();
						}

					}

					if (this.Tool.type.name == "ServiceNow") {

					}

					if (this.Tool.type.name == "SalesForce") {

					}

					if (this.Tool.type.name == "GitHub") {

					}

				}
			}

			delete salesnow._unRecurse;
			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async insert() {
		let results = await this._execute(salesnow, "insert", async (log, warn, error, oScope, method = "insert", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "insert") => {
			/*** START LOCAL insert() ***/
			this.__time('salesnow.Location.insert');

			if (this.Tool.type.name == "SqlDB") {

				let ret = await this._sql(this._toInsertSQL());
				this.log(undefined, 'insert', 'EntityObject', 0, "result", ret);

			}

			if (this.Tool.type.name == "ServiceNow") {

				this._fromDocument(await this._rest(null, null, this._toDocument(true)));

			}

			if (this.Tool.type.name == "SalesForce") {

				let obj = {};

				if (this._active_set) {

					obj.active = this.active();

				}

				if (this._enabled_set) {

					obj.enabled = this.enabled();

				}

				if (this._code_set) {

					obj.code = this.code();

				}

				if (this._order_set) {

					obj.order = this.order();

				}

				if (this._date_set) {

					obj.date = this.date();

				}

				if (this._name_set) {

					obj.name = this.name();

				}

				if (this._remark_set) {

					obj.remark = this.remark();

				}

				log("Sending to SF", obj);

				let res = await this.Tool.db.sobject("Location").create(obj);
				this.Id = res.id;

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.__sync_on(new Date());

			return this;
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async update() {
		let results = await this._execute(salesnow, "update", async (log, warn, error, oScope, method = "update", _node) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "update") => {
			/*** START LOCAL update() ***/
			this.__time('salesnow.Location.update');

			let ret = null;

			if (this.Tool.type.name == "SqlDB") {

				await this._sql(this._toUpdateSQL());
				ret = await this._sql(this._toSelectSQL());
				if (Array.isArray(ret)) ret = ret[0];

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, null, this._toDocument(true));

			}

			if (this.Tool.type.name == "SalesForce") {

			}

			if (this.Tool.type.name == "GitHub") {

				await this._github(this._fileName(), this._toDocument(true));

			}

			this.log(undefined, 'update', 'EntityObject', 0, "result", ret);
			this.__sync_on(new Date());
			this._fromDocument(ret, true);

			return ret;

			/*** END LOCAL update() ***/
		}, {
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: null
		}).ret; // first one to execute correctly
	}

	async findAll(depth = 1, objs, start, end, fields) {
		let results = await this._execute(salesnow, "findAll", async (log, warn, error, oScope, method = "findAll", _node, depth, objs, start, end, fields) => {
			return oScope._node._sameNode(_node)
		}, async (log, warn, error, oScope, method = "findAll", depth, objs, start, end, fields) => {
			/*** START LOCAL findAll() ***/
			this.__time('salesnow.Location.findAll');

			// avoids cyclic queries
			objs = (objs || []).map(o => o._clone());

			await this._storeEntityClass(); //??

			let ret = []; // a json array

			if (this.Tool.type.name == "SqlDB") {

				ret = await this._sql(this._toSelectSQL(fields, objs));

			}

			if (this.Tool.type.name == "ServiceNow") {

				ret = await this._rest(null, {
					sysparm_query: Object.entries(this._toSNQuery(fields, objs)).map(p => `${p[0]}${p[1]}`).join("^")
				});

			}

			if (this.Tool.type.name == "SalesForce") {

				ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {
					url: 'rest.url.gql'
				});

			}

			if (this.Tool.type.name == "GitHub") {

				ret = [await this._github(this._fileName())];

			}

			this.log(undefined, 'findAll', 'EntityObject', 0, "Before _fromDocument()", ret);

			ret = ret.filter(r => r).map(r => new salesnow.Location(null, this.Tool)._fromDocument(r, true, true).__sync_on(new Date()));

			await this._findReferences(ret, objs, depth);
			this.log(undefined, 'findAll', 'EntityObject', 0, "Output", ret);

			delete salesnow._unRecurse;

			return ret;
			/*** END LOCAL findAll() ***/
		}, {
			depth,
			objs,
			start,
			end,
			fields,
			__beforeRules: [],
			__afterRules: []
		});

		return (results.find(r => r.ret) || {
			ret: []
		}).ret || []; // first one to execute correctly
	}

	async _findReferences(ret, objs, depth) {

		return await new salesnow.User()._findReferences(ret, objs, depth);

	}

};


if(typeof(module)!=="undefined") module.exports.salesnow = salesnow;

(async () => await new salesnow.User()._server({initNode: true, initSelf: true, loadTools: true}))();",
	"active": true,
	"enabled": true,
	"code": "apiserver",
	"date": "2023-08-15T13:28:05.375Z",
	"name": "API Server"
}