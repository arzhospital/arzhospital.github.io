{
    "openapi": "3.0.0",
    "info": {
        "contact": {
            "email": "api.CF_Data_Collector@nammour.com"
        },
        "license": {
            "name": "Nammour.com API License",
            "url": "https://www.nammour.com/api/CF_Data_Collector/license/"
        },
        "termsOfService": "https://www.nammour.com/api/CF_Data_Collector/terms/",
        "title": "ESP Test",
        "description": "ESP Test",
        "version": "1.0.0"
    },
    "tags": [
        {
            "name": "User"
        },
        {
            "name": "Queue"
        },
        {
            "name": "Flow_Snapshot"
        },
        {
            "name": "Event"
        },
        {
            "name": "Node"
        }
    ],
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the User"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the User"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the User"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the User"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the User"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the User"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the User"
                    },
                    "ownDevice": {
                        "type": "string",
                        "format": "binary",
                        "description": "The ownDevice of type Device of the User",
                        "$ref": "#/components/schemas/Device"
                    },
                    "settings": {
                        "type": "string",
                        "format": "binary",
                        "description": "The settings of type EntityObject of the User",
                        "$ref": "#/components/schemas/EntityObject"
                    }
                }
            },
            "Metric": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Metric"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Metric"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Metric"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Metric"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Metric"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Metric"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Metric"
                    },
                    "script": {
                        "type": "string",
                        "format": "string",
                        "description": "The script of type undefined of the Metric"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Metric_Type of the Metric",
                        "$ref": "#/components/schemas/Metric_Type"
                    },
                    "deviceType": {
                        "type": "string",
                        "format": "binary",
                        "description": "The deviceType of type Device_Type of the Metric",
                        "$ref": "#/components/schemas/Device_Type"
                    }
                }
            },
            "Metric_Value": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Metric_Value"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Metric_Value"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Metric_Value"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Metric_Value"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Metric_Value"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Metric_Value"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Metric_Value"
                    },
                    "value": {
                        "type": "string",
                        "format": "string",
                        "description": "The value of type undefined of the Metric_Value"
                    },
                    "measured": {
                        "type": "string",
                        "format": "string",
                        "description": "The measured of type undefined of the Metric_Value"
                    },
                    "metric": {
                        "type": "string",
                        "format": "binary",
                        "description": "The metric of type Metric of the Metric_Value",
                        "$ref": "#/components/schemas/Metric"
                    },
                    "device": {
                        "type": "string",
                        "format": "binary",
                        "description": "The device of type Device of the Metric_Value",
                        "$ref": "#/components/schemas/Device"
                    }
                }
            },
            "Device": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Device"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Device"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Device"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Device"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Device"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Device"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Device"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Device_Type of the Device",
                        "$ref": "#/components/schemas/Device_Type"
                    },
                    "controller": {
                        "type": "string",
                        "format": "binary",
                        "description": "The controller of type Node of the Device",
                        "$ref": "#/components/schemas/Node"
                    }
                }
            },
            "Device_Attribute": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Device_Attribute"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Device_Attribute"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Device_Attribute"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Device_Attribute"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Device_Attribute"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Device_Attribute"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Device_Attribute"
                    },
                    "value": {
                        "type": "string",
                        "format": "string",
                        "description": "The value of type undefined of the Device_Attribute"
                    },
                    "device": {
                        "type": "string",
                        "format": "binary",
                        "description": "The device of type Device of the Device_Attribute",
                        "$ref": "#/components/schemas/Device"
                    },
                    "attribute": {
                        "type": "string",
                        "format": "binary",
                        "description": "The attribute of type Type_Attribute of the Device_Attribute",
                        "$ref": "#/components/schemas/Type_Attribute"
                    }
                }
            },
            "Type_Attribute": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Type_Attribute"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Type_Attribute"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Type_Attribute"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Type_Attribute"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Type_Attribute"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Type_Attribute"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Type_Attribute"
                    },
                    "deviceType": {
                        "type": "string",
                        "format": "binary",
                        "description": "The deviceType of type Device_Type of the Type_Attribute",
                        "$ref": "#/components/schemas/Device_Type"
                    }
                }
            },
            "Device_Category": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Device_Category"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Device_Category"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Device_Category"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Device_Category"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Device_Category"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Device_Category"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Device_Category"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type Device_Category of the Device_Category",
                        "$ref": "#/components/schemas/Device_Category"
                    }
                }
            },
            "Device_Type": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Device_Type"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Device_Type"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Device_Type"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Device_Type"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Device_Type"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Device_Type"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Device_Type"
                    },
                    "category": {
                        "type": "string",
                        "format": "binary",
                        "description": "The category of type Device_Category of the Device_Type",
                        "$ref": "#/components/schemas/Device_Category"
                    }
                }
            },
            "Metric_Group": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Metric_Group"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Metric_Group"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Metric_Group"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Metric_Group"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Metric_Group"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Metric_Group"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Metric_Group"
                    }
                }
            },
            "Metric_Type": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Metric_Type"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Metric_Type"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Metric_Type"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Metric_Type"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Metric_Type"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Metric_Type"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Metric_Type"
                    },
                    "group": {
                        "type": "string",
                        "format": "binary",
                        "description": "The group of type Metric_Group of the Metric_Type",
                        "$ref": "#/components/schemas/Metric_Group"
                    }
                }
            },
            "Application": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Application"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Application"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Application"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Application"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Application"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Application"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Application"
                    },
                    "version": {
                        "type": "string",
                        "format": "string",
                        "description": "The version of type undefined of the Application"
                    }
                }
            },
            "Rollback_Context": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Rollback_Context"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Rollback_Context"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Rollback_Context"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Rollback_Context"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Rollback_Context"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Rollback_Context"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Rollback_Context"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Rollback_Context",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Queue": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Queue"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Queue"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Queue"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Queue"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Queue"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Queue"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Queue"
                    },
                    "state": {
                        "type": "string",
                        "format": "string",
                        "description": "The state of type undefined of the Queue"
                    },
                    "processed": {
                        "type": "string",
                        "format": "string",
                        "description": "The processed of type undefined of the Queue"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Queue"
                    },
                    "responseTo": {
                        "type": "string",
                        "format": "binary",
                        "description": "The responseTo of type Queue of the Queue",
                        "$ref": "#/components/schemas/Queue"
                    }
                }
            },
            "Script_File": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Script_File"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Script_File"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Script_File"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Script_File"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Script_File"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Script_File"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Script_File"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Script_File",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Fix_Script": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Fix_Script"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Fix_Script"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Fix_Script"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Fix_Script"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Fix_Script"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Fix_Script"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Fix_Script"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Fix_Script",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Table": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Table"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Table"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Table"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Table"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Table"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Table"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Table"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Table",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Column": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Column"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Column"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Column"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Column"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Column"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Column"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Column"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Column"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Column"
                    },
                    "table": {
                        "type": "string",
                        "format": "binary",
                        "description": "The table of type Table of the Column",
                        "$ref": "#/components/schemas/Table"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Column",
                        "$ref": "#/components/schemas/Table"
                    }
                }
            },
            "Connection": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Connection"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Connection"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Connection"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Connection"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Connection"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Connection"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Connection"
                    }
                }
            },
            "Subscription_Trigger": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Subscription_Trigger"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Subscription_Trigger"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Subscription_Trigger"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Subscription_Trigger"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Subscription_Trigger"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Subscription_Trigger"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Subscription_Trigger"
                    },
                    "column": {
                        "type": "string",
                        "format": "binary",
                        "description": "The column of type Column of the Subscription_Trigger",
                        "$ref": "#/components/schemas/Column"
                    },
                    "subscription": {
                        "type": "string",
                        "format": "binary",
                        "description": "The subscription of type Save_Subscription of the Subscription_Trigger",
                        "$ref": "#/components/schemas/Save_Subscription"
                    }
                }
            },
            "Save_Subscription": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Save_Subscription"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Save_Subscription"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Save_Subscription"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Save_Subscription"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Save_Subscription"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Save_Subscription"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Save_Subscription"
                    },
                    "schema": {
                        "type": "string",
                        "format": "string",
                        "description": "Payload construction schema path"
                    },
                    "table": {
                        "type": "string",
                        "format": "binary",
                        "description": "The table of type Table of the Save_Subscription",
                        "$ref": "#/components/schemas/Table"
                    },
                    "profile": {
                        "type": "string",
                        "format": "binary",
                        "description": "The profile of type Connection of the Save_Subscription",
                        "$ref": "#/components/schemas/Connection"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Save_Subscription",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Flow": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Flow",
                        "$ref": "#/components/schemas/Application"
                    },
                    "block": {
                        "type": "string",
                        "format": "binary",
                        "description": "The block of type Flow_Block of the Flow",
                        "$ref": "#/components/schemas/Flow_Block"
                    },
                    "securityControl": {
                        "type": "string",
                        "format": "binary",
                        "description": "The securityControl of type Security_Control of the Flow",
                        "$ref": "#/components/schemas/Security_Control"
                    }
                }
            },
            "Flow_Input": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Input"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Input"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Input"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Input"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Input"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Input"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Input"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Flow_Input"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Flow_Input"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Flow_Input",
                        "$ref": "#/components/schemas/Table"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Input",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Input",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    }
                }
            },
            "Flow_Output": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Output"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Output"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Output"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Output"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Output"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Output"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Output"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Flow_Output"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Flow_Output"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Flow_Output",
                        "$ref": "#/components/schemas/Table"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Output",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Output",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    }
                }
            },
            "Flow_Variable": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Variable"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Variable"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Variable"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Variable"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Variable"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Variable"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Variable"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Flow_Variable"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Flow_Variable"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Flow_Variable",
                        "$ref": "#/components/schemas/Table"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Variable",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Variable",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    }
                }
            },
            "Field_Label": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Field_Label"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Field_Label"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Field_Label"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Field_Label"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Field_Label"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Field_Label"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Field_Label"
                    },
                    "plural": {
                        "type": "string",
                        "format": "string",
                        "description": "The plural of type undefined of the Field_Label"
                    },
                    "language": {
                        "type": "string",
                        "format": "string",
                        "description": "The language of type undefined of the Field_Label"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Field_Label",
                        "$ref": "#/components/schemas/Application"
                    },
                    "input": {
                        "type": "string",
                        "format": "binary",
                        "description": "The input of type Flow_Input of the Field_Label",
                        "$ref": "#/components/schemas/Flow_Input"
                    },
                    "output": {
                        "type": "string",
                        "format": "binary",
                        "description": "The output of type Flow_Output of the Field_Label",
                        "$ref": "#/components/schemas/Flow_Output"
                    },
                    "variable": {
                        "type": "string",
                        "format": "binary",
                        "description": "The variable of type Flow_Variable of the Field_Label",
                        "$ref": "#/components/schemas/Flow_Variable"
                    },
                    "column": {
                        "type": "string",
                        "format": "binary",
                        "description": "The column of type Column of the Field_Label",
                        "$ref": "#/components/schemas/Column"
                    }
                }
            },
            "Logic_Definition": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Logic_Definition"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Logic_Definition"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Logic_Definition"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Logic_Definition"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Logic_Definition"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Logic_Definition"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Logic_Definition"
                    }
                }
            },
            "Flow_Logic": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Logic"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Logic"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Logic"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Logic"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Logic"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Logic"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Logic"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type Flow_Logic of the Flow_Logic",
                        "$ref": "#/components/schemas/Flow_Logic"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Logic",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Logic",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    },
                    "definition": {
                        "type": "string",
                        "format": "binary",
                        "description": "The definition of type Logic_Definition of the Flow_Logic",
                        "$ref": "#/components/schemas/Logic_Definition"
                    },
                    "block": {
                        "type": "string",
                        "format": "binary",
                        "description": "The block of type Flow_Block of the Flow_Logic",
                        "$ref": "#/components/schemas/Flow_Block"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Flow_Logic",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Flow_Instance": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Instance"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Instance"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Instance"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Instance"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Instance"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Instance"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Instance"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type Flow_Logic of the Flow_Instance",
                        "$ref": "#/components/schemas/Flow_Logic"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Flow_Instance",
                        "$ref": "#/components/schemas/Application"
                    },
                    "subflow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The subflow of type Flow of the Flow_Instance",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Instance",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    }
                }
            },
            "Flow_Instance_Input": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Instance_Input"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Instance_Input"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Instance_Input"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Instance_Input"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Instance_Input"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Instance_Input"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Instance_Input"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Flow_Instance_Input"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Flow_Instance_Input"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Flow_Instance_Input",
                        "$ref": "#/components/schemas/Table"
                    },
                    "instance": {
                        "type": "string",
                        "format": "binary",
                        "description": "The instance of type Flow_Instance of the Flow_Instance_Input",
                        "$ref": "#/components/schemas/Flow_Instance"
                    }
                }
            },
            "Action_Instance": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Action_Instance"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Action_Instance"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Action_Instance"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Action_Instance"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Action_Instance"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Action_Instance"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Action_Instance"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type Flow_Logic of the Action_Instance",
                        "$ref": "#/components/schemas/Flow_Logic"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Action_Instance",
                        "$ref": "#/components/schemas/Application"
                    },
                    "action": {
                        "type": "string",
                        "format": "binary",
                        "description": "The action of type Action_Type of the Action_Instance",
                        "$ref": "#/components/schemas/Action_Type"
                    }
                }
            },
            "Variable_Value": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Variable_Value"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Variable_Value"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Variable_Value"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Variable_Value"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Variable_Value"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Variable_Value"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Variable_Value"
                    },
                    "value": {
                        "type": "string",
                        "format": "string",
                        "description": "The value of type undefined of the Variable_Value"
                    },
                    "instance": {
                        "type": "string",
                        "format": "binary",
                        "description": "The instance of type Flow_Instance of the Variable_Value",
                        "$ref": "#/components/schemas/Flow_Instance"
                    },
                    "action": {
                        "type": "string",
                        "format": "binary",
                        "description": "The action of type Action_Instance of the Variable_Value",
                        "$ref": "#/components/schemas/Action_Instance"
                    },
                    "actionInput": {
                        "type": "string",
                        "format": "binary",
                        "description": "The actionInput of type Action_Input of the Variable_Value",
                        "$ref": "#/components/schemas/Action_Input"
                    },
                    "flowInput": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flowInput of type Flow_Input of the Variable_Value",
                        "$ref": "#/components/schemas/Flow_Input"
                    },
                    "mapping": {
                        "type": "string",
                        "format": "binary",
                        "description": "The mapping of type Element_Mapping of the Variable_Value",
                        "$ref": "#/components/schemas/Element_Mapping"
                    }
                }
            },
            "Flow_Block": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Block"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Block"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Block"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Block"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Block"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Block"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Block"
                    }
                }
            },
            "Element_Mapping": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Element_Mapping"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Element_Mapping"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Element_Mapping"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Element_Mapping"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Element_Mapping"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Element_Mapping"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Element_Mapping"
                    },
                    "value": {
                        "type": "string",
                        "format": "string",
                        "description": "The value of type undefined of the Element_Mapping"
                    },
                    "block": {
                        "type": "string",
                        "format": "binary",
                        "description": "The block of type Flow_Block of the Element_Mapping",
                        "$ref": "#/components/schemas/Flow_Block"
                    }
                }
            },
            "Flow_Input_Script": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Input_Script"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Input_Script"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Input_Script"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Input_Script"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Input_Script"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Input_Script"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Input_Script"
                    },
                    "logic": {
                        "type": "string",
                        "format": "binary",
                        "description": "The logic of type Flow_Logic of the Flow_Input_Script",
                        "$ref": "#/components/schemas/Flow_Logic"
                    }
                }
            },
            "Action_Type": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Action_Type"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Action_Type"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Action_Type"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Action_Type"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Action_Type"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Action_Type"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Action_Type"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Action_Type",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Action_Input": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Action_Input"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Action_Input"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Action_Input"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Action_Input"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Action_Input"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Action_Input"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Action_Input"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Action_Input"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Action_Input"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Action_Input",
                        "$ref": "#/components/schemas/Table"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Action_Input",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Action_Input",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    },
                    "action": {
                        "type": "string",
                        "format": "binary",
                        "description": "The action of type Action_Type of the Action_Input",
                        "$ref": "#/components/schemas/Action_Type"
                    }
                }
            },
            "Action_Step": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Action_Step"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Action_Step"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Action_Step"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Action_Step"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Action_Step"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Action_Step"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Action_Step"
                    },
                    "action": {
                        "type": "string",
                        "format": "binary",
                        "description": "The action of type Action_Type of the Action_Step",
                        "$ref": "#/components/schemas/Action_Type"
                    }
                }
            },
            "Action_Step_Input": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Action_Step_Input"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Action_Step_Input"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Action_Step_Input"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Action_Step_Input"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Action_Step_Input"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Action_Step_Input"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Action_Step_Input"
                    },
                    "action": {
                        "type": "string",
                        "format": "binary",
                        "description": "The action of type Action_Type of the Action_Step_Input",
                        "$ref": "#/components/schemas/Action_Type"
                    }
                }
            },
            "Flow_Plan": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Plan"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Plan"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Plan"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Plan"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Plan"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Plan"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Plan"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Plan",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    }
                }
            },
            "Flow_Setting": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Setting"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Setting"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Setting"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Setting"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Setting"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Setting"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Setting"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Setting",
                        "$ref": "#/components/schemas/Flow"
                    }
                }
            },
            "Flow_Snapshot": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Snapshot"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Snapshot"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Snapshot"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Snapshot"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Snapshot"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Snapshot"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Snapshot"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Snapshot",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "block": {
                        "type": "string",
                        "format": "binary",
                        "description": "The block of type Flow_Block of the Flow_Snapshot",
                        "$ref": "#/components/schemas/Flow_Block"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Flow_Snapshot",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Pill_Compound": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Pill_Compound"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Pill_Compound"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Pill_Compound"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Pill_Compound"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Pill_Compound"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Pill_Compound"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Pill_Compound"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type Pill_Compound of the Pill_Compound",
                        "$ref": "#/components/schemas/Pill_Compound"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Pill_Compound",
                        "$ref": "#/components/schemas/Application"
                    },
                    "elementMapping": {
                        "type": "string",
                        "format": "binary",
                        "description": "The elementMapping of type Element_Mapping of the Pill_Compound",
                        "$ref": "#/components/schemas/Element_Mapping"
                    },
                    "transform": {
                        "type": "string",
                        "format": "binary",
                        "description": "The transform of type Transform of the Pill_Compound",
                        "$ref": "#/components/schemas/Transform"
                    }
                }
            },
            "Transform": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Transform"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Transform"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Transform"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Transform"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Transform"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Transform"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Transform"
                    }
                }
            },
            "Data_Definition": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Data_Definition"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Data_Definition"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Data_Definition"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Data_Definition"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Data_Definition"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Data_Definition"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Data_Definition"
                    }
                }
            },
            "Flow_Data": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Data"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Data"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Data"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Data"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Data"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Data"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Data"
                    },
                    "definition": {
                        "type": "string",
                        "format": "binary",
                        "description": "The definition of type Data_Definition of the Flow_Data",
                        "$ref": "#/components/schemas/Data_Definition"
                    }
                }
            },
            "Flow_Data_Variable": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Flow_Data_Variable"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Flow_Data_Variable"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Flow_Data_Variable"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Flow_Data_Variable"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Flow_Data_Variable"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Flow_Data_Variable"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Flow_Data_Variable"
                    },
                    "type": {
                        "type": "string",
                        "format": "string",
                        "description": "The type of type undefined of the Flow_Data_Variable"
                    },
                    "mandatory": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The mandatory of type undefined of the Flow_Data_Variable"
                    },
                    "reference": {
                        "type": "string",
                        "format": "binary",
                        "description": "The reference of type Table of the Flow_Data_Variable",
                        "$ref": "#/components/schemas/Table"
                    },
                    "flow": {
                        "type": "string",
                        "format": "binary",
                        "description": "The flow of type Flow of the Flow_Data_Variable",
                        "$ref": "#/components/schemas/Flow"
                    },
                    "snapshot": {
                        "type": "string",
                        "format": "binary",
                        "description": "The snapshot of type Flow_Snapshot of the Flow_Data_Variable",
                        "$ref": "#/components/schemas/Flow_Snapshot"
                    }
                }
            },
            "Security_Control": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Security_Control"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Security_Control"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Security_Control"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Security_Control"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Security_Control"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Security_Control"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Security_Control"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Security_Type of the Security_Control",
                        "$ref": "#/components/schemas/Security_Type"
                    },
                    "operation": {
                        "type": "string",
                        "format": "binary",
                        "description": "The operation of type Security_Operation of the Security_Control",
                        "$ref": "#/components/schemas/Security_Operation"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Security_Control",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Security_Type": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Security_Type"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Security_Type"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Security_Type"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Security_Type"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Security_Type"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Security_Type"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Security_Type"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Security_Type",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "Security_Operation": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Security_Operation"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Security_Operation"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Security_Operation"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Security_Operation"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Security_Operation"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Security_Operation"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Security_Operation"
                    },
                    "application": {
                        "type": "string",
                        "format": "binary",
                        "description": "The application of type Application of the Security_Operation",
                        "$ref": "#/components/schemas/Application"
                    }
                }
            },
            "EntityClass": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityClass"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the EntityClass"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the EntityClass"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the EntityClass"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the EntityClass"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the EntityClass"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the EntityClass"
                    },
                    "logo": {
                        "type": "string",
                        "format": "binary",
                        "description": "The logo of type undefined of the EntityClass"
                    },
                    "isMain": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isMain of type undefined of the EntityClass"
                    },
                    "plural": {
                        "type": "string",
                        "format": "string",
                        "description": "The plural of type undefined of the EntityClass"
                    },
                    "routing": {
                        "type": "string",
                        "format": "string",
                        "description": "The routing of type undefined of the EntityClass"
                    },
                    "company": {
                        "type": "string",
                        "format": "binary",
                        "description": "The company of type Company of the EntityClass",
                        "$ref": "#/components/schemas/Company"
                    },
                    "group": {
                        "type": "string",
                        "format": "binary",
                        "description": "The group of type EntityClassGroup of the EntityClass",
                        "$ref": "#/components/schemas/EntityClassGroup"
                    },
                    "entityModule": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityModule of type EntityModule of the EntityClass",
                        "$ref": "#/components/schemas/EntityModule"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type EntityClass of the EntityClass",
                        "$ref": "#/components/schemas/EntityClass"
                    }
                }
            },
            "EntityAttribute": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityAttribute"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the EntityAttribute"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the EntityAttribute"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the EntityAttribute"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the EntityAttribute"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the EntityAttribute"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the EntityAttribute"
                    },
                    "isDate": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isDate of type undefined of the EntityAttribute"
                    },
                    "isFile": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isFile of type undefined of the EntityAttribute"
                    },
                    "isFloat": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isFloat of type undefined of the EntityAttribute"
                    },
                    "isImage": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isImage of type undefined of the EntityAttribute"
                    },
                    "isInt": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isInt of type undefined of the EntityAttribute"
                    },
                    "isLong": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isLong of type undefined of the EntityAttribute"
                    },
                    "isString": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isString of type undefined of the EntityAttribute"
                    },
                    "isText": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isText of type undefined of the EntityAttribute"
                    },
                    "isBool": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isBool of type undefined of the EntityAttribute"
                    },
                    "isObject": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isObject of type undefined of the EntityAttribute"
                    },
                    "isNVRPair": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isNVRPair of type undefined of the EntityAttribute"
                    },
                    "isUnique": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isUnique of type undefined of the EntityAttribute"
                    },
                    "isArray": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isArray of type undefined of the EntityAttribute"
                    },
                    "showInListing": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The showInListing of type undefined of the EntityAttribute"
                    },
                    "showInSearch": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The showInSearch of type undefined of the EntityAttribute"
                    },
                    "visible": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The visible of type undefined of the EntityAttribute"
                    },
                    "required": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The required of type undefined of the EntityAttribute"
                    },
                    "entityClass": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityClass of type EntityClass of the EntityAttribute",
                        "$ref": "#/components/schemas/EntityClass"
                    },
                    "entityType": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityType of type EntityClass of the EntityAttribute",
                        "$ref": "#/components/schemas/EntityClass"
                    },
                    "entityMethod": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityMethod of type EntityMethod of the EntityAttribute",
                        "$ref": "#/components/schemas/EntityMethod"
                    },
                    "entityGroup": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityGroup of type EntityAttributeGroup of the EntityAttribute",
                        "$ref": "#/components/schemas/EntityAttributeGroup"
                    }
                }
            },
            "Company": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Company"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Company"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Company"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Company"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Company"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Company"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Company"
                    },
                    "logo": {
                        "type": "string",
                        "format": "binary",
                        "description": "The logo of type undefined of the Company"
                    }
                }
            },
            "EntityAttributeGroup": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityAttributeGroup"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the EntityAttributeGroup"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the EntityAttributeGroup"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the EntityAttributeGroup"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the EntityAttributeGroup"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the EntityAttributeGroup"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the EntityAttributeGroup"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type EntityAttributeGroup of the EntityAttributeGroup",
                        "$ref": "#/components/schemas/EntityAttributeGroup"
                    },
                    "entityClass": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityClass of type EntityClass of the EntityAttributeGroup",
                        "$ref": "#/components/schemas/EntityClass"
                    }
                }
            },
            "EntityClassGroup": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityClassGroup"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the EntityClassGroup"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the EntityClassGroup"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the EntityClassGroup"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the EntityClassGroup"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the EntityClassGroup"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the EntityClassGroup"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type EntityClassGroup of the EntityClassGroup",
                        "$ref": "#/components/schemas/EntityClassGroup"
                    },
                    "company": {
                        "type": "string",
                        "format": "binary",
                        "description": "The company of type Company of the EntityClassGroup",
                        "$ref": "#/components/schemas/Company"
                    }
                }
            },
            "EntityMethod": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityMethod"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the EntityMethod"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the EntityMethod"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the EntityMethod"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the EntityMethod"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the EntityMethod"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the EntityMethod"
                    },
                    "isArray": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isArray of type undefined of the EntityMethod"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The isPrivate of type undefined of the EntityMethod"
                    },
                    "script": {
                        "type": "string",
                        "format": "string",
                        "description": "The script of type undefined of the EntityMethod"
                    },
                    "routing": {
                        "type": "string",
                        "format": "string",
                        "description": "The routing of type undefined of the EntityMethod"
                    },
                    "entityClass": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityClass of type EntityClass of the EntityMethod",
                        "$ref": "#/components/schemas/EntityClass"
                    },
                    "responseAttribute": {
                        "type": "string",
                        "format": "binary",
                        "description": "The responseAttribute of type EntityAttribute of the EntityMethod",
                        "$ref": "#/components/schemas/EntityAttribute"
                    }
                }
            },
            "EntityModule": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityModule"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the EntityModule"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the EntityModule"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the EntityModule"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the EntityModule"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the EntityModule"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the EntityModule"
                    }
                }
            },
            "NameValue": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the NameValue"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the NameValue"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the NameValue"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the NameValue"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the NameValue"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the NameValue"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the NameValue"
                    },
                    "value": {
                        "type": "string",
                        "format": "string",
                        "description": "The value of type undefined of the NameValue"
                    },
                    "entityValue": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityValue of type EntityValue of the NameValue",
                        "$ref": "#/components/schemas/EntityValue"
                    }
                }
            },
            "EntityObject": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityObject"
                    },
                    "entityClass": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityClass of type EntityClass of the EntityObject",
                        "$ref": "#/components/schemas/EntityClass"
                    }
                }
            },
            "EntityValue": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the EntityValue"
                    },
                    "dateValue": {
                        "type": "string",
                        "format": "string",
                        "description": "The dateValue of type undefined of the EntityValue"
                    },
                    "fileValue": {
                        "type": "string",
                        "format": "binary",
                        "description": "The fileValue of type undefined of the EntityValue"
                    },
                    "floatValue": {
                        "type": "float",
                        "format": "float",
                        "description": "The floatValue of type undefined of the EntityValue"
                    },
                    "imageValue": {
                        "type": "string",
                        "format": "binary",
                        "description": "The imageValue of type undefined of the EntityValue"
                    },
                    "intValue": {
                        "type": "number",
                        "format": "number",
                        "description": "The intValue of type undefined of the EntityValue"
                    },
                    "longValue": {
                        "type": "number",
                        "format": "number",
                        "description": "The longValue of type undefined of the EntityValue"
                    },
                    "stringValue": {
                        "type": "string",
                        "format": "string",
                        "description": "The stringValue of type undefined of the EntityValue"
                    },
                    "textValue": {
                        "type": "string",
                        "format": "string",
                        "description": "The textValue of type undefined of the EntityValue"
                    },
                    "boolValue": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The boolValue of type undefined of the EntityValue"
                    },
                    "entityObject": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityObject of type EntityObject of the EntityValue",
                        "$ref": "#/components/schemas/EntityObject"
                    },
                    "entityAttribute": {
                        "type": "string",
                        "format": "binary",
                        "description": "The entityAttribute of type EntityAttribute of the EntityValue",
                        "$ref": "#/components/schemas/EntityAttribute"
                    },
                    "objectValue": {
                        "type": "string",
                        "format": "binary",
                        "description": "The objectValue of type EntityObject of the EntityValue",
                        "$ref": "#/components/schemas/EntityObject"
                    }
                }
            },
            "Config": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Config"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Config"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Config"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Config"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Config"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Config"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Config"
                    },
                    "value": {
                        "type": "string",
                        "format": "string",
                        "description": "The value of type undefined of the Config"
                    },
                    "script": {
                        "type": "string",
                        "format": "string",
                        "description": "The script of type undefined of the Config"
                    },
                    "tool": {
                        "type": "string",
                        "format": "binary",
                        "description": "The tool of type Tool of the Config",
                        "$ref": "#/components/schemas/Tool"
                    },
                    "group": {
                        "type": "string",
                        "format": "binary",
                        "description": "The group of type Config_Group of the Config",
                        "$ref": "#/components/schemas/Config_Group"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Tool_Type of the Config",
                        "$ref": "#/components/schemas/Tool_Type"
                    },
                    "node": {
                        "type": "string",
                        "format": "binary",
                        "description": "The node of type Node of the Config",
                        "$ref": "#/components/schemas/Node"
                    }
                }
            },
            "Tool": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Tool"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Tool"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Tool"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Tool"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Tool"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Tool"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Tool"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Tool_Type of the Tool",
                        "$ref": "#/components/schemas/Tool_Type"
                    }
                }
            },
            "Config_Group": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Config_Group"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Config_Group"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Config_Group"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Config_Group"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Config_Group"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Config_Group"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Config_Group"
                    }
                }
            },
            "Tool_Type": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Tool_Type"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Tool_Type"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Tool_Type"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Tool_Type"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Tool_Type"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Tool_Type"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Tool_Type"
                    },
                    "icon": {
                        "type": "string",
                        "format": "string",
                        "description": "OSA Icons"
                    }
                }
            },
            "Event": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Event"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Event"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Event"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Event"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Event"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Event"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Event"
                    },
                    "className": {
                        "type": "string",
                        "format": "string",
                        "description": "The className of type undefined of the Event"
                    },
                    "method": {
                        "type": "string",
                        "format": "string",
                        "description": "The method of type undefined of the Event"
                    },
                    "payload": {
                        "type": "string",
                        "format": "string",
                        "description": "The payload of type undefined of the Event"
                    },
                    "carrier": {
                        "type": "string",
                        "format": "binary",
                        "description": "The carrier of type Node of the Event",
                        "$ref": "#/components/schemas/Node"
                    },
                    "sender": {
                        "type": "string",
                        "format": "binary",
                        "description": "The sender of type Node of the Event",
                        "$ref": "#/components/schemas/Node"
                    },
                    "recipient": {
                        "type": "string",
                        "format": "binary",
                        "description": "The recipient of type Node of the Event",
                        "$ref": "#/components/schemas/Node"
                    },
                    "responseTo": {
                        "type": "string",
                        "format": "binary",
                        "description": "The responseTo of type Event of the Event",
                        "$ref": "#/components/schemas/Event"
                    }
                }
            },
            "Node": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Node"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Node"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Node"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Node"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Node"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Node"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Node"
                    },
                    "address": {
                        "type": "string",
                        "format": "string",
                        "description": "The address of type undefined of the Node"
                    },
                    "backup": {
                        "type": "string",
                        "format": "binary",
                        "description": "The backup of type Node of the Node",
                        "$ref": "#/components/schemas/Node"
                    },
                    "parent": {
                        "type": "string",
                        "format": "binary",
                        "description": "The parent of type Node of the Node",
                        "$ref": "#/components/schemas/Node"
                    },
                    "group": {
                        "type": "string",
                        "format": "binary",
                        "description": "The group of type Node_Group of the Node",
                        "$ref": "#/components/schemas/Node_Group"
                    },
                    "context": {
                        "type": "string",
                        "format": "binary",
                        "description": "The context of type Node_Context of the Node",
                        "$ref": "#/components/schemas/Node_Context"
                    },
                    "port": {
                        "type": "number",
                        "format": "number",
                        "description": "The port of type undefined of the Node"
                    },
                    "online": {
                        "type": "string",
                        "format": "string",
                        "description": "The online of type undefined of the Node"
                    },
                    "secure": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The secure of type undefined of the Node"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Node_Type of the Node",
                        "$ref": "#/components/schemas/Node_Type"
                    }
                }
            },
            "Node_Context": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Node_Context"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Node_Context"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Node_Context"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Node_Context"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Node_Context"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Node_Context"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Node_Context"
                    }
                }
            },
            "Node_Group": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Node_Group"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Node_Group"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Node_Group"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Node_Group"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Node_Group"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Node_Group"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Node_Group"
                    }
                }
            },
            "Node_Type": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Node_Type"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Node_Type"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Node_Type"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Node_Type"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Node_Type"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Node_Type"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Node_Type"
                    },
                    "dynamic": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The dynamic of type undefined of the Node_Type"
                    }
                }
            },
            "Mapping": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The active of type undefined of the Mapping"
                    },
                    "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "The enabled of type undefined of the Mapping"
                    },
                    "code": {
                        "type": "string",
                        "format": "string",
                        "description": "The code of type undefined of the Mapping"
                    },
                    "order": {
                        "type": "number",
                        "format": "number",
                        "description": "The order of type undefined of the Mapping"
                    },
                    "date": {
                        "type": "string",
                        "format": "string",
                        "description": "The date of type undefined of the Mapping"
                    },
                    "name": {
                        "type": "string",
                        "format": "string",
                        "description": "The name of type undefined of the Mapping"
                    },
                    "remark": {
                        "type": "string",
                        "format": "string",
                        "description": "The remark of type undefined of the Mapping"
                    },
                    "className": {
                        "type": "string",
                        "format": "string",
                        "description": "The className of type undefined of the Mapping"
                    },
                    "scope": {
                        "type": "string",
                        "format": "string",
                        "description": "The scope of type undefined of the Mapping"
                    },
                    "context": {
                        "type": "string",
                        "format": "string",
                        "description": "The context of type undefined of the Mapping"
                    },
                    "source": {
                        "type": "string",
                        "format": "string",
                        "description": "The source of type undefined of the Mapping"
                    },
                    "target": {
                        "type": "string",
                        "format": "string",
                        "description": "The target of type undefined of the Mapping"
                    },
                    "inScript": {
                        "type": "string",
                        "format": "string",
                        "description": "The inScript of type undefined of the Mapping"
                    },
                    "outScript": {
                        "type": "string",
                        "format": "string",
                        "description": "The outScript of type undefined of the Mapping"
                    },
                    "tool": {
                        "type": "string",
                        "format": "binary",
                        "description": "The tool of type Tool of the Mapping",
                        "$ref": "#/components/schemas/Tool"
                    },
                    "group": {
                        "type": "string",
                        "format": "binary",
                        "description": "The group of type Config_Group of the Mapping",
                        "$ref": "#/components/schemas/Config_Group"
                    },
                    "type": {
                        "type": "string",
                        "format": "binary",
                        "description": "The type of type Tool_Type of the Mapping",
                        "$ref": "#/components/schemas/Tool_Type"
                    }
                }
            }
        }
    },
    "paths": {
        "/User": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "UserFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of User objects.",
                "operationId": "UserFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for User",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid User value"
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "UserUpdate",
                "description": "Based on the information provided in the input objects the User objects will be updated",
                "operationId": "UserUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "UserInsert",
                "description": "Based on the information provided in the input objects,the User objects will be inserted.",
                "operationId": "UserInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/User/init": {
            "post": {
                "summary": "init",
                "operationId": "User.init",
                "tags": [
                    "User"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retinit of type undefined of the undefined"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retinit of type undefined of the undefined"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method init"
                    }
                }
            }
        },
        "/Metric": {
            "get": {
                "tags": [
                    "Metric"
                ],
                "summary": "MetricFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Metric objects.",
                "operationId": "MetricFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Metric",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Metric value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Metric"
                ],
                "summary": "MetricUpdate",
                "description": "Based on the information provided in the input objects the Metric objects will be updated",
                "operationId": "MetricUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Metric"
                ],
                "summary": "MetricInsert",
                "description": "Based on the information provided in the input objects,the Metric objects will be inserted.",
                "operationId": "MetricInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Metric_Value": {
            "get": {
                "tags": [
                    "Metric_Value"
                ],
                "summary": "Metric_ValueFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Metric Value objects.",
                "operationId": "Metric_ValueFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Metric_Value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Value"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric_Value"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric_Value"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Metric_Value value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Metric_Value"
                ],
                "summary": "Metric_ValueUpdate",
                "description": "Based on the information provided in the input objects the Metric Value objects will be updated",
                "operationId": "Metric_ValueUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Value"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Value"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Metric_Value"
                ],
                "summary": "Metric_ValueInsert",
                "description": "Based on the information provided in the input objects,the Metric Value objects will be inserted.",
                "operationId": "Metric_ValueInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Value"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Value"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Value"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Device": {
            "get": {
                "tags": [
                    "Device"
                ],
                "summary": "DeviceFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Device objects.",
                "operationId": "DeviceFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Device",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Device value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Device"
                ],
                "summary": "DeviceUpdate",
                "description": "Based on the information provided in the input objects the Device objects will be updated",
                "operationId": "DeviceUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Device"
                ],
                "summary": "DeviceInsert",
                "description": "Based on the information provided in the input objects,the Device objects will be inserted.",
                "operationId": "DeviceInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Device"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Device_Attribute": {
            "get": {
                "tags": [
                    "Device_Attribute"
                ],
                "summary": "Device_AttributeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Device Attribute objects.",
                "operationId": "Device_AttributeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Device_Attribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Attribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device_Attribute"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device_Attribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Device_Attribute value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Device_Attribute"
                ],
                "summary": "Device_AttributeUpdate",
                "description": "Based on the information provided in the input objects the Device Attribute objects will be updated",
                "operationId": "Device_AttributeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Attribute"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Attribute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Device_Attribute"
                ],
                "summary": "Device_AttributeInsert",
                "description": "Based on the information provided in the input objects,the Device Attribute objects will be inserted.",
                "operationId": "Device_AttributeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Attribute"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Attribute"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Attribute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Type_Attribute": {
            "get": {
                "tags": [
                    "Type_Attribute"
                ],
                "summary": "Type_AttributeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Type Attribute objects.",
                "operationId": "Type_AttributeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Type_Attribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Type_Attribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type_Attribute"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Type_Attribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Type_Attribute value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Type_Attribute"
                ],
                "summary": "Type_AttributeUpdate",
                "description": "Based on the information provided in the input objects the Type Attribute objects will be updated",
                "operationId": "Type_AttributeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Type_Attribute"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Type_Attribute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Type_Attribute"
                ],
                "summary": "Type_AttributeInsert",
                "description": "Based on the information provided in the input objects,the Type Attribute objects will be inserted.",
                "operationId": "Type_AttributeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Type_Attribute"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Type_Attribute"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Type_Attribute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Device_Category": {
            "get": {
                "tags": [
                    "Device_Category"
                ],
                "summary": "Device_CategoryFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Device Category objects.",
                "operationId": "Device_CategoryFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Device_Category",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device_Category"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device_Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Device_Category value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Device_Category"
                ],
                "summary": "Device_CategoryUpdate",
                "description": "Based on the information provided in the input objects the Device Category objects will be updated",
                "operationId": "Device_CategoryUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Category"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Category"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Device_Category"
                ],
                "summary": "Device_CategoryInsert",
                "description": "Based on the information provided in the input objects,the Device Category objects will be inserted.",
                "operationId": "Device_CategoryInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Category"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Category"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Category"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Device_Type": {
            "get": {
                "tags": [
                    "Device_Type"
                ],
                "summary": "Device_TypeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Device Type objects.",
                "operationId": "Device_TypeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Device_Type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device_Type"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Device_Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Device_Type value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Device_Type"
                ],
                "summary": "Device_TypeUpdate",
                "description": "Based on the information provided in the input objects the Device Type objects will be updated",
                "operationId": "Device_TypeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Device_Type"
                ],
                "summary": "Device_TypeInsert",
                "description": "Based on the information provided in the input objects,the Device Type objects will be inserted.",
                "operationId": "Device_TypeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Device_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Type"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Device_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Metric_Group": {
            "get": {
                "tags": [
                    "Metric_Group"
                ],
                "summary": "Metric_GroupFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Metric Group objects.",
                "operationId": "Metric_GroupFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Metric_Group",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric_Group"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric_Group"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Metric_Group value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Metric_Group"
                ],
                "summary": "Metric_GroupUpdate",
                "description": "Based on the information provided in the input objects the Metric Group objects will be updated",
                "operationId": "Metric_GroupUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Group"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Metric_Group"
                ],
                "summary": "Metric_GroupInsert",
                "description": "Based on the information provided in the input objects,the Metric Group objects will be inserted.",
                "operationId": "Metric_GroupInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Group"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Group"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Metric_Type": {
            "get": {
                "tags": [
                    "Metric_Type"
                ],
                "summary": "Metric_TypeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Metric Type objects.",
                "operationId": "Metric_TypeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Metric_Type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric_Type"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metric_Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Metric_Type value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Metric_Type"
                ],
                "summary": "Metric_TypeUpdate",
                "description": "Based on the information provided in the input objects the Metric Type objects will be updated",
                "operationId": "Metric_TypeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Metric_Type"
                ],
                "summary": "Metric_TypeInsert",
                "description": "Based on the information provided in the input objects,the Metric Type objects will be inserted.",
                "operationId": "Metric_TypeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Metric_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Type"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metric_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Application": {
            "get": {
                "tags": [
                    "Application"
                ],
                "summary": "ApplicationFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Application objects.",
                "operationId": "ApplicationFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Application",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Application"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Application"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Application"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Application value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Application"
                ],
                "summary": "ApplicationUpdate",
                "description": "Based on the information provided in the input objects the Application objects will be updated",
                "operationId": "ApplicationUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Application"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Application"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Application"
                ],
                "summary": "ApplicationInsert",
                "description": "Based on the information provided in the input objects,the Application objects will be inserted.",
                "operationId": "ApplicationInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Application"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Application"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Application"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Rollback_Context": {
            "get": {
                "tags": [
                    "Rollback_Context"
                ],
                "summary": "Rollback_ContextFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Rollback Context objects.",
                "operationId": "Rollback_ContextFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Rollback_Context",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Rollback_Context"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rollback_Context"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rollback_Context"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Rollback_Context value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Rollback_Context"
                ],
                "summary": "Rollback_ContextUpdate",
                "description": "Based on the information provided in the input objects the Rollback Context objects will be updated",
                "operationId": "Rollback_ContextUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Rollback_Context"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rollback_Context"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Rollback_Context"
                ],
                "summary": "Rollback_ContextInsert",
                "description": "Based on the information provided in the input objects,the Rollback Context objects will be inserted.",
                "operationId": "Rollback_ContextInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Rollback_Context"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Rollback_Context"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rollback_Context"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Queue": {
            "get": {
                "tags": [
                    "Queue"
                ],
                "summary": "QueueFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Queue objects.",
                "operationId": "QueueFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Queue",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Queue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Queue"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Queue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Queue value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Queue"
                ],
                "summary": "QueueUpdate",
                "description": "Based on the information provided in the input objects the Queue objects will be updated",
                "operationId": "QueueUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Queue"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Queue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Queue"
                ],
                "summary": "QueueInsert",
                "description": "Based on the information provided in the input objects,the Queue objects will be inserted.",
                "operationId": "QueueInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Queue"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Queue"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Queue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Queue/process": {
            "post": {
                "summary": "process",
                "operationId": "Queue.process",
                "tags": [
                    "Queue"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retprocess of type Queue of the undefined",
                                    "$ref": "#/components/schemas/Queue"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retprocess of type Queue of the undefined",
                                    "$ref": "#/components/schemas/Queue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method process"
                    }
                }
            }
        },
        "/Script_File": {
            "get": {
                "tags": [
                    "Script_File"
                ],
                "summary": "Script_FileFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Script File objects.",
                "operationId": "Script_FileFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Script_File",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Script_File"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Script_File"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Script_File"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Script_File value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Script_File"
                ],
                "summary": "Script_FileUpdate",
                "description": "Based on the information provided in the input objects the Script File objects will be updated",
                "operationId": "Script_FileUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Script_File"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Script_File"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Script_File"
                ],
                "summary": "Script_FileInsert",
                "description": "Based on the information provided in the input objects,the Script File objects will be inserted.",
                "operationId": "Script_FileInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Script_File"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Script_File"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Script_File"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Fix_Script": {
            "get": {
                "tags": [
                    "Fix_Script"
                ],
                "summary": "Fix_ScriptFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Fix Script objects.",
                "operationId": "Fix_ScriptFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Fix_Script",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Fix_Script"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Fix_Script"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Fix_Script"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Fix_Script value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Fix_Script"
                ],
                "summary": "Fix_ScriptUpdate",
                "description": "Based on the information provided in the input objects the Fix Script objects will be updated",
                "operationId": "Fix_ScriptUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Fix_Script"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Fix_Script"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Fix_Script"
                ],
                "summary": "Fix_ScriptInsert",
                "description": "Based on the information provided in the input objects,the Fix Script objects will be inserted.",
                "operationId": "Fix_ScriptInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Fix_Script"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Fix_Script"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Fix_Script"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Table": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "TableFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Table objects.",
                "operationId": "TableFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Table",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Table"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Table"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Table"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Table value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "TableUpdate",
                "description": "Based on the information provided in the input objects the Table objects will be updated",
                "operationId": "TableUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Table"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Table"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "TableInsert",
                "description": "Based on the information provided in the input objects,the Table objects will be inserted.",
                "operationId": "TableInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Table"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Table"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Table"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Column": {
            "get": {
                "tags": [
                    "Column"
                ],
                "summary": "ColumnFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Column objects.",
                "operationId": "ColumnFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Column",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Column"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Column"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Column"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Column value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Column"
                ],
                "summary": "ColumnUpdate",
                "description": "Based on the information provided in the input objects the Column objects will be updated",
                "operationId": "ColumnUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Column"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Column"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Column"
                ],
                "summary": "ColumnInsert",
                "description": "Based on the information provided in the input objects,the Column objects will be inserted.",
                "operationId": "ColumnInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Column"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Column"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Column"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Connection": {
            "get": {
                "tags": [
                    "Connection"
                ],
                "summary": "ConnectionFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Connection objects.",
                "operationId": "ConnectionFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Connection",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Connection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connection"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Connection value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Connection"
                ],
                "summary": "ConnectionUpdate",
                "description": "Based on the information provided in the input objects the Connection objects will be updated",
                "operationId": "ConnectionUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Connection"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Connection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Connection"
                ],
                "summary": "ConnectionInsert",
                "description": "Based on the information provided in the input objects,the Connection objects will be inserted.",
                "operationId": "ConnectionInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Connection"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Connection"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Connection"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Subscription_Trigger": {
            "get": {
                "tags": [
                    "Subscription_Trigger"
                ],
                "summary": "Subscription_TriggerFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Subscription Trigger objects.",
                "operationId": "Subscription_TriggerFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Subscription_Trigger",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Subscription_Trigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription_Trigger"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription_Trigger"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Subscription_Trigger value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Subscription_Trigger"
                ],
                "summary": "Subscription_TriggerUpdate",
                "description": "Based on the information provided in the input objects the Subscription Trigger objects will be updated",
                "operationId": "Subscription_TriggerUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Subscription_Trigger"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription_Trigger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Subscription_Trigger"
                ],
                "summary": "Subscription_TriggerInsert",
                "description": "Based on the information provided in the input objects,the Subscription Trigger objects will be inserted.",
                "operationId": "Subscription_TriggerInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Subscription_Trigger"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription_Trigger"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription_Trigger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Save_Subscription": {
            "get": {
                "tags": [
                    "Save_Subscription"
                ],
                "summary": "Save_SubscriptionFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Save Subscription objects.",
                "operationId": "Save_SubscriptionFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Save_Subscription",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Save_Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Save_Subscription"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Save_Subscription"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Save_Subscription value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Save_Subscription"
                ],
                "summary": "Save_SubscriptionUpdate",
                "description": "Based on the information provided in the input objects the Save Subscription objects will be updated",
                "operationId": "Save_SubscriptionUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Save_Subscription"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Save_Subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Save_Subscription"
                ],
                "summary": "Save_SubscriptionInsert",
                "description": "Based on the information provided in the input objects,the Save Subscription objects will be inserted.",
                "operationId": "Save_SubscriptionInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Save_Subscription"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Save_Subscription"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Save_Subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow": {
            "get": {
                "tags": [
                    "Flow"
                ],
                "summary": "FlowFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow objects.",
                "operationId": "FlowFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow"
                ],
                "summary": "FlowUpdate",
                "description": "Based on the information provided in the input objects the Flow objects will be updated",
                "operationId": "FlowUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow"
                ],
                "summary": "FlowInsert",
                "description": "Based on the information provided in the input objects,the Flow objects will be inserted.",
                "operationId": "FlowInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Input": {
            "get": {
                "tags": [
                    "Flow_Input"
                ],
                "summary": "Flow_InputFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Input objects.",
                "operationId": "Flow_InputFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Input",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Input"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Input"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Input"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Input value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Input"
                ],
                "summary": "Flow_InputUpdate",
                "description": "Based on the information provided in the input objects the Flow Input objects will be updated",
                "operationId": "Flow_InputUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Input"
                ],
                "summary": "Flow_InputInsert",
                "description": "Based on the information provided in the input objects,the Flow Input objects will be inserted.",
                "operationId": "Flow_InputInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Input"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Output": {
            "get": {
                "tags": [
                    "Flow_Output"
                ],
                "summary": "Flow_OutputFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Output objects.",
                "operationId": "Flow_OutputFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Output",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Output"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Output"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Output"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Output value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Output"
                ],
                "summary": "Flow_OutputUpdate",
                "description": "Based on the information provided in the input objects the Flow Output objects will be updated",
                "operationId": "Flow_OutputUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Output"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Output"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Output"
                ],
                "summary": "Flow_OutputInsert",
                "description": "Based on the information provided in the input objects,the Flow Output objects will be inserted.",
                "operationId": "Flow_OutputInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Output"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Output"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Output"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Variable": {
            "get": {
                "tags": [
                    "Flow_Variable"
                ],
                "summary": "Flow_VariableFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Variable objects.",
                "operationId": "Flow_VariableFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Variable",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Variable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Variable"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Variable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Variable value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Variable"
                ],
                "summary": "Flow_VariableUpdate",
                "description": "Based on the information provided in the input objects the Flow Variable objects will be updated",
                "operationId": "Flow_VariableUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Variable"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Variable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Variable"
                ],
                "summary": "Flow_VariableInsert",
                "description": "Based on the information provided in the input objects,the Flow Variable objects will be inserted.",
                "operationId": "Flow_VariableInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Variable"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Variable"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Variable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Field_Label": {
            "get": {
                "tags": [
                    "Field_Label"
                ],
                "summary": "Field_LabelFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Field Label objects.",
                "operationId": "Field_LabelFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Field_Label",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Field_Label"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Field_Label"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Field_Label"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Field_Label value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Field_Label"
                ],
                "summary": "Field_LabelUpdate",
                "description": "Based on the information provided in the input objects the Field Label objects will be updated",
                "operationId": "Field_LabelUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Field_Label"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Field_Label"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Field_Label"
                ],
                "summary": "Field_LabelInsert",
                "description": "Based on the information provided in the input objects,the Field Label objects will be inserted.",
                "operationId": "Field_LabelInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Field_Label"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Field_Label"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Field_Label"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Logic_Definition": {
            "get": {
                "tags": [
                    "Logic_Definition"
                ],
                "summary": "Logic_DefinitionFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Logic Definition objects.",
                "operationId": "Logic_DefinitionFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Logic_Definition",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Logic_Definition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Logic_Definition"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Logic_Definition"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Logic_Definition value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Logic_Definition"
                ],
                "summary": "Logic_DefinitionUpdate",
                "description": "Based on the information provided in the input objects the Logic Definition objects will be updated",
                "operationId": "Logic_DefinitionUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Logic_Definition"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Logic_Definition"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Logic_Definition"
                ],
                "summary": "Logic_DefinitionInsert",
                "description": "Based on the information provided in the input objects,the Logic Definition objects will be inserted.",
                "operationId": "Logic_DefinitionInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Logic_Definition"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Logic_Definition"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Logic_Definition"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Logic": {
            "get": {
                "tags": [
                    "Flow_Logic"
                ],
                "summary": "Flow_LogicFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Logic objects.",
                "operationId": "Flow_LogicFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Logic",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Logic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Logic"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Logic"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Logic value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Logic"
                ],
                "summary": "Flow_LogicUpdate",
                "description": "Based on the information provided in the input objects the Flow Logic objects will be updated",
                "operationId": "Flow_LogicUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Logic"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Logic"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Logic"
                ],
                "summary": "Flow_LogicInsert",
                "description": "Based on the information provided in the input objects,the Flow Logic objects will be inserted.",
                "operationId": "Flow_LogicInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Logic"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Logic"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Logic"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Instance": {
            "get": {
                "tags": [
                    "Flow_Instance"
                ],
                "summary": "Flow_InstanceFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Instance objects.",
                "operationId": "Flow_InstanceFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Instance",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Instance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Instance"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Instance"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Instance value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Instance"
                ],
                "summary": "Flow_InstanceUpdate",
                "description": "Based on the information provided in the input objects the Flow Instance objects will be updated",
                "operationId": "Flow_InstanceUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Instance"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Instance"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Instance"
                ],
                "summary": "Flow_InstanceInsert",
                "description": "Based on the information provided in the input objects,the Flow Instance objects will be inserted.",
                "operationId": "Flow_InstanceInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Instance"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Instance"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Instance"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Instance_Input": {
            "get": {
                "tags": [
                    "Flow_Instance_Input"
                ],
                "summary": "Flow_Instance_InputFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Instance Input objects.",
                "operationId": "Flow_Instance_InputFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Instance_Input",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Instance_Input"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Instance_Input"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Instance_Input"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Instance_Input value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Instance_Input"
                ],
                "summary": "Flow_Instance_InputUpdate",
                "description": "Based on the information provided in the input objects the Flow Instance Input objects will be updated",
                "operationId": "Flow_Instance_InputUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Instance_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Instance_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Instance_Input"
                ],
                "summary": "Flow_Instance_InputInsert",
                "description": "Based on the information provided in the input objects,the Flow Instance Input objects will be inserted.",
                "operationId": "Flow_Instance_InputInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Instance_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Instance_Input"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Instance_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Action_Instance": {
            "get": {
                "tags": [
                    "Action_Instance"
                ],
                "summary": "Action_InstanceFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Action Instance objects.",
                "operationId": "Action_InstanceFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Action_Instance",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Instance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Instance"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Instance"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Action_Instance value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Action_Instance"
                ],
                "summary": "Action_InstanceUpdate",
                "description": "Based on the information provided in the input objects the Action Instance objects will be updated",
                "operationId": "Action_InstanceUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Instance"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Instance"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Action_Instance"
                ],
                "summary": "Action_InstanceInsert",
                "description": "Based on the information provided in the input objects,the Action Instance objects will be inserted.",
                "operationId": "Action_InstanceInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Instance"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Instance"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Instance"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Variable_Value": {
            "get": {
                "tags": [
                    "Variable_Value"
                ],
                "summary": "Variable_ValueFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Variable Value objects.",
                "operationId": "Variable_ValueFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Variable_Value",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Variable_Value"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Variable_Value"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Variable_Value"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Variable_Value value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Variable_Value"
                ],
                "summary": "Variable_ValueUpdate",
                "description": "Based on the information provided in the input objects the Variable Value objects will be updated",
                "operationId": "Variable_ValueUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Variable_Value"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Variable_Value"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Variable_Value"
                ],
                "summary": "Variable_ValueInsert",
                "description": "Based on the information provided in the input objects,the Variable Value objects will be inserted.",
                "operationId": "Variable_ValueInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Variable_Value"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Variable_Value"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Variable_Value"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Block": {
            "get": {
                "tags": [
                    "Flow_Block"
                ],
                "summary": "Flow_BlockFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Block objects.",
                "operationId": "Flow_BlockFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Block",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Block"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Block"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Block"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Block value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Block"
                ],
                "summary": "Flow_BlockUpdate",
                "description": "Based on the information provided in the input objects the Flow Block objects will be updated",
                "operationId": "Flow_BlockUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Block"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Block"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Block"
                ],
                "summary": "Flow_BlockInsert",
                "description": "Based on the information provided in the input objects,the Flow Block objects will be inserted.",
                "operationId": "Flow_BlockInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Block"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Block"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Block"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Element_Mapping": {
            "get": {
                "tags": [
                    "Element_Mapping"
                ],
                "summary": "Element_MappingFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Element Mapping objects.",
                "operationId": "Element_MappingFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Element_Mapping",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Element_Mapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Element_Mapping"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Element_Mapping"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Element_Mapping value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Element_Mapping"
                ],
                "summary": "Element_MappingUpdate",
                "description": "Based on the information provided in the input objects the Element Mapping objects will be updated",
                "operationId": "Element_MappingUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Element_Mapping"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Element_Mapping"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Element_Mapping"
                ],
                "summary": "Element_MappingInsert",
                "description": "Based on the information provided in the input objects,the Element Mapping objects will be inserted.",
                "operationId": "Element_MappingInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Element_Mapping"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Element_Mapping"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Element_Mapping"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Input_Script": {
            "get": {
                "tags": [
                    "Flow_Input_Script"
                ],
                "summary": "Flow_Input_ScriptFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Input Script objects.",
                "operationId": "Flow_Input_ScriptFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Input_Script",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Input_Script"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Input_Script"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Input_Script"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Input_Script value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Input_Script"
                ],
                "summary": "Flow_Input_ScriptUpdate",
                "description": "Based on the information provided in the input objects the Flow Input Script objects will be updated",
                "operationId": "Flow_Input_ScriptUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Input_Script"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Input_Script"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Input_Script"
                ],
                "summary": "Flow_Input_ScriptInsert",
                "description": "Based on the information provided in the input objects,the Flow Input Script objects will be inserted.",
                "operationId": "Flow_Input_ScriptInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Input_Script"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Input_Script"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Input_Script"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Action_Type": {
            "get": {
                "tags": [
                    "Action_Type"
                ],
                "summary": "Action_TypeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Action Type objects.",
                "operationId": "Action_TypeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Action_Type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Type"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Action_Type value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Action_Type"
                ],
                "summary": "Action_TypeUpdate",
                "description": "Based on the information provided in the input objects the Action Type objects will be updated",
                "operationId": "Action_TypeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Action_Type"
                ],
                "summary": "Action_TypeInsert",
                "description": "Based on the information provided in the input objects,the Action Type objects will be inserted.",
                "operationId": "Action_TypeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Type"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Action_Input": {
            "get": {
                "tags": [
                    "Action_Input"
                ],
                "summary": "Action_InputFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Action Input objects.",
                "operationId": "Action_InputFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Action_Input",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Input"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Input"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Input"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Action_Input value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Action_Input"
                ],
                "summary": "Action_InputUpdate",
                "description": "Based on the information provided in the input objects the Action Input objects will be updated",
                "operationId": "Action_InputUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Action_Input"
                ],
                "summary": "Action_InputInsert",
                "description": "Based on the information provided in the input objects,the Action Input objects will be inserted.",
                "operationId": "Action_InputInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Input"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Action_Step": {
            "get": {
                "tags": [
                    "Action_Step"
                ],
                "summary": "Action_StepFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Action Step objects.",
                "operationId": "Action_StepFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Action_Step",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Step"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Step"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Step"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Action_Step value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Action_Step"
                ],
                "summary": "Action_StepUpdate",
                "description": "Based on the information provided in the input objects the Action Step objects will be updated",
                "operationId": "Action_StepUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Step"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Step"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Action_Step"
                ],
                "summary": "Action_StepInsert",
                "description": "Based on the information provided in the input objects,the Action Step objects will be inserted.",
                "operationId": "Action_StepInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Step"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Step"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Step"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Action_Step_Input": {
            "get": {
                "tags": [
                    "Action_Step_Input"
                ],
                "summary": "Action_Step_InputFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Action Step Input objects.",
                "operationId": "Action_Step_InputFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Action_Step_Input",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Step_Input"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Step_Input"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action_Step_Input"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Action_Step_Input value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Action_Step_Input"
                ],
                "summary": "Action_Step_InputUpdate",
                "description": "Based on the information provided in the input objects the Action Step Input objects will be updated",
                "operationId": "Action_Step_InputUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Step_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Step_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Action_Step_Input"
                ],
                "summary": "Action_Step_InputInsert",
                "description": "Based on the information provided in the input objects,the Action Step Input objects will be inserted.",
                "operationId": "Action_Step_InputInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Action_Step_Input"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Step_Input"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action_Step_Input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Plan": {
            "get": {
                "tags": [
                    "Flow_Plan"
                ],
                "summary": "Flow_PlanFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Plan objects.",
                "operationId": "Flow_PlanFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Plan",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Plan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Plan"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Plan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Plan value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Plan"
                ],
                "summary": "Flow_PlanUpdate",
                "description": "Based on the information provided in the input objects the Flow Plan objects will be updated",
                "operationId": "Flow_PlanUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Plan"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Plan"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Plan"
                ],
                "summary": "Flow_PlanInsert",
                "description": "Based on the information provided in the input objects,the Flow Plan objects will be inserted.",
                "operationId": "Flow_PlanInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Plan"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Plan"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Plan"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Setting": {
            "get": {
                "tags": [
                    "Flow_Setting"
                ],
                "summary": "Flow_SettingFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Setting objects.",
                "operationId": "Flow_SettingFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Setting",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Setting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Setting"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Setting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Setting value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Setting"
                ],
                "summary": "Flow_SettingUpdate",
                "description": "Based on the information provided in the input objects the Flow Setting objects will be updated",
                "operationId": "Flow_SettingUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Setting"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Setting"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Setting"
                ],
                "summary": "Flow_SettingInsert",
                "description": "Based on the information provided in the input objects,the Flow Setting objects will be inserted.",
                "operationId": "Flow_SettingInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Setting"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Setting"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Setting"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Snapshot": {
            "get": {
                "tags": [
                    "Flow_Snapshot"
                ],
                "summary": "Flow_SnapshotFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Snapshot objects.",
                "operationId": "Flow_SnapshotFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Snapshot",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Snapshot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Snapshot"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Snapshot"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Snapshot value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Snapshot"
                ],
                "summary": "Flow_SnapshotUpdate",
                "description": "Based on the information provided in the input objects the Flow Snapshot objects will be updated",
                "operationId": "Flow_SnapshotUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Snapshot"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Snapshot"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Snapshot"
                ],
                "summary": "Flow_SnapshotInsert",
                "description": "Based on the information provided in the input objects,the Flow Snapshot objects will be inserted.",
                "operationId": "Flow_SnapshotInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Snapshot"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Snapshot"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Snapshot"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Snapshot/fromFlow": {
            "post": {
                "summary": "fromFlow",
                "operationId": "Flow_Snapshot.fromFlow",
                "tags": [
                    "Flow_Snapshot"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "flow": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The flow of type Flow of the Flow_Snapshot",
                                        "$ref": "#/components/schemas/Flow"
                                    }
                                }
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "flow": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The flow of type Flow of the Flow_Snapshot",
                                        "$ref": "#/components/schemas/Flow"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retfromFlow of type undefined of the undefined"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retfromFlow of type undefined of the undefined"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method fromFlow"
                    }
                }
            }
        },
        "/Pill_Compound": {
            "get": {
                "tags": [
                    "Pill_Compound"
                ],
                "summary": "Pill_CompoundFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Pill Compound objects.",
                "operationId": "Pill_CompoundFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Pill_Compound",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Pill_Compound"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pill_Compound"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pill_Compound"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Pill_Compound value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Pill_Compound"
                ],
                "summary": "Pill_CompoundUpdate",
                "description": "Based on the information provided in the input objects the Pill Compound objects will be updated",
                "operationId": "Pill_CompoundUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Pill_Compound"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pill_Compound"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Pill_Compound"
                ],
                "summary": "Pill_CompoundInsert",
                "description": "Based on the information provided in the input objects,the Pill Compound objects will be inserted.",
                "operationId": "Pill_CompoundInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Pill_Compound"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pill_Compound"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pill_Compound"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Transform": {
            "get": {
                "tags": [
                    "Transform"
                ],
                "summary": "TransformFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Transform objects.",
                "operationId": "TransformFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Transform",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Transform"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transform"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transform"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Transform value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Transform"
                ],
                "summary": "TransformUpdate",
                "description": "Based on the information provided in the input objects the Transform objects will be updated",
                "operationId": "TransformUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Transform"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Transform"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Transform"
                ],
                "summary": "TransformInsert",
                "description": "Based on the information provided in the input objects,the Transform objects will be inserted.",
                "operationId": "TransformInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Transform"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Transform"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Transform"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Data_Definition": {
            "get": {
                "tags": [
                    "Data_Definition"
                ],
                "summary": "Data_DefinitionFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Data Definition objects.",
                "operationId": "Data_DefinitionFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Data_Definition",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Data_Definition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Data_Definition"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Data_Definition"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Data_Definition value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Data_Definition"
                ],
                "summary": "Data_DefinitionUpdate",
                "description": "Based on the information provided in the input objects the Data Definition objects will be updated",
                "operationId": "Data_DefinitionUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Data_Definition"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Data_Definition"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Data_Definition"
                ],
                "summary": "Data_DefinitionInsert",
                "description": "Based on the information provided in the input objects,the Data Definition objects will be inserted.",
                "operationId": "Data_DefinitionInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Data_Definition"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Data_Definition"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Data_Definition"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Data": {
            "get": {
                "tags": [
                    "Flow_Data"
                ],
                "summary": "Flow_DataFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Data objects.",
                "operationId": "Flow_DataFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Data",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Data"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Data"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Data"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Data value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Data"
                ],
                "summary": "Flow_DataUpdate",
                "description": "Based on the information provided in the input objects the Flow Data objects will be updated",
                "operationId": "Flow_DataUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Data"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Data"
                ],
                "summary": "Flow_DataInsert",
                "description": "Based on the information provided in the input objects,the Flow Data objects will be inserted.",
                "operationId": "Flow_DataInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Data"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Data"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Flow_Data_Variable": {
            "get": {
                "tags": [
                    "Flow_Data_Variable"
                ],
                "summary": "Flow_Data_VariableFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Flow Data Variable objects.",
                "operationId": "Flow_Data_VariableFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Flow_Data_Variable",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Data_Variable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Data_Variable"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow_Data_Variable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Flow_Data_Variable value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Flow_Data_Variable"
                ],
                "summary": "Flow_Data_VariableUpdate",
                "description": "Based on the information provided in the input objects the Flow Data Variable objects will be updated",
                "operationId": "Flow_Data_VariableUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Data_Variable"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Data_Variable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Flow_Data_Variable"
                ],
                "summary": "Flow_Data_VariableInsert",
                "description": "Based on the information provided in the input objects,the Flow Data Variable objects will be inserted.",
                "operationId": "Flow_Data_VariableInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Flow_Data_Variable"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Data_Variable"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Flow_Data_Variable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Security_Control": {
            "get": {
                "tags": [
                    "Security_Control"
                ],
                "summary": "Security_ControlFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Security Control objects.",
                "operationId": "Security_ControlFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Security_Control",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Control"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Security_Control"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Security_Control"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Security_Control value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Security_Control"
                ],
                "summary": "Security_ControlUpdate",
                "description": "Based on the information provided in the input objects the Security Control objects will be updated",
                "operationId": "Security_ControlUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Control"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Control"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Security_Control"
                ],
                "summary": "Security_ControlInsert",
                "description": "Based on the information provided in the input objects,the Security Control objects will be inserted.",
                "operationId": "Security_ControlInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Control"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Control"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Control"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Security_Type": {
            "get": {
                "tags": [
                    "Security_Type"
                ],
                "summary": "Security_TypeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Security Type objects.",
                "operationId": "Security_TypeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Security_Type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Security_Type"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Security_Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Security_Type value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Security_Type"
                ],
                "summary": "Security_TypeUpdate",
                "description": "Based on the information provided in the input objects the Security Type objects will be updated",
                "operationId": "Security_TypeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Security_Type"
                ],
                "summary": "Security_TypeInsert",
                "description": "Based on the information provided in the input objects,the Security Type objects will be inserted.",
                "operationId": "Security_TypeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Type"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Security_Operation": {
            "get": {
                "tags": [
                    "Security_Operation"
                ],
                "summary": "Security_OperationFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Security Operation objects.",
                "operationId": "Security_OperationFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Security_Operation",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Operation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Security_Operation"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Security_Operation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Security_Operation value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Security_Operation"
                ],
                "summary": "Security_OperationUpdate",
                "description": "Based on the information provided in the input objects the Security Operation objects will be updated",
                "operationId": "Security_OperationUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Operation"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Operation"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Security_Operation"
                ],
                "summary": "Security_OperationInsert",
                "description": "Based on the information provided in the input objects,the Security Operation objects will be inserted.",
                "operationId": "Security_OperationInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Security_Operation"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Operation"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Security_Operation"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityClass": {
            "get": {
                "tags": [
                    "EntityClass"
                ],
                "summary": "EntityClassFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityClass objects.",
                "operationId": "EntityClassFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityClass",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityClass"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityClass"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityClass"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityClass value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityClass"
                ],
                "summary": "EntityClassUpdate",
                "description": "Based on the information provided in the input objects the EntityClass objects will be updated",
                "operationId": "EntityClassUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityClass"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityClass"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityClass"
                ],
                "summary": "EntityClassInsert",
                "description": "Based on the information provided in the input objects,the EntityClass objects will be inserted.",
                "operationId": "EntityClassInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityClass"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityClass"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityClass"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityAttribute": {
            "get": {
                "tags": [
                    "EntityAttribute"
                ],
                "summary": "EntityAttributeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityAttribute objects.",
                "operationId": "EntityAttributeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityAttribute",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityAttribute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityAttribute"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityAttribute"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityAttribute value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityAttribute"
                ],
                "summary": "EntityAttributeUpdate",
                "description": "Based on the information provided in the input objects the EntityAttribute objects will be updated",
                "operationId": "EntityAttributeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityAttribute"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityAttribute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityAttribute"
                ],
                "summary": "EntityAttributeInsert",
                "description": "Based on the information provided in the input objects,the EntityAttribute objects will be inserted.",
                "operationId": "EntityAttributeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityAttribute"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityAttribute"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityAttribute"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Company": {
            "get": {
                "tags": [
                    "Company"
                ],
                "summary": "CompanyFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Company objects.",
                "operationId": "CompanyFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Company",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Company"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Company"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Company"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Company value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Company"
                ],
                "summary": "CompanyUpdate",
                "description": "Based on the information provided in the input objects the Company objects will be updated",
                "operationId": "CompanyUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Company"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Company"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Company"
                ],
                "summary": "CompanyInsert",
                "description": "Based on the information provided in the input objects,the Company objects will be inserted.",
                "operationId": "CompanyInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Company"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Company"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Company"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityAttributeGroup": {
            "get": {
                "tags": [
                    "EntityAttributeGroup"
                ],
                "summary": "EntityAttributeGroupFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityAttributeGroup objects.",
                "operationId": "EntityAttributeGroupFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityAttributeGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityAttributeGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityAttributeGroup"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityAttributeGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityAttributeGroup value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityAttributeGroup"
                ],
                "summary": "EntityAttributeGroupUpdate",
                "description": "Based on the information provided in the input objects the EntityAttributeGroup objects will be updated",
                "operationId": "EntityAttributeGroupUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityAttributeGroup"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityAttributeGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityAttributeGroup"
                ],
                "summary": "EntityAttributeGroupInsert",
                "description": "Based on the information provided in the input objects,the EntityAttributeGroup objects will be inserted.",
                "operationId": "EntityAttributeGroupInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityAttributeGroup"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityAttributeGroup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityAttributeGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityClassGroup": {
            "get": {
                "tags": [
                    "EntityClassGroup"
                ],
                "summary": "EntityClassGroupFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityClassGroup objects.",
                "operationId": "EntityClassGroupFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityClassGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityClassGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityClassGroup"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityClassGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityClassGroup value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityClassGroup"
                ],
                "summary": "EntityClassGroupUpdate",
                "description": "Based on the information provided in the input objects the EntityClassGroup objects will be updated",
                "operationId": "EntityClassGroupUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityClassGroup"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityClassGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityClassGroup"
                ],
                "summary": "EntityClassGroupInsert",
                "description": "Based on the information provided in the input objects,the EntityClassGroup objects will be inserted.",
                "operationId": "EntityClassGroupInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityClassGroup"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityClassGroup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityClassGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityMethod": {
            "get": {
                "tags": [
                    "EntityMethod"
                ],
                "summary": "EntityMethodFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityMethod objects.",
                "operationId": "EntityMethodFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityMethod",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityMethod"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityMethod"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityMethod value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityMethod"
                ],
                "summary": "EntityMethodUpdate",
                "description": "Based on the information provided in the input objects the EntityMethod objects will be updated",
                "operationId": "EntityMethodUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityMethod"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityMethod"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityMethod"
                ],
                "summary": "EntityMethodInsert",
                "description": "Based on the information provided in the input objects,the EntityMethod objects will be inserted.",
                "operationId": "EntityMethodInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityMethod"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityMethod"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityMethod"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityModule": {
            "get": {
                "tags": [
                    "EntityModule"
                ],
                "summary": "EntityModuleFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityModule objects.",
                "operationId": "EntityModuleFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityModule",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityModule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityModule"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityModule"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityModule value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityModule"
                ],
                "summary": "EntityModuleUpdate",
                "description": "Based on the information provided in the input objects the EntityModule objects will be updated",
                "operationId": "EntityModuleUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityModule"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityModule"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityModule"
                ],
                "summary": "EntityModuleInsert",
                "description": "Based on the information provided in the input objects,the EntityModule objects will be inserted.",
                "operationId": "EntityModuleInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityModule"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityModule"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityModule"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/NameValue": {
            "get": {
                "tags": [
                    "NameValue"
                ],
                "summary": "NameValueFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of NameValue objects.",
                "operationId": "NameValueFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for NameValue",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NameValue"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NameValue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid NameValue value"
                    }
                }
            },
            "post": {
                "tags": [
                    "NameValue"
                ],
                "summary": "NameValueUpdate",
                "description": "Based on the information provided in the input objects the NameValue objects will be updated",
                "operationId": "NameValueUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameValue"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NameValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "NameValue"
                ],
                "summary": "NameValueInsert",
                "description": "Based on the information provided in the input objects,the NameValue objects will be inserted.",
                "operationId": "NameValueInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameValue"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NameValue"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NameValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityObject": {
            "get": {
                "tags": [
                    "EntityObject"
                ],
                "summary": "EntityObjectFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityObject objects.",
                "operationId": "EntityObjectFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityObject",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityObject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityObject"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityObject"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityObject value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityObject"
                ],
                "summary": "EntityObjectUpdate",
                "description": "Based on the information provided in the input objects the EntityObject objects will be updated",
                "operationId": "EntityObjectUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityObject"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityObject"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityObject"
                ],
                "summary": "EntityObjectInsert",
                "description": "Based on the information provided in the input objects,the EntityObject objects will be inserted.",
                "operationId": "EntityObjectInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityObject"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityObject"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityObject"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/EntityValue": {
            "get": {
                "tags": [
                    "EntityValue"
                ],
                "summary": "EntityValueFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of EntityValue objects.",
                "operationId": "EntityValueFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for EntityValue",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityValue"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityValue"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid EntityValue value"
                    }
                }
            },
            "post": {
                "tags": [
                    "EntityValue"
                ],
                "summary": "EntityValueUpdate",
                "description": "Based on the information provided in the input objects the EntityValue objects will be updated",
                "operationId": "EntityValueUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityValue"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "EntityValue"
                ],
                "summary": "EntityValueInsert",
                "description": "Based on the information provided in the input objects,the EntityValue objects will be inserted.",
                "operationId": "EntityValueInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/EntityValue"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityValue"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Config": {
            "get": {
                "tags": [
                    "Config"
                ],
                "summary": "ConfigFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Config objects.",
                "operationId": "ConfigFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Config",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Config"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Config value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Config"
                ],
                "summary": "ConfigUpdate",
                "description": "Based on the information provided in the input objects the Config objects will be updated",
                "operationId": "ConfigUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Config"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Config"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Config"
                ],
                "summary": "ConfigInsert",
                "description": "Based on the information provided in the input objects,the Config objects will be inserted.",
                "operationId": "ConfigInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Config"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Config"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Config"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Tool": {
            "get": {
                "tags": [
                    "Tool"
                ],
                "summary": "ToolFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Tool objects.",
                "operationId": "ToolFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Tool",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Tool"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tool"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tool"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Tool value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tool"
                ],
                "summary": "ToolUpdate",
                "description": "Based on the information provided in the input objects the Tool objects will be updated",
                "operationId": "ToolUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Tool"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Tool"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tool"
                ],
                "summary": "ToolInsert",
                "description": "Based on the information provided in the input objects,the Tool objects will be inserted.",
                "operationId": "ToolInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Tool"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Tool"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Tool"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Config_Group": {
            "get": {
                "tags": [
                    "Config_Group"
                ],
                "summary": "Config_GroupFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Config Group objects.",
                "operationId": "Config_GroupFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Config_Group",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Config_Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config_Group"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config_Group"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Config_Group value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Config_Group"
                ],
                "summary": "Config_GroupUpdate",
                "description": "Based on the information provided in the input objects the Config Group objects will be updated",
                "operationId": "Config_GroupUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Config_Group"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Config_Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Config_Group"
                ],
                "summary": "Config_GroupInsert",
                "description": "Based on the information provided in the input objects,the Config Group objects will be inserted.",
                "operationId": "Config_GroupInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Config_Group"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Config_Group"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Config_Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Tool_Type": {
            "get": {
                "tags": [
                    "Tool_Type"
                ],
                "summary": "Tool_TypeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Tool Type objects.",
                "operationId": "Tool_TypeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Tool_Type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Tool_Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tool_Type"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tool_Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Tool_Type value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tool_Type"
                ],
                "summary": "Tool_TypeUpdate",
                "description": "Based on the information provided in the input objects the Tool Type objects will be updated",
                "operationId": "Tool_TypeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Tool_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Tool_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tool_Type"
                ],
                "summary": "Tool_TypeInsert",
                "description": "Based on the information provided in the input objects,the Tool Type objects will be inserted.",
                "operationId": "Tool_TypeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Tool_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Tool_Type"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Tool_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Event": {
            "get": {
                "tags": [
                    "Event"
                ],
                "summary": "EventFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Event objects.",
                "operationId": "EventFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Event",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Event"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Event value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Event"
                ],
                "summary": "EventUpdate",
                "description": "Based on the information provided in the input objects the Event objects will be updated",
                "operationId": "EventUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Event"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Event"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Event"
                ],
                "summary": "EventInsert",
                "description": "Based on the information provided in the input objects,the Event objects will be inserted.",
                "operationId": "EventInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Event"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Event"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Event"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Event/listen": {
            "post": {
                "summary": "listen",
                "operationId": "Event.listen",
                "tags": [
                    "Event"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The node of type Node of the Event",
                                        "$ref": "#/components/schemas/Node"
                                    }
                                }
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "node": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The node of type Node of the Event",
                                        "$ref": "#/components/schemas/Node"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retlisten of type undefined of the undefined"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retlisten of type undefined of the undefined"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method listen"
                    }
                }
            }
        },
        "/Event/trigger": {
            "post": {
                "summary": "trigger",
                "operationId": "Event.trigger",
                "tags": [
                    "Event"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The rettrigger of type undefined of the undefined"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The rettrigger of type undefined of the undefined"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method trigger"
                    }
                }
            }
        },
        "/Event/capture": {
            "post": {
                "summary": "capture",
                "operationId": "Event.capture",
                "tags": [
                    "Event"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The event of type undefined of the Event"
                                    }
                                }
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The event of type undefined of the Event"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retcapture of type Event of the undefined",
                                    "$ref": "#/components/schemas/Event"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retcapture of type Event of the undefined",
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method capture"
                    }
                }
            }
        },
        "/Event/process": {
            "post": {
                "summary": "process",
                "operationId": "Event.process",
                "tags": [
                    "Event"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retprocess of type Event of the undefined",
                                    "$ref": "#/components/schemas/Event"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retprocess of type Event of the undefined",
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method process"
                    }
                }
            }
        },
        "/Node": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "NodeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Node objects.",
                "operationId": "NodeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Node",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Node value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Node"
                ],
                "summary": "NodeUpdate",
                "description": "Based on the information provided in the input objects the Node objects will be updated",
                "operationId": "NodeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Node"
                ],
                "summary": "NodeInsert",
                "description": "Based on the information provided in the input objects,the Node objects will be inserted.",
                "operationId": "NodeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Node"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Node/authCode": {
            "post": {
                "summary": "authCode",
                "operationId": "Node.authCode",
                "tags": [
                    "Node"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The code of type undefined of the Node"
                                    },
                                    "tool": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The tool of type Tool of the Node",
                                        "$ref": "#/components/schemas/Tool"
                                    }
                                }
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The code of type undefined of the Node"
                                    },
                                    "tool": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The tool of type Tool of the Node",
                                        "$ref": "#/components/schemas/Tool"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retauthCode of type undefined of the undefined"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retauthCode of type undefined of the undefined"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method authCode"
                    }
                }
            }
        },
        "/Node/init": {
            "post": {
                "summary": "init",
                "operationId": "Node.init",
                "tags": [
                    "Node"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "online": {
                                        "type": "number",
                                        "format": "number",
                                        "description": "The online of type undefined of the Node"
                                    },
                                    "code": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The code of type undefined of the Node"
                                    },
                                    "uid": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The uid of type undefined of the Node"
                                    }
                                }
                            }
                        },
                        "content:application/x-www-form-urlenNamed": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "online": {
                                        "type": "number",
                                        "format": "number",
                                        "description": "The online of type undefined of the Node"
                                    },
                                    "code": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The code of type undefined of the Node"
                                    },
                                    "uid": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "The uid of type undefined of the Node"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retinit of type Node of the undefined",
                                    "$ref": "#/components/schemas/Node"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The retinit of type Node of the undefined",
                                    "$ref": "#/components/schemas/Node"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Method Parameters"
                    },
                    "404": {
                        "description": "Unknown Method init"
                    }
                }
            }
        },
        "/Node_Context": {
            "get": {
                "tags": [
                    "Node_Context"
                ],
                "summary": "Node_ContextFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Node Context objects.",
                "operationId": "Node_ContextFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Node_Context",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Context"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node_Context"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node_Context"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Node_Context value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Node_Context"
                ],
                "summary": "Node_ContextUpdate",
                "description": "Based on the information provided in the input objects the Node Context objects will be updated",
                "operationId": "Node_ContextUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Context"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Context"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Node_Context"
                ],
                "summary": "Node_ContextInsert",
                "description": "Based on the information provided in the input objects,the Node Context objects will be inserted.",
                "operationId": "Node_ContextInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Context"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Context"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Context"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Node_Group": {
            "get": {
                "tags": [
                    "Node_Group"
                ],
                "summary": "Node_GroupFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Node Group objects.",
                "operationId": "Node_GroupFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Node_Group",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Group"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node_Group"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node_Group"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Node_Group value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Node_Group"
                ],
                "summary": "Node_GroupUpdate",
                "description": "Based on the information provided in the input objects the Node Group objects will be updated",
                "operationId": "Node_GroupUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Group"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Node_Group"
                ],
                "summary": "Node_GroupInsert",
                "description": "Based on the information provided in the input objects,the Node Group objects will be inserted.",
                "operationId": "Node_GroupInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Group"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Group"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Node_Type": {
            "get": {
                "tags": [
                    "Node_Type"
                ],
                "summary": "Node_TypeFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Node Type objects.",
                "operationId": "Node_TypeFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Node_Type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Type"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node_Type"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Node_Type"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Node_Type value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Node_Type"
                ],
                "summary": "Node_TypeUpdate",
                "description": "Based on the information provided in the input objects the Node Type objects will be updated",
                "operationId": "Node_TypeUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Node_Type"
                ],
                "summary": "Node_TypeInsert",
                "description": "Based on the information provided in the input objects,the Node Type objects will be inserted.",
                "operationId": "Node_TypeInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Node_Type"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Type"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Node_Type"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/Mapping": {
            "get": {
                "tags": [
                    "Mapping"
                ],
                "summary": "MappingFindAll",
                "description": "Based on the information provided in the input objects, the query will deliver an array of Mapping objects.",
                "operationId": "MappingFindAll",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to build matching query for Mapping",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Mapping"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mapping"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mapping"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Mapping value"
                    }
                }
            },
            "post": {
                "tags": [
                    "Mapping"
                ],
                "summary": "MappingUpdate",
                "description": "Based on the information provided in the input objects the Mapping objects will be updated",
                "operationId": "MappingUpdate",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Mapping"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mapping"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            },
            "put": {
                "tags": [
                    "Mapping"
                ],
                "summary": "MappingInsert",
                "description": "Based on the information provided in the input objects,the Mapping objects will be inserted.",
                "operationId": "MappingInsert",
                "parameters": [
                    {
                        "name": "obj",
                        "in": "query",
                        "description": "Object to insert",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Mapping"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Mapping"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mapping"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        }
    }
}
