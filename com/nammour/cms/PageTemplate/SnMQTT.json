{
	"Id": "88ccec3227af6c9a195533c25883046894ae2804",
	"body": "",
	"footer": "",
	"name": "SnMQTT",
	"script": "d2luZG93LlRlbXBsYXRlID0gY2xhc3MgZXh0ZW5kcyBfRnJFTUQuUHJveHlOb2RlVGVtcGxhdGUgewoJYXN5bmMgbWFpbigpIHsKCQl0aGlzLl90aGlzID0gbmV3IHRoaXMub1Njb3BlW3RoaXMub1Njb3BlLkVudGl0eUNsYXNzZXMuZmluZChjID0+IGMuSXNNYWluKS5OYW1lXShudWxsLCAnU05PV09PQicpOwoJfQoKCWFzeW5jIHBvc3RJbmplY3QocmV0KSB7CgkJbGV0IGpzb24gPSBhd2FpdCB0aGlzLl90aGlzLnJ1blNjcmlwdChyZXQuQm9keSk7CgkJbGV0IHN5c19pZCA9ICdmNDc5MjljMmMzYzFlYTUwZjhkODUzZjFiNDAxMzEzOCc7CgoJCWZhbHNlICYmIGNvbnNvbGUubG9nKGpzb25bMF0uc2NyaXB0LnJlcGxhY2UoL2NsYXNzIChcdyspIHsvZ20sICdnbG9iYWwuJDEgPSBDbGFzcy5jcmVhdGUoKTtcbmdsb2JhbC4kMS5wcm90b3R5cGUgPSAoeycpCgkJCS5yZXBsYWNlKC9cL1wqKFx3K1wucHJvdG90eXBlXC5cdysuY2FsbFwodGhpcyxccylcKlwvXHMqc3VwZXJcKC9nLCAnJDEnKQoJCQkucmVwbGFjZSgvXHQoKD8hZnVuY3Rpb25cYilcYlx3KylcKC9nbSwgJyxcdCQxOiBmdW5jdGlvbignKQoJCQkucmVwbGFjZSgvY2xhc3MgKFx3KykgZXh0ZW5kcyAoXHcrKSB7L2dtLCAnZ2xvYmFsLiQxID0gQ2xhc3MuY3JlYXRlKCk7XG5nbG9iYWwuJDEucHJvdG90eXBlID0gT2JqZWN0LmV4dGVuZHNPYmplY3QoZ2xvYmFsLiQyLCB7JykKCQkJLnJlcGxhY2UoL1x0KGNvbnN0cnVjdG9yKVwoL2dtLCAnXHRpbml0aWFsaXplOiBmdW5jdGlvbignKQoJCQkucmVwbGFjZSgvXHQobGV0KSAvZ20sICdcdHZhciAnKS5yZXBsYWNlKC9cdChcdyspIFw9L2dtLCAnXHQkMTogJykgKyAnKScpOwoKCQlpZiAoIXRoaXMuX25ldygnUXVldWUnKSkgewoJCQl0aGlzLl90aGlzLklkID0gc3lzX2lkOwoJCQlhd2FpdCB0aGlzLl90aGlzLl9yZXN0KCdlY2NfcXVldWUnLCBudWxsLCB7CgkJCQlwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShqc29uKSwKCQkJCXRvcGljOiAnQVBJU0VSVkVSJywKCQkJCWFnZW50OiAnR2VuZXJhdGVkIFNjcmlwdCcsCgkJCQluYW1lOiB0aGlzLnNjb3BlICsgJy5wcm94eScsCgkJCQlxdWV1ZTogJ2lucHV0JywKCQkJfSwgJ3B1dCcpOwoJCQkvL2NvbnNvbGUubG9nKCJqc29uIiwganNvbik7CgkJCXJldHVybjsKCQl9CgoJCWF3YWl0IHRoaXMuX25ldygnUXVldWUnLCAnU05PV09PQicsIHN5c19pZCkuY29kZSh0aGlzLnNjb3BlICsgJy5wcm94eScpLm5hbWUoJ0FQSVNFUlZFUicpLnJlbWFyayhqc29uLm1hcChjID0+IHRoaXMuX25ldygnU2NyaXB0IEZpbGUnLCAnU05PV09PQicpLl9mcm9tRG9jdW1lbnQoYywgdHJ1ZSkpLm1hcChjID0+IGMuX3RvSlNPTih7CgkJCWJNYXA6IHRydWUsCgkJCXBhcnNlOiB0cnVlCgkJfSkpKS51cGRhdGUoKTsKCX0KCglhTmFtZShjKSB7CgkJcmV0dXJuIHRoaXMuc2NvcGUgKyAnXycgKyAoYy5FbnRpdHlNb2R1bGUgPyAoKGMuRW50aXR5TW9kdWxlLkFsaWFzIHx8ICcnKS5zcGxpdCgnLicpLmpvaW4oJ18nKSArICdfJykgOiAnJykgKyB0aGlzLm5OYW1lKGMpOwoJfQoKCXNuVHlwZShlYSwgcCA9ICcnKSB7CgkJbGV0IHJldCA9ICcnOwoJCWlmIChlYS5FbnRpdHlUeXBlKSB7CgkJCXJldCA9IHRoaXMuYU5hbWUoZWEuRW50aXR5VHlwZSk7CgkJfSBlbHNlIGlmIChlYS5Jc1N0cmluZyB8fCBlYS5Jc1RleHQpIHsKCQkJcmV0ID0gJ3N0ZDo6c3RyaW5nJzsKCQl9IGVsc2UgaWYgKGVhLklzQm9vbCkgewoJCQlyZXQgPSAnYm9vbCc7CgkJfSBlbHNlIGlmIChlYS5Jc0xvbmcpIHsKCQkJcmV0ID0gJ2xvbmcnOwoJCX0gZWxzZSBpZiAoZWEuSXNJbnQpIHsKCQkJcmV0ID0gImludCI7CgkJfSBlbHNlIGlmIChlYS5Jc0Zsb2F0KSB7CgkJCXJldCA9ICdmbG9hdCc7CgkJfSBlbHNlIGlmIChlYS5Jc0RhdGUpIHsKCQkJcmV0ID0gInRpbWVfdCI7CgkJfSBlbHNlIGlmIChlYS5Jc0ltYWdlKSB7CgkJCXJldCA9ICJqYXZhLmF3dC5pbWFnZS5CdWZmZXJlZEltYWdlIjsKCQl9IGVsc2UgaWYgKGVhLklzT2JqZWN0KSB7CgkJCXJldCA9ICJqc29uIjsKCQl9IGVsc2UgewoJCQlyZXQgPSAnc3RkOjphbnknOwoJCX0KCgkJaWYgKGVhLklzQXJyYXkpIHsKCQkJcmV0ID0gJ3N0ZDo6dmVjdG9yPCcgKyByZXQgKyAnPicgKyBwOwoJCX0gZWxzZSBpZiAoZWEuRW50aXR5VHlwZSkgewoJCQlyZXQgKz0gcDsKCQl9CgkJcmV0dXJuIHJldDsKCX0KfTs=",
	"title": "",
	"dataLayer": null,
	"type": null,
	"__keys": ["name"],
	"active": true,
	"__trMap": []
}