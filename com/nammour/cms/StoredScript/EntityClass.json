{
	"Id": "f3eff39e978304034c7a81ad4ae35f84bc0339d1",
	"name": "EntityClass",
	"script": "PCUNCmxldCBhdXRoQ2xhc3MgPSBhckNsYXNzZXMuZmluZChfYyA9PiBfYy5FbnRpdHlNZXRob2RzLmZpbmQobSA9PiBtLk5hbWU9PSdhdXRob3JpemUnICYmIG0uSXNQdWJsaWMpKTsNCmxldCBlbXMgPSBhckNsYXNzZXMuZmluZChfYyA9PiBfYy5OYW1lPT0nRW50aXR5Q2xhc3MnKTsNCg0KLy8gdGhlIGRlZmF1bHQgU2V0X09uIGRhdGUgdG8gdXNlDQpsZXQgU2V0X09uID0gYG5ldyBEYXRlKClgOw0KDQpsZXQgX2I2NHRlc3QgPSBzID0+IGAvXihbMC05YS16QS1aK1wvXXs0fSkqKChbMC05YS16QS1aK1wvXXsyfT09KXwoWzAtOWEtekEtWitcL117M309KSk/JC8udGVzdCh0eXBlb2YoJHtzfS5zdWJzdHJpbmcpIT09J3VuZGVmaW5lZCc/JHtzfS5zdWJzdHJpbmcoMCwgMTAwMCk6JHtzfSlgOw0KDQpsZXQgX2RlZiA9IChzLCB2KSA9PiAlPjwlPXMlPiA9IHR5cGVvZig8JT1zJT4pIT09J3VuZGVmaW5lZCc/PCU9cyU+OjwlPXYlPjs8JQ0KDQpsZXQgX2RlZmF1bHRzID0gKG9iaj0ndGhpcycsIF9jPWMpID0+IF9jLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRGVmYXVsdCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIGlmKCE8JT1vYmolPi5fPCU9bk5hbWUoZWEpJT5fc2V0KXsNCiAgICAgICAgICAgICAgICA8JT1vYmolPi48JT1uTmFtZShlYSklPig8JXZhbHVlT2YoZWEuRGVmYXVsdCklPik7DQogICAgICAgICAgICB9DQo8JSB9KTsNCg0KbGV0IGxvZyA9IChuLCBfdGhpcz0ndGhpcycpID0+IGAke190aGlzfS5sb2cobnVsbCwgdW5kZWZpbmVkLCAnJHtuIHx8IG1OYW1lfScsICdFbnRpdHlPYmplY3QnLCAwLCBgOw0KbGV0IHdhcm4gPSAobiwgX3RoaXM9J3RoaXMnKSA9PiBgJHtfdGhpc30ubG9nKG51bGwsIHVuZGVmaW5lZCwgJyR7biB8fCBtTmFtZX0nLCAnRW50aXR5T2JqZWN0JywgMSwgYDsNCmxldCBlcnJvciA9IChuLCBfdGhpcz0ndGhpcycpID0+IGAke190aGlzfS5sb2cobnVsbCwgdW5kZWZpbmVkLCAnJHtuIHx8IG1OYW1lfScsICdFbnRpdHlPYmplY3QnLCAyLCBgOw0KDQpsZXQgcWxUeXBlID0gKGVhLCBiSW5wdXQpID0+IHsNCiAgICBpZihlYS5Jc0Jvb2wpIHJldHVybiAnQm9vbGVhbic7DQogICAgLy9pZihlYS5Jc0RhdGUpIHJldHVybiAnRGF0ZVRpbWUnOw0KICAgIGlmKGVhLklzSW50IHx8IGVhLklzRmxvYXQpIHJldHVybiAnSW50JzsNCiAgICBpZihlYS5FbnRpdHlUeXBlKSByZXR1cm4gbk5hbWUoZWEuRW50aXR5VHlwZSkrKGJJbnB1dD8iSW5wdXQiOiIiKTsNCiAgICByZXR1cm4gJ1N0cmluZyc7DQp9Ow0KDQovLyB3aHkgaGFyZCBjb2RlZD8/Pw0KbGV0IF9yZXN0VG9vbHMgPSBbJ1NlcnZpY2VOb3cnLCAnU2FsZXNGb3JjZScsICdSZXN0REJJTycsICdHaXRIdWInLCAnRmlsZVN5c3RlbSddOw0KbGV0IF9zcWxUb29scyA9IFsnU3FsREInLCAnU2FsZXNGb3JjZScsICdTbm93Rmxha2UnXTsNCmxldCBfZmlsZVRvb2xzID0gWydHaXRIdWInLCAnRmlsZVN5c3RlbSddOw0KDQpsZXQgY2xzVG9vbHMgPSBfYyA9PiBfYy5Ub29scy5tYXAodCA9PiB0LnR5cGU/dC50eXBlLm5hbWU6KHQubmFtZSB8fCB0KSk7DQpsZXQgbWFpbkNsYXNzID0gKF9hclRvb2xzLCBfYz1jKSA9PiBhckNsYXNzZXMuZmluZChfX2MgPT4gKF9hclRvb2xzIHx8IGNsc1Rvb2xzKF9jKSkuZmluZCh0ID0+IGNsc1Rvb2xzKF9fYykuaW5jbHVkZXModCkpKSB8fCAoIShfYXJUb29scyB8fCBjbHNUb29scyhfYykpLmxlbmd0aCAmJiBhckNsYXNzZXNbMF0pOw0KDQpsZXQgX2VhVHlwZXMgPSAoX2M9YywgYkFsbCkgPT4gX0ZyRU1ELl90b0pTKE9iamVjdC5hc3NpZ24oe30sIC4uLl9jLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgYkFsbD90cnVlOmVhLkVudGl0eVR5cGUpLm1hcChlYSA9PiAoe1tuTmFtZShlYSldOiBuTmFtZShlYS5FbnRpdHlUeXBlKSB8fCBfRnJFTUQuX2F0dHIoZWEpfSkpKSk7DQoNCmxldCBfY0ZpZWxkID0gKGVhLCBfYz1lYS5FbnRpdHlDbGFzcykgPT4gKChlYS5FbnRpdHlUeXBlPyhlYS5FbnRpdHlUeXBlLlR5cGVkQXR0cmlidXRlcy5maW5kKHRhID0+IHRhLkVudGl0eUNsYXNzPT1fYykgfHwgZWEuRW50aXR5Q2xhc3MuRW50aXR5QXR0cmlidXRlcy5maW5kKF9lYSA9PiBfZWEuRW50aXR5VHlwZT09X2MpKTpudWxsKSB8fCB7TmFtZTogIiJ9KS5OYW1lOw0KDQpsZXQgX2NOYW1lID0gKGNuPWMuTmFtZSwgYkFsaWFzKSA9PiB7DQogICAgaWYoY24uTmFtZSkgY24gPSBjbi5OYW1lOw0KICAgIGxldCBfYyA9IGFyQ2xhc3Nlcy5maW5kKGVjID0+IGVjLk5hbWU9PWNuKTsNCiAgICBpZighX2MpIHJldHVybiAnJzsNCiAgICByZXR1cm4gbk5hbWUoX2MsIGJBbGlhcyk7DQp9Ow0KDQpsZXQgYWxpYXMgPSAoY24sIGo9Jy4nKSA9PiAoc2NvcGUgKyAnLicgKyBfY05hbWUoY24sIHRydWUpLnJlcGxhY2UoX2NOYW1lKGNuKSwgJycpKS5zcGxpdCgnLicpLmZpbHRlcihuID0+IG4pLmpvaW4oaik7DQpsZXQgbnNjb3BlID0gYWxpYXMoJ05vZGUnKTsNCg0KbGV0IF92Q29kZSA9IGsgPT4geyU+KDwldmFsdWVPZihrLkNvZGUpJT4gfHwgKCI8JT1uQ29kZShrKSU+IikpPCV9Ow0KbGV0IF9uQ29kZSA9IChlYSwgYlR5cGVkKSA9PiBlYT8oInRoaXMuX25Db2RlKCciICsgbkNvZGUoZWEpICsgKGJUeXBlZD8oJ18nICsgZWEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKSk6IiIpICArICInLCAiICsgKGJUeXBlZD9udWxsOl9GckVNRC5fdG9KUyhlYS5Db2RlKSkgKyAiKSIpOiJ0aGlzLl9uQ29kZSgpIjsNCmxldCBtUm91dGluZyA9IChjLCBtKSA9PiB7DQogICAgaWYgKCFjICYmIG0pIGMgPSBtLkVudGl0eUNsYXNzOw0KICAgIGlmICghbSAmJiAhYykgcmV0dXJuICIiOw0KICAgIGlmICghbSkgbSA9IGM7DQogICAgaWYgKCFtLlJvdXRpbmcgJiYgIWMuUm91dGluZykgcmV0dXJuICIiOw0KDQolPihfbm9kZSwgbWV0aG9kKSA9PiB7DQogICAgCWxldCBsb2cgPSAob2JqLCAuLi5tc2cpID0+IHRoaXMubG9nKCI8JT1uTmFtZShjKSU+Iiwgb2JqLCAiPCVtP20uTmFtZTonJyU+IiB8fCBtZXRob2QsICJSb3V0ZXIiLCAwLCAuLi5tc2cpOw0KICAgIAlsZXQgd2FybiA9IChvYmosIC4uLm1zZykgPT4gdGhpcy5sb2coIjwlPW5OYW1lKGMpJT4iLCBvYmosICI8JW0/bS5OYW1lOicnJT4iIHx8IG1ldGhvZCwgIlJvdXRlciIsIDEsIC4uLm1zZyk7DQogICAgCWxldCBlcnJvciA9IChvYmosIC4uLm1zZykgPT4gdGhpcy5sb2coIjwlPW5OYW1lKGMpJT4iLCBvYmosICI8JW0/bS5OYW1lOicnJT4iIHx8IG1ldGhvZCwgIlJvdXRlciIsIDIsIC4uLm1zZyk7DQogICAgCWxldCBvU2NvcGUgPSA8JT1hbGlhcygpJT47DQogICAgCWxldCBwU2NvcGUgPSA8JT1zY29wZSU+Ow0KICAgIAlsZXQgblNjb3BlID0gPCU9bnNjb3BlJT47DQoNCiAgICAgICAgdHJ5ew0KICAgICAgICA8JWZ1bmN0aW9uT2YobS5Sb3V0aW5nKSU+DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICB3YXJuKGV4KTsNCiAgICAgICAgfQ0KfQ0KPCV9Ow0KDQpsZXQgbU5hbWUgPSAnJzsNCg0KbGV0IGZ1bmN0aW9uT2YgPSAoZnVuLCBfdGhpcz0ndGhpcycpID0+IHslPg0KICAgICAgICBsZXQgX19yZXQgPSB1bmRlZmluZWQ7DQogICAgPCUgaWYoZnVuKXslPg0KICAgICAgICA8JSBpZih0eXBlb2YoZnVuKT09PSdvYmplY3QnKXslPg0KICAgICAgICAgICAgPCUgY2xzVG9vbHMoYykuZm9yRWFjaCh0ID0+IHslPg0KICAgICAgICBpZig8JT1fdGhpcyU+LlRvb2wgJiYgPCU9X3RoaXMlPi5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgICAgICAgICAgICAgIDwlIGlmKHR5cGVvZihmdW5bdF0pPT09J2Z1bmN0aW9uJyl7JT4NCiAgICAgICAgICAgIF9fcmV0ID0gPCU9ZnVuW3RdJT47DQogICAgICAgICAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgIF9fcmV0ID0gPCU9KEpTT04uc3RyaW5naWZ5KGZ1blt0XSkgfHwgJyIiJyklPjsNCiAgICAgICAgICAgICAgICA8JSB9JT4NCiAgICAgICAgfQ0KICAgICAgICAgICAgPCUgfSklPg0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgX19yZXQgPSA8JT1mdW4lPjsNCiAgICAgICAgPCUgfSU+DQogICAgPCUgfSU+DQogICAgICAgIGlmKHR5cGVvZihfX3JldCk9PT0nc3RyaW5nJyAmJiBfX3JldC5zdGFydHNXaXRoKCJzKCIpICYmIF9fcmV0LmVuZHNXaXRoKCIpIikpew0KICAgICAgICAgICAgX19yZXQgPSB0aGlzLnJ1blNjcmlwdChfX3JldC5zbGljZSgyLC0xKSk7DQogICAgICAgIH0NCiAgICAgICAgaWYodHlwZW9mKF9fcmV0KT09PSJmdW5jdGlvbiIpew0KICAgICAgICAgICAgX19yZXQgPSBfX3JldCg8JT1fdGhpcyU+KTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gX19yZXQ7DQo8JX07DQoNCmxldCB2YWx1ZU9mID0gKGZ1biwgX3RoaXM9J3RoaXMnKSA9PiB7JT4oKA0KKG9TY29wZSkgPT4gew0KICAgIHRyeXsNCjwlZnVuY3Rpb25PZihmdW4sIF90aGlzKSU+DQogICAgfWNhdGNoKF92T2ZFeCl7DQogICAgICAgIDwlPXdhcm4oKSU+J3ZhbHVlT2YnLCBfdk9mRXgsIDwlPV9GckVNRC5fdG9KUyhmdW4pJT4pOw0KICAgIH0NCn0NCikoPCU9YWxpYXMoKSU+KSk8JX07DQoNCmxldCB1blJlY3Vyc2UgPSAob2JqLCBmdW4sIGZBcmdzPSdhcmd1bWVudHMnLCBzUmV0LCB2YWxpZGl0eT1gdGhpcy5fX2NvbmZpZygndW5SZWN1cnNlLnZhbGlkaXR5JywgMC41KWAsIGlkZikgPT4gew0KICAgIGlkZiA9IGlkZiB8fCBgKHRoaXM/dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpOidJZCcpYDsNCiAgICBmdW4gPSBmdW4gfHwgYCIke21OYW1lfSJgOw0KICAgIHNSZXQgPSBgDQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKHYpew0KICAgICAgICAgICAgICAgIHYuZGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOw0KICAgICAgICAgICAgICAgIHYucmV1c2VkKys7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICR7c1JldH0NCiAgICAgICAgfWNhdGNoKHNSZXRfZXgpew0KICAgICAgICAgICAgdGhpcy5sb2cobnVsbCwgdW5kZWZpbmVkLCAke2Z1bn0sICcke21OYW1lfS51blJlY3Vyc2UnLCAxLCAnc1JldCcsIHNSZXRfZXgpOw0KICAgICAgICB9ZmluYWxseXsNCiAgICAgICAgICAgIGlmKHYgJiYgdi5yZXVzZWQ+MSkgcmV0dXJuIHY/di5vYmo6djsNCiAgICAgICAgfQ0KICAgIGA7DQogICAgbGV0IGJEYW5nZXIgPSAoKSA9PiAlPihbIl90b0hhc2giXS5pbmRleE9mKDwlPWZ1biU+KT49MCk8JTsNCiU+DQogICAgICAgIGxldCB2ID0gdW5kZWZpbmVkOw0KICAgICAgICB0cnl7DQogICAgICAgICAgICA8JT1zY29wZSU+LnVuUmVjdXJzZUFib3J0ID0gPCU9c2NvcGUlPi51blJlY3Vyc2VBYm9ydCB8fCB7fTsNCiAgICAgICAgICAgIGlmKDwlPXNjb3BlJT4udW5SZWN1cnNlQWJvcnRbPCU9ZnVuJT5dKXsNCiAgICAgICAgICAgICAgICA8JT13YXJuKGAke21OYW1lfS51blJlY3Vyc2VgKSU+YEFib3J0aW5nIGFzIHBlciA8JT1zY29wZSU+LnVuUmVjdXJzZUFib3J0LiR7PCU9ZnVuJT59YCk7DQogICAgICAgICAgICAgICAgPCU9c1JldCU+DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGxldCBfaWQgPSBudWxsOw0KICAgICAgICAgICAgaWYodHlwZW9mKDwlPW9iaiU+KT09PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICA8JT13YXJuKGAke21OYW1lfS51blJlY3Vyc2VgKSU+Ik51bGwgaW5wdXQiLCA8JT1vYmolPiwgPCU9ZnVuJT4sIDwlPWZBcmdzJT4pOw0KICAgICAgICAgICAgICAgIHJldHVybiA8JT1vYmolPjsNCiAgICAgICAgICAgIH1lbHNlIGlmKHR5cGVvZig8JT1vYmolPik9PT0nc3RyaW5nJyl7DQogICAgICAgICAgICAgICAgX2lkID0gdGhpcy5oYXNoQ29kZSg8JT1vYmolPik7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBfaWQgPSA8JT1vYmolPls8JT1pZGYlPl07DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihfaWQpPT09J3VuZGVmaW5lZCcgfHwgIV9pZCl7DQogICAgICAgICAgICAgICAgaWYoPCU9b2JqJT4uSWQgJiYgPCU9b2JqJT4uSWQ9PTwlPW9iaiU+LklkKXsNCiAgICAgICAgICAgICAgICAgICAgX2lkID0gPCU9b2JqJT4uSWQ7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5JZD09dGhpcy5JZCl7DQogICAgICAgICAgICAgICAgICAgIF9pZCA9IHRoaXMuSWQ7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5TZXRfT24pew0KICAgICAgICAgICAgICAgICAgICBfaWQgPSB0aGlzLl90b0hhc2goPCU9ZkFyZ3MlPiwge29ubHlVbmlxdWU6IHRydWV9LCA8JT1mdW4lPik7DQogICAgICAgICAgICAgICAgICAgIDwlPWxvZyhgJHttTmFtZX0udW5SZWN1cnNlYCklPiJ0aGlzLmhhc2hlZF9pZCIsIF9pZCwgPCU9ZnVuJT4sIDwlPWZBcmdzJT4pOw0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKDwlPW9iaiU+LkVudGl0eUNsYXNzKXsNCiAgICAgICAgICAgICAgICAgICAgX2lkID0gPCU9b2JqJT4uRW50aXR5Q2xhc3MuSWQgfHwgPCU9b2JqJT4uRW50aXR5Q2xhc3MuTmFtZSB8fCB0aGlzLl90b0hhc2goPCU9ZkFyZ3MlPiwge2RlcHRoOiA8JWJEYW5nZXIoKSU+PzM6dW5kZWZpbmVkfSwgPCU9ZnVuJT4pOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBfaWQgPSB0aGlzLkVudGl0eUNsYXNzLklkIHx8ICI8JT1jLklkJT4iIHx8IHRoaXMuX3RvSGFzaCg8JT1mQXJncyU+LCB7ZGVwdGg6IDwlYkRhbmdlcigpJT4/Mzp1bmRlZmluZWR9LCA8JT1mdW4lPikgfHwgIk5VTEwiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8gaWYoIjwlPW5OYW1lKGMpJT4iPT0iVXNlciIgJiYgPCU9ZnVuJT49PSJfdG9TTkZsb3ciKSA8JT13YXJuKGAke21OYW1lfS51blJlY3Vyc2VgKSU+Il9pZCIsIF9pZCwgPCU9ZnVuJT4sIDwlPWZBcmdzJT4pOw0KICAgICAgICAgICAgDQogICAgICAgIAk8JT1zY29wZSU+Ll91blJlY3Vyc2UgPSA8JT1zY29wZSU+Ll91blJlY3Vyc2UgfHwge307DQogICAgICAgIAk8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPiA9IDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+IHx8IHt9Ow0KICAgICAgICAJPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bPCU9ZnVuJT5dID0gPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bPCU9ZnVuJT5dIHx8IHt9Ow0KICAgICAgICAJPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bPCU9ZnVuJT5dW19pZF0gPSA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPls8JT1mdW4lPl1bX2lkXSB8fCB7fTsNCiAgICAgICAgCQ0KICAgICAgICAgICAgdiA9IDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+WzwlPWZ1biU+XVtfaWRdOw0KDQogICAgICAgICAgICBpZih2ICYmIE1hdGguYWJzKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdi5kYXRlKSA8ICgxMDAwKjwlPXZhbGlkaXR5JT4pKXsNCiAgICAgICAgICAgICAgICBpZigoPCViRGFuZ2VyKCklPj9uZXcgRGF0ZSgwKToodGhpcy5TZXRfT24gfHwgbmV3IERhdGUoMCkpKS5nZXRUaW1lKCkgPiB2LmRhdGUpew0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coYCR7bU5hbWV9LnVuUmVjdXJzZWApJT5gU3Bhd25pbmcgaW4gJHs8JT1mdW4lPn1gLCBfaWQsIDwlPWZ1biU+LCA8JT1vYmolPiwgdi5yZXVzZWQsIDwlPXZhbGlkaXR5JT4pOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coYCR7bU5hbWV9LnVuUmVjdXJzZWApJT4iU2VsZWN0ZWQgaGFzaCIsIF9pZCwgPCU9ZnVuJT4sIDwlPW9iaiU+LCB2LnJldXNlZCwgPCU9dmFsaWRpdHklPik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIDwlPXNSZXQlPg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICA8JT1sb2coYCR7bU5hbWV9LnVuUmVjdXJzZWApJT4iUHVzaGluZyBoYXNoIiwgX2lkLCA8JT1mdW4lPiwgPCU9b2JqJT4pOw0KICAgICAgICAJdiA9IDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+WzwlPWZ1biU+XVtfaWRdID0gew0KICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLA0KICAgICAgICAgICAgICAgIGFyZ3M6IEpTT04uc3RyaW5naWZ5KDwlPWZBcmdzJT4pLA0KICAgICAgICAgICAgICAgIG9iajogPCU9b2JqJT4sDQogICAgICAgICAgICAgICAgcmV1c2VkOiAwLA0KICAgICAgICAgICAgICAgIHBhdGg6ICcnLA0KICAgICAgICAgICAgICAgIF9pZCwNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICANCiAgICAgICAgICAgIDwlLypleHBlcmltZW50YWw6IHJlbW92ZSB0aGlzIGlmIGFsbCBnb2VzIHdyb25nKi8lPg0KICAgICAgICAgICAgPCU9c1JldCU+DQogICAgCX1jYXRjaCh1blJlY0V4KXsNCiAgICAJICAgIGlmKCF1blJlY0V4LnRvU3RyaW5nKCkuaW5kZXhPZignUmFuZ2VFcnJvcjogJykpew0KICAgIAkgICAgICAgIDwlPXNjb3BlJT4udW5SZWN1cnNlQWJvcnRbPCU9ZnVuJT5dID0gdHJ1ZTsNCiAgICAJICAgIH0NCiAgICAJICAgIDwlPWVycm9yKGAke21OYW1lfS51blJlY3Vyc2VgKSU+PCU9b2JqJT4sIDwlPWZ1biU+LCA8JT1mQXJncyU+LCB1blJlY0V4LnRvU3RyaW5nKCkpOw0KICAgIAkgICAgPCU9c1JldCU+DQogICAgCX0NCjwlDQp9Ow0KDQpsZXQgaW52b2tlUnVsZSA9IHIgPT4gew0KJT4NCmF3YWl0IChhc3luYyAoYXV0aE9iaikgPT4gew0KICAgIGxldCBfcnVsZSA9IDwlPV9GckVNRC5fdG9KUyhyKSU+Ow0KICAgIGRlbGV0ZSBfcnVsZS5TY3JpcHQ7DQogICAgLy8gcnVsZVJ1bnMucHVzaChfcnVsZSk7DQogICAgdHJ5ew0KICAgICAgICA8JT1yLlNjcmlwdCU+DQogICAgfWNhdGNoKGV4KXsNCiAgICAgICAgX3J1bGUuRXhjZXB0aW9uID0gZXg7DQogICAgfQ0KfSkoYXV0aE9iaik7DQo8JQ0KfQ0KJT4NCg0KY2xhc3MgPCU9bk5hbWUoYyklPiB7DQogICAgPCU9bU5hbWU9J2NvbnN0cnVjdG9yJyU+KGlkLCB0b29sKSB7DQogICAgICAgIC8vc3VwZXIoaWQsIHRvb2wpOw0KDQogICAgICAgIHRoaXMuU2NvcGUgPSAiPCU9c2NvcGUlPiI7DQogICAgICAgIHRoaXMuRGVidWcgPSA8JT1fRnJFTUQuX3RvSlMoYy5EZWJ1ZyklPjsNCiAgICAgICAgdGhpcy5Db25maWcgPSA8JT1fRnJFTUQuX3RvSlMoYy5Db25maWcpJT47DQogICAgICAgIHRoaXMuVGVzdCA9IDwlPV9GckVNRC5fdG9KUyhjLlRlc3QpJT47DQogICAgICAgIHRoaXMuVG9vbHMgPSA8JT1fRnJFTUQuX3RvSlMoYy5Ub29scyklPjsNCiAgICAgICAgdGhpcy5NYXBwaW5ncyA9IDwlPV9GckVNRC5fdG9KUyhjLk1hcHBpbmdzKSU+Ow0KDQogICAgICAgIC8vIGF2b2lkIHN1cGVyLCBrZWVwIHRoaXMgaGVyZQ0KICAgICAgICB0aGlzLl9fSUQgPSB0aGlzLl9fSUQgfHwge307DQogICAgICAgIHRoaXMuVG9vbCA9IHRvb2w7DQogICAgICAgIHRoaXMuSWQgPSBpZDsNCg0KICAgICAgICB0aGlzLlZhbHVlRW50aXRpZXMgPSBbXTsNCg0KICAgICAgICB0aGlzLkRhdGUgPSBudWxsOw0KDQogICAgICAgIHRoaXMuY2xlYXJfVEhJUygpOw0KICAgICAgICB0aGlzLkVudGl0eVZhbHVlcyA9IFtdOw0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICB0aGlzLkVudGl0eVZhbHVlcy5wdXNoKHsNCiAgICAgICAgICAgIEVudGl0eUF0dHJpYnV0ZTogew0KPCUgaWYoTnVtYmVyKGVhLklkKSl7JT4NCiAgICAgICAgICAgICAgICBJZDogIjwlPWVhLklkJT4iLA0KPCUgfSU+DQogICAgICAgICAgICAgICAgTmFtZTogIjwlPWVhLk5hbWUlPiIsDQogICAgICAgICAgICAgICAgT1BFUkFUT1JTOiB7TmFtZTogIj0ifSwNCiAgICAgICAgICAgICAgICBFbnRpdHlDbGFzczogdGhpcy5FbnRpdHlDbGFzcywNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBPUEVSQVRPUlM6IHt9DQogICAgICAgIH0pOw0KICAgICAgICB0aGlzLmNsZWFyXzwlPW5OYW1lKGVhKSU+KCk7DQo8JSB9KTsgJT4NCg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4geyU+DQogICAgICAgIHRoaXMuY2xlYXJfPCU9bk5hbWUodGEpJT5fPCU9dGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKSU+KCk7DQo8JSB9KTsgJT4NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19kZWZhdWx0cyclPigpew0KPCVfZGVmYXVsdHMoKSU+DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nZ2V0IEVudGl0eUNsYXNzJyU+KCl7DQogICAgICAgIGxldCBlYyA9IHsNCjwlIGlmKE51bWJlcihjLklkKSl7JT4NCiAgICAgICAgICAgIElkOiAiPCU9Yy5JZCU+IiwNCjwlIH0lPg0KICAgICAgICAgICAgTmFtZTogIjwlPWMuTmFtZSU+IiwNCiAgICAgICAgICAgIE9QRVJBVE9SUzoge05hbWU6ICI9In0sDQogICAgICAgIH07DQoNCjwlIGlmKGMuRW50aXR5TW9kdWxlaWQpeyAlPg0KICAgICAgICBlYy5FbnRpdHlNb2R1bGUgPSB7DQogICAgICAgICAgICBJZDogPCU9Yy5FbnRpdHlNb2R1bGVpZCU+DQogICAgICAgIH07DQo8JSB9JT4NCg0KICAgICAgICAvLyB0aGF0J3Mgd2h5IHdlIG5lZWQgaXQgYXMgYSBnZXR0ZXINCiAgICAgICAgaWYoIU51bWJlcihlYy5JZCkgJiYgPCU9c2NvcGUlPi5FbnRpdHlDbGFzc2VzKXsNCiAgICAgICAgICAgIGxldCBjaWQgPSA8JT1zY29wZSU+LkVudGl0eUNsYXNzZXMuZmluZChjID0+IE51bWJlcihjLklkKSAmJiBjLk5hbWU9PWVjLk5hbWUpOw0KICAgICAgICAgICAgaWYoY2lkKSBlYy5JZCA9IGNpZC5JZDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZWM7DQogICAgfQ0KDQoJPCU9bU5hbWU9J2dldCBJZCclPigpIHsNCgkJcmV0dXJuIHRoaXMuX19JRFt0aGlzLlRvb2wubmFtZV0gfHwgdGhpcy5fdXVpZCgpOw0KCX0NCg0KCTwlPW1OYW1lPSdzZXQgSWQnJT4oaWQpIHsNCgkJaWYgKCF0aGlzLlRvb2wpIHsNCgkJCTwlPWxvZygpJT4iRW1wdHkgVG9vbCIsIHRoaXMuVG9vbHMubGVuZ3RoLCA8JT1zY29wZSU+LlRvb2xzLmxlbmd0aCk7DQoJCQlyZXR1cm47DQoJCX0NCgkJaWYodGhpcy5fX0lEW3RoaXMuVG9vbC5uYW1lXT09aWQpIHJldHVybjsNCgkJdGhpcy5fX0lEW3RoaXMuVG9vbC5uYW1lXSA9IGlkOw0KCX0NCg0KICAgIDwlPW1OYW1lPSdnZXQgVG9vbCclPigpIHsNCiAgICAgICAgaWYodHlwZW9mKHRoaXMuX19Ub29sKSE9PSd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy5fX1Rvb2w7DQogICAgICAgIGxldCBub1Rvb2wgPSB7DQogICAgICAgICAgICBuYW1lOiAnJywNCiAgICAgICAgICAgIHR5cGU6IHtuYW1lOiAnJ30sDQogICAgICAgIH07DQogICAgICAgIGlmKHR5cGVvZig8JT1zY29wZSU+LlRvb2xzKSE9PSJ1bmRlZmluZWQiICYmICFBcnJheS5pc0FycmF5KDwlPXNjb3BlJT4uVG9vbHMpKXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPiI8JT1zY29wZSU+LlRvb2xzIGlzIG5vdCBhbiBhcnJheTogIiwgPCU9c2NvcGUlPi5Ub29scyk7DQogICAgICAgICAgICByZXR1cm4gbm9Ub29sOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBsZXQgcmV0ID0gKDwlPXNjb3BlJT4uX19sYXN0VG9vbD9bPCU9c2NvcGUlPi5fX2xhc3RUb29sXTpbXSkuY29uY2F0KHRoaXMuVG9vbHMpLmZpbmQodCA9PiAoPCU9c2NvcGUlPi5Ub29scyB8fCBbXSkuZmluZChfdCA9PiB0ID09IF90Lm5hbWUgfHwgdC5uYW1lPT1fdC5uYW1lKSk7DQogICAgICAgIGlmKHR5cGVvZihyZXQpIT09J3VuZGVmaW5lZCcpIHJldCA9ICg8JT1zY29wZSU+LlRvb2xzIHx8IFtdKS5maW5kKHQgPT4gdC5uYW1lPT1yZXQgfHwgdC5uYW1lPT1yZXQubmFtZSk7DQogICAgICAgIGlmKHR5cGVvZihyZXQpPT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgaWYodGhpcy5Ub29scy5sZW5ndGgpew0KICAgICAgICAgICAgICAgIHJldCA9IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5Ub29sc1swXSwNCiAgICAgICAgICAgICAgICAgICAgdHlwZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5Ub29sc1swXQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH1lbHNlIHJldCA9IG5vVG9vbDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdzZXQgVG9vbCclPih0b29sKSB7DQogICAgICAgIGlmICh0eXBlb2YodG9vbCk9PT0ndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgICAgICBpZih0eXBlb2YodG9vbCk9PT0ic3RyaW5nIil7DQogICAgICAgICAgICB0b29sID0ge25hbWU6IHRvb2x9Ow0KICAgICAgICB9DQogICAgICAgIGlmKHRvb2wuRW50aXR5Q2xhc3Mpew0KICAgICAgICAgICAgdG9vbCA9IHRvb2wuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZih0eXBlb2YodG9vbC5uYW1lKT09PSd1bmRlZmluZWQnICYmIHR5cGVvZih0b29sLnR5cGUubmFtZSk9PT0ndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgICAgICB0b29sLnR5cGUgPSB0b29sLnR5cGUgfHwge25hbWU6IHRvb2wubmFtZX07DQogICAgICAgIA0KICAgICAgICBpZighdG9vbC50eXBlICYmICF0b29sLm5hbWUpew0KICAgICAgICAgICAgPCU9d2FybigpJT4iRW1wdHkgVG9vbCBvYmplY3QiKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGxldCB0ID0gKDwlPXNjb3BlJT4uVG9vbHMgfHwgW10pLmZpbHRlcih0ID0+IHQubmFtZSAmJiB0LnR5cGUpLmZpbmQodCA9PiAodC5uYW1lID09IHRvb2wubmFtZSkgfHwgKHQudHlwZS5uYW1lID09IHRvb2wudHlwZS5uYW1lKSk7DQogICAgICAgIGlmICghdCkgew0KICAgICAgICAgICAgPCU9bG9nKCklPiJubyBtYXRjaGluZyB0b29sIiwgdG9vbCwgPCU9c2NvcGUlPi5Ub29scyk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIDwlPXNjb3BlJT4uX19sYXN0VG9vbCA9IHRoaXMuX19Ub29sID0gdDsNCiAgICAgICAgDQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdUSElTJyU+KHYsIGNvKXsNCiAgICAgICAgaWYodHlwZW9mKHYpPT09J3VuZGVmaW5lZCcpIHJldHVybiB0aGlzLl9USElTOw0KICAgICAgICBpZighdikgcmV0dXJuIHRoaXM7DQogICAgICAgIHYgPSBBcnJheS5pc0FycmF5KHYpP3Y6W3ZdOw0KICAgICAgICB0aGlzLl9USElTID0gdi5maWx0ZXIoX3YgPT4gdHlwZW9mKF92KT09PSdvYmplY3QnICYmIF92LkVudGl0eUNsYXNzICYmIF92LkVudGl0eUNsYXNzLk5hbWU9PXRoaXMuRW50aXR5Q2xhc3MuTmFtZSAmJiBfdi5TY29wZT09dGhpcy5TY29wZSk7DQogICAgICAgIGlmIChjbykgdGhpcy5fVEhJU19jb29wID0gY287DQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nY2xlYXJfVEhJUyclPigpIHsNCiAgICAgICAgdGhpcy5fVEhJUyA9IFtdOw0KICAgICAgICB0aGlzLl9USElTX2Nvb3AgPSAnJzsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgIC8qKiBzdGFydDogc2V0dGVycyBhbmQgZ2V0dGVycyBmb3IgPCU9ZWEuTmFtZSU+ICoqLw0KICAgIDwlPW1OYW1lPW5OYW1lKGVhKSU+KHYsIGNvLCBpZCkgew0KICAgICAgICBpZiAoY28pIHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3AgPSBjbzsNCg0KICAgICAgICB2YXIgZXYgPSB0aGlzLkVudGl0eVZhbHVlKCI8JT1lYS5OYW1lJT4iKTsNCiAgICAgICAgaWYgKCFldil7DQogICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChpZCkgZXYuSWQgPSBpZDsNCg0KICAgICAgICBpZiAodHlwZW9mKHYpIT09J3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICAgIC8vIHZhbHVlcyB3ZXJlIGdpdmVuLCB0aGVyZWZvcmUgYSBzZXR0ZXINCg0KICAgIDwlIGlmKGVhLklzQXJyYXkpeyU+DQogICAgICAgICAgICB2ID0gQXJyYXkuaXNBcnJheSh2KT92Olt2XTsNCiAgICAgICAgICAgIHYgPSB2Lm1hcChfdiA9PiB7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgIHYgPSAoX3YgPT4gew0KICAgIDwlIH0lPg0KDQogICAgPCUgaWYoZWEuSXNEYXRlKXslPg0KICAgICAgICAgICAgICAgIF92ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKF92KSA9PT0gJ1tvYmplY3QgRGF0ZV0nP192OihuZXcgRGF0ZShfdikpOw0KICAgICAgICAgICAgICAgIGlmKGlzTmFOKF92LmdldFRpbWUoKSkpIF92ID0gbnVsbDsNCiAgICA8JSB9JT4NCiAgICA8JSBpZihlYS5Jc0Jvb2wpeyU+DQogICAgICAgICAgICAgICAgX3YgPSBbInRydWUiLCAiMSIsICJ5ZXMiLCB0cnVlLCAxXS5pbmNsdWRlcyhfdik7DQogICAgPCUgfSU+DQogICAgPCUgaWYoZWEuSXNJbnQgfHwgZWEuSXNMb25nIHx8IGVhLklzRmxvYXQpeyU+DQogICAgICAgICAgICAgICAgaWYoaXNOYU4oX3YpKSBfdiA9IDA7DQogICAgPCUgfSU+DQogICAgPCUgaWYoZWEuSXNUZXh0KXslPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZihfdik9PT0nb2JqZWN0JykgX3YgPSBKU09OLnN0cmluZ2lmeShfdik7DQogICAgPCUgfSU+DQoNCiAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgIGlmKF92ICYmICFfdi5FbnRpdHlDbGFzcyl7DQogICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4idXNpbmcgX3RvRG9jdW1lbnQgZm9yIGludmFsaWQgc2V0dGVyIHZhbHVlIiwgX3YpOw0KICAgICAgICAgICAgICAgICAgICBfdiA9IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChfdik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYoX3YgJiYgX3YuRW50aXR5Q2xhc3MuSWQhPT0nPCU9ZWEuRW50aXR5VHlwZS5JZCU+JyAmJiBfdi5FbnRpdHlDbGFzcy5OYW1lIT09JzwlPWVhLkVudGl0eVR5cGUuTmFtZSU+Jyl7DQogICAgICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+IkludmFsaWQgU2V0dGVyIHZhbHVlIiwgX3YsICI8JT1lYS5FbnRpdHlUeXBlLklkJT4iLCBfdi5FbnRpdHlDbGFzcy5OYW1lLCAiPCU9ZWEuRW50aXR5VHlwZS5OYW1lJT4iKTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgX3YgPSAoKF92ICYmICF0aGlzLklkKSA/IF92LnRvRW50aXR5T2JqZWN0KCkgOiBfdik7DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlIH0lPg0KDQogICAgICAgICAgICAgICAgcmV0dXJuIF92Ow0KICAgIDwlIGlmKGVhLklzQXJyYXkpeyU+DQogICAgICAgICAgICB9KTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgfSkodik7DQogICAgPCUgfSU+DQogICAgDQogICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgIGRlbGV0ZSBldi5PYmplY3RWYWx1ZWlkOw0KICAgICAgICAgICAgZXYuT2JqZWN0VmFsdWUgPSB2Ow0KICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICBldi48JT1fRnJFTUQuX2F0dHIoZWEpJT5WYWx1ZSA9IHY7DQogICAgPCUgfSU+DQoNCiAgICAgICAgICAgIGlmKHRydWUgfHwgdGhpcy5fPCU9bk5hbWUoZWEpJT4hPXYpew0KICAgICAgICAgICAgICAgIHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCA9IDwlPVNldF9PbiU+OyAvLyBhIGNoYW5nZSBpbiB2YWx1ZQ0KICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPiJTZXQgYWZ0ZXIiLCB0aGlzLl88JT1uTmFtZShlYSklPj90aGlzLl88JT1uTmFtZShlYSklPi5TZXRfT246bnVsbCwgdj92LlNldF9PbjpudWxsKTsNCiAgICAgICAgICAgICAgICAvKmlmKHYpIHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCA9IHYuU2V0X09uOyovDQogICAgPCUgfSU+DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHRoaXMuXzwlPW5OYW1lKGVhKSU+ID0gdjsNCiAgICAgICAgICAgIGlmIChjbykgZXYuT1BFUkFUT1JTLjwlPV9GckVNRC5fYXR0cihlYSklPlZhbHVlID0gY287DQoNCiAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuaTE4bihldiwgdGhpcy5fPCU9bk5hbWUoZWEpJT4pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J2NsZWFyXycrbk5hbWUoZWEpJT4oKSB7DQogICAgICAgIGxldCByZXQgPSB0aGlzLl88JT1uTmFtZShlYSklPjsNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT4gPSBudWxsOw0KICAgICAgICB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wID0gIiI7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KDQogICAgLyoqIGVuZDogc2V0dGVycyBhbmQgZ2V0dGVycyBmb3IgPCU9ZWEuTmFtZSU+ICoqLw0KPCUgfSk7ICU+DQo8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgLyoqIHN0YXJ0OiBzZXR0ZXJzIGFuZCBnZXR0ZXJzIGZvciA8JT10YS5OYW1lJT5fPCU9dGFOYW1lJT4gKiovDQogICAgPCU9bU5hbWU9bk5hbWUodGEpKydfJyt0YU5hbWUlPih2LCBjbywgYkNsZWFyKSB7DQogICAgICAgIGlmKHR5cGVvZih2KT09PSJ1bmRlZmluZWQiKSByZXR1cm4gdGhpcy5fPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT47DQogICAgICAgIA0KICAgICAgICBpZih2ICYmIHYudG9FbnRpdHlPYmplY3QgJiYgdi5FbnRpdHlDbGFzcy5JZCE9PSc8JT10YS5FbnRpdHlDbGFzcy5JZCU+JyAmJiB2LkVudGl0eUNsYXNzLk5hbWUhPT0nPCU9dGEuRW50aXR5Q2xhc3MuTmFtZSU+JykgcmV0dXJuIHRoaXM7DQogICAgICAgIA0KICAgICAgICB2ID0gQXJyYXkuaXNBcnJheSh2KT92Olt2XTsNCiAgICAgICAgDQogICAgICAgIHYgPSB2LmZpbHRlcihfdiA9PiAhdiB8fCBfdi5fPCU9bk5hbWUodGEpJT5fc2V0KS5jb25jYXQodi5maWx0ZXIoX3YgPT4gX3YgJiYgIV92Ll88JT1uTmFtZSh0YSklPl9zZXQpLm1hcChfdiA9PiB7DQogICAgICAgICAgICBpZighX3YuY29uc3RydWN0b3Ipew0KICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+IjwlPW5OYW1lKHRhKSU+IGhhcyBubyBjb25zdHJ1Y3RvciIsIF92KTsNCiAgICAgICAgICAgIH1lbHNlIGlmKF92LmNvbnN0cnVjdG9yLm5hbWU9PSJPYmplY3QiKXsNCiAgICAgICAgICAgICAgICBfdiA9IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChfdikNCiAgICAgICAgICAgICAgICBfdi48JT1uTmFtZSh0YSklPih0aGlzKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gX3Y7DQogICAgICAgICAgICB9ZWxzZSBpZihfdi5jb25zdHJ1Y3Rvci5uYW1lIT0iPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MpJT4iKXsNCiAgICAgICAgICAgICAgICA8JT13YXJuKCklPiI8JT1uTmFtZSh0YSklPiBub3QgdmFsaWQiLCBfdiwgX3YuY29uc3RydWN0b3IubmFtZSwgIjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzKSU+Iik7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBfdi48JT1uTmFtZSh0YSklPih0aGlzKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gX3Y7DQogICAgICAgICAgICB9DQogICAgICAgIH0pLmZpbHRlcihfdiA9PiBfdikpOw0KICAgICAgICANCiAgICAgICAgaWYoYkNsZWFyKSB0aGlzLmNsZWFyXzwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+KCk7DQogICAgICAgIHRoaXMuXzwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+LnB1c2goLi4udik7DQogICAgICAgIHRoaXMuXzwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+X3NldCA9IDwlPVNldF9PbiU+Ow0KICAgICAgICBpZiAoY28pIHRoaXMuXzwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+X2Nvb3AgPSBjbzsNCg0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQogICAgY2xlYXJfPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT4oKSB7DQogICAgICAgIGxldCByZXQgPSB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPjsNCg0KICAgICAgICB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPl9zZXQgPSBudWxsOw0KICAgICAgICB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPiA9IG5ldyBBcnJheSgpOw0KICAgICAgICB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPl9jb29wID0gbnVsbDsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgLyoqIGVuZDogc2V0dGVycyBhbmQgZ2V0dGVycyBmb3IgPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT4gKiovDQoNCjwlIH0pICU+DQoNCiAgICA8JT1tTmFtZT0nbG9nJyU+KGNsYXNzTmFtZSwgb2JqLCBtLCB0eXBlLCBsZXZlbCwgLi4ubXNnKXsNCiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICI8JT1uTmFtZShjKSU+IjsNCiAgICAgICAgdHlwZSA9IHR5cGUgfHwgIkVudGl0eU9iamVjdCI7DQogICAgICAgIA0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KGNsYXNzTmFtZSwgb2JqLCBtLCB0eXBlLCBsZXZlbCwgLi4ubXNnKTsNCjwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCgkJCWxldCBkZWJ1ZyA9IHRoaXMuRGVidWc7DQoJCQlsZXQgbGV2ZWxzID0gWyJpbmZvIiwgIndhcm4iLCAiZXJyb3IiLCAiY3JpdGljYWwiXTsNCg0KCQkJZGVidWcgPSBkZWJ1ZyB8fCBPYmplY3QuZnJvbUVudHJpZXMobmV3IE1hcChsZXZlbHMubWFwKGwgPT4gW2wsICcqJ10pKSk7DQoNCgkJCWxldCBmdW5jdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5sZXZlbHMubWFwKGwgPT4gKHsNCgkJCQlbbF06IGRlYnVnW2xdID8gZGVidWdbbF0uc3BsaXQoJywnKSA6IFtdDQoJCQl9KSkpOw0KDQoJCQlsZXQgY3NzID0gJ2JhY2tncm91bmQ6ICMwMGZmOTk7IGNvbG9yOiAjMDA4MDAwJzsNCgkJCWxldCBmZyA9ICdceDFiWzMybSc7DQoJCQlzd2l0Y2ggKE51bWJlcihsZXZlbCkpIHsNCgkJCQljYXNlIDE6DQoJCQkJCWNzcyA9ICdiYWNrZ3JvdW5kOiAjZmZmZjAwOyBjb2xvcjogIzAwMDA4MCc7DQoJCQkJCWZnID0gJ1x4MWJbMzNtJzsNCgkJCQkJYnJlYWs7DQoJCQkJY2FzZSAyOg0KCQkJCQljc3MgPSAnYmFja2dyb3VuZDogI2IyMjIyMjsgY29sb3I6ICNmZmZmZmYnOw0KCQkJCQlmZyA9ICdceDFiWzMxbSc7DQoJCQkJCWJyZWFrOw0KCQkJCWNhc2UgMzoNCgkJCQkJY3NzID0gJ2JhY2tncm91bmQ6ICNiMjIyMjI7IGNvbG9yOiAjZmZmZmZmJzsNCgkJCQkJZmcgPSAnXHgxYlszMW1bQ1JJVElDQUxdJzsNCgkJCQkJYnJlYWs7DQoJCQl9DQoNCgkJCWlmIChmdW5jdGlvbnNbbGV2ZWxzW051bWJlcihsZXZlbCkgfHwgMF1dLmV2ZXJ5KGYgPT4gIVsnKi4qJywgJyouJyArIG0sICcqJywgbSwgY2xhc3NOYW1lICsgJy4nICsgbSwgY2xhc3NOYW1lICsgJy4qJ10uaW5jbHVkZXMoZikpKSB7DQoJCQkJcmV0dXJuOw0KCQkJfQ0KDQoJCQlpZiAodHlwZW9mKGdsb2JhbCkgIT09ICd1bmRlZmluZWQnKSB7DQoJCQkJY29uc29sZS5sb2coZmcgKyAiJXNceDFiWzBtIiwgYCR7dHlwZSB8fCAnPHR5cGU+J306ICR7dGhpcy5TY29wZX0uJHtjbGFzc05hbWV9LiR7bSB8fCAnPG1ldGhvZD4nfSgpYCwgLi4uKHR5cGVvZihvYmopID09PSAndW5kZWZpbmVkJyA/IChtc2cgfHwgW10pIDogW29ial0uY29uY2F0KG1zZyB8fCBbXSkpKTsNCgkJCX0gZWxzZSB7DQoJCQkJY29uc29sZS5sb2coYCVjICR7dHlwZSB8fCAnPHR5cGU+J306ICR7dGhpcy5TY29wZX0uJHtjbGFzc05hbWV9LiR7bSB8fCAnPG1ldGhvZD4nfSgpYCwgY3NzLCAuLi4odHlwZW9mKG9iaikgPT09ICd1bmRlZmluZWQnID8gKG1zZyB8fCBbXSkgOiBbb2JqXS5jb25jYXQobXNnIHx8IFtdKSkpOw0KCQkJfQ0KCQl9IGNhdGNoIChleCkgew0KCQkJY29uc29sZS5sb2coZXgpOw0KCQl9DQo8JSB9JT4NCgl9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nc2V0SW50ZXJ2YWwnJT4oY2xhc3NOYW1lLCBmdW4sIG1pbnV0ZXMsIC4uLmFyZ3Mpew0KICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgIjwlPW5OYW1lKGMpJT4iOw0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KGNsYXNzTmFtZSwgZnVuLCBtaW51dGVzLCAuLi5hcmdzKTsNCjwlIH1lbHNleyU+DQoJCXRyeSB7DQogICAgCQlsZXQgZk5hbWUgPSBmdW4udG9TdHJpbmcoKS5zcGxpdCgnKScpWzBdICsgJyknOw0KICAgIAkJdHJ5IHsNCiAgICAJCQkvLyB0aGlzLl9fdGltZShgJHtmTmFtZX0uTG9vcGApOw0KICAgIA0KICAgIAkJCXRoaXMuX190aW1lKGAke2ZOYW1lfS5DYWxsYCk7DQogICAgCQkJbGV0IHJldCA9IGF3YWl0IGZ1biguLi5hcmdzLmNvbmNhdChbbmV3IERhdGUoKV0pKTsNCiAgICANCiAgICAJCQk8JT1sb2coKSU+YHtDYWxsOiBgICsgdGhpcy5fX3RpbWUoYCR7Zk5hbWV9LkNhbGxgKSArIGAsIExvb3A6IGAgKyB0aGlzLl9fdGltZShgJHtmTmFtZX0uTG9vcGApICsgJ30nKTsNCiAgICAJCQlpZiAoIXJldCkgew0KICAgIAkJCQk8JT1sb2coKSU+YGRpZCBub3QgcmV0dXJuIHRydWUsIGV4aXRpbmcgbG9vcGVyICgke3RoaXMuX190aW1lKGZOYW1lKX0pYCk7DQogICAgCQkJCXJldHVybjsNCiAgICAJCQl9DQogICAgCQl9IGNhdGNoIChleCkgew0KICAgIAkJCTwlPWVycm9yKCklPnRoaXMuX190aW1lKGZOYW1lKSwgZXgpOw0KICAgIAkJCWNvbnNvbGUudHJhY2UoKTsNCiAgICAJCX0NCiAgICAJCWlmICghTnVtYmVyKG1pbnV0ZXMpKSB7DQogICAgCQkJPCU9bG9nKCklPnRoaXMuX190aW1lKGZOYW1lKSwgIk5vdCByZXBlYXRpbmcuIE1pbnV0ZXMgaXMgIiArIG1pbnV0ZXMpOw0KICAgIAkJCXJldHVybjsNCiAgICAJCX0NCiAgICAJCWF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBtaW51dGVzICogNjAgKiAxMDAwKSk7DQogICAgCQlhd2FpdCB0aGlzLjwlPW1OYW1lJT4obnVsbCwgZnVuLCBtaW51dGVzLCAuLi5hcmdzKTsNCgkJfSBjYXRjaCAoZXgpIHsNCgkJCTwlPWVycm9yKCklPmV4KTsNCgkJfQ0KPCUgfSU+DQoJfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19leGVjdXRlJyU+KGNsYXNzTmFtZSwgc2NvcGUsIG0sIGZSb3V0ZXIsIGZTY3JpcHQsIG9QYXJhbXMgPSB7fSwgc291cmNlKXsNCgkJdGhpcy5fX3RpbWUoYDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+LiR7bX1gKTsNCgkJY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICI8JT1uTmFtZShjKSU+IjsNCgkJc2NvcGUgPSBzY29wZSB8fCA8JT1zY29wZSU+Ow0KCQlzb3VyY2UgPSBzb3VyY2UgfHwgdGhpczsNCg0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KGNsYXNzTmFtZSwgc2NvcGUsIG0sIGZSb3V0ZXIsIGZTY3JpcHQsIG9QYXJhbXMsIHRoaXMpOw0KPCUgfWVsc2V7JT4NCgkJZGVsZXRlIDwlPXNjb3BlJT4uX3VuUmVjdXJzZTsgLy8gZXhwZXJpbWVudGFsDQoJCQ0KICAgIAlsZXQgX19iZWZvcmVSdWxlcyA9IG9QYXJhbXMuX19iZWZvcmVSdWxlcyB8fCBbXTsNCiAgICAJbGV0IF9fYWZ0ZXJSdWxlcyA9IG9QYXJhbXMuX19hZnRlclJ1bGVzIHx8IFtdOw0KICAgIAlkZWxldGUgb1BhcmFtcy5fX2JlZm9yZVJ1bGVzOw0KICAgIAlkZWxldGUgb1BhcmFtcy5fX2FmdGVyUnVsZXM7DQoNCiAgICAgICAgbGV0IGxvZyA9ICguLi5zKSA9PiA8JT1sb2coKSU+Y2xhc3NOYW1lLCBtLCAuLi5zKTsNCiAgICAgICAgbGV0IHdhcm4gPSAoLi4ucykgPT4gPCU9d2FybigpJT5jbGFzc05hbWUsIG0sIC4uLnMpOw0KICAgICAgICBsZXQgZXJyb3IgPSAoLi4ucykgPT4gPCU9ZXJyb3IoKSU+Y2xhc3NOYW1lLCBtLCAuLi5zKTsNCiAgICAgICAgICAgIA0KICAgICAgICB0cnl7DQogICAgCQlsZXQgbFBhcmFtcyA9IE9iamVjdC5lbnRyaWVzKG9QYXJhbXMpLm1hcCh4ID0+IHhbMV0pOw0KICAgIAkJbGV0IHJlc3VsdHMgPSBbXTsNCiAgICANCiAgICAJCWxldCBub2RlcyA9IFtdOw0KICAgIAkJDQogICAgCQlpZiAoPCU9bnNjb3BlJT4uX25vZGUgJiYgYXdhaXQgZlJvdXRlcig8JT1uc2NvcGUlPi5fbm9kZSwgbSkpIHsNCiAgICAJCQlub2Rlcy5wdXNoKDwlPW5zY29wZSU+Ll9ub2RlKTsNCiAgICAJCX0NCiAgICANCiAgICAJCWlmICg8JT1uc2NvcGUlPi5fbm9kZSAmJiA8JT1uc2NvcGUlPi5fbm9kZS5fcGFyZW50ICYmIGF3YWl0IGZSb3V0ZXIoPCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCksIG0pKSB7DQogICAgCQkJbm9kZXMucHVzaCg8JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnQoKSk7DQogICAgCQl9DQogICAgDQogICAgCQlmb3IgYXdhaXQgKGNvbnN0IGNuIG9mICg8JT1uc2NvcGUlPi5fbm9kZT88JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnRfTm9kZXMoKTpbXSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoYXdhaXQgZlJvdXRlcihjbiwgbSkpIHsNCiAgICAgICAgICAgICAgICAJbG9nKCdhZGRpbmcgY2hpbGQgbm9kZScsIGNuKTsNCiAgICAgICAgICAgICAgICAJbm9kZXMucHVzaChjbik7DQogICAgICAgICAgICAgICAgfQ0KICAgIAkJfQ0KICAgIA0KICAgIAkJLy8gcmVtb3ZlIGFueSBudWxscw0KICAgIAkJbm9kZXMgPSBub2Rlcy5mbGF0KCkuZmlsdGVyKG4gPT4gbik7DQogICAgCQkNCiAgICAJCWlmICghbm9kZXMubGVuZ3RoKSB7DQogICAgCQkJbm9kZXMucHVzaCg8JT1uc2NvcGUlPi5fbm9kZSk7DQogICAgCQl9DQogICAgCQkNCiAgICAJCW5vZGVzID0gdGhpcy5fdW5pcXVlKG5vZGVzLCAnX2NvZGUnKTsNCiAgICAJCWxvZygnbm9kZXMubGVuZ3RoJywgbm9kZXMubGVuZ3RoKTsNCg0KICAgIAkJZm9yIGF3YWl0IChjb25zdCBuIG9mIG5vZGVzKSB7DQogICAgCQkJbGV0IG5SZXQgPSBudWxsOw0KICAgIAkJCWxvZyhgJHttfSBAICR7bj8uY29kZSgpIHx8ICdMT0NBTCd9YCk7DQogICAgCQkJaWYgKCFuIHx8IHRoaXMuX3NhbWVFbnRpdHkoPCU9bnNjb3BlJT4uX25vZGUsIG4pKSB7DQogICAgCQkJCS8vIGxvY2FsIHNjcmlwdA0KICAgIAkJCQlmb3IgYXdhaXQgKGNvbnN0IHIgb2YgX19iZWZvcmVSdWxlcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgPCV2YWx1ZU9mKCJyLlNjcmlwdCIpJT4NCiAgICAJCQkJCS8vYXdhaXQgdGhpcy5fU2NyaXB0KGNsYXNzTmFtZSwgci5TY3JpcHQsIG0sIHIuTmFtZSB8fCAnQmVmb3JlUnVsZScsIHNjb3BlLCBudWxsLCAuLi5sUGFyYW1zKTsNCiAgICAJCQkJfQ0KDQogICAgCQkJCW5SZXQgPSBhd2FpdCBmU2NyaXB0KCk7DQoNCiAgICAJCQkJZm9yIGF3YWl0IChjb25zdCByIG9mIF9fYWZ0ZXJSdWxlcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgPCV2YWx1ZU9mKCJyLlNjcmlwdCIpJT4NCiAgICAJCQkJCS8vYXdhaXQgdGhpcy5fU2NyaXB0KGNsYXNzTmFtZSwgci5TY3JpcHQsIG0sIHIuTmFtZSB8fCAnQWZ0ZXJSdWxlJywgc2NvcGUsIG51bGwsIC4uLmxQYXJhbXMpOw0KICAgIAkJCQl9DQogICAgCQkJfSBlbHNlIHsNCiAgICAJCQkJblJldCA9IGF3YWl0IHNvdXJjZS5faW52b2tlTm9kZShuLCBtLCBvUGFyYW1zKTsNCiAgICAJCQl9DQogICAgDQogICAgCQkJcmVzdWx0cy5wdXNoKHsNCiAgICAJCQkJbm9kZTogbiwNCiAgICAJCQkJcmV0OiBuUmV0DQogICAgCQkJfSk7DQogICAgCQl9DQogICAgCQlsb2cocmVzdWx0cywgIl9leGVjdXRlIiwgJ1Jlc3VsdHMnKTsNCiAgICANCiAgICAJCWxldCBlcnJvcnMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIucmV0ICYmIHIucmV0Ll9fZXhjZXB0aW9uKS5tYXAociA9PiAoew0KICAgIAkJCW5vZGU6IHIubm9kZSA/IHsNCiAgICAJCQkJY29kZTogci5ub2RlLmNvZGUoKSwNCiAgICAJCQkJYWRkcmVzczogci5ub2RlLmFkZHJlc3MoKQ0KICAgIAkJCX0gOiBudWxsLA0KICAgIAkJCV9fZXhjZXB0aW9uOiByLnJldC5fX2V4Y2VwdGlvbg0KICAgIAkJfSkpOw0KDQogICAgCQlpZiAoZXJyb3JzLmxlbmd0aCkgew0KICAgIAkJCXdhcm4oImVycm9ycyIsIGVycm9ycyk7DQogICAgCQl9DQogICAgDQogICAgCQlyZXR1cm4gcmVzdWx0czsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIGVycm9yKGV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQoJfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19TY3JpcHQnJT4oY2xhc3NOYW1lLCBzY3JpcHQsIG0sIHR5cGUsIHNjb3BlLCBfbm9kZSwgLi4uc2ZBcmdzKXsNCiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICI8JT1uTmFtZShjKSU+IjsNCiAgICAgICAgc2NvcGUgPSBzY29wZSB8fCA8JT1zY29wZSU+Ow0KICAgICAgICANCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbGFzc05hbWUsIHNjcmlwdCwgbSwgdHlwZSwgc2NvcGUsIF9ub2RlLCAuLi5zZkFyZ3MpOw0KPCUgfWVsc2V7JT4NCiAgICAJaWYgKHR5cGVvZihzY3JpcHQpID09PSAndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgIAkNCiAgICAgICAgdHJ5ew0KICAgIAkJaWYgKHR5cGVvZihzY3JpcHQpID09PSAnc3RyaW5nJykgc2NyaXB0ID0gdGhpcy5ydW5TY3JpcHQoYCgpID0+IHske3NjcmlwdH19YCk7DQogICAgDQogICAgCQlsZXQgcmV0ID0gbnVsbDsNCiAgICAJCWlmICh0eXBlb2Yoc2NyaXB0KSA9PT0gJ2Z1bmN0aW9uJykgew0KICAgIAkJCXJldCA9IGF3YWl0IHNjcmlwdCgpOw0KICAgIAkJfQ0KICAgIA0KICAgIAkJcmV0dXJuIHJldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+Y2xhc3NOYW1lLCBtLCB0eXBlLCBzY3JpcHQsIGV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQoJfQ0KDQogICAgPCU9bU5hbWU9J19zYW1lRW50aXR5JyU+KC4uLmFyRW50aXRpZXMpew0KICAgICAgICBpZihhckVudGl0aWVzLmxlbmd0aD09MCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICBpZihhckVudGl0aWVzLmxlbmd0aD09MSkgYXJFbnRpdGllcy5wdXNoKHRoaXMpOw0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KC4uLmFyRW50aXRpZXMpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgcmV0dXJuIGFyRW50aXRpZXMuc2xpY2UoMSkuZXZlcnkoZSA9PiB7DQogICAgICAgICAgICAgICAgbGV0IHYgPSBhckVudGl0aWVzWzBdOw0KICAgICAgICAgICAgICAgIGxldCBuZWdUZXN0ID0gew0KICAgICAgICAgICAgICAgICAgICB2TnVsbDogdj09bnVsbCwNCiAgICAgICAgICAgICAgICAgICAgZU51bGw6IGU9PW51bGwsDQogICAgICAgICAgICAgICAgICAgIHZPYmplY3Q6IHR5cGVvZih2KSE9PSdvYmplY3QnLA0KICAgICAgICAgICAgICAgICAgICBlT2JqZWN0OiB0eXBlb2YoZSkhPT0nb2JqZWN0JywNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4xLCBuZWdUZXN0KTsNCiAgICAgICAgICAgICAgICBpZihPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCAuLi5PYmplY3Qua2V5cyhuZWdUZXN0KS5maWx0ZXIoayA9PiBuZWdUZXN0W2tdKS5tYXAoayA9PiAoe3YsIGUsIFtrXTogdHJ1ZX0pKSkpLmxlbmd0aCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIC8vIHBhc3NlZCBpbml0aWFsIGNvbnNpc3RlbmN5IGNoZWNrDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYodj09ZSkgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbmVnVGVzdCA9IHsNCiAgICAgICAgICAgICAgICAgICAgZXZDb25zdHI6IHYuY29uc3RydWN0b3IubmFtZSE9ZS5jb25zdHJ1Y3Rvci5uYW1lLA0KICAgICAgICAgICAgICAgICAgICBlRW50aXR5OiAhZS5FbnRpdHlDbGFzcywNCiAgICAgICAgICAgICAgICAgICAgdkVudGl0eTogIXYuRW50aXR5Q2xhc3MsDQogICAgICAgICAgICAgICAgICAgIGV2RW50aXR5TmFtZXM6IHR5cGVvZihlLkVudGl0eUNsYXNzLk5hbWUpIT09J3VuZGVmaW5lZCcgJiYgZS5FbnRpdHlDbGFzcy5OYW1lIT12LkVudGl0eUNsYXNzLk5hbWUsDQogICAgICAgICAgICAgICAgICAgIGV2RW50aXR5SWRzOiB0eXBlb2YoZS5FbnRpdHlDbGFzcy5JZCkhPT0ndW5kZWZpbmVkJyAmJiBlLkVudGl0eUNsYXNzLklkIT12LkVudGl0eUNsYXNzLklkLA0KICAgICAgICAgICAgICAgICAgICBldklEczogdi5JZD09di5JZCAmJiBlLklkPT1lLklkICYmIHYuSWQhPWUuSWQsDQogICAgICAgICAgICAgICAgICAgIGV2SGFzaDogdi5fdG9IYXNoKG51bGwsIHtvbmx5VW5pcXVlOiB0cnVlfSwgJzwlPW1OYW1lJT4nKSE9ZS5fdG9IYXNoKG51bGwsIHtvbmx5VW5pcXVlOiB0cnVlfSwgJzwlPW1OYW1lJT4nKSwNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4yLCBuZWdUZXN0KTsNCiAgICAgICAgICAgICAgICBuZWdUZXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uT2JqZWN0LmtleXMobmVnVGVzdCkuZmlsdGVyKGsgPT4gbmVnVGVzdFtrXSkubWFwKGsgPT4gKHt2LCBlLCBba106IHRydWV9KSkpOw0KICAgICAgICAgICAgICAgIGlmKCFPYmplY3Qua2V5cyhuZWdUZXN0KS5sZW5ndGgpIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4zLCBuZWdUZXN0KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J2dldCBTZXRfT24nJT4oKSB7DQogICAgICAgIGxldCByZXQgPSBuZXcgRGF0ZShNYXRoLm1heCgNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCwNCjwlIH0pJT4gICAgICAgICAgICANCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgdGhpcy5fPCU9dGFOYW1lJT5fc2V0LA0KPCUgfSklPg0KICAgICAgICApKTsNCiAgICAgICAgDQogICAgICAgIGlmKCFyZXQgfHwgIShyZXQgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihyZXQpKSkgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J2dldCBTZXRfQ291bnQnJT4oKSB7DQogICAgICAgIHJldHVybiBbDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICB0aGlzLl88JT1uTmFtZShlYSklPl9zZXQsDQo8JSB9KSU+ICAgICAgICAgICAgDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIHRoaXMuXzwlPXRhTmFtZSU+X3NldCwNCjwlIH0pJT4NCiAgICAgICAgXS5maWx0ZXIocyA9PiBzKS5sZW5ndGg7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZmxhdHRlbiclPihkZXB0aCl7DQogICAgICAgIDwlPXdhcm4oKSU+IkRFUFJFQ0FURUQiKTsNCiAgICAgICAgbGV0IHJldCA9IHt9Ow0KICAgICAgICBpZighZGVwdGgpIHJldHVybiByZXQ7DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIHJldC5fPCU9bk5hbWUoZWEpJT5fc2V0ID0gdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0Ow0KICAgICAgICByZXQuXzwlPW5OYW1lKGVhKSU+X2Nvb3AgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICByZXQuPCU9bk5hbWUoZWEpJT4gPSB0aGlzLjwlPW5OYW1lKGVhKSU+KCk/dGhpcy48JT1uTmFtZShlYSklPigpPCVpZihlYS5FbnRpdHlUeXBlKXslPi48JT1tTmFtZSU+KGRlcHRoLTEpPCV9JT46dGhpcy48JT1uTmFtZShlYSklPigpOw0KPCUgfSklPg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgIHJldC48JT10YU5hbWUlPiA9IHRoaXMuPCU9dGFOYW1lJT4oKS5tYXAodCA9PiB0P3QuPCU9bU5hbWUlPihkZXB0aC0xKTp0KTsNCjwlIH0pJT4NCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b0hhc2gnJT4oYXJncywgb3B0aW9ucywgZlNvdXJjZSl7DQogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9Ow0KICAgICAgICANCiAgICAgICAgbGV0IG9IYXNoID0gew0KICAgICAgICAgICAgY2xhc3M6ICI8JT1uTmFtZShjKSU+IiwNCiAgICAgICAgICAgIHNvdXJjZTogZlNvdXJjZSwNCiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsDQogICAgICAgICAgICBfdGhpczoge30NCiAgICAgICAgfTsNCiAgICAgICAgDQogICAgICAgIGlmKCFvcHRpb25zLm5vVGhpcyAmJiBmU291cmNlIT0iPCU9bU5hbWUlPiIgJiYgKHR5cGVvZihvcHRpb25zLmRlcHRoKT09PSd1bmRlZmluZWQnIHx8IC0tb3B0aW9ucy5kZXB0aD4wKSl7DQogICAgICAgICAgICB0aGlzLl9fZXhwb3J0KG9IYXNoLl90aGlzLCB7DQogICAgICAgICAgICAgICAgT1BFUkFUT1JTOiAhb3B0aW9ucy5ub09wZXJhdG9ycywNCiAgICAgICAgICAgICAgICBfbWFwOiBvcHRpb25zLl9tYXAsDQogICAgICAgICAgICAgICAgVW5pcXVlOiBvcHRpb25zLm9ubHlVbmlxdWUsDQogICAgICAgICAgICAgICAgTnVsbDogIW9wdGlvbnMub25seVVuaXF1ZSwgLy8/Pw0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9ialtpZENvZGVdID0gdiwNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+aWYob3B0aW9ucy5ub1R5cGVzKSByZXR1cm47PCV9JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSA8JSBpZihlYS5FbnRpdHlUeXBlKXslPnY/di48JT1tTmFtZSU+KG51bGwsIG9wdGlvbnMsIGZTb3VyY2UpOjwlfSU+djsNCiAgICAgICAgICAgICAgICB9LA0KPCUgfSklPg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqW2VhQ29kZV0gPSAodiB8fCBbXSkubWFwKF92ID0+IF92LjwlPW1OYW1lJT4obnVsbCwgb3B0aW9ucywgZlNvdXJjZSkpLA0KPCUgfSklPg0KPCUgYy5FbnRpdHlGaWVsZHMuZm9yRWFjaChlZiA9PiB7JT4NCiAgICAgICAgICAgICAgICBlZl88JT1uTmFtZShlZiklPjogKG9iaiwgZWZDb2RlLCB2KSA9PiBvYmpbZWZDb2RlXSA9IHYsDQo8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBpZihvcHRpb25zLm5vQXJncykgb0hhc2ggPSBvSGFzaC5fdGhpczsNCiAgICAgICAgcmV0dXJuIG9wdGlvbnMubm9Db2RlP29IYXNoOnRoaXMuaGFzaENvZGUoSlNPTi5zdHJpbmdpZnkob0hhc2gpKTsNCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2F1dGhvcml6ZSclPih1c2VybmFtZSwgcGFzc3dvcmQsIGJTZXJ2ZXIpew0KPCUgaWYobWFpbkNsYXNzKCk9PWMpeyU+DQogICAgICAgIGlmKCF1c2VybmFtZSAmJiAhcGFzc3dvcmQgJiYgITwlPXNjb3BlJT4uX190b2tlbiAmJiB0aGlzLlRlc3RbJzwlPW1OYW1lJT4udXNlcm5hbWUnXSl7DQogICAgICAgICAgICB1c2VybmFtZSA9IHRoaXMuVGVzdFsnPCU9bU5hbWUlPi51c2VybmFtZSddOw0KICAgICAgICAgICAgcGFzc3dvcmQgPSB0aGlzLlRlc3RbJzwlPW1OYW1lJT4ucGFzc3dvcmQnXTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKGJTZXJ2ZXIpew0KICAgICAgICAgICAgaWYodXNlcm5hbWUgJiYgITwlPXNjb3BlJT4uX3Rlc3RVc2VyICYmIHRoaXMuVGVzdFsnPCU9bU5hbWUlPi50ZXN0VXNlciddKXsNCiAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll90ZXN0VXNlciA9IGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KHRoaXMuVGVzdFsnPCU9bU5hbWUlPi50ZXN0VXNlciddKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS51c2VybmFtZSh1c2VybmFtZSkucGFzc3dvcmQocGFzc3dvcmQpLnN0b3JlKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy51c2VybmFtZSh1c2VybmFtZSwgJz0nKS5wYXNzd29yZChwYXNzd29yZCwgJz0nKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5maW5kKCk7DQogICAgICAgICAgICA8JT1sb2coKSU+IlNlcnZlcjogIiArIGJTZXJ2ZXIrIiwgT2JqOiIsIHJldCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHJldCl7DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKGpzb253ZWJ0b2tlbikhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IGpzb253ZWJ0b2tlbi5zaWduKHJldC5fdG9Eb2N1bWVudCgpLCB0aGlzLl9fY29uZmlnKCdzZWNyZXQnKSwgeyBleHBpcmVzSW46ICcxODAwcycgfSk7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX2J0b2EoSlNPTi5zdHJpbmdpZnkocmV0Ll90b0RvY3VtZW50KCkpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldCA9IHsNCiAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW46IHJldCwNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICA8JT1sb2coKSU+IlNlcnZlcjogIiArIGJTZXJ2ZXIrIiwgdG9rZW46ICIsIHJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9fY29uZmlnKCdjbGllbnRfaWQnKTsNCiAgICAgICAgICAgIGxldCBjbGllbnRfc2VjcmV0ID0gdGhpcy5fX2NvbmZpZygnc2VjcmV0Jyk7DQogICAgDQogICAgICAgICAgICBpZighdXNlcm5hbWUgJiYgIXBhc3N3b3JkICYmIDwlPXNjb3BlJT4uX190b2tlbil7DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPiJObyB1c2VybmFtZS9wYXNzd29yZCBhbmQgdG9rZW4gYWxyZWFkeSBleGlzdHMiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICA8JWlmKF9jTmFtZSgnb0F1dGggVG9rZW4nKSl7JT4NCiAgICAgICAgICAgIGxldCBkYXRhID0gew0KICAgICAgICAgICAgICAgIGdyYW50X3R5cGU6ICdwYXNzd29yZCcsDQogICAgICAgICAgICAgICAgdXNlcm5hbWUsDQogICAgICAgICAgICAgICAgcGFzc3dvcmQsDQogICAgICAgICAgICAgICAgY2xpZW50X2lkLA0KICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgY29uZmlnID0gew0KICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIGlmKCF1c2VybmFtZSAmJiAhcGFzc3dvcmQgJiYgPCU9c2NvcGUlPi5fX3Rva2VuICYmIDwlPXNjb3BlJT4uX190b2tlbi5yZWZyZXNoX3Rva2VuKXsNCiAgICAgICAgICAgICAgICBkYXRhID0gew0KICAgICAgICAgICAgICAgICAgICBncmFudF90eXBlOiAicmVmcmVzaF90b2tlbiIsDQogICAgICAgICAgICAgICAgICAgIHJlZnJlc2hfdG9rZW46IDwlPXNjb3BlJT4uX190b2tlbi5yZWZyZXNoX3Rva2VuLA0KICAgICAgICAgICAgICAgICAgICBjbGllbnRfaWQsDQogICAgICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQsDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gYCR7PCU9c2NvcGUlPi5fX3Rva2VuLnRva2VuX3R5cGV9ICR7PCU9c2NvcGUlPi5fX3Rva2VuLmFjY2Vzc190b2tlbn1gOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgYXhpb3MucG9zdChgaHR0cCR7PCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCkuc2VjdXJlKCk/J3MnOicnfTovLyR7PCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCkuYWRkcmVzcygpfTokezwlPW5zY29wZSU+Ll9ub2RlLnBhcmVudCgpLnBvcnQoKSB8fCAzMDAwfS9vYXV0aC90b2tlbmAsIE9iamVjdC5rZXlzKGRhdGEpLm1hcChrZXkgPT4ga2V5ICsgJz0nICsgZGF0YVtrZXldKS5qb2luKCcmJyksIGNvbmZpZyk7DQogICAgICAgICAgICBpZihyZXQuZGF0YS5hY2Nlc3NfdG9rZW4pew0KICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX190b2tlbiA9IHJldC5kYXRhOw0KDQogICAgICAgICAgICAgICAgaWYoPCU9c2NvcGUlPi5fX3Rva2VuLnJlZnJlc2hfdG9rZW4pew0KICAgICAgICAgICAgICAgICAgICBpZihheGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuY2xlYXIpIGF4aW9zLmludGVyY2VwdG9ycy5yZXNwb25zZS5jbGVhcigpOw0KICAgICAgICAgICAgICAgICAgICBheGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHJlc3BvbnNlID0+IHJlc3BvbnNlLCBhc3luYyBlcnJvciA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFJlcXVlc3QgPSBlcnJvci5jb25maWc7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgJiYgIW9yaWdpbmFsUmVxdWVzdC5fcmV0cnkgJiYgb3JpZ2luYWxSZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbi5pbmRleE9mKDwlPXNjb3BlJT4uX190b2tlbi5hY2Nlc3NfdG9rZW4pPjApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFJlcXVlc3QuX3JldHJ5ID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9hdXRob3JpemUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFJlcXVlc3QuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgPCU9c2NvcGUlPi5fX3Rva2VuLmFjY2Vzc190b2tlbjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3Mob3JpZ2luYWxSZXF1ZXN0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICA8JSB9ZWxzZSBpZihhdXRoQ2xhc3MpeyU+DQogICAgCTwlPXNjb3BlJT4uX190b2tlbiA9IGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGF1dGhDbGFzcyklPigpLnVzZXJuYW1lKHVzZXJuYW1lKS5wYXNzd29yZChwYXNzd29yZCkuPCU9bU5hbWUucmVwbGFjZSgnXycsICcnKSU+KCk7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgPCU9d2FybigpJT4iTm8gYXV0aG9yaXphdGlvbiBkZWZpbmVkIik7DQogICAgPCUgfSU+DQogICAgICAgIH0NCjwlIH1lbHNleyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoKSklPigpLjwlPW1OYW1lJT4odXNlcm5hbWUsIHBhc3N3b3JkLCBiU2VydmVyKTsNCjwlfSU+DQogICAgfQ0KICAgIA0KPCUgaWYobWFpbkNsYXNzKCk9PWMpeyU+DQogICAgYXN5bmMgPCU9bU5hbWU9J19zZXJ2ZXInJT4ob3B0aW9ucz17fSkgew0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZihvcHRpb25zLmNsZWFyQ29uc29sZSkgY29uc29sZS5jbGVhcigpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZig8JT1zY29wZSU+Ll9fVG9vbHMpIDwlPXNjb3BlJT4uVG9vbHMgPSA8JT1zY29wZSU+Ll9fVG9vbHM7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihnbG9iYWwpPT09J3VuZGVmaW5lZCcgJiYgdHlwZW9mKDwlPXNjb3BlJT4uaHJlZnMpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAJCWZvciBhd2FpdCAoY29uc3QgbCBvZiA8JT1zY29wZSU+LmhyZWZzKSB7DQogICAgICAgIAkJCWF3YWl0IHRoaXMucmVxdWlyZShsLmxpYiwgPCU9c2NvcGUlPi5ocmVmcywgYXN5bmMgX2wgPT4gew0KICAgIDwlIGlmKF9jTmFtZSgnU3RvcmVkU2NyaXB0JykpeyU+DQogICAgICAgICAgICAgICAgICAgIGlmKF9sLnNjcmlwdCAmJiA8JT1zY29wZSU+LlRvb2xzKSByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdTdG9yZWRTY3JpcHQnLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChfbC5zY3JpcHQpLmxvYWRTY3JpcHQoKTsNCiAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgIA0KICAgICAgICAgICAgbGV0IHNlY3VyZSA9IHRoaXMuX19jb25maWcoJ3NlY3VyZScpOw0KICAgICAgICAgICAgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgLy8gZ2xvYmFscw0KICAgICAgICAgICAgICAgIHZhciBnbG9iYWxNb2R1bGVzID0gew0KICAgICAgICAgICAgICAgICAgICBleHByZXNzOiAnZXhwcmVzcycsDQogICAgICAgICAgICAgICAgICAgIGh0dHBzOiAnaHR0cHMnLA0KICAgICAgICAgICAgICAgICAgICBodHRwOiAnaHR0cCcsDQogICAgICAgICAgICAgICAgICAgIHNlbGZzaWduZWQ6ICdzZWxmc2lnbmVkJywNCiAgICAgICAgICAgICAgICAgICAgdXRpbDogJ3V0aWwnLA0KICAgICAgICAgICAgICAgICAgICBjb3JzOiAnY29ycycsDQogICAgICAgICAgICAgICAgICAgIGJvZHlQYXJzZXI6ICdib2R5LXBhcnNlcicsDQogICAgICAgICAgICAgICAgICAgIGF4aW9zOiAnYXhpb3MnLA0KICAgICAgICAgICAgICAgICAgICAvL2NyeXB0bzogJ2NyeXB0bycsDQogICAgICAgICAgICAgICAgICAgIG9zOiAnb3MnLA0KICAgICAgICAgICAgICAgICAgICAvL2ptZXNwYXRoOiAnam1lc3BhdGgnLA0KICAgICAgICAgICAgICAgICAgICBqc29ucGF0aDogJ2pzb25wYXRoJywNCiAgICAgICAgICAgICAgICAgICAganNvbmF0YTogJ2pzb25hdGEnLA0KICAgICAgICAgICAgICAgICAgICBEb3RPYmplY3Q6ICdkb3Qtb2JqZWN0JywNCiAgICAgICAgICAgICAgICAgICAgbWFjaGluZWlkOiAnbm9kZS1tYWNoaW5lLWlkJywNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIG1pbmltaXN0OiAnbWluaW1pc3QnLA0KICAgICAgICAgICAgICAgIA0KPCUgaWYoYy5Db25maWcgJiYgYy5Db25maWdbJ2dyYXBocWwnXSl7JT4NCiAgICAgICAgICAgICAgICAgICAgZ3JhcGhxbEhUVFA6ICdleHByZXNzLWdyYXBocWwnLA0KICAgICAgICAgICAgICAgICAgICBncmFwaHFsOiAnZ3JhcGhxbCcsDQogICAgICAgICAgICAgICAgICAgIHBsYXlncm91bmQ6ICdncmFwaHFsLXBsYXlncm91bmQtbWlkZGxld2FyZS1leHByZXNzJywNCjwlIH0lPg0KDQo8JSBpZihjLkNvbmZpZyAmJiBjLkNvbmZpZ1snZW1haWwuaG9zdCddKXslPg0KICAgICAgICAgICAgICAgICAgICBub2RlbWFpbGVyOiAnbm9kZW1haWxlcicsDQo8JSB9JT4NCg0KPCUgaWYoYy5Db25maWcgJiYgYy5Db25maWdbJ3RvdHAuc2VjcmV0J10peyU+DQogICAgICAgICAgICAgICAgICAgIG90cGF1dGg6ICdvdHBhdXRoJywNCjwlIH0lPg0KDQo8JSBpZihfY05hbWUoJ05vZGUnKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgY2hpbGRfcHJvY2VzczogJ2NoaWxkX3Byb2Nlc3MnLA0KPCUgfSU+DQoNCjwlIGlmKF9jTmFtZSgnRXZlbnQnKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiAnZXZlbnRzJywNCiAgICAgICAgICAgICAgICAgICAgc29ja2V0aW86ICdzb2NrZXQuaW8nLA0KICAgICAgICAgICAgICAgICAgICBtcXR0OiAnbXF0dCcsDQogICAgICAgICAgICAgICAgICAgIGFtcXBsaWI6ICdhbXFwbGliJywNCiAgICAgICAgICAgICAgICAgICAgcHJvdG9idWZqczogJ3Byb3RvYnVmanMnLA0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0ZpbGVTeXN0ZW0nXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIGZzOiAnZnMnLA0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0thZmthJ10pKXslPg0KICAgICAgICAgICAgICAgICAgICBrYWZrYWpzOiAna2Fma2FqcycsDQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKFsnTmVvNGonXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIG5lbzRqOiAnbmVvNGotZHJpdmVyJywNCjwlIH0lPg0KDQo8JSBpZihfY05hbWUoJ29BdXRoIFRva2VuJykpeyU+DQogICAgICAgICAgICAgICAgICAgIE9BdXRoU2VydmVyOiAnZXhwcmVzcy1vYXV0aC1zZXJ2ZXInLA0KPCUgfWVsc2UgaWYoYXV0aENsYXNzKXslPg0KICAgICAgICAgICAgICAgICAgICBqc29ud2VidG9rZW46ICdqc29ud2VidG9rZW4nLA0KPCUgfSU+DQoNCg0KPCUgaWYobWFpbkNsYXNzKFsnU3FsREInXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIHNxbGl0ZTogJ3NxbGl0ZTMnLA0KICAgICAgICAgICAgICAgICAgICBteXNxbDogJ215c3FsJywNCiAgICAgICAgICAgICAgICAgICAgcG9zdGdyZXM6ICdwZycsDQo8JSB9JT4NCjwlIGlmKG1haW5DbGFzcyhbJ1Nub3dGbGFrZSddKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgc25vd2ZsYWtlOiAnc25vd2ZsYWtlLXNkaycsDQo8JSB9JT4NCjwlIGlmKG1haW5DbGFzcyhbJ01vbmdvREInXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIG1vbmdvZGI6ICdtb25nb2RiJywNCjwlIH0lPg0KPCUgaWYobWFpbkNsYXNzKFsnUnhEQiddKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgUnhEQjogJ3J4ZGInLA0KPCUgfSU+DQo8JSBpZihtYWluQ2xhc3MoWydFeGNlbCddKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgWExTWDogJ3hsc3gnLA0KPCUgfSU+DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBtaXNzaW5nR2xvYmFsTW9kdWxlcyA9IE9iamVjdC5lbnRyaWVzKGdsb2JhbE1vZHVsZXMpLm1hcChlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsW2VbMF1dID0gcmVxdWlyZShlWzFdKTsNCiAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+ZXgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVbMV07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KS5maWx0ZXIoZSA9PiBlKTsNCiAgICAgICAgICAgICAgICBpZihtaXNzaW5nR2xvYmFsTW9kdWxlcy5sZW5ndGgpIDwlPXdhcm4oKSU+Im5wbSBpbnN0YWxsICIgKyBtaXNzaW5nR2xvYmFsTW9kdWxlcy5qb2luKCcgJykpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgCQk8JT1sb2coKSU+YFN0YXJ0aW5nIFskezwlPW5zY29wZSU+Ll9ub2RlPzwlPW5zY29wZSU+Ll9ub2RlLmNvZGUoKTonJ31dLi4uYCk7DQoNCgkJCWlmIChvcHRpb25zLmxvYWRUb29scykgYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdOb2RlJywgdHJ1ZSkgfHwgX2NOYW1lKCklPigpLl9sb2FkVG9vbHMob3B0aW9ucy5zYXZlVG9vbHMpOw0KDQo8JSBpZihfY05hbWUoJ05vZGUnKSl7ICAvKiBUb29scyBmaXJzdCBvciBOb2RlcyBmaXJzdD8/PyAqLyU+DQogICAgICAgICAgICBpZihvcHRpb25zLmluaXROb2RlKXsNCiAgICAgICAgICAgICAgICA8JT1uc2NvcGUlPi5fbm9kZSA9IGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnTm9kZScsIHRydWUpJT4oKS5zZWN1cmUoc2VjdXJlKS5pbml0KHRoaXMuX19jb25maWcoJ2luaXQubG9vcCcsIDAuNSkpOw0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZig8JT1uc2NvcGUlPi5fbm9kZSk9PT0ndW5kZWZpbmVkJykgcmV0dXJuIDwlPWVycm9yKCklPiI8JT1uc2NvcGUlPi5fbm9kZSBpcyB1bmRlZmluZWQhIik7DQogICAgICAgICAgICB9DQo8JSB9JT4NCg0KICAgIAkJaWYgKHR5cGVvZih0aGlzLmluaXQpPT09J2Z1bmN0aW9uJyAmJiBvcHRpb25zLmluaXRTZWxmKSB7DQogICAgCQkJYXdhaXQgdGhpcy5pbml0KCk7DQogICAgDQogICAgCQkJbGV0IHNxbFRvb2wgPSAoPCU9c2NvcGUlPi5Ub29scyB8fCBbXSkuZmluZCh0ID0+IHQuX19kbWxTdGF0ZW1lbnRzKTsNCiAgICAJCQlpZiAob3B0aW9ucy5jb3B5RE1MICYmIHNxbFRvb2wpIHsNCiAgICAJCQkJbGV0IGRtbHMgPSBzcWxUb29sLl9fZG1sU3RhdGVtZW50czsNCiAgICAJCQkJaWYgKHNxbFRvb2wudHlwZS5uYW1lID09ICdTcWxEQicpIGRtbHMgPSBbIC8qIkN1c3RvbWVycyIsICJPcmRlcnMiLCAiU2hpcHBpbmdzIiwgKi8gImRlbW8iXS5tYXAodCA9PiBgZHJvcCB0YWJsZSBpZiBleGlzdHMgJHt0fWApLmNvbmNhdChkbWxzKTsNCiAgICAJCQkJX0ZyRU1ELl9jb3B5VGV4dFRvQ2xpcGJvYXJkKGRtbHMuam9pbignO1xuJykpOw0KICAgIAkJCX0NCiAgICAJCX0NCg0KPCUgaWYoX2NOYW1lKCdOb2RlIFR5cGUnKSl7JT4NCiAgICAgICAgICAgIC8vIHJlZnJlc2ggc2NyaXB0DQogICAgICAgICAgICB0aGlzLnNldEludGVydmFsKG51bGwsIGFzeW5jICgvKnZlcnNpb24qLykgPT4gew0KICAgICAgICAgICAgICAgIGlmKHRoaXMuc3IoKS5iTG9jYWwpIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgc2N0ID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdOb2RlIFR5cGUnLCB0cnVlKSU+KG51bGwsICdGaWxlU3lzdGVtJykuX2Zyb21Eb2N1bWVudCg8JT1zY29wZSU+Ll9fPCU9X2NOYW1lKCdOb2RlIFR5cGUnKSU+IHx8IHtuYW1lOiAnTm9kZUpTJ30pOw0KICAgICAgICAgICAgICAgIGxldCBjdCA9IGF3YWl0IHNjdC5maW5kKCk7DQogICAgICAgICAgICAgICAgaWYoIWN0IHx8ICFjdC5hY3RpdmUoKSB8fCAhY3QuZW5hYmxlZCgpKSByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYoICFzY3QuZGF0ZSgpIHx8ICgoY3QuZGF0ZSgpLmdldFRpbWUoKSAtIHNjdC5kYXRlKCkuZ2V0VGltZSgpKS8xMDAwKSA+IDUgKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPmBOZXdlciB2ZXJzaW9uIGZvdW5kOiBbZGF0ZTogJHtjdC5kYXRlKCkudG9JU09TdHJpbmcoKX0sIHRvb2w6ICR7Y3QuVG9vbC5uYW1lfV0sIHN0b3JpbmcuLi5gKTsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3YW50IHRvIHN0b3JlIHRoZSBjb250ZW50IGRpcmVjdGx5IHRvIHRoZSBub2RlanMuanMgZmlsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY3QuX2ZpbGVzeXN0ZW0oY3QuY29kZSgpICsgJy5qcycsIHRoaXMuX2F0b2IoY3QucmVtYXJrKCkpKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mKHdpbmRvdykhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYod2luZG93LnNlbGYgIT09IHdpbmRvdy50b3Apew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+ImlGcmFtZSBzaG91bGQgYmUgcmVzdGFydGVkLi4uIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4id2luZG93IGxvY2F0aW9uIHJlbG9hZGluZy4uLiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3dpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPiJmcmFtZSBjaGVjayIsIGV4KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgIA0KICAgICAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll9fPCU9X2NOYW1lKCdOb2RlIFR5cGUnKSU+ID0gc2N0LmRhdGUoY3QuZGF0ZSgpKS5uYW1lKGN0Lm5hbWUoKSkuY29kZShjdC5jb2RlKCkpLl90b0RvY3VtZW50KCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9LCAwLjUpOw0KPCUgfSU+DQogICAgICAgIA0KICAgICAgICAgICAgaWYob3B0aW9ucy5sb2FkQ29udGVudCAmJiB0eXBlb2Yod2luZG93KSE9PSd1bmRlZmluZWQnKSB3aW5kb3cub25oYXNoY2hhbmdlID0gYXN5bmMgKCkgPT4gZG9jdW1lbnQuYm9keSA9IGF3YWl0IHRoaXMuX2V4cG9ydCh7dG1wOiBsb2NhdGlvbi5oYXNoLnBhZ2V9KTsNCiAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihnbG9iYWwpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBhcHAudXNlKGNvcnMoKSk7DQogICAgICAgIA0KICAgICAgICAgICAgICAgIGFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHtleHRlbmRlZDogdHJ1ZSwgbGltaXQ6ICc1MG1iJ30pKTsNCiAgICAgICAgICAgICAgICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbih7DQogICAgICAgICAgICAgICAgICAgIHZlcmlmeTogKHJlcSwgcmVzLCBidWYpID0+IHJlcS5yYXdCb2R5ID0gYnVmDQogICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICANCiAgICAgICAgICAgICAgICBnbG9iYWwuYXV0aGVudGljYXRlID0gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXEuaGVhZGVyc1snYXV0aG9yaXphdGlvbiddOw0KICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF1dGhIZWFkZXIgJiYgYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdOw0KICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuID09IG51bGwpIHJldHVybiByZXMuc2VuZFN0YXR1cyg0MDEpOw0KICAgICAgICANCiAgICAgICAgICAgICAgICAgICAganNvbndlYnRva2VuLnZlcmlmeSh0b2tlbiwgdGhpcy5fX2NvbmZpZygnc2VjcmV0JyksIChlcnIsIG9iaikgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlcy5zZW5kU3RhdHVzKDQwMyk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgcmVxLl9fYXV0aG9yaXphdGlvbiA9IG9iajsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgDQo8JSBpZihfY05hbWUoJ29BdXRoIFRva2VuJykpeyU+DQogICAgICAgICAgICAgICAgYXBwLm9hdXRoID0gbmV3IE9BdXRoU2VydmVyKHsNCiAgICAgICAgICAgICAgICAgICAgZGVidWc6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIC8vIHVzZUVycm9ySGFuZGxlcjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgLy8gY29udGludWVNaWRkbGV3YXJlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAvLyByZXF1aXJlQ2xpZW50QXV0aGVudGljYXRpb246IHsgcGFzc3dvcmQ6IGZhbHNlIH0sDQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBtb2RlbDogKCgpID0+ICh7DQogICAgICAgICAgICAgICAgCQlnZXRBY2Nlc3NUb2tlbjogYmVhcmVyVG9rZW4gPT4gbmV3IDwlPXNjb3BlJT4uT0F1dGhfVG9rZW4oKS5hY2Nlc3NUb2tlbihiZWFyZXJUb2tlbikuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkuZmluZCgpLnRoZW4odCA9PiBhcHAub2F1dGguaGFuZGxlcih0LCAnZ2V0QWNjZXNzVG9rZW4nKSkudGhlbih0ID0+IHt0LmFjY2Vzc1Rva2VuRXhwaXJlc0F0ID0gbmV3IERhdGUodC5hY2Nlc3NUb2tlbkV4cGlyZXNPbik7IHJldHVybiB0fSksDQogICAgICAgICAgICAgICAgICAgICAgICBnZXRDbGllbnQ6IChjbGllbnRJZCwgY2xpZW50U2VjcmV0KSA9PiBuZXcgPCU9c2NvcGUlPi5PQXV0aF9DbGllbnQoKS5pbml0KCkuZmluYWxseSgoKSA9PiBuZXcgPCU9c2NvcGUlPi5PQXV0aF9DbGllbnQoKS5pZChjbGllbnRJZCkuc2VjcmV0KGNsaWVudFNlY3JldCkuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkuZmluZCgpKS50aGVuKHQgPT4gYXBwLm9hdXRoLmhhbmRsZXIodCwgJ2dldENsaWVudCcpKSwNCiAgICAgICAgICAgICAgICAJICAgIGdldFVzZXI6ICh1c2VybmFtZSwgcGFzc3dvcmQpID0+IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGF1dGhDbGFzcyklPigpLmF1dGhvcml6ZSh1c2VybmFtZSwgcGFzc3dvcmQpLnRoZW4odCA9PiBhcHAub2F1dGguaGFuZGxlcih0LCAnZ2V0VXNlcicpKSwNCiAgICAgICAgICAgICAgICAJICAgIHNhdmVUb2tlbjogKHRva2VuLCBjbGllbnQsIHVzZXIpID0+IG5ldyA8JT1zY29wZSU+Lk9BdXRoX1Rva2VuKCkuX2Zyb21Eb2N1bWVudCh0b2tlbikuY2xpZW50KG5ldyA8JT1zY29wZSU+Lk9BdXRoX0NsaWVudCgpLl9mcm9tRG9jdW1lbnQoY2xpZW50KSkudXNlcih1c2VyKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5zdG9yZSgpLnRoZW4odCA9PiBhcHAub2F1dGguaGFuZGxlcih0LCAnc2F2ZVRva2VuJykpLA0KICAgICAgICAgICAgICAgIAkgICAgcmV2b2tlVG9rZW46IHRva2VuID0+IG5ldyA8JT1zY29wZSU+Lk9BdXRoX1Rva2VuKCkucmVmcmVzaFRva2VuKHRva2VuLnJlZnJlc2hUb2tlbikuY2xpZW50KG5ldyA8JT1zY29wZSU+Lk9BdXRoX0NsaWVudCgpLmlkKHRva2VuLmNsaWVudC5pZCkuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkpLmZpbmQoKS50aGVuKHQgPT4gdC5lbmFibGVkKGZhbHNlKS5hY3RpdmUoZmFsc2UpLnN0b3JlKCkpLnRoZW4odCA9PiBhcHAub2F1dGguaGFuZGxlcih0LCAncmV2b2tlVG9rZW4nKSksDQogICAgICAgICAgICAgICAgCSAgICBnZXRSZWZyZXNoVG9rZW46IHJlZnJlc2hUb2tlbiA9PiBuZXcgPCU9c2NvcGUlPi5PQXV0aF9Ub2tlbigpLnJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4pLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLmZpbmQoMi8qd2h5Ki8pLnRoZW4odCA9PiB0Ll90b0RvY3VtZW50KCkpLnRoZW4odCA9PiB7dC5yZWZyZXNoVG9rZW5FeHBpcmVzQXQgPSBuZXcgRGF0ZSh0LnJlZnJlc2hUb2tlbkV4cGlyZXNPbik7IHJldHVybiB0fSksDQogICAgICAgIAkgICAgICAgIH0pKSgpDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgYXBwLm9hdXRoLmhhbmRsZXIgPSAodCwgbSkgPT4gew0KICAgICAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihtKSA8JT1sb2coKSU+bSwgdC5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Ll90b0RvY3VtZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT13YXJuKCklPm0sIGV4LnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgDQogICAgICAgICAgICAgICAgYXBwLnBvc3QoJy9vYXV0aC90b2tlbicsIGFwcC5vYXV0aC50b2tlbigpKTsNCiAgICAgICAgICAgICAgICBnbG9iYWwuYXV0aGVudGljYXRlID0gYXBwLm9hdXRoLmF1dGhlbnRpY2F0ZSgpOw0KPCUgfSU+DQoNCjwlIGFyQ2xhc3Nlcy5mb3JFYWNoKF9jID0+IF9jLkVudGl0eU1ldGhvZHMuZmlsdGVyKG0gPT4gbS5Jc1B1YmxpYykuZm9yRWFjaChtID0+IHslPg0KICAgICAgICAgICAgICAgIGFwcC5wb3N0KCcvbWV0aG9kLzwlPW5OYW1lKF9jKSU+LzwlPW5OYW1lKG0pJT4nLCAocmVxLCByZXMpID0+IHRoaXMuX2luYm91bmRDYWxsKHJlcSwgcmVzLCAiPCU9bk5hbWUoX2MpJT4iLCAiPCU9bk5hbWUobSklPiIpKTsNCiAgICAgICAgICAgICAgICBhcHAuZ2V0KCcvbWV0aG9kLzwlPW5OYW1lKF9jKSU+LzwlPW5OYW1lKG0pJT4nLCAocmVxLCByZXMpID0+IHRoaXMuX2luYm91bmRDYWxsKHJlcSwgcmVzLCAiPCU9bk5hbWUoX2MpJT4iLCAiPCU9bk5hbWUobSklPiIpKTsNCjwlIH0pKSU+DQoNCiAgICAgICAgICAgICAgICBhcHAucG9zdCgnL21ldGhvZC86Y2xhc3MvOm1ldGhvZCcsIGdsb2JhbC5hdXRoZW50aWNhdGUsIChyZXEsIHJlcykgPT4gdGhpcy5faW5ib3VuZENhbGwocmVxLCByZXMpKTsNCiAgICAgICAgICAgICAgICBhcHAuZ2V0KCcvbWV0aG9kLzpjbGFzcy86bWV0aG9kJywgZ2xvYmFsLmF1dGhlbnRpY2F0ZSwgKHJlcSwgcmVzKSA9PiB0aGlzLl9pbmJvdW5kQ2FsbChyZXEsIHJlcykpOw0KICAgICAgICANCjwlIGlmKGMuQ29uZmlnICYmIGMuQ29uZmlnWydncmFwaHFsJ10peyU+DQogICAgICAgICAgICAgICAgYXBwLnVzZSgnL2dyYXBocWwnLCBncmFwaHFsSFRUUC5ncmFwaHFsSFRUUCh7DQogICAgICAgICAgICAgICAgICAgIHNjaGVtYTogZ3JhcGhxbC5idWlsZFNjaGVtYSh0aGlzLl90b0dRTFNjaGVtYSgpKSwNCiAgICAgICAgICAgICAgICAgICAgcm9vdFZhbHVlOiB0aGlzLl9xbFJlc29sdmVyKCksDQogICAgICAgICAgICAgICAgICAgIGdyYXBoaXFsOiB0aGlzLl9fY29uZmlnKCJwbGF5Z3JvdW5kIiksDQogICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoInBsYXlncm91bmQiKSAmJiB0eXBlb2YocGxheWdyb3VuZCkhPT0idW5kZWZpbmVkIikgYXBwLmdldCgnL3BsYXlncm91bmQnLCBwbGF5Z3JvdW5kLmRlZmF1bHQoeyBlbmRwb2ludDogJy9ncmFwaHFsJyB9KSkNCjwlIH0lPg0KDQogICAgICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygnZW1haWwuaG9zdCcpKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9c2NvcGUlPi50cmFuc3BvcnRlciA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2U6IHRoaXMuX19jb25maWcoJ2VtYWlsLmhvc3QnKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGg6IHRoaXMuX19jb25maWcoJ2VtYWlsLnVzZXInKT97DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogdGhpcy5fX2NvbmZpZygnZW1haWwudXNlcicpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3M6IHRoaXMuX19jb25maWcoJ2VtYWlsLnBhc3N3b3JkJyksDQogICAgICAgICAgICAgICAgICAgICAgICB9OnVuZGVmaW5lZCwNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAvKg0KICAgICAgICAgICAgICAgICAgICBhd2FpdCA8JT1zY29wZSU+LnRyYW5zcG9ydGVyLnNlbmRNYWlsKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IHRoaXMuX19jb25maWcoJ2VtYWlsLnNlbmRlcicpLA0KICAgICAgICAgICAgICAgICAgICAgICAgdG8sDQogICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCwNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICovDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBwb3J0ID0gPCU9bnNjb3BlJT4uX25vZGU/KDwlPW5zY29wZSU+Ll9ub2RlLnBvcnQoKSB8fCAzMDAwKTozMDAwOw0KICAgICAgICAgICAgICAgIGxldCBhZGRyZXNzID0gIjAuMC4wLjAiOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBsaXN0ZW4gPSBhc3luYyAoKSA9PiA8JT1sb2coKSU+YDwlPXNjb3BlJT5bJHt0aGlzLmlwQWRkcmVzcygpfV0gbGlzdGVuaW5nIGF0IGh0dHAke3NlY3VyZT8ncyc6Jyd9Oi8vJHthZGRyZXNzfToke3BvcnR9YCk7DQogICAgICAgICAgICAgICAgaWYoc2VjdXJlKXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGNlcnQgPSBudWxsOw0KICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCdzZWN1cmUucHJpdmF0ZScpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnQgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZTogKGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHRoaXMuX19jb25maWcoJ3NlY3VyZS5wcml2YXRlJykpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0OiAoYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUodGhpcy5fX2NvbmZpZygnc2VjdXJlLmNlcnQnKSkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICBjZXJ0ID0gc2VsZnNpZ25lZC5nZW5lcmF0ZShbeyBuYW1lOiAnY29tbW9uTmFtZScsIHZhbHVlOiAnbmFtbW91ci5jb20nIH1dLCB7IGRheXM6IDM2NSB9KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBnbG9iYWwuZXhTZXJ2ZXIgPSBodHRwcy5jcmVhdGVTZXJ2ZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBjZXJ0LnByaXZhdGUsDQogICAgICAgICAgICAgICAgICAgICAgICBjZXJ0OiBjZXJ0LmNlcnQNCiAgICAgICAgICAgICAgICAgICAgfSwgYXBwKS5saXN0ZW4ocG9ydCwgYWRkcmVzcywgbGlzdGVuKTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLmV4U2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKS5saXN0ZW4ocG9ydCwgYWRkcmVzcywgbGlzdGVuKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfaW5ib3VuZENhbGwnJT4ocmVxLCByZXMsIGNOYW1lLCBtTmFtZSl7DQogICAgICAgIGxldCByZXQgPSB7fTsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgbmV3IDwlPXNjb3BlJT5bcmVxLnBhcmFtcy5jbGFzcyB8fCBjTmFtZV0oKS5faW52b2tlKHJlcS5wYXJhbXMubWV0aG9kIHx8IG1OYW1lLCByZXEuYm9keSwgcmVxLnF1ZXJ5LCByZXEuX19hdXRob3JpemF0aW9uKTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgICAgIHJldCA9IHsNCiAgICAgICAgICAgICAgICBFeGNlcHRpb246ICJFeGNlcHRpb246ICIgKyBleCwNCiAgICAgICAgICAgIH07DQogICAgICAgIH0NCg0KICAgICAgICBpZihyZXQgJiYgdHlwZW9mKHJldCk9PT0ibnVtYmVyIikgcmV0ID0gcmV0LnRvU3RyaW5nKCk7DQogICAgICAgIHJlcy5zZW5kKHJldCk7DQogICAgfQ0KDQo8JSBpZihjLkNvbmZpZ1snZ3JhcGhxbCddKXslPg0KICAgIDwlPW1OYW1lPSdfcWxTZWxlY3Rpb25zJyU+KHNTZXQpew0KICAgICAgICBsZXQgcmV0ID0gW107DQogICAgICAgIGlmKCFzU2V0IHx8ICFzU2V0LnNlbGVjdGlvbnMpIHJldHVybiByZXQ7DQogICAgICAgIA0KICAgICAgICBzU2V0LnNlbGVjdGlvbnMuZmlsdGVyKHMgPT4gcy5zZWxlY3Rpb25TZXQpLmZvckVhY2gocyA9PiB7DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+IGVhLkVudGl0eVR5cGUgJiYgIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIGlmKHMubmFtZS52YWx1ZT09IjwlPW5OYW1lKGVhKSU+Iil7DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPidSZWZlcmVuY2UgZm9yIDwlPW5OYW1lKGVhKSU+Jywgcyk7DQogICAgICAgICAgICAgICAgbGV0IHNPYmogPSBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkuPCU9bk5hbWUoZWEpJT5fPCU9Yy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpJT4odGhpcyk7DQogICAgICAgICAgICAgICAgcmV0LnB1c2goc09iaik7DQogICAgICAgICAgICAgICAgcmV0LnB1c2goLi4uc09iai5fcWxTZWxlY3Rpb25zKHMuc2VsZWN0aW9uU2V0KSk7DQogICAgICAgICAgICB9DQo8JSB9KSU+DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19xbFJlc29sdmVyJyU+KCl7DQogICAgICAgIHJldHVybiB7DQo8JSBhckNsYXNzZXMuZm9yRWFjaChfYyA9PiB7JT4NCiAgICAgICAgICAgIDwlPW5OYW1lKF9jKSU+OiBhc3luYyAocGFyZW50LCBhcmdzLCBjb250ZXh0LCBpbmZvKSA9PiB7DQogICAgICAgICAgICAgICAgaWYoIXBhcmVudC5kYXRhKSBwYXJlbnQucXVlcnkgPSBwYXJlbnQucXVlcnkgfHwge307DQogICAgICAgICAgICAgICAgbGV0IG9iaiA9IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKF9jKSU+KCkuX2Zyb21Eb2N1bWVudChwYXJlbnQucXVlcnkgfHwgcGFyZW50LmRhdGEpOw0KICAgICAgICAgICAgICAgIGxldCByZXQgPSBudWxsOw0KICAgICAgICAgICAgICAgIGlmKHBhcmVudC5xdWVyeSl7DQogICAgICAgICAgICAgICAgICAgIGxldCBmaWVsZHMgPSBudWxsOw0KICAgICAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBvYmouZmluZEFsbChudWxsLCBvYmouX3FsU2VsZWN0aW9ucyhjb250ZXh0LmZpZWxkTm9kZXNbMF0uc2VsZWN0aW9uU2V0KSwgbnVsbCwgbnVsbCwgW3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKV0uY29uY2F0KGNvbnRleHQuZmllbGROb2Rlc1swXS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5tYXAocyA9PiBzLm5hbWUudmFsdWUpKSk7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYocGFyZW50LmRhdGEpew0KICAgICAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBvYmouc3RvcmUoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYob2JqLl9fYXNzZXJ0RXJyb3IpIHRocm93IG9iai5fX2Fzc2VydEVycm9yOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHJldCkpew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0Lm1hcChyID0+IHIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ/cmV0Ll90b0RvY3VtZW50KCk6cmV0Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgPCUgX2MuRW50aXR5TWV0aG9kcy5mb3JFYWNoKF9tID0+IHslPg0KICAgICAgICAgICAgLy8gPCU9bk5hbWUoX20pJT46IChwYXJlbnQsIGFyZ3MsIGNvbnRleHQsIGluZm8pID0+IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKF9jKSU+KCkuPCU9bk5hbWUoX20pJT4oIjwlPW5OYW1lKF9tKSU+IiwgcGFyZW50LCBhcmdzLCBjb250ZXh0LCBpbmZvKSwNCiAgICA8JSB9KSU+DQo8JSB9KSU+DQogICAgICAgIH07DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9HUUxTY2hlbWEnJT4oKXsNCiAgICAgICAgbGV0IHJldCA9IGANCnR5cGUgUXVlcnkgew0KPCUgYXJDbGFzc2VzLmZvckVhY2goX2MgPT4geyU+DQogICAgIiIiDQogICAgRmluZCBhbGwgbWF0Y2hlcyBmb3IgPCU9bk5hbWUoX2MpJT4NCiAgICAiIiINCiAgICA8JT1uTmFtZShfYyklPihxdWVyeTogPCU9bk5hbWUoX2MpJT5JbnB1dCk6IFs8JT1uTmFtZShfYyklPl0NCjwlIH0pJT4NCn0NCg0KdHlwZSBNdXRhdGlvbiB7DQo8JSBhckNsYXNzZXMuZm9yRWFjaChfYyA9PiB7JT4NCiAgICAiIiINCiAgICBTdG9yZSBhIHNpbmdsZSA8JT1uTmFtZShfYyklPiBvYmplY3QNCiAgICAiIiINCiAgICA8JT1uTmFtZShfYyklPihkYXRhOiA8JT1uTmFtZShfYyklPklucHV0KTogPCU9bk5hbWUoX2MpJT4NCjwlIH0pJT4NCn0NCiAgICANCiAgICA8JSBhckNsYXNzZXMuZm9yRWFjaChfYyA9PiB7JT4NCiIiIg0KSW5wdXQgdHlwZSBmb3IgPCU9bk5hbWUoX2MpJT4NCiIiIg0KaW5wdXQgPCU9bk5hbWUoX2MpJT5JbnB1dHsNCiAgICA8JSBfYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgIDwlPW5OYW1lKGVhKSU+OiA8JT1xbFR5cGUoZWEsIHRydWUpJT4NCiAgICA8JSB9KSU+DQogICAgPCUgX2MuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kICYmIHRhLkVudGl0eVR5cGUpLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTsgJT4NCiAgICA8JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPjogWzwlPW5OYW1lKHRhLkVudGl0eUNsYXNzKSU+SW5wdXRdDQogICAgPCUgfSklPg0KICAgIE9QRVJBVE9SUzogPCU9bk5hbWUoX2MpJT5PcGVyYXRvcg0KfQ0KDQppbnB1dCA8JT1uTmFtZShfYyklPk9wZXJhdG9yew0KICAgIDwlIF9jLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgPCU9bk5hbWUoZWEpJT46IFN0cmluZw0KICAgIDwlIH0pJT4NCn0NCg0KIiIiDQo8JT1fYy5SZW1hcmslPg0KIiIiDQp0eXBlIDwlPW5OYW1lKF9jKSU+ew0KICAgIF9pZDogSUQhDQogICAgPCUgX2MuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAiIiINCiAgICA8JT1lYS5SZW1hcmslPg0KICAgICIiIg0KICAgIDwlPW5OYW1lKGVhKSU+OiA8JT1xbFR5cGUoZWEpJT48JT1lYS5Jc1JlcXVpcmVkPychJzonJyU+DQogICAgPCUgfSklPg0KICAgIDwlIF9jLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCAmJiB0YS5FbnRpdHlUeXBlKS5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7ICU+DQogICAgPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT46IFs8JT1uTmFtZSh0YS5FbnRpdHlDbGFzcyklPl0NCiAgICA8JSB9KSU+DQoNCiAgICA8JSBfYy5FbnRpdHlNZXRob2RzLmZpbHRlcihfbSA9PiAhX20uTWV0aG9kUGFyYW1ldGVycy5sZW5ndGgpLmZvckVhY2goX20gPT4geyU+DQogICAgIiIiDQogICAgPCU9X20uUmVtYXJrJT4NCiAgICAiIiINCiAgICA8JT1uTmFtZShfbSklPjogPCU9cWxUeXBlKF9tLlJlc3BvbnNlQXR0cmlidXRlLCB0cnVlKSU+DQogICAgPCUgfSklPg0KICAgIDwlIF9jLkVudGl0eU1ldGhvZHMuZmlsdGVyKF9tID0+IF9tLk1ldGhvZFBhcmFtZXRlcnMubGVuZ3RoKS5mb3JFYWNoKF9tID0+IHslPg0KICAgICIiIg0KICAgIDwlPV9tLlJlbWFyayU+DQogICAgIiIiDQogICAgPCU9bk5hbWUoX20pJT4oPCU9X20uTWV0aG9kUGFyYW1ldGVycy5tYXAocCA9PiBuTmFtZShwKSArICc6ICcgKyBxbFR5cGUocCwgdHJ1ZSkpLmpvaW4oJywgJyklPik6IDwlPXFsVHlwZShfbS5SZXNwb25zZUF0dHJpYnV0ZSklPg0KICAgIDwlIH0pJT4NCn0NCiAgICA8JSB9KSU+DQogICAgICAgIGA7DQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCjwlIH0gLy8gZ3JhcGglPg0KDQo8JSB9IC8vIElzTWFpbiAlPg0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19pbnZva2VOb2RlJyU+KG4sIG1ldGhvZCwgZGF0YSwgZXZlbnQsIGJSYXcpIHsNCiAgICAgICAgLy8gaWYoIW4pIHJldHVybiBudWxsOw0KICAgICAgICANCiAgICAgICAgaWYodHlwZW9mKDwlPW5zY29wZSU+Ll9ub2RlKT09PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+IjwlPW5zY29wZSU+Ll9ub2RlIG5vdCBkZWZpbmVkIik7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYoZXZlbnQpew0KPCUgaWYoX2NOYW1lKCdFdmVudCcpKXslPg0KICAgICAgICAgICAgaWYoZXZlbnQuX2NsYXNzTmFtZV9zZXQgJiYgZXZlbnQuY2xhc3NOYW1lKCkgJiYgZXZlbnQuY2xhc3NOYW1lKCkhPSc8JT1uTmFtZShjKSU+Jyl7DQogICAgICAgICAgICAgICAgbGV0IG9DbGFzcyA9IG51bGw7DQogICAgICAgICAgICAgICAgaWYoZmFsc2Upew0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+IkRlbGVnYXRpbmcgaW52b2thdGlvbiB0byAiICsgZXZlbnQuY2xhc3NOYW1lKCkrJy4nK21ldGhvZCsnIC4uLi4nKTsNCiAgICA8JSBzci5ncm91cEJ5KGFyQ2xhc3NlcywgJ0VudGl0eU1vZHVsZScpLmZvckVhY2goZW0gPT4geyU+DQogICAgICAgICAgICAgICAgfWVsc2UgaWYoWyI8JT1lbS52YWx1ZXMubWFwKG1jID0+IG5OYW1lKG1jKSkuam9pbignIiwgIicpJT4iXS5pbmRleE9mKGV2ZW50LmNsYXNzTmFtZSgpKT49MCl7DQogICAgICAgICAgICAgICAgICAgIG9DbGFzcyA9IG5ldyA8JT1zY29wZSU+PCU9ZW0ua2V5PygnLicrZW0ua2V5LkFsaWFzKTonJyU+W2V2ZW50LmNsYXNzTmFtZSgpXSgpOw0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG9DbGFzcy48JT1tTmFtZSU+KG4sIG1ldGhvZCwgZGF0YSwgZXZlbnQsIGJSYXcpOw0KICAgICAgICAgICAgfQ0KPCUgfWVsc2V7JT4NCiAgICAgICAgICAgIDwlPWVycm9yKCklPiJFdmVudCBjYW5ub3QgYmUgZGVmaW5lZCB3aXRob3V0IHRoZSBFdmVudCBjbGFzcyIpOw0KICAgICAgICAgICAgcmV0dXJuIG51bGw7DQo8JSB9JT4NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgbGV0IHJldCA9IG51bGw7DQoNCiAgICAgICAgZGF0YSA9IGRhdGEgfHwge307DQoNCiAgICAgICAgaWYodHlwZW9mKGRhdGEpPT09Im9iamVjdCIpew0KICAgICAgICAgICAgZGF0YS5fX3RoaXMgPSBkYXRhLl9fdGhpcyB8fCB0aGlzLl90b0pTT04oe3BhcnNlOiAxfSk7DQogICAgICAgICAgICBzd2l0Y2gobWV0aG9kKXsNCiAgICA8JSBjLkVudGl0eU1ldGhvZHMuZm9yRWFjaChtID0+IHslPg0KICAgICAgICAgICAgICAgIGNhc2UgIjwlPW5Db2RlKG0pJT4iOiB7DQogICAgICAgIDwlIG0uTWV0aG9kUGFyYW1ldGVycy5mb3JFYWNoKHAgPT4geyU+DQogICAgICAgICAgICAgICAgICAgIGRhdGEuPCU9bk5hbWUocCklPiA9IGRhdGEuPCU9bk5hbWUocCklPj9kYXRhLjwlPW5OYW1lKHApJT4NCiAgICAgICAgICAgIDwlaWYocC5Jc0FycmF5KXslPi5tYXAoX3AgPT4gX3A8JX0lPg0KICAgICAgICAgICAgPCUgaWYocC5FbnRpdHlUeXBlKXslPi5fdG9Eb2N1bWVudCgpDQogICAgICAgICAgICA8JSB9ZWxzZSBpZihwLklzRGF0ZSl7JT4udG9JU09TdHJpbmcoKQ0KICAgICAgICAgICAgPCUgfSU+DQogICAgICAgICAgICA8JWlmKHAuSXNBcnJheSl7JT4pPCV9JT46dW5kZWZpbmVkOw0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KPCUgaWYoX2NOYW1lKCdOb2RlJykpeyU+DQogICAgICAgIGlmKHR5cGVvZihuKT09PSdzdHJpbmcnKSBuID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdOb2RlJywgdHJ1ZSklPigpLmNvZGUobik7DQo8JSB9JT4NCg0KICAgICAgICBpZighbiB8fCA8JT1uc2NvcGUlPi5fbm9kZS5fc2FtZUVudGl0eShuKSl7DQogICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLl9pbnZva2UobWV0aG9kLCBkYXRhKTsNCiAgICAgICAgICAgIDwlPWxvZygpJT4iTG9jYWwgbm9kZSIsIHJldCk7DQoNCiAgICAgICAgfWVsc2UgaWYobi5hZGRyZXNzKCkpew0KICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT5uLmFkZHJlc3MoKSwgbi5wb3J0KCksIG1ldGhvZCk7DQogICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5fcmVzdCh1bmRlZmluZWQsIGRhdGEsIG51bGwsIG51bGwsIHtwYXRoOiBgaHR0cCR7bi5zZWN1cmUoKT8ncyc6Jyd9Oi8vJHtuLmFkZHJlc3MoKX06JHtuLnBvcnQoKSB8fCAzMDAwfS9tZXRob2QvPCU9bk5hbWUoYyklPi8ke21ldGhvZH1gLCBoZWFkZXJzOiB7fX0pOw0KICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgICAgICB9DQogICAgICAgIH1lbHNlew0KPCUgaWYoX2NOYW1lKCdFdmVudCcpICYmIGMuTmFtZSE9PSdFdmVudCcpeyU+DQogICAgICAgICAgICBpZih0eXBlb2YoZGF0YSk9PT0ib2JqZWN0Iil7DQogICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEuX190aGlzLl9fZ2VuZXJhdGVkOw0KICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLl9fdGhpcy5vbmxpbmU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vd2h5IGRvIHdlIG5lZWQgdGhpcz8/Pw0KICAgICAgICAgICAgPCUgLyp1blJlY3Vyc2UoJ2RhdGEnLCAnbWV0aG9kJywgJ3t9JywgJycsIDUsICdfX3RoaXMuY29kZScpKi8gJT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGV2ID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdFdmVudCcsIHRydWUpJT4oKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5jb2RlKHRoaXMuX3V1aWQoKSkubmFtZSh0aGlzLl9fY29uZmlnKCdldmVudCcpIHx8ICc8JT1zY29wZSU+LkV2ZW50JykuZGF0ZSh0aGlzLnNlcnZlckRhdGUoKSkucmVjaXBpZW50KG4pLm1ldGhvZChtZXRob2QpLmNsYXNzTmFtZSgnPCU9bk5hbWUoYyklPicpLnNlbmRlcig8JT1uc2NvcGUlPi5fbm9kZSkuY2Fycmllcig8JT1uc2NvcGUlPi5fbm9kZSkucGF5bG9hZCh0aGlzLl9idG9hKEpTT04uc3RyaW5naWZ5KGRhdGEpKSk7DQogICAgICAgICAgICBpZihldmVudCl7DQogICAgICAgICAgICAgICAgaWYoZXZlbnQuX3Jlc3BvbnNlVG9fc2V0KSBldi5yZXNwb25zZVRvKGV2ZW50LnJlc3BvbnNlVG8oKSk7DQogICAgICAgICAgICAgICAgaWYoZXZlbnQuX3NlbmRlcl9zZXQpIGV2LnNlbmRlcihldmVudC5zZW5kZXIoKSk7DQogICAgICAgICAgICAgICAgaWYoZXZlbnQuX2NsYXNzTmFtZV9zZXQpIGV2LmNsYXNzTmFtZShldmVudC5jbGFzc05hbWUoKSk7DQogICAgICAgICAgICAgICAgaWYoZXZlbnQuX2NhcnJpZXJfc2V0IHx8IGV2ZW50Ll9zZW5kZXJfc2V0KSBldi5jYXJyaWVyKGV2ZW50LmNhcnJpZXIoKSB8fCBldmVudC5zZW5kZXIoKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXQgPSBhd2FpdCBldi50cmlnZ2VyKCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihyZXQpPT09InN0cmluZyIpew0KICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gSlNPTi5wYXJzZShyZXQpOw0KICAgICAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWVsc2UgaWYocmV0ICYmIHR5cGVvZihyZXQucGF5bG9hZCk9PT0nZnVuY3Rpb24nKXsNCiAgICAgICAgICAgICAgICAvLyByZXQgaXMgYW4gZXZlbnQNCiAgICAgICAgICAgICAgICByZXQgPSByZXQucGF5bG9hZCgpOw0KICAgICAgICAgICAgfWVsc2UgaWYoQXJyYXkuaXNBcnJheShyZXQpICYmIHJldFswXSAmJiB0eXBlb2YocmV0WzBdLnBheWxvYWQpPT09J2Z1bmN0aW9uJyl7DQogICAgICAgICAgICAgICAgcmV0ID0gcmV0Lm1hcChyID0+IHIucGF5bG9hZCgpKTsNCiAgICAgICAgICAgICAgICBpZihyZXQubGVuZ3RoPT0xKSByZXQgPSByZXRbMF07DQogICAgICAgICAgICB9DQo8JSB9JT4NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYoIXJldCkgcmV0dXJuIG51bGw7DQogICAgICAgIHJldCA9IHJldC5kYXRhIHx8IHJldDsNCg0KICAgICAgICBpZihyZXQuX19leGNlcHRpb24pew0KICAgICAgICAgICAgLy8gYW4gZXhjZXB0aW9uIG9jY3VycmVkIGF0IHRoZSBzZXJ2ZXINCiAgICAgICAgICAgIDwlPWVycm9yKCklPmBFeGNlcHRpb24gYXQgJHtuLl9hZGRyZXNzfWAsIHJldC5fX2V4Y2VwdGlvbik7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9DQoNCiAgICAgICAgc3dpdGNoKG1ldGhvZCl7DQo8JSBjLkVudGl0eU1ldGhvZHMuZm9yRWFjaChtID0+IHslPg0KICAgICAgICAgICAgY2FzZSAiPCU9bkNvZGUobSklPiI6IHsNCiAgICA8JSBpZihtLlJlc3BvbnNlQXR0cmlidXRlLkVudGl0eVR5cGUpeyAlPg0KICAgICAgICAgICAgICAgIGlmKCFiUmF3KSByZXQgPSBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtLlJlc3BvbnNlQXR0cmlidXRlLkVudGl0eVR5cGUpJT4oKS5fZnJvbURvY3VtZW50KHJldCk7DQogICAgPCUgfSAlPg0KICAgIDwlIGlmKG0uTmFtZT09J2F1dGhvcml6ZScpeyU+DQogICAgICAgICAgICAgICAgPCU9c2NvcGUlPi5fX3Rva2VuID0ge3Rva2VuX3R5cGU6ICJCZWFyZXIiLCBhY2Nlc3NfdG9rZW46IHJldH07DQogICAgPCUgfSAlPg0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KPCUgfSk7ICU+DQoNCiAgICAgICAgICAgIGNhc2UgImluc2VydCI6DQogICAgICAgICAgICBjYXNlICJ1cGRhdGUiOg0KICAgICAgICAgICAgY2FzZSAic3RvcmUiOg0KICAgICAgICAgICAgY2FzZSAiZGVsZXRlIjoNCiAgICAgICAgICAgIGNhc2UgImZpbmQiOiANCiAgICAgICAgICAgIGNhc2UgImZpbmRBbGwiOiB7DQogICAgICAgICAgICAgICAgaWYoIWJSYXcpIHJldCA9IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KHJldCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6IHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KDQo8JSBpZihtYWluQ2xhc3MoKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX2ludm9rZSclPihtZXRob2QsIGJvZHksIHF1ZXJ5LCBhdXRoT2JqKXsNCiAgICAgICAgdGhpcy5fX3RpbWUoJzwlPXNjb3BlJT4uPCU9bk5hbWUoYyklPi4nICsgbWV0aG9kKTsNCiAgICAgICAgPCU9bG9nKCklPm1ldGhvZCwgcXVlcnksIGJvZHkpOw0KICAgICAgICANCiAgICAgICAgaWYodHlwZW9mKGJvZHkpPT09J3N0cmluZycpew0KICAgICAgICAgICAgaWYoPCU9X2I2NHRlc3QoJ2JvZHknKSU+KXsgLy8gYmFzZTY0Pw0KICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLl9hdG9iKGJvZHkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZigvW14sOnt9XFtcXTAtOS5cLStFYWVmbG5yLXUgXG5cclx0XS8udGVzdChib2R5KSl7IC8vIGpzb24NCiAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKGJvZHkudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iQm9keSBpcyBub3QgYSB2YWxpZCBKU09OIiwgYm9keSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBsZXQgX3BhcmFtcyA9IHF1ZXJ5P09iamVjdC5hc3NpZ24ocXVlcnksIGJvZHkpOmJvZHk7DQogICAgICAgIGlmKHR5cGVvZihfcGFyYW1zKT09PSdzdHJpbmcnKSBfcGFyYW1zID0gSlNPTi5wYXJzZShfcGFyYW1zKTsNCiAgICAgICAgDQogICAgICAgIGlmKF9wYXJhbXMpew0KICAgICAgICAgICAgX3BhcmFtcyA9IERvdE9iamVjdC5vYmplY3QoX3BhcmFtcyk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgX3BhcmFtcyA9IHt9Ow0KICAgICAgICB9DQoNCiAgICAgICAgPCU9bG9nKCklPiJfcGFyYW1zIiwgX3BhcmFtcyk7DQoNCiAgICA8JSBpZihfY05hbWUoJ05vZGUnKSAmJiBjLk5hbWUhPSdOb2RlJyl7JT4NCiAgICAgICAgaWYoX3BhcmFtcy5fX25vZGUpew0KICAgICAgICAgICAgLy8gcHJvYmFibHkgc2hvdWxkIG5vdCBiZSBwcm9jZXNzZWQgaGVyZSwgYnV0IHJhdGhlciBjb25zdW1lZCBhcyBwYXJ0IG9mIHRoZSBleGVjdXRlKCkgbG9naWMsIHB1c2hpbmcgX19ub2RlIHRvIHRoZSBsaXN0IG9mIG15IG5vZGVzIHRvIGRlbGVnYXRlIHRvIT8NCiAgICAgICAgICAgIGxldCB0biA9IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnTm9kZScsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KF9wYXJhbXMuX19ub2RlKS8qLl9kZVJlZmVyZW5jZSgpKi87DQogICAgICAgICAgICBkZWxldGUgX3BhcmFtcy5fX25vZGU7DQogICAgICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGMsIHRydWUpJT4oKS5faW52b2tlTm9kZSh0biwgbWV0aG9kLCBfcGFyYW1zKTsNCiAgICAgICAgfQ0KICAgIDwlIH0lPg0KDQogICAgICAgIGlmKF9wYXJhbXMuX190aGlzKSB7DQogICAgICAgICAgICBfcGFyYW1zLl9fdGhpcyA9IERvdE9iamVjdC5vYmplY3QoX3BhcmFtcy5fX3RoaXMpOw0KICAgICAgICAgICAgbGV0IF9fdGhpcyA9IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShjLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChfcGFyYW1zLl9fdGhpcykvKi5fZGVSZWZlcmVuY2UoKSovOw0KICAgICAgICAgICAgZGVsZXRlIF9wYXJhbXMuX190aGlzOw0KICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9fdGhpcy48JT1tTmFtZSU+KG1ldGhvZCwgX3BhcmFtcywgbnVsbCwgYXV0aE9iaik7DQogICAgICAgIH0NCg0KICAgICAgICBsZXQgYXJBcmdzID0gW107DQogICAgICAgIHN3aXRjaChtZXRob2Qpew0KPCUgYy5FbnRpdHlNZXRob2RzLmZvckVhY2gobSA9PiB7JT4NCiAgICAgICAgICAgIGNhc2UgIjwlPW5Db2RlKG0pJT4iOiB7DQo8JSBpZihfY05hbWUoJ1RyYW5zYWN0aW9uJykgJiYgX2NOYW1lKCdDb250ZW50JykgJiYgYy5OYW1lIT0nVHJhbnNhY3Rpb24nICYmICFtLklzU3luYyl7JT4NCiAgICAgICAgaWYoIV9wYXJhbXMuU3luYyl7DQogICAgICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdDb250ZW50JywgdHJ1ZSklPigoYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdDb250ZW50JywgdHJ1ZSklPigpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLnNjb3BlKCI8JT1zY29wZSU+IikuY2xhc3MoIjwlPWMuTmFtZSU+IikubWV0aG9kKG1ldGhvZCkuYXV0aG9yaXphdGlvbihhdXRoT2JqKS5kYXRlKHRoaXMuc2VydmVyRGF0ZSgpKS5wYXlsb2FkKHRoaXMuX2J0b2EoX3BhcmFtcykpLnRyYW5zYWN0aW9uX1RyYW5zYWN0aW9uTG9ncyhbbmV3IDwlPXNjb3BlJT4uVHJhbnNhY3Rpb25Mb2coKS5kYXRlKHRoaXMuc2VydmVyRGF0ZSgpKS5zdGF0ZShuZXcgPCU9c2NvcGUlPi5UcmFuc2FjdGlvblN0YXRlKCkuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkubmFtZSgibG9hZGVkIikpXSkuc3RvcmUoKSkuSWQpLl90b0RvY3VtZW50KCk7DQogICAgICAgIH0NCjwlIH0lPg0KDQogICAgPCUgbS5NZXRob2RQYXJhbWV0ZXJzLmZvckVhY2gocCA9PiB7JT4NCiAgICAgICAgPCUgaWYocC5FbnRpdHlUeXBlICYmIHAuSXNBcnJheSl7JT4NCiAgICAgICAgICAgICAgICBfcGFyYW1zLjwlPW5Db2RlKHApJT4gPSBfcGFyYW1zLjwlPW5Db2RlKHApJT4ubWFwKHAgPT4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUocC5FbnRpdHlUeXBlKSU+KCkuX2Zyb21Eb2N1bWVudChwKS5fZGVSZWZlcmVuY2UoKSk7DQogICAgICAgIDwlIH1lbHNlIGlmKHAuRW50aXR5VHlwZSl7ICU+DQogICAgICAgICAgICAgICAgX3BhcmFtcy48JT1uQ29kZShwKSU+ID0gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUocC5FbnRpdHlUeXBlKSU+KCkuX2Zyb21Eb2N1bWVudChfcGFyYW1zLjwlPW5Db2RlKHApJT4pLl9kZVJlZmVyZW5jZSgpOw0KICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICAgICAgYXJBcmdzLnB1c2goX3BhcmFtcy48JT1uQ29kZShwKSU+KTsNCiAgICA8JSB9KTslPg0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KPCUgfSk7JT4NCg0KICAgICAgICAgICAgY2FzZSAiZmluZEFsbCI6ew0KICAgICAgICAgICAgICAgIGFyQXJncy5wdXNoKF9wYXJhbXMuZGVwdGgpOw0KICAgICAgICAgICAgICAgIGFyQXJncy5wdXNoKF9wYXJhbXMub2Jqcyk7DQogICAgICAgICAgICAgICAgYXJBcmdzLnB1c2goX3BhcmFtcy5zdGFydCk7DQogICAgICAgICAgICAgICAgYXJBcmdzLnB1c2goX3BhcmFtcy5lbmQpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2FzZSAiZmluZCI6IHsNCiAgICAgICAgICAgICAgICBhckFyZ3MucHVzaChfcGFyYW1zLmRlcHRoKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZGVmYXVsdDogew0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBsZXQgb2JqID0gdGhpczsNCiAgICAgICAgDQogICAgICAgIGxldCByZXQgPSBudWxsOw0KICAgICAgICBpZighb2JqKXsNCiAgICAgICAgICAgIHJldCA9IHsNCiAgICAgICAgICAgICAgICBfX2V4Y2VwdGlvbjogew0KICAgICAgICAgICAgICAgICAgICAnLTEnOiBgPCU9bk5hbWUoYyklPi48JT1tTmFtZSU+OiBvYmogaXMgdW5kZWZpbmVkYA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH1lbHNlIGlmKCFvYmpbbWV0aG9kXSl7DQogICAgICAgICAgICByZXQgPSB7DQogICAgICAgICAgICAgICAgX19leGNlcHRpb246IHsNCiAgICAgICAgICAgICAgICAgICAgJy0yJzogYDwlPW5OYW1lKGMpJT4uPCU9bU5hbWUlPjogbWV0aG9kICR7b2JqLmNvbnN0cnVjdG9yLm5hbWV9KCR7bWV0aG9kfSkgaXMgbm90IGZvdW5kYCwNCiAgICAgICAgICAgICAgICAgICAgJ29iaic6IG9iag0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgb2JqW21ldGhvZF0oLi4uYXJBcmdzKTsNCiAgICAgICAgfQ0KICAgICAgICANCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgIDwlIGlmKHQ9PSJTcWxEQiIpeyAlPg0KICAgICAgICAgICAgaWYoZmFsc2UgJiYgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uICYmICE8JT1zY29wZSU+Ll9fc3FsVHJhbnNhY3Rpb24uZW5kKXsNCiAgICAgICAgICAgICAgICByZXQgPSB7DQogICAgICAgICAgICAgICAgICAgIF9fZXhjZXB0aW9uOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAnLTQnOiAiVW5jb21taXR0ZWQgdHJhbnNhY3Rpb25zOiAiICsgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uLnNxbHMubGVuZ3RoLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ29iaic6IG9iag0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgIDwlIH0lPg0KICAgICAgICB9DQo8JSB9KSU+DQoNCiAgICAgICAgaWYocmV0ICYmICFyZXQuX19leGNlcHRpb24pew0KICAgICAgICAgICAgPCU9c2NvcGUlPi5fdW5SZWN1cnNlID0ge307DQogICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHJldCkpew0KICAgICAgICAgICAgICAgIGxldCBfcmV0ID0gW107DQogICAgICAgICAgICAgICAgZm9yIGF3YWl0KGNvbnN0IHIgb2YgcmV0KXsNCiAgICAgICAgICAgICAgICAgICAgaWYociAmJiByLl90b0RvY3VtZW50KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+KSBkZWxldGUgPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT4uX3RvRG9jdW1lbnQ7DQogICAgICAgICAgICAgICAgICAgICAgICBfcmV0LnB1c2goYXdhaXQgci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgX3JldC5wdXNoKHIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXQgPSBfcmV0Ow0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgcmV0ID0gKHJldCAmJiByZXQuX3RvRG9jdW1lbnQpP2F3YWl0IHJldC5fdG9Eb2N1bWVudCgpOnJldDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgPCU9bG9nKCklPidyZXQnLCByZXQpOw0KICAgICAgICA8JT1sb2coKSU+YCR7bWV0aG9kfTogJHt0aGlzLl9fdGltZSgnPCU9c2NvcGUlPi48JT1uTmFtZShjKSU+LicgKyBtZXRob2QpfWApOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KPCUgaWYoX2NOYW1lKCdOb2RlJykpeyU+DQogICAgPCU9bU5hbWU9J19wYXJzZUNvZGVTdGF0ZSclPih0KXsNCiAgICA8JSBpZihtYWluQ2xhc3MoKT09Yyl7JT4NCiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5fX2NvbmZpZyh0aGlzLl9fY29uZmlnKCdvYXV0aC5yZWRpcmVjdC5zdGF0ZScsIG51bGwsIHt0b29sOiB0fSkpOw0KICAgICAgICBsZXQgY29kZSA9IHRoaXMuX19jb25maWcodGhpcy5fX2NvbmZpZygnb2F1dGgucmVkaXJlY3QuY29kZScsIG51bGwsIHt0b29sOiB0fSkpOw0KICAgICAgICBpZighc3RhdGUgfHwgIWNvZGUpIHJldHVybjsNCiAgICAgICAgc3RhdGUgPSBKU09OLnBhcnNlKHRoaXMuX2F0b2Ioc3RhdGUpKTsNCiAgICAgICAgaWYoc3RhdGUudG9vbCE9PXQubmFtZSkgcmV0dXJuOw0KDQogICAgICAgIDwlPWxvZygpJT4iR09UIENPREUgIiArIGNvZGUgKyAiIGZvciBub2RlICIgKyBzdGF0ZS5uY29kZSArICIgd2l0aCB0b29sICIgKyBzdGF0ZS50b29sKTsNCiAgICAgICAgaWYoITwlPW5zY29wZSU+Ll9ub2RlLnBhcmVudCgpIHx8ICE8JT1uc2NvcGUlPi5fbm9kZS5fcGFyZW50Ll9zYW1lRW50aXR5KDwlPW5zY29wZSU+Ll9ub2RlLnBhcmVudCgpKSl7DQogICAgICAgICAgICA8JT1sb2coKSU+J25ldyBwYXJlbnQnLCBzdGF0ZS5uY29kZSk7DQogICAgICAgICAgICA8JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnQobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdOb2RlJywgdHJ1ZSklPigpLmNvZGUoc3RhdGUubmNvZGUpKTsNCiAgICAgICAgfQ0KICAgICAgICA8JT1uc2NvcGUlPi5fbm9kZS5hdXRoQ29kZShjb2RlLCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1Rvb2wnLCB0cnVlKSU+KCkubmFtZShzdGF0ZS50b29sKSk7DQogICAgICAgIHdpbmRvdy5jbG9zZSgpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoKSklPigpLjwlPW1OYW1lJT4odCk7DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2xvYWRUb29scyclPihiU3RvcmUpew0KICAgICAgICBpZig8JT1zY29wZSU+LlRvb2xzICYmIDwlPXNjb3BlJT4uVG9vbHMubGVuZ3RoKXsNCiAgICAgICAgICAgIDwlPWxvZygpJT5gVG9vbHMgYWxyZWFkeSBsb2FkZWRgKTsNCiAgICAgICAgICAgIHJldHVybiA8JT1zY29wZSU+LlRvb2xzOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICA8JT1sb2coKSU+YExvYWRpbmcgdG9vbHMuLi5gKTsNCiAgICAgICAgDQogICAgICAgIGxldCB0b29scyA9IFtdOw0KICAgICAgICB0b29scyA9IDwlPXNjb3BlJT4uX19Ub29scyB8fCB0b29sczsNCiAgICAgICAgZGVsZXRlIDwlPXNjb3BlJT4uX19Ub29sczsNCg0KICAgICAgICBsZXQgYXJUb29scyA9IDwlPV9GckVNRC5fdG9KUyhbLi4ubmV3IFNldChhckNsYXNzZXMubWFwKF9jID0+IF9jLlRvb2xzKS5mbGF0KCkpXSklPjsNCiAgICAgICAgbGV0IHRvb2xOYW1lcyA9IGFyVG9vbHMubWFwKHQgPT4gdC5uYW1lIHx8ICh0LnR5cGU/dC50eXBlLm5hbWU6dCkpOw0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZih0b29scy5sZW5ndGghPT10b29sTmFtZXMubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICAvLyBjYW5ub3QgdXNlIHJlcXVpcmUgeWV0LCBubyB0b29scyBwcm9wZXJseSBsb2FkZWQgdG8gdXNlIGEgbG9hZGVyIGZ1bmN0aW9uDQogICAgICAgICAgICAgICAgdG9vbHMgPSBhd2FpdCB0aGlzLl9nZXRTdG9yZWRTY3JpcHQoe05hbWU6ICdBUElTRVJWRVI8JT1tTmFtZSU+JywgQWN0aXZlOiB0cnVlLCBFbmFibGVkOiB0cnVlfSkgfHwgdG9vbHM7DQogICAgICAgICAgICB9DQoNCjwlIGlmKF9jTmFtZSgnVG9vbCcpKXslPg0KICAgICAgICAgICAgaWYoIXRvb2xzLmxlbmd0aCkgdG9vbHMgPSAoYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdUb29sJywgdHJ1ZSklPigpLlRISVModG9vbE5hbWVzLm1hcCh0ID0+IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVG9vbCcsIHRydWUpJT4oKS5uYW1lKHQpKSkuZmluZEFsbCgyKSkubWFwKHQgPT4gdC5fdG9KU09OKHtwYXJzZTogMX0pKSB8fCB0b29sczsNCjwlIH0lPg0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9d2FybigpJT5leCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGxldCBmaXhUb29scyA9IHRvb2xzID0+IHsNCiAgICAgICAgICAgIHRvb2xzLmZpbHRlcih0ID0+IHR5cGVvZih0KT09PSdvYmplY3QnICYmIHQpLmZvckVhY2godCA9PiB7DQogICAgICAgICAgICAgICAgPCVfZGVmKCd0LklkJywgJ3RoaXMuX3V1aWQoKScpJT4NCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QubmFtZScsICd0LnR5cGUubmFtZScpJT4NCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QuYWN0aXZlJywgdHJ1ZSklPg0KICAgICAgICAgICAgICAgIDwlX2RlZigndC5lbmFibGVkJywgdHJ1ZSklPg0KICAgICAgICAgICAgICAgIDwlX2RlZigndC50eXBlLmFjdGl2ZScsIHRydWUpJT4NCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QudHlwZS5lbmFibGVkJywgdHJ1ZSklPg0KDQogICAgICAgICAgICAgICAgPCVfZGVmKCd0LnRvb2xfQ29uZmlncycsICdbXScpJT47DQogICAgICAgICAgICAgICAgPCVfZGVmKCd0LnR5cGUudHlwZV9Db25maWdzJywgJ1tdJyklPjsNCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QudHlwZS50eXBlX01hcHBpbmdzJywgJ1tdJyklPjsNCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QudG9vbF9NYXBwaW5ncycsICdbXScpJT47DQogICAgDQogICAgICAgICAgICAgICAgW10uY29uY2F0KHQudG9vbF9Db25maWdzLCB0LnR5cGUudHlwZV9Db25maWdzLCB0LnR5cGUudHlwZV9NYXBwaW5ncywgdC50b29sX01hcHBpbmdzKS5mb3JFYWNoKGMgPT4gew0KICAgICAgICAgICAgICAgICAgICA8JV9kZWYoJ2MuYWN0aXZlJywgdHJ1ZSklPg0KICAgICAgICAgICAgICAgICAgICA8JV9kZWYoJ2MuZW5hYmxlZCcsIHRydWUpJT4NCiAgICAgICAgICAgICAgICAgICAgPCVfZGVmKCdjLklkJywgJ3RoaXMuX3V1aWQoKScpJT4NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0pOw0KICAgIA0KICAgICAgICAgICAgdG9vbHMuZmlsdGVyKHQgPT4gdHlwZW9mKHQpPT09J29iamVjdCcgJiYgdCkuZm9yRWFjaCh0ID0+IFsndG9vbF9Db25maWdzJywgJ3R5cGUudHlwZV9Db25maWdzJ10uZm9yRWFjaChzQ29uZmlnID0+IHsNCiAgICAgICAgICAgICAgICAgICAgRG90T2JqZWN0LnNldChzQ29uZmlnLCBEb3RPYmplY3QucGljayhzQ29uZmlnLCB0KS5maWx0ZXIoYyA9PiB0eXBlb2YoYy52YWx1ZSkhPT0ib2JqZWN0IikuY29uY2F0KERvdE9iamVjdC5waWNrKHNDb25maWcsIHQpLmZpbHRlcihjID0+IHR5cGVvZihjLnZhbHVlKT09PSJvYmplY3QiICYmIGMudmFsdWUpLm1hcChjID0+IE9iamVjdC5rZXlzKGMudmFsdWUpLm1hcChuY29kZSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgX2MgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYy5uYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjLnZhbHVlW25jb2RlXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgICAgICBpZihuY29kZSE9ImRlZmF1bHQiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy5ub2RlID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBuY29kZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSwgPCUvLyBvdGhlcndpc2UgaXQgc3RhcnRzIGdldHRpbmcgZXZlbnRzJT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIk5vZGVKUyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jOw0KICAgICAgICAgICAgICAgICAgICB9KS5mbGF0KCkpLmZsYXQoKSksIHQpOw0KICAgICAgICAgICAgICAgICAgICBEb3RPYmplY3QucGljayhzQ29uZmlnLCB0KS5mb3JFYWNoKGMgPT4gYy52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KGMudmFsdWUpKTsNCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfTsNCg0KDQogICAgICAgIGZpeFRvb2xzKHRvb2xzKTsNCiAgICAgICAgdG9vbHMgPSB0b29scy5maWx0ZXIodCA9PiB0LmFjdGl2ZSk7DQogICAgICAgIHRvb2xzID0gdG9vbHMuZmlsdGVyKHQgPT4gdG9vbE5hbWVzLmZpbmQoX3QgPT4gKHR5cGVvZihfdCk9PT0nc3RyaW5nJz9fdDpfdC5uYW1lKT09dC5uYW1lKSk7DQoNCiAgICAgICAgPCU9bG9nKCklPmBUb29scyBhcmUgJHt0b29scy5sZW5ndGh9YCk7DQoNCiAgICAgICAgPCU9c2NvcGUlPi5Ub29scyA9IHRvb2xzOw0KDQogICAgICAgIDwlPXNjb3BlJT4uVG9vbHMuZmlsdGVyKHQgPT4gIXQuYXhpb3MgJiYgPCU9SlNPTi5zdHJpbmdpZnkoX3Jlc3RUb29scyklPi5pbmRleE9mKHQudHlwZS5uYW1lKT49MCkuZm9yRWFjaCh0ID0+IHsNCiAgICAgICAgICAgIHQuYXhpb3MgPSB0eXBlb2YoYXhpb3MuY3JlYXRlKT09PSdmdW5jdGlvbic/YXhpb3MuY3JlYXRlKCk6YXhpb3M7DQogICAgICAgICAgICB0LmF4aW9zLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShyZXF1ZXN0ID0+IHRoaXMuX3JlcXVlc3RJbnRlcmNlcHRvcihyZXF1ZXN0LCB0KSwgZXJyb3IgPT4ge30pOw0KICAgICAgICAgICAgdC5heGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHJlc3BvbnNlID0+IHJlc3BvbnNlLCBlcnJvciA9PiB0aGlzLl9yZXNwb25zZUludGVyY2VwdG9yKGVycm9yLCB0KSk7DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgLy8gY29ubmVjdCB0byB0aGUgbG9hZGVkIHRvb2xzISEhDQogICAgICAgIGxldCB0b29sID0gdGhpcy5Ub29sOw0KICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHQgb2YgPCU9c2NvcGUlPi5Ub29scyl7DQo8JSBzci5ncm91cEJ5KGFyQ2xhc3NlcywgJ0VudGl0eU1vZHVsZScpLmZvckVhY2goZW0gPT4ge2VtLnZhbHVlcyA9IGVtLnZhbHVlcy5zb3J0KChhLCBiKSA9PiBiLlJhbmsgLSBhLlJhbmspOyAlPg0KICAgICAgICAgICAgYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVtLnZhbHVlc1swXSwgdHJ1ZSklPih1bmRlZmluZWQsIHQpLl9zdG9yZUVudGl0eUNsYXNzKDwlPWVtLnZhbHVlc1swXS5SYW5rJT4pOw0KPCUgfSklPg0KICAgICAgICB9DQogICAgICAgIHRoaXMuVG9vbCA9IHRvb2w7DQogICAgICAgIA0KICAgICAgICBhclRvb2xzID0gYXJUb29scy5maWx0ZXIoX3QgPT4gIXRvb2xzLmZpbmQodCA9PiAodHlwZW9mKF90KT09PSdzdHJpbmcnP190Ol90Lm5hbWUpPT10Lm5hbWUpKTsNCiAgICAgICAgZml4VG9vbHMoYXJUb29scyk7DQoNCjwlIGlmKF9jTmFtZSgnVG9vbCcpKXslPg0KICAgICAgICA8JT1zY29wZSU+Lm9Ub29scyA9IDwlPXNjb3BlJT4uVG9vbHMuY29uY2F0KGFyVG9vbHMpLmZpbHRlcih0ID0+IHQuYWN0aXZlKS5tYXAodCA9PiB7DQogICAgICAgICAgICB0LnRvb2xfTWFwcGluZ3MuZm9yRWFjaChtID0+IGRlbGV0ZSBtLnRvb2wpOw0KICAgICAgICAgICAgdC50eXBlLnR5cGVfTWFwcGluZ3MuZm9yRWFjaChtID0+IGRlbGV0ZSBtLnR5cGUpOw0KICAgIA0KICAgICAgICAgICAgcmV0dXJuIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVG9vbCcsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KHQpOw0KICAgICAgICB9KTsNCiAgICAgICAgaWYoYlN0b3JlKXsNCiAgICAgICAgICAgIDwlPWxvZygpJT5gU2F2aW5nIHRvb2xzLi4uYCk7DQogICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHQgb2YgPCU9c2NvcGUlPi5vVG9vbHMpew0KICAgICAgICAgICAgICAgIGF3YWl0IHQuc3RvcmUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KPCUgfSU+DQoNCiAgICAgICAgPCU9bG9nKCklPmBFeGl0aW5nYCk7DQogICAgICAgIHJldHVybiB0b29sczsNCiAgICB9DQogICAgDQo8JSB9IC8vIG1haW5DbGFzcyAlPg0KDQoJPCU9bU5hbWU9J19wYXJhbWV0cml6ZSclPihzdHIsIGZ1biwgb3B0aW9ucz17fSwgcHJlZml4PSd7eycsIHBvc3RmaXg9J319Jykgew0KPCUgaWYobWFpbkNsYXNzKCk9PWMpeyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKHR5cGVvZihzdHIpIT09J3N0cmluZycpIHJldHVybiBzdHI7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCByZXggPSBgJHtwcmVmaXh9KFteJHtwb3N0Zml4fV0rKSR7cG9zdGZpeH1gOw0KICAgICAgICAgICAgKHN0ci5tYXRjaChuZXcgUmVnRXhwKHJleCwgImciKSkgfHwgW10pLmZvckVhY2gobSA9PiBzdHIgPSBzdHIucmVwbGFjZShtLCBtID0+IGZ1bihtLnJlcGxhY2UocHJlZml4LCAnJykucmVwbGFjZShwb3N0Zml4LCAnJykpKSk7DQoNCiAgICAgICAgICAgIHJldHVybiBzdHI7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCjwlIH1lbHNleyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoKSklPigpLjwlPW1OYW1lJT4oc3RyLCBmdW4sIG9wdGlvbnMsIHByZWZpeCwgcG9zdGZpeCk7DQo8JSB9JT4NCgl9DQoNCiAgICA8JT1tTmFtZT0nX19zeW5jX29uJyU+KGQpew0KICAgICAgICB0aGlzLl88JT1tTmFtZSU+ID0gdGhpcy5fPCU9bU5hbWUlPiB8fCB7fTsNCiAgICANCiAgICAgICAgaWYoZCl7IC8vIHNldCB0aGUgdmFsdWUNCiAgICAgICAgICAgIHRoaXMuXzwlPW1OYW1lJT5bdGhpcy5Ub29sLm5hbWVdID0gZDsNCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19pbXBvcnQodGhpcywgew0KICAgICAgICAgICAgICAgIEN5Y2xpYzogdHJ1ZSwNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUpID0+IHRoaXMuPCU9bk5hbWUoZWEpJT4oKT90aGlzLjwlPW5OYW1lKGVhKSU+KCkuPCU9bU5hbWUlPihkKTp1bmRlZmluZWQsDQo8JSB9KSU+DQoNCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIC8vPCU9dGFOYW1lJT46IHRoaXMuPCU9dGFOYW1lJT4oKS5mb3JFYWNoKHQgPT4gdC48JT1tTmFtZSU+KGQpKSwNCjwlIH0pJT4NCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+IiwgZCk7DQoNCg0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICBpZih0aGlzLl88JT1uTmFtZShlYSklPl9zZXQgJiYgdGhpcy48JT1uTmFtZShlYSklPigpKSB0aGlzLjwlPW5OYW1lKGVhKSU+KCkuPCU9bU5hbWUlPihkKTsNCjwlIH0pJT4NCg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAvLyB0aGlzLjwlPXRhTmFtZSU+KCkuZm9yRWFjaCh0ID0+IHQuPCU9bU5hbWUlPihkKSk7DQo8JSB9KSU+DQogICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0aGlzLl88JT1tTmFtZSU+W3RoaXMuVG9vbC5uYW1lXTsgLy8gZ2V0IHRoZSB2YWx1ZQ0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX2Nsb25lJyU+KGJUeXBlQXR0cmlidXRlcyl7DQogICAgICAgIDwlPXdhcm4oKSU+IkRFUFJFQ0FURUQ6IHVzZSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoYy5OYW1lLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudCh0aGlzLl90b0pTT04oKSkiKTsNCg0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgDQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZXhwb3J0KG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShjLk5hbWUsIHRydWUpJT4oKSwgew0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai48JT1uTmFtZShlYSklPih2PCVpZihlYS5FbnRpdHlUeXBlKXslPi48JT1tTmFtZSU+KGJUeXBlQXR0cmlidXRlcyk8JX0lPiksDQo8JSB9KTslPg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gYlR5cGVBdHRyaWJ1dGVzP29iai48JT10YU5hbWUlPih2Lm1hcChfdiA9PiBfdi48JT1tTmFtZSU+KGJUeXBlQXR0cmlidXRlcykpKTpudWxsLA0KPCUgfSk7JT4NCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX21hcCclPihjb2RlLCBiUmV2ZXJzZSwgY29udGV4dCwgb2JqRnJvbSwgb2JqVG8sIGVhQ29kZSwgY2xhc3NOYW1lLCB0b29sLCBjb2RlVHlwZSwgX3RoaXMsIG1vZHVsZU5hbWUpew0KICAgICAgICBfdGhpcyA9IF90aGlzIHx8IHRoaXM7DQogICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICdFbnRpdHlBdHRyaWJ1dGUnOw0KICAgICAgICB0b29sID0gdG9vbCB8fCBfdGhpcy5Ub29sOw0KICAgICAgICBjb2RlVHlwZSA9IGNvZGVUeXBlIHx8IDwlPV9lYVR5cGVzKCklPltjb2RlXTsNCiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICI8JT1uTmFtZShjKSU+IjsNCiAgICAgICAgbW9kdWxlTmFtZSA9IG1vZHVsZU5hbWUgfHwgIjwlPWMuRW50aXR5TW9kdWxlP2MuRW50aXR5TW9kdWxlLk5hbWU6JyclPiI7DQoNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjb2RlLCBiUmV2ZXJzZSwgY29udGV4dCwgb2JqRnJvbSwgb2JqVG8sIGVhQ29kZSwgY2xhc3NOYW1lLCB0b29sLCBjb2RlVHlwZSwgX3RoaXMsIG1vZHVsZU5hbWUpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IF9sb2cgPSBgJHttb2R1bGVOYW1lfS4ke2NsYXNzTmFtZX0uJHtjb250ZXh0fSR7YlJldmVyc2U/Jzw9JzonPT4nfSR7Y29kZX1gOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAvL2lmKEFycmF5LmlzQXJyYXkob2JqRnJvbSkpIHJldHVybiBvYmpGcm9tLm1hcChvID0+IHRoaXMuPCU9bU5hbWUlPihjb2RlLCBiUmV2ZXJzZSwgY29udGV4dCwgbywgb2JqVG8sIGVhQ29kZSwgY2xhc3NOYW1lLCB0b29sLCBjb2RlVHlwZSwgX3RoaXMsIG1vZHVsZU5hbWUpKTsNCiAgICAgICAgDQogICAgICAgICAgICA8JSAvKiB0ZW1wdGVkIHRvIHVzZSBqc29uYXRhIGluIFF1ZXJ5IGZpZWxkcywgZG9lcyBub3Qgd29yayBiZWNhdXNlIGpzb25hdGEuZXZhbHVhdGUgcmV0dXJuIGEgcHJvbWlzZSEhISAqLyU+DQogICAgICAgICAgICBsZXQgc0ZpZWxkID0gYlJldmVyc2U/J3RhcmdldCc6J3NvdXJjZSc7DQogICAgICAgICAgICBsZXQgc1NjcmlwdCA9IChiUmV2ZXJzZT8nb3V0JzonaW4nKSsnU2NyaXB0JzsNCiAgICAgICAgICAgIGxldCBzQ29uZCA9IChiUmV2ZXJzZT8nb3V0JzonaW4nKSsnQ29uZGl0aW9uJzsNCiAgICAgICAgICAgIGxldCBzUGF0aCA9IChiUmV2ZXJzZT8nb3V0JzonaW4nKSsnUGF0aCc7DQogICAgICAgICAgICBsZXQgdEZpZWxkID0gYlJldmVyc2U/J3NvdXJjZSc6J3RhcmdldCc7DQogICAgICAgICAgICBsZXQgdFNjcmlwdCA9IChiUmV2ZXJzZT8naW4nOidvdXQnKSsnU2NyaXB0JzsNCiAgICAgICAgICAgIGxldCB0UGF0aCA9IChiUmV2ZXJzZT8naW4nOidvdXQnKSsnUGF0aCc7DQogICAgICAgICAgICBsZXQgdENvbmQgPSAoYlJldmVyc2U/J2luJzonb3V0JykrJ0NvbmRpdGlvbic7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBsb2cgPSAoLi4ucykgPT4gPCU9bG9nKCklPmNsYXNzTmFtZSwgX2xvZywgLi4ucyk7DQogICAgICAgICAgICBsZXQgd2FybiA9ICguLi5zKSA9PiA8JT13YXJuKCklPmNsYXNzTmFtZSwgX2xvZywgLi4ucyk7DQogICAgICAgICAgICBsZXQgZXJyb3IgPSAoLi4ucykgPT4gPCU9ZXJyb3IoKSU+Y2xhc3NOYW1lLCBfbG9nLCAuLi5zKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB7X2NsYXNzOiBjbGFzc05hbWUsIF90aGlzOiBfdGhpcywgdG9vbDogdG9vbH07DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBfc2NyaXB0ID0gKHMsIG0pID0+IHsNCiAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1blNjcmlwdChgKG9TY29wZSwgbSwgb2JqRnJvbSwgb2JqVG8sIGNvZGUsIF90aGlzLCBjbGFzc05hbWUsIHRvb2wsIGNvZGVUeXBlLCBlYUNvZGUsIGJSZXZlcnNlLCBjb250ZXh0LCBsb2csIHdhcm4sIGVycm9yKSA9PiAke3N9YCkoPCU9c2NvcGUlPiwgbSwgb2JqRnJvbSwgb2JqVG8sIGNvZGUsIF90aGlzLCBjbGFzc05hbWUsIHRvb2wsIGNvZGVUeXBlLCBlYUNvZGUsIGJSZXZlcnNlLCBjb250ZXh0LCBsb2csIHdhcm4sIGVycm9yKTsNCiAgICAgICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgICAgICB3YXJuKG0udGVzdHMubG9nLCBleCk7IA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBfbWF0Y2ggPSAocywgcikgPT4gew0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZihzKT09PSd1bmRlZmluZWQnIHx8IHM9PT1udWxsIHx8IHR5cGVvZihzLm1hdGNoKSE9PSdmdW5jdGlvbicpIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICBsZXQgYW5zd2VyID0gcy5tYXRjaChuZXcgUmVnRXhwKHIsICdnJykpOw0KICAgICAgICAgICAgICAgIHJldHVybiBzPT1yIHx8ICgoYW5zd2VyICYmIGFuc3dlci5sZW5ndGgpP3RydWU6ZmFsc2UpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBjb25zdCBjbG9uZSA9IGl0ZW1zID0+IGl0ZW1zLm1hcChpdGVtID0+IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBjbG9uZShpdGVtKSA6IGl0ZW0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgbXMgPSBjbG9uZSggWy4uLih0b29sLnRvb2xfTWFwcGluZ3MgfHwgW10pLmNvbmNhdCh0b29sLnR5cGUudHlwZV9NYXBwaW5ncyB8fCBbXSldICk7IC8vIGRvIG5vdCB0YW1wZXIgd2l0aCB0aGUgbWFwcGluZ3MsIGRlZXAgY2xvbmUNCiAgICAgICAgICAgIG1zLmZvckVhY2gobSA9PiBPYmplY3Qua2V5cyhtKS5mb3JFYWNoKGsgPT4gbVtrXSA9IHRoaXMuX3BhcmFtZXRyaXplKG1ba10sIHAgPT4gdGhpcy5fX2NvbmZpZyhwKSB8fCBEb3RPYmplY3QucGljayhwLCBvcHRpb25zKSwgb3B0aW9ucykpKTsNCiAgICAgICAgICAgIG1zLmZvckVhY2gobSA9PiBtLnRlc3RzID0gew0KICAgICAgICAgICAgICAgIGFjdGl2ZTogPCV2YWx1ZU9mKCJtLmFjdGl2ZSIpJT4sIC8vX3NjcmlwdChtLmFjdGl2ZSwgbSksDQogICAgICAgICAgICAgICAgZW5hYmxlZDogPCV2YWx1ZU9mKCJtLmVuYWJsZWQiKSU+LCAvL19zY3JpcHQobS5lbmFibGVkLCBtKSwNCiAgICAgICAgICAgICAgICBjb250ZXh0OiBfbWF0Y2goY29udGV4dCwgbS5jb250ZXh0KSwNCiAgICAgICAgICAgICAgICBjbGFzczogX21hdGNoKGNsYXNzTmFtZSwgbS5jbGFzc05hbWUpLA0KICAgICAgICAgICAgICAgIG1vZHVsZTogX21hdGNoKG1vZHVsZU5hbWUsIG0ubW9kdWxlTmFtZSksDQogICAgICAgICAgICAgICAgc0ZpZWxkOiB0eXBlb2YoY29kZSk9PT0ndW5kZWZpbmVkJyB8fCBfbWF0Y2goY29kZSwgbVtzRmllbGRdKSwNCiAgICAgICAgICAgICAgICBzU2NyaXB0OiB0eXBlb2YoY29kZSk9PT0ndW5kZWZpbmVkJyB8fCB0eXBlb2YobVtzU2NyaXB0XSkhPT0ndW5kZWZpbmVkJywNCiAgICAgICAgICAgICAgICBzUGF0aDogdHlwZW9mKG1bc1BhdGhdKSE9PSd1bmRlZmluZWQnLA0KICAgICAgICAgICAgICAgIHRhcmdldDogdHlwZW9mKG1bdEZpZWxkXSB8fCBtW3RTY3JpcHRdIHx8IG1bdFBhdGhdKSE9PSd1bmRlZmluZWQnLA0KICAgICAgICAgICAgICAgIHRleHQ6IGAke2NvZGV9OiR7c0ZpZWxkfT09PiR7dEZpZWxkfWAsDQogICAgICAgICAgICAgICAgbG9nOiBgJHtfbG9nfVske20uY29udGV4dH0vJHttLmNsYXNzTmFtZX1dYCwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgbXMgPSBtcy5maWx0ZXIobSA9PiBtLnRlc3RzLmFjdGl2ZSAmJiBtLnRlc3RzLmVuYWJsZWQgJiYgbS50ZXN0cy5jb250ZXh0ICYmIG0udGVzdHMuY2xhc3MgJiYgbS50ZXN0cy5tb2R1bGUgJiYgKG0udGVzdHMuc0ZpZWxkIHx8IG0udGVzdHMuc1NjcmlwdCB8fCBtLnRlc3RzLnNQYXRoKSAmJiBtLnRlc3RzLnRhcmdldCkuc29ydCgoYSwgYikgPT4gYS5vcmRlciAtIGIub3JkZXIpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JSAvKiB3ZSBtaWdodCBub3Qgd29yayB3aXRoIGFsbCBtcyBlbnRyaWVzLiBsb2cgaGVyZSBpcyBvbmx5IGEgcHJldmlldyBvZiB3aGF0IG1pZ2h0IHdvcmshICovICU+DQogICAgICAgICAgICAvL2lmKG1zLmZpbHRlcihtID0+IG0uZGVidWcpLmxlbmd0aCkgbG9nKHRoaXMuX2JlYXV0aWZ5KG1zLmZpbHRlcihtID0+IG0uZGVidWcpLCAnamF2YXNjcmlwdCcpKTsNCg0KICAgICAgICAgICAgbXMuZm9yRWFjaChtID0+IHsNCiAgICAgICAgICAgICAgICBpZihtW3RTY3JpcHRdKXsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKG1bdENvbmRdKT09PSd1bmRlZmluZWQnIHx8IDwldmFsdWVPZigibVt0Q29uZF0iLCAnX3RoaXMnKSU+KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG0uZGVidWcpIGxvZyhtLnRlc3RzLmxvZyArICc6ICcgKyB0U2NyaXB0LCAnPCU9bU5hbWUlPicsIG1bdFNjcmlwdF0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IDwldmFsdWVPZigibVt0U2NyaXB0XSIsICdfdGhpcycpJT4NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZihtW3NQYXRoXSAmJiB0eXBlb2Yoam1lc3BhdGgpIT09J3VuZGVmaW5lZCcpIGNvZGUgPSBqbWVzcGF0aC5zZWFyY2gob2JqRnJvbSwgbVtzUGF0aF0pOw0KICAgICAgICAgICAgICAgIGlmKG1bc1BhdGhdICYmIHR5cGVvZihqc29ucGF0aCkhPT0ndW5kZWZpbmVkJykgY29kZSA9IGpzb25wYXRoLnF1ZXJ5KG9iakZyb20sIG1bc1BhdGhdKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZihtW3RGaWVsZF0pew0KICAgICAgICAgICAgICAgICAgICBsZXQgZFBhdGggPSAnJzsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKG1bdEZpZWxkXSk9PT0nZnVuY3Rpb24nKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZihjb2RlKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkUGF0aCA9IGAke2NvZGV9LnJlcGxhY2VgOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UobmV3IFJlZ0V4cChtW3NGaWVsZF0sICdnJyksIG1bdEZpZWxkXSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvZGUgPSBEb3RPYmplY3QuY29weShtW3NGaWVsZF0sIG1bdEZpZWxkXSwgb2JqRnJvbSwgb2JqVG8pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZihjb2RlKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihfbWF0Y2goY29kZSwgbVtzRmllbGRdKSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRQYXRoID0gYCR7Y29kZX0uY29kZWA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBtW3RGaWVsZF07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZFBhdGggPSBgZG90Y29weWA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IERvdE9iamVjdC5jb3B5KG1bc0ZpZWxkXSwgbVt0RmllbGRdLCBvYmpGcm9tLCBvYmpUbyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKG0uZGVidWcgJiYgZFBhdGgpIGxvZyhgJHttLnRlc3RzLmxvZ30vJHtkUGF0aH1bY29kZT0ke2NvZGV9XTogJHttW3NGaWVsZF19ID0+ICR7bVt0RmllbGRdfWApOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZihtW3RQYXRoXSAmJiB0eXBlb2Yoam1lc3BhdGgpIT09J3VuZGVmaW5lZCcgJiYgKCFtW3RDb25kXSB8fCBqbWVzcGF0aC5zZWFyY2gob2JqVG8sIG1bdENvbmRdKSkpIG9ialRvW21bdEZpZWxkXV0gPSBqbWVzcGF0aC5zZWFyY2gob2JqVG8sIG1bdFBhdGhdKTsNCiAgICAgICAgICAgICAgICBpZihtW3RQYXRoXSAmJiB0eXBlb2YoanNvbnBhdGgpIT09J3VuZGVmaW5lZCcgJiYgKCFtW3RDb25kXSB8fCBqc29ucGF0aC5xdWVyeShvYmpUbywgbVt0Q29uZF0pKSkgb2JqVG9bbVt0RmllbGRdXSA9IGpzb25wYXRoLnF1ZXJ5KG9ialRvLCBtW3RQYXRoXSk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgbXMuZm9yRWFjaChtID0+IGRlbGV0ZSBtLnRlc3RzKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYodHlwZW9mKGNvZGUpPT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgIHJldHVybiBvYmpUbzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy9pZihjb250ZXh0PT0nRW50aXR5Q2xhc3MnICYmIGNsYXNzTmFtZT09J1VzZXInKSA8JT13YXJuKCklPiJHT1QgSEVSRSIsIGNvZGUsIGNvbnRleHQsIG9wdGlvbnMpOw0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRyaXplKGNvZGUsIHAgPT4gdGhpcy5fX2NvbmZpZyhwKSB8fCBEb3RPYmplY3QucGljayhwLCBvcHRpb25zKSwgb3B0aW9ucyk7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCjwlIH0lPg0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX25Db2RlJyU+KGNvZGUsIG9Db2RlKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IGNvbnRleHQgPSAnRW50aXR5QXR0cmlidXRlJzsNCiAgICAgICAgICAgIGlmKCFjb2RlICYmICFvQ29kZSl7DQogICAgICAgICAgICAgICAgY29udGV4dCA9ICdFbnRpdHlDbGFzcyc7DQogICAgICAgICAgICAgICAgY29kZSA9ICI8JT1uQ29kZShjKSU+IjsNCiAgICAgICAgICAgICAgICBvQ29kZSA9IDwlPV9GckVNRC5fdG9KUyhjLkNvZGUpJT47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGxldCByZXQgPSBjb2RlOw0KICAgICAgICAgICAgaWYob0NvZGUgJiYgdHlwZW9mKG9Db2RlKT09PSdvYmplY3QnKXsNCiAgICAgICAgICAgICAgICByZXQgPSBvQ29kZVt0aGlzLlRvb2wubmFtZV0gfHwgb0NvZGVbdGhpcy5Ub29sLnR5cGUubmFtZV0gfHwgcmV0Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFwKHJldCwgZmFsc2UsIGNvbnRleHQpIHx8IHJldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+ZXgpOw0KICAgICAgICAgICAgcmV0dXJuIGNvZGU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19fY29uZmlnJyU+KG4sIG51bGxWYWx1ZSwgb3B0aW9ucyl7DQogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9Ow0KICAgICAgICBvcHRpb25zLl90aGlzID0gb3B0aW9ucy5fdGhpcyB8fCB0aGlzOw0KICAgICAgICBvcHRpb25zLl9jbGFzcyA9IG9wdGlvbnMuX2NsYXNzIHx8ICc8JT1uTmFtZShjKSU+JzsNCiAgICAgICAgb3B0aW9ucy50b29sID0gb3B0aW9ucy50b29sIHx8IG9wdGlvbnMuX3RoaXMuVG9vbCB8fCB0aGlzLlRvb2w7DQogICAgICAgIGlmKHR5cGVvZihvcHRpb25zLnRvb2wpPT09J29iamVjdCcgJiYgb3B0aW9ucy50b29sLmNvbnN0cnVjdG9yLm5hbWU9PSdUb29sJykgb3B0aW9ucy50b29sID0gKDwlPXNjb3BlJT4uVG9vbHMgfHwgW10pLmZpbmQodCA9PiB0Lm5hbWU9PW9wdGlvbnMudG9vbC5uYW1lKCkpOw0KICAgICAgICANCiAgICAgICAgaWYodHlwZW9mKG9wdGlvbnMudG9vbCk9PT0nc3RyaW5nJykgb3B0aW9ucy50b29sID0gKDwlPXNjb3BlJT4uVG9vbHMgfHwgW10pLmZpbmQodCA9PiB0Lm5hbWU9PW9wdGlvbnMudG9vbCB8fCB0LnR5cGUubmFtZT09b3B0aW9ucy50b29sKTsNCg0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KG4sIG51bGxWYWx1ZSwgT2JqZWN0LmFzc2lnbih7X3RoaXM6IHRoaXMsIHRvb2w6IHRoaXMuVG9vbCwgX2NsYXNzOiAnPCU9bk5hbWUoYyklPid9LCBvcHRpb25zIHx8IHt9KSk7DQo8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZih0eXBlb2Yob3B0aW9ucy50b29sKSE9PSdvYmplY3QnKSA8JT13YXJuKCklPm9wdGlvbnMudG9vbCk7DQogICAgICAgICAgICBpZighb3B0aW9ucy50b29sKSA8JT13YXJuKCklPiJ0b29sIG5vdCBkZWZpbmVkIiwgb3B0aW9ucy5fdGhpcy5Ub29sLCA8JT1zY29wZSU+LlRvb2xzLCBvcHRpb25zLl90aGlzLlRvb2xzKTsNCiAgICAgICAgICAgIC8vb3B0aW9ucy5ub0NhY2hlID0gdHJ1ZTsNCiAgICAgICAgICAgIGlmKCFvcHRpb25zLm5vQ2FjaGUpIDwlPXNjb3BlJT4uPCU9bU5hbWUlPiA9IDwlPXNjb3BlJT4uPCU9bU5hbWUlPiB8fCB7fTsNCg0KICAgICAgICAgICAgbGV0IG5JRCA9IDwlPW5zY29wZSU+Ll9ub2RlPzwlPW5zY29wZSU+Ll9ub2RlLmNvZGUoKTonZGVmYXVsdCc7DQoNCiAgICAgICAgICAgIGlmKHR5cGVvZihvcHRpb25zW25dKSE9PSd1bmRlZmluZWQnKSBudWxsVmFsdWUgPSBudWxsVmFsdWUgfHwgb3B0aW9uc1tuXTsNCiAgICAgICAgICAgIGxldCByZXQgPSBudWxsVmFsdWU7DQogICAgICAgICAgICBpZih0eXBlb2YocmV0KT09PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICByZXQgPSBudWxsOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vIHVzZSBzY29wZSBjYWNoZSAoaW1wcm92ZXMgcGVyZm9ybWFuY2U/Pz8pDQogICAgICAgICAgICAgICAgaWYoIW9wdGlvbnMubm9DYWNoZSAmJiBPYmplY3QuaGFzT3duKDwlPXNjb3BlJT4uPCU9bU5hbWUlPiwgYCR7b3B0aW9ucy5fY2xhc3N9LiR7b3B0aW9ucy50b29sLm5hbWV9LiR7bklEfS4ke259YCkpIHJldHVybiA8JT1zY29wZSU+LjwlPW1OYW1lJT5bYCR7b3B0aW9ucy5fY2xhc3N9LiR7b3B0aW9ucy50b29sLm5hbWV9LiR7bklEfS4ke259YF07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIHRvb2xfQ29uZmlncywgdHlwZV9Db25maWdzOiBhbGxvdyBjbGFzcy1sZXZlbCBhbmQgbm9kZS1sZXZlbCAtIGRvbmUNCiAgICAgICAgICAgIGxldCB0Y29uZiA9IFtdLmNvbmNhdChvcHRpb25zLnRvb2wudHlwZS50eXBlX0NvbmZpZ3MgfHwgW10sIG9wdGlvbnMudG9vbC50b29sX0NvbmZpZ3MgfHwgW10pLmZpbHRlcihjID0+IGMgJiYgYy5uYW1lPT1uICYmICghYy5ub2RlIHx8IGMubm9kZS5jb2RlPT1uSUQpKS5zb3J0KGMgPT4gYy5ub2RlPyhjLm5vZGUuY29kZT09J2RlZmF1bHQnPzA6LTEpOjEpOw0KICAgICAgICAgICAgaWYodGNvbmYubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICBpZih0Y29uZlswXS5zY3JpcHQpew0KICAgICAgICAgICAgICAgICAgICByZXQgPSB0Y29uZlswXS5zY3JpcHQ7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBsZXQgX3NjID0gdGhpcy5fcGFyYW1ldHJpemUodGNvbmZbMF0uc2NyaXB0LCBwID0+IHRoaXMuPCU9bU5hbWUlPihwLCBudWxsLCBvcHRpb25zKSB8fCBEb3RPYmplY3QucGljayhwLCBvcHRpb25zKSwgb3B0aW9ucyk7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IDwldmFsdWVPZigiX3NjIiklPjsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGNvbmZbMF0udmFsdWU7DQogICAgICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgICAgIFsxLDIsM10uZm9yRWFjaChhID0+IHJldCA9IEpTT04ucGFyc2UocmV0KSk7DQogICAgICAgICAgICAgICAgICAgIH1jYXRjaChqZXgpe30NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihvcHRpb25zLm5ld1ZhbHVlKXsNCiAgICAgICAgICAgICAgICBsZXQgdGMgPSB0Y29uZi5sZW5ndGg/dGNvbmZbMF06e307DQogICAgICAgICAgICAgICAgaWYob3B0aW9ucy5ub2RlKSB0Yy5ub2RlID0ge2NvZGU6IG9wdGlvbnMubm9kZS5jb2RlKCl9Ow0KICAgICAgICAgICAgICAgIHRjLnZhbHVlID0gb3B0aW9ucy5uZXdWYWx1ZTsNCiAgICAgICAgICAgICAgICB0Yy5uYW1lID0gbjsNCiAgICAgICAgICAgICAgICBpZighdGNvbmYubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICAgICAgKG9wdGlvbnMudG9vbC50b29sX0NvbmZpZ3MgfHwgb3B0aW9ucy50b29sLnR5cGUudHlwZV9Db25maWdzKS5wdXNoKHRjKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5uZXdWYWx1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gbW9kZWwgQ29uZmlnOiBDb25maWcgaXMgY2xhc3MgbGV2ZWwsIG5vZGUgbm90IHBvc3NpYmxlIC0gcGVuZGluZw0KICAgICAgICAgICAgbGV0IG1jb25mID0gb3B0aW9ucy5fdGhpcy5Db25maWc/b3B0aW9ucy5fdGhpcy5Db25maWdbbl06dW5kZWZpbmVkOw0KICAgICAgICAgICAgbWNvbmYgPSB0aGlzLl9wYXJhbWV0cml6ZShtY29uZiwgcCA9PiB0aGlzLjwlPW1OYW1lJT4ocCwgbnVsbCwgb3B0aW9ucykgfHwgRG90T2JqZWN0LnBpY2socCwgb3B0aW9ucyksIG9wdGlvbnMpOw0KICAgICAgICAgICAgbWNvbmYgPSA8JXZhbHVlT2YoIm1jb25mIiklPjsNCiAgICAgICAgICAgIGlmKHR5cGVvZihtY29uZikhPT0idW5kZWZpbmVkIikgcmV0ID0gbWNvbmY7DQoNCiAgICAgICAgICAgIC8vIGNvbW1hbmQgbGluZTogYWxsb3cgY2xhc3MtbGV2ZWwgYW5kIG5vZGUtbGV2ZWwgLSBwZW5kaW5nDQogICAgICAgICAgICBpZih0eXBlb2YoZ2xvYmFsKSE9PSd1bmRlZmluZWQnICYmIGdsb2JhbC5taW5pbWlzdCl7DQogICAgICAgICAgICAgICAgcmV0ID0gRG90T2JqZWN0LnBpY2sobiwgZ2xvYmFsLm1pbmltaXN0KHByb2Nlc3MuYXJndi5zbGljZSgyKSkpIHx8IHJldDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8gcmVxdWVzdDogYWxsb3cgY2xhc3MtbGV2ZWwgYW5kIG5vZGUtbGV2ZWwgLSBwZW5kaW5nDQogICAgICAgICAgICBpZih0aGlzLiRfUkVRVUVTVCkgcmV0ID0gdGhpcy4kX1JFUVVFU1QobikgfHwgcmV0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICAvLyBjb25maWcgcmVwbGFjZW1lbnQNCiAgICAgICAgICAgIHJldCA9IHRoaXMuX3BhcmFtZXRyaXplKHJldCwgcCA9PiB0aGlzLjwlPW1OYW1lJT4ocCwgbnVsbCwgb3B0aW9ucykgfHwgRG90T2JqZWN0LnBpY2socCwgb3B0aW9ucyksIG9wdGlvbnMpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZighb3B0aW9ucy5ub0NhY2hlKSA8JT1zY29wZSU+LjwlPW1OYW1lJT5bYCR7b3B0aW9ucy5fY2xhc3N9LiR7b3B0aW9ucy50b29sLm5hbWV9LiR7bklEfS4ke259YF0gPSByZXQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldCA9IDwldmFsdWVPZigicmV0IiklPjsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHJldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+biwgbnVsbFZhbHVlLCBvcHRpb25zLl9jbGFzcywgb3B0aW9ucy50b29sLnRvb2xfQ29uZmlncywgZXgpOw0KICAgICAgICB9DQo8JSB9JT4NCiAgICB9DQoNCg0KPCUgYy5FbnRpdHlNZXRob2RzLmZvckVhY2gobSA9PiB7JT4NCiAgICAvKioNCiAgICAgKiBTdW1tYXJ5LiA8JT1tLk5hbWUlPi4NCiAgICAgKg0KICAgICAqIERlc2NyaXB0aW9uLiA8JT1tLlJlbWFyayU+Lg0KICAgICAqDQogICAgICogQHNpbmNlICAgICAgeC54LngNCiAgICAgKiBAZGVwcmVjYXRlZCB4LngueCBVc2UgbmV3X2Z1bmN0aW9uX25hbWUoKSBpbnN0ZWFkLg0KICAgICAqIEBhY2Nlc3MgICAgIHB1YmxpYw0KICAgICAqDQogICAgICogQGNsYXNzDQogICAgICogQGF1Z21lbnRzIHBhcmVudA0KICAgICAqIEBtaXhlcyAgICBtaXhpbg0KICAgICAqDQogICAgICogQGFsaWFzICAgIHJlYWxOYW1lDQogICAgICogQG1lbWJlcm9mIG5hbWVzcGFjZQ0KICAgICAqDQogICAgICogQHNlZSAgRnVuY3Rpb24vY2xhc3MgcmVsaWVkIG9uDQogICAgICogQGxpbmsgVVJMDQogICAgICogQGdsb2JhbA0KICAgICAqDQogICAgICogQGZpcmVzICAgZXZlbnROYW1lDQogICAgICogQGZpcmVzICAgY2xhc3NOYW1lI2V2ZW50TmFtZQ0KICAgICAqIEBsaXN0ZW5zIGV2ZW50OmV2ZW50TmFtZQ0KICAgICAqIEBsaXN0ZW5zIGNsYXNzTmFtZX5ldmVudDpldmVudE5hbWUNCiAgICAgKiBAcGFyYW0ge3R5cGV9ICAgdmFyICAgICAgICAgICBEZXNjcmlwdGlvbi4NCiAgICAgKiBAcGFyYW0ge3R5cGV9ICAgW3Zhcl0gICAgICAgICBEZXNjcmlwdGlvbiBvZiBvcHRpb25hbCB2YXJpYWJsZS4NCiAgICAgKiBAcGFyYW0ge3R5cGV9ICAgW3Zhcj1kZWZhdWx0XSBEZXNjcmlwdGlvbiBvZiBvcHRpb25hbCB2YXJpYWJsZSB3aXRoIGRlZmF1bHQgdmFyaWFibGUuDQogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFZhciAgICAgRGVzY3JpcHRpb24uDQogICAgICogQHBhcmFtIHt0eXBlfSAgIG9iamVjdFZhci5rZXkgRGVzY3JpcHRpb24gb2YgYSBrZXkgaW4gdGhlIG9iamVjdFZhciBwYXJhbWV0ZXIuDQogICAgICoNCiAgICAgKiBAeWllbGQge3R5cGV9IFlpZWxkZWQgdmFsdWUgZGVzY3JpcHRpb24uDQogICAgICoNCiAgICAgKiBAcmV0dXJuIHt0eXBlfSBSZXR1cm4gdmFsdWUgZGVzY3JpcHRpb24uDQogICAgICovDQogICAgPCUgaWYoIW0uSXNTeW5jKXslPmFzeW5jIDwlfSU+PCU9bU5hbWU9bkNvZGUobSklPig8JT1tLk1ldGhvZFBhcmFtZXRlcnMubWFwKHAgPT4gcC5OYW1lKS5qb2luKCcsICcpJT4pew0KDQogICAgCWxldCBsb2cgPSAob2JqLCAuLi5tc2cpID0+IHRoaXMubG9nKCI8JT1uTmFtZShjKSU+Iiwgb2JqLCAiPCU9bkNvZGUobSklPiIsIG51bGwsIDAsIC4uLm1zZyk7DQogICAgCWxldCB3YXJuID0gKG9iaiwgLi4ubXNnKSA9PiB0aGlzLmxvZygiPCU9bk5hbWUoYyklPiIsIG9iaiwgIjwlPW5Db2RlKG0pJT4iLCBudWxsLCAxLCAuLi5tc2cpOw0KICAgIAlsZXQgZXJyb3IgPSAob2JqLCAuLi5tc2cpID0+IHRoaXMubG9nKCI8JT1uTmFtZShjKSU+Iiwgb2JqLCAiPCU9bkNvZGUobSklPiIsIG51bGwsIDIsIC4uLm1zZyk7DQogICAgCWxldCBvU2NvcGUgPSA8JT1hbGlhcygpJT47DQogICAgCWxldCBwU2NvcGUgPSA8JT1zY29wZSU+Ow0KICAgICAgICANCiAgICANCjwlIGlmKCFtLklzU3luYyl7JT4NCiAgICA8JSBpZighbS5SZXNwb25zZUF0dHJpYnV0ZSl7ICU+DQogICAgICAgIGxldCBhbnN3ZXIgPSBudWxsOw0KICAgIDwlIH1lbHNlIGlmKG0uUmVzcG9uc2VBdHRyaWJ1dGUuRW50aXR5VHlwZSl7ICU+DQogICAgICAgIGxldCBhbnN3ZXIgPSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobS5SZXNwb25zZUF0dHJpYnV0ZS5FbnRpdHlUeXBlLCB0cnVlKSU+KCk7DQogICAgPCUgfWVsc2UgaWYobS5SZXNwb25zZUF0dHJpYnV0ZS5Jc0Jvb2wpeyAlPg0KICAgICAgICBsZXQgYW5zd2VyID0gZmFsc2U7DQogICAgPCUgfWVsc2UgaWYobS5Jc0FycmF5KXsgJT4NCiAgICAgICAgbGV0IGFuc3dlciA9IFtdOw0KICAgIDwlIH1lbHNleyAlPg0KICAgICAgICBsZXQgYW5zd2VyID0gbnVsbDsNCiAgICA8JSB9ICU+DQogICAgDQogICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgdGhpcy5fZXhlY3V0ZShudWxsLCA8JT1hbGlhcygpJT4sICI8JT1uQ29kZShtKSU+IiwgPCVtUm91dGluZyhjLCBtKSU+LCBhc3luYyAoKSA9PiB7DQogICAgICAgIA0KPCUgfSU+DQo8JSBtLk1ldGhvZFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5EZWZhdWx0KS5mb3JFYWNoKHAgPT4geyU+DQogICAgICAgIGlmKHR5cGVvZig8JT1uTmFtZShwKSU+KT09PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgIDwlPW5OYW1lKHApJT4gPSA8JXZhbHVlT2YocC5EZWZhdWx0KSU+Ow0KICAgICAgICB9DQo8JSB9KSU+DQoNCiAgICAgICAgdmFyIGVycm9ycyA9IHsNCiAgICAgICAgPCUgIFtdLmNvbmNhdChtLk1ldGhvZFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5SZXF1aXJlZCkubWFwKHAgPT4gKHsNCiAgICAgICAgICAgICAgICBDb2RlOiBgJHtuTmFtZShwKX0tcmVxdWlyZWRgLA0KICAgICAgICAgICAgICAgIEVycm9yOiBgJHtuTmFtZShwKX0gaXMgYSByZXF1aXJlZCBQYXJhbWV0ZXJgLA0KICAgICAgICAgICAgICAgIFNjcmlwdDogYHR5cGVvZigke25OYW1lKHApfSk9PT0ndW5kZWZpbmVkJ2AsDQogICAgICAgICAgICB9KSkpLmNvbmNhdChtLk1ldGhvZFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5FbnRpdHlUeXBlKS5tYXAocCA9PiAoew0KICAgICAgICAgICAgICAgIENvZGU6IGAke25OYW1lKHApfWAsDQogICAgICAgICAgICAgICAgRXJyb3I6IGAke25OYW1lKHApfSBpcyBub3Qgb2YgdHlwZSAke25OYW1lKHAuRW50aXR5VHlwZSl9YCwNCiAgICAgICAgICAgICAgICBTY3JpcHQ6IGAoISR7bk5hbWUocCl9ICYmICR7cC5SZXF1aXJlZD8ndHJ1ZSc6J2ZhbHNlJ30pIHx8ICgke25OYW1lKHApfSAmJiAoJHtuTmFtZShwKX0uY29uc3RydWN0b3IubmFtZSE9JyR7bk5hbWUocC5FbnRpdHlUeXBlKX0nIHx8ICR7bk5hbWUocCl9LkVudGl0eUNsYXNzLk5hbWUhPScke25OYW1lKHAuRW50aXR5VHlwZSl9JykpYCwNCiAgICAgICAgICAgIH0pKSkuY29uY2F0KG0uVmFsaWRhdG9ycyB8fCBbXSkuZmlsdGVyKHYgPT4gIXYuSWdub3JlKS5mb3JFYWNoKHYgPT4geyAlPg0KICAgICAgICAgICAgIjwlPXYuQ29kZSU+IjogKCg8JT1tLk1ldGhvZFBhcmFtZXRlcnMubWFwKHAgPT4gcC5OYW1lKS5qb2luKCcsICcpJT4pID0+IHsNCiAgICAgICAgICAgICAgICB0cnl7DQoNCiAgICAgICAgICAgICAgICA8JSBpZih2LlNjcmlwdC5pbmRleE9mKCdyZXR1cm4gJyk8MCl7JT4NCiAgICAgICAgICAgICAgICAgICAgbGV0IGFuc3dlciA9IA0KICAgICAgICAgICAgICAgIDwlfSU+DQogICAgICAgICAgICAgICAgICAgIDwlPXYuU2NyaXB0JT4NCiAgICAgICAgICAgICAgICAgICAgLy88JT1sb2coKSU+ImFuc3dlciIsICI8JT12LkNvZGUlPiIsIGFuc3dlcik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXI7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4idmFsaWRhdG9yIiwgIjwlPXYuQ29kZSU+IiwgZXgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pKDwlPW0uTWV0aG9kUGFyYW1ldGVycy5tYXAocCA9PiBwLk5hbWUpLmpvaW4oJywgJyklPik/KCc8JT12LkVycm9yJT4nIHx8ICdWYWxpZGF0aW9uIEVycm9yJyk6JycsDQogICAgICAgIDwlIH0pICU+DQogICAgICAgIH07DQogICAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZmlsdGVyKGsgPT4gIWVycm9yc1trXSkuZm9yRWFjaChrID0+IGRlbGV0ZSBlcnJvcnNba10pOw0KICAgICAgICBpZihPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCl7DQogICAgICAgICAgICBPYmplY3Qua2V5cyhlcnJvcnMpLmZpbHRlcihrID0+IGsuc3RhcnRzV2l0aCgnLScpKS5mb3JFYWNoKGsgPT4gew0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT57W2tdOiBlcnJvcnNba119KTsNCiAgICAgICAgICAgICAgICBkZWxldGUgZXJyb3JzW2tdOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBpZihPYmplY3QudmFsdWVzKGVycm9ycykubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICAgICBfX2V4Y2VwdGlvbjogZXJyb3JzLA0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICA8JT1tLlNjcmlwdCU+DQogICAgICAgIA0KPCUgaWYoIW0uSXNTeW5jKXslPg0KICAgICAgICB9LCB7X19iZWZvcmVSdWxlczogWzwlKG0uTWV0aG9kUnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHIuQmVmb3JlKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl0sIF9fYWZ0ZXJSdWxlczogWzwlKG0uTWV0aG9kUnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHIuQWZ0ZXIpLm1hcChyID0+IHslPjwlPV9GckVNRC5fdG9KUyhyKSU+PCUgfSkuam9pbignLCAnKSU+XSwgPCU9bS5NZXRob2RQYXJhbWV0ZXJzLm1hcChwID0+IHAuTmFtZSArICI6ICIgKyBwLk5hbWUpLmpvaW4oJywgJyklPn0pOw0KICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vIHRha2Ugb3V0IHRoZSBpbnZhbGlkIG5vZGUgcmVzdWx0cw0KICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByICYmIHIucmV0KTsNCg0KICAgICAgICAvLyBoYXMgYW55IG5vZGUgZ2VuZXJhdGVkIGEgdmFsaWRhdGlvbiBleGNlcHRpb24/DQogICAgICAgIGxldCBfX2V4ID0gcmVzdWx0cy5maW5kKHIgPT4gci5yZXQuX19leGNlcHRpb24pOw0KICAgICAgICBpZihfX2V4KSByZXR1cm4gX19leC5yZXQ7DQoNCiAgICAgICAgPCU9bS5SZWR1Y2UlPg0KDQogICAgICAgIDwlIGlmKG0uSXNBcnJheSB8fCBtLlJlc3BvbnNlQXR0cmlidXRlLklzQXJyYXkpeyU+DQogICAgICAgIHJldHVybiByZXN1bHRzLm1hcChyID0+IHIucmV0KS5mbGF0KCk7DQogICAgICAgIDwlIH1lbHNlIGlmKG0uUmVzcG9uc2VBdHRyaWJ1dGUuRW50aXR5VHlwZSl7ICU+DQogICAgICAgIHJldHVybiByZXN1bHRzLmxlbmd0aD9yZXN1bHRzWzBdLnJldDpudWxsOw0KICAgICAgICA8JSB9ZWxzZXsgJT4NCiAgICAgICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoP3Jlc3VsdHNbMF0ucmV0Om51bGw7DQogICAgICAgIDwlIH0lPg0KPCUgfSU+DQogICAgfQ0KPCUgfSk7JT4NCg0KPCUgaWYobWFpbkNsYXNzKF9yZXN0VG9vbHMpKXslPg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfcmVzcG9uc2VJbnRlcmNlcHRvciclPihlcnJvciwgdCl7DQogICAgPCUgaWYobWFpbkNsYXNzKF9yZXN0VG9vbHMpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcyhfcmVzdFRvb2xzKSklPigpLjwlPW1OYW1lJT4oZXJyb3IsIHQpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHQgPSB0IHx8IHRoaXMuVG9vbDsNCiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUmVxdWVzdCA9IGVycm9yLmNvbmZpZzsNCiAgICAgICAgICAgIGlmICh0aGlzLl9fY29uZmlnKCJvYXV0aC5hY2Nlc3NfdG9rZW4iLCBudWxsLCB7dG9vbDogdH0pICYmIGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxICYmICFvcmlnaW5hbFJlcXVlc3QuX3JldHJ5ICYmIG9yaWdpbmFsUmVxdWVzdC5oZWFkZXJzLkF1dGhvcml6YXRpb24uaW5kZXhPZih0aGlzLl9fY29uZmlnKCJvYXV0aC5hY2Nlc3NfdG9rZW4iLCBudWxsLCB7dG9vbDogdH0pKT4wKSB7DQogICAgICAgICAgICAgICAgb3JpZ2luYWxSZXF1ZXN0Ll9yZXRyeSA9IHRydWU7DQogICAgICAgICAgICAgICAgLy8gYXdhaXQgKGdldCB0aGUgdG9rZW4gb3IgcmVmcmVzaCBpdCkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBvcmlnaW5hbFJlcXVlc3QuaGVhZGVycy5BdXRob3JpemF0aW9uID0gdGhpcy5fX2NvbmZpZygib2F1dGguYWNjZXNzX3R5cGUiLCAiQmVhcmVyIiwge3Rvb2w6IHR9KSArICIgIiArIHRoaXMuX19jb25maWcoIm9hdXRoLmFjY2Vzc190b2tlbiIsIG51bGwsIHt0b29sOiB0fSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHQuYXhpb3Mob3JpZ2luYWxSZXF1ZXN0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICAgICAgPCU9bG9nKCklPmNvbmZpZyk7DQogICAgICAgIHJldHVybiBjb25maWc7DQogICAgPCUgfSU+DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19yZXF1ZXN0SW50ZXJjZXB0b3InJT4oY29uZmlnLCB0KXsNCiAgICA8JSBpZihtYWluQ2xhc3MoX3Jlc3RUb29scykhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKF9yZXN0VG9vbHMpKSU+KCkuPCU9bU5hbWUlPihjb25maWcsIHQpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHQgPSB0IHx8IHRoaXMuVG9vbDsNCiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7aGVhZGVyczoge319Ow0KICAgICAgICAgICAgY29uZmlnLm1ldGEgPSBjb25maWcubWV0YSB8fCB7fTsNCiAgICAgICAgICAgIGNvbmZpZy5tZXRhLmNvdW50ZXIgPSA0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgdG9rZW5VcmkgPSB0aGlzLl9fY29uZmlnKCJvYXV0aC50b2tlbi51cmkiLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgbGV0IHJlZnJlc2hVcmkgPSB0aGlzLl9fY29uZmlnKCJvYXV0aC5yZWZyZXNoLnVyaSIsIG51bGwsIHt0b29sOiB0fSk7DQogICAgICAgICAgICBsZXQgYXV0aFVyaSA9IHRoaXMuX19jb25maWcoIm9hdXRoLmF1dGhvcml6ZS51cmkiLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgbGV0IGF1dGhUeXBlID0gdGhpcy5fX2NvbmZpZygib2F1dGguYXV0aF90eXBlIiwgIkJlYXJlciIsIHt0b29sOiB0fSk7DQogICAgICAgICAgICBsZXQgdG9rZW4gPSB0aGlzLl9fY29uZmlnKCJvYXV0aC5hY2Nlc3NfdG9rZW4uIitjb25maWcubWV0aG9kLCB0aGlzLl9fY29uZmlnKCJvYXV0aC5hY2Nlc3NfdG9rZW4iLCBudWxsLCB7dG9vbDogdCwgbm9kZTogPCU9bnNjb3BlJT4uX25vZGV9KSwge3Rvb2w6IHQsIG5vZGU6IDwlPW5zY29wZSU+Ll9ub2RlfSk7DQogICAgICAgICAgICBpZighY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiAmJiBbdG9rZW5VcmksIHJlZnJlc2hVcmksIGF1dGhVcmldLmluZGV4T2YoY29uZmlnLnVybCk8MCl7DQogICAgICAgICAgICAgICAgaWYoIXRva2VuKXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGF1dGhDb2RlID0gdGhpcy5fX2NvbmZpZygnb2F1dGguYXV0aG9yaXplLmNvZGUnLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgICAgICAgICBsZXQgYXV0aE1ldGhvZCA9IHRoaXMuX19jb25maWcoJ29hdXRoLmF1dGhvcml6ZS5tZXRob2QnLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgaWYoIXRva2VuVXJpICYmICFhdXRoQ29kZSAmJiAhYXV0aE1ldGhvZCAmJiB0aGlzLl9fY29uZmlnKCd1c2VybmFtZScpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhUeXBlID0gJ0Jhc2ljJzsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5fYnRvYSh0aGlzLl9fY29uZmlnKCd1c2VybmFtZScpICsgIjoiICsgdGhpcy5fX2NvbmZpZygncGFzc3dvcmQnKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQo8JWlmKF9jTmFtZSgnTm9kZScpKXslPg0KICAgICAgICAgICAgICAgICAgICBpZig8JT1uc2NvcGUlPi5fbm9kZSAmJiAhYXV0aENvZGUgJiYgYXV0aE1ldGhvZD09ImdldCIpew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIG9yIGxvYWQgYSBuZXcgb2F1dGggc3RhdGUNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19jb25maWcoIm9hdXRoLmF1dGhvcml6ZS5zdGF0ZSIsIG51bGwsIHt0b29sOiB0LCBub2RlOiA8JT1uc2NvcGUlPi5fbm9kZSwgbmV3VmFsdWU6IHRoaXMuX2J0b2EoSlNPTi5zdHJpbmdpZnkoe3Rvb2w6IHQubmFtZSwgbmNvZGU6IDwlPW5zY29wZSU+Ll9ub2RlLmNvZGUoKX0pKX0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXV0aG9yaXplIGFuZCBnZXQgdGhlIGF1dGggY29kZQ0KICAgICAgICAgICAgICAgICAgICAgICAgYXV0aFVyaSA9IHRoaXMuX19jb25maWcoIm9hdXRoLmF1dGhvcml6ZS51cmkiLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPmAke2F1dGhVcml9YCk7DQogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihhdXRoVXJpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0SW50ZXJ2YWwobnVsbCwgdG9vbCA9PiA8JT1uc2NvcGUlPi5fbm9kZSAmJiBjb25maWcubWV0YS5jb3VudGVyLS0gJiYgIShhdXRoQ29kZSA9IHRoaXMuX19jb25maWcoJ29hdXRoLmF1dGhvcml6ZS5jb2RlJywgbnVsbCwge3Rvb2w6IHR9KSksIDAuMSwgdCk7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+YERvbmUgTG9vcGluZzogJHthdXRoQ29kZX1gKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFhdXRoQ29kZSkgYXV0aE1ldGhvZD11bmRlZmluZWQ7DQogICAgICAgICAgICAgICAgICAgIH0NCjwlfSU+DQoNCiAgICAgICAgICAgICAgICAgICAgaWYoYXV0aE1ldGhvZCl7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmxvdyA9ICghYXV0aENvZGUgJiYgYXV0aE1ldGhvZD09J3Bvc3QnKT8nYXV0aG9yaXplJzondG9rZW4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSB0b2tlbg0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHRva2VuVXJpIG1pZ2h0IGhhdmUgYSBkZXBlbmRlbmN5IG9uIHRoZSBhdXRob3JpemF0aW9uIGNvZGUNCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuVXJpID0gdGhpcy5fX2NvbmZpZyhgb2F1dGguJHtmbG93fS51cmlgLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRjb25maWcgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB0b2tlblVyaSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHRoaXMuX19jb25maWcoYG9hdXRoLiR7Zmxvd30ubWV0aG9kYCwgJ3Bvc3QnLCB7dG9vbDogdH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogdGhpcy5fX2NvbmZpZyhgb2F1dGguJHtmbG93fS5jb250ZW50X3R5cGVgLCAidGV4dC9qc29uIiwge3Rvb2w6IHR9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiAiQmFzaWMgIit0aGlzLl9idG9hKHRoaXMuX19jb25maWcoIm9hdXRoLmxvZ2luIiwgbnVsbCwge3Rvb2w6IHR9KSArICI6IiArIHRoaXMuX19jb25maWcoIm9hdXRoLnBhc3N3b3JkIiwgbnVsbCwge3Rvb2w6IHR9KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5fX2NvbmZpZyhgb2F1dGguJHtmbG93fS5oZWFkZXJzYCwgInt9Iiwge3Rvb2w6IHR9KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5fX2NvbmZpZyhgb2F1dGguJHtmbG93fS5ib2R5YCwgbnVsbCwge3Rvb2w6IHR9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJlcyA9IGF3YWl0IHQuYXhpb3ModGNvbmZpZyk7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+YFRva2VuIGZldGNoZWQgLSAke2Zsb3d9YCwgdGNvbmZpZywgdHJlcy5kYXRhKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIFsnYWNjZXNzX3Rva2VuJywgJ3Rva2VuX3R5cGUnLCAnZXhwaXJlc19pbicsICdyZWZyZXNoX3Rva2VuJ10uZm9yRWFjaCh0YSA9PiB0aGlzLl9fY29uZmlnKGBvYXV0aC4ke3RhfWAsIG51bGwsIHt0b29sOiB0LCBub2RlOiA8JT1uc2NvcGUlPi5fbm9kZSwgbmV3VmFsdWU6IHRyZXMuZGF0YVt0aGlzLl9fY29uZmlnKGBvYXV0aC50b2tlbi5yZXNwb25zZS4ke3RhfWAsIHRhLCB7dG9vbDogdH0pXX0pKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5fX2NvbmZpZygib2F1dGguYWNjZXNzX3Rva2VuIiwgbnVsbCwge3Rvb2w6IHQsIG5vZGU6IDwlPW5zY29wZSU+Ll9ub2RlfSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGF1dGhUeXBlICsgIiAiICsgdG9rZW47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgICAgIDwlPWxvZygpJT5jb25maWcpOw0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIDwlIH0lPg0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfcmVzdCclPih0TmFtZSwgcGFyYW1zLCBkYXRhLCBtZXRob2QsIG9wdGlvbnMpew0KICAgICAgICAvKiB0TmFtZSBubyBsb25nZXIgcmVxdWlyZWQhISAqLw0KICAgICAgICB0TmFtZSA9IHROYW1lIHx8IDwlPV9uQ29kZSgpJT47DQogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHtfdGhpczogdGhpc307DQogICAgICAgIG9wdGlvbnMudE5hbWUgPSBvcHRpb25zLnROYW1lIHx8IHROYW1lOw0KICAgICAgICANCiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9Ow0KICAgICAgICBtZXRob2QgPSBtZXRob2QgfHwgKGRhdGE/InBvc3QiOiJnZXQiKTsNCiAgICAgICAgDQogICAgPCUgaWYobWFpbkNsYXNzKF9yZXN0VG9vbHMpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcyhfcmVzdFRvb2xzKSklPigvKm51bGwsIHRoaXMuVG9vbCovKS48JT1tTmFtZSU+KHROYW1lLCBwYXJhbXMsIGRhdGEsIG1ldGhvZCwgb3B0aW9ucyk7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYob3B0aW9ucy5mb3JtKXsNCiAgICAgICAgICAgICAgICBsZXQgZmQgPSBuZXcgRm9ybURhdGEoKTsNCiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGsgPT4gZmQuYXBwZW5kKGssIGRhdGFba10pKTsNCiAgICAgICAgICAgICAgICBkYXRhID0gZmQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vPCU9d2FybigpJT4ib3B0aW9ucyIsIG9wdGlvbnMpOw0KICAgICAgICAgICAgbGV0IGNvbmZpZyA9IHsNCiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuX19jb25maWcob3B0aW9ucy51cmwgfHwgYHJlc3RhcGkudXJsLiR7bWV0aG9kfWAsIHRoaXMuX19jb25maWcob3B0aW9ucy51cmwgfHwgJ3Jlc3RhcGkudXJsJywgKG9wdGlvbnMucGF0aHx8JycpICsgb3B0aW9ucy5maWxlLCBvcHRpb25zKSwgb3B0aW9ucyksDQogICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsDQogICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsDQogICAgICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih0aGlzLl9fY29uZmlnKCdyZXN0YXBpLmhlYWRlcnMuJyttZXRob2QsIHRoaXMuX19jb25maWcoJ3Jlc3RhcGkuaGVhZGVycycsIHt9LCBvcHRpb25zKSwgb3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyB8fCB7fSksDQogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN0YXR1czogc3RhdHVzID0+IHN0YXR1czw0MDAsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgcmV0ID0gW107DQogICAgICAgICAgICA8JT1sb2coKSU+YFtMSVZFOiR7dGhpcy5fX2NvbmZpZygnbGl2ZScsIHRydWUpfV1gLCBjb25maWcpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCdsaXZlJywgdHJ1ZSkpew0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0aGlzLlRvb2wuYXhpb3MpIT09J3VuZGVmaW5lZCcgfHwgdHlwZW9mKGF4aW9zKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gKGF3YWl0ICgodGhpcy5Ub29sLmF4aW9zIHx8IGF4aW9zKSkoY29uZmlnKSkuZGF0YTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgKGF3YWl0IGZldGNoKGNvbmZpZy51cmwsIGNvbmZpZykpLmpzb24oKTsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iYXhpb3Mgbm90IGRlZmluZWQhLCB1c2luZyBmZXRjaCIsIHJldCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgPCU9bG9nKCklPkpTT04uc3RyaW5naWZ5KHJldCwgbnVsbCwgNCkpOw0KICAgICAgICAgICAgcmV0dXJuIHJldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIDwlIH0lPg0KICAgIH0NCjwlIH0gLy8gbWFpbkNsYXNzKF9yZXN0VG9vbHMpICU+DQoNCjwlIGlmKG1haW5DbGFzcyhfc3FsVG9vbHMpKXslPg0KICAgIDwlPW1OYW1lPSdfdG9TUUxUYWJsZSclPihvcHRpb25zPXt9KXsNCiAgICAgICAgbGV0IHJldCA9IHRoaXMuX19leHBvcnQoe0lkOiAiPCU9c2NvcGUlPi48JT1fY05hbWUoYywgdHJ1ZSklPiIsIGRlcHM6IHt9LCBzcWw6IGBgLCBmaWVsZHM6IGBgfSwgew0KICAgICAgICAgICAgLy9fbWFwOiB0cnVlLA0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgIEZ1bGw6IHRydWUsDQogICAgICAgICAgICBfX2hlYWRlcjogb2JqID0+IG9iai5zcWwgPSBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJHt0aGlzLl9RKCl9JHs8JT1fbkNvZGUoKSU+fSR7dGhpcy5fUSgpfSAoJHtvYmouZmllbGRzfS8qPCU9bk5hbWUoYyklPiovKTtcbmAsDQogICAgICAgICAgICBleHBvcnRlcjogdiA9PiB2Lm9iaiA9ICh0eXBlb2Yob3B0aW9ucy5yZXVzZWQpPT09J3VuZGVmaW5lZCcgfHwgb3B0aW9ucy5yZXVzZWQ+PXYucmV1c2VkKT92Lm9iajp7c3FsOiB2Lm9iai5zcWwgKz0gYC8qPCU9bk5hbWUoYyklPjogcmV1c2VkOiAke3YucmV1c2VkfSovXG5cbmAsIElkOiB2Lm9iai5JZH0sDQogICAgICAgICAgICBJZDogKG9iaiwgaWRDb2RlLCB2KSA9PiBvYmouZmllbGRzICs9IGAke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gQ0hBUigyNSkgUFJJTUFSWSBLRVlgLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiAhZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai5maWVsZHMgKz0gYCwke3RoaXMuX1EoKX0kezwlPV9uQ29kZShlYSklPn0ke3RoaXMuX1EoKX0gJHt0aGlzLl9zcWxUeXBlKCI8JT1fRnJFTUQuX2F0dHIoZWEpJT4iLCB0aGlzLl9fY29uZmlnKCd0eXBlJykpfWAsDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgb2JqLmRlcHMuPCU9bk5hbWUoZWEuRW50aXR5VHlwZSklPiA9ICh2IHx8IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkpLjwlPW1OYW1lJT4ob3B0aW9ucyk7DQogICAgICAgICAgICAgICAgb2JqLmZpZWxkcyArPSBgLCR7dGhpcy5fUSgpfSR7ZWFDb2RlfWlkJHt0aGlzLl9RKCl9ICR7dGhpcy5fc3FsVHlwZSgiPCU9X0ZyRU1ELl9hdHRyKGVhKSU+IiwgdGhpcy5fX2NvbmZpZygndHlwZScpKX1gOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBvYmouZGVwcy48JT1uTmFtZSh0YS5FbnRpdHlDbGFzcyklPiA9ICh2ICYmIHYubGVuZ3RoKT92WzBdOm5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4ob3B0aW9ucyk7DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICAgICAgDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJldC5kZXBzIHx8IHt9KS5maWx0ZXIoayA9PiB0eXBlb2YocmV0LmRlcHNba10pPT09J3N0cmluZycpLm1hcChrID0+IHJldC5kZXBzW2tdKS5qb2luKCdcblxuJykgKyByZXQuc3FsOw0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX2Zyb21TUUxUYWJsZSclPih0YWJsZSwgZmllbGRzKXsNCiAgICAgICAgLy8gdGFibGUgaXMgYSBqc29uIGFycmF5DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICBpZigoZmllbGRzICYmIGZpZWxkcy5pbmRleE9mKCI8JT1uTmFtZShlYSklPiIpKSB8fCAhZmllbGRzKXsNCiAgICAgICAgICAgIHRoaXMuPCU9bk5hbWUoZWEpJT4odGFibGVbIjwlPW5Db2RlKGVhKSU+Il0pOw0KICAgICAgICB9DQo8JSB9KTsgJT4NCiAgICAgICAgDQogICAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfc3FsJyU+KHNxbCwgX3RoaXMpew0KICAgICAgICBfdGhpcyA9IF90aGlzIHx8IHRoaXM7DQogICAgPCUgaWYobWFpbkNsYXNzKF9zcWxUb29scykhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoX3NxbFRvb2xzKSklPigpLjwlPW1OYW1lJT4oc3FsLCBfdGhpcyk7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgaWYoIXRoaXMuVG9vbC5kYiB8fCAhc3FsIHx8ICFzcWwudHJpbSgpKXsNCiAgICAgICAgICAgIGlmKCF0aGlzLlRvb2wuZGIpIDwlPWxvZygpJT5zcWwsICIgPD09U0tJUFBFRD09PiIpOw0KICAgICAgICAgICAgcmV0dXJuIFtdOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBpZihzcWwuaW5kZXhPZignO1xuJyk+MCl7DQogICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHNxbFMgb2Ygc3FsLnNwbGl0KCc7XG4nKSl7DQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy48JT1tTmFtZSU+KHNxbFMudHJpbSgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgbGV0IHJldCA9IG51bGw7DQoNCiAgICAgICAgaWYoKHNxbC5tYXRjaCgvXCgvZykgfHwgW10pLmxlbmd0aCE9KHNxbC5tYXRjaCgvXCkvZykgfHwgW10pLmxlbmd0aCl7DQogICAgICAgICAgICA8JT1sb2coKSU+ImluY29ycmVjdCBzcWwiLCBzcWwpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICB0cnl7DQogICAgICAgICAgICByZXQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7DQogICAgICAgICAgICAgICAgbGV0IF9vayA9IChfcmV0LCBfc3FsKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKF9zcWwgJiYgX3NxbC5pbmRleE9mKCdzZWxlY3QnKSkgdGhpcy5Ub29sLl9fZG1sU3RhdGVtZW50cy5wdXNoKF9zcWwpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfcmV0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgZGIgPSB0aGlzLlRvb2wuZGI7DQogICAgICAgICAgICAgICAgbGV0IHR5cGUgPSB0aGlzLl9fY29uZmlnKCd0eXBlJyk7DQogICAgDQogICAgICAgICAgICAgICAgbGV0IGZ1biA9ICIiOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vIFF1ZXJ5IGxpc3Qgb2Ygc3RhdGVtZW50IHN0YXJ0aW5nIGtleXdvcmRzICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgcUxpc3QgPSBbInNlbGVjdCIsICJpbnNlcnQiLCAidXBkYXRlIiwgImRlbGV0ZSJdOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ2RhdGFiYXNlLnRyYW5zYWN0aW9ucycsIHRydWUpKXsNCiAgICAgICAgICAgICAgICAgICAgcUxpc3QgPSBxTGlzdC5jb25jYXQoWyJiZWdpbiIsICJzdGFydCIsICJjb21taXQiXSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGxldCBiUXVlcnkgPSBxTGlzdC5pbmRleE9mKHNxbC5zdWJzdHJpbmcoMCwgc3FsLmluZGV4T2YoJyAnKSkudHJpbSgpLnRvTG93ZXJDYXNlKCkpPj0wOw0KDQogICAgICAgICAgICAgICAgaWYoYlF1ZXJ5KXsNCiAgICAgICAgICAgICAgICAgICAgLy8gcXVlcnkNCiAgICAgICAgICAgICAgICAgICAgaWYoWydteXNxbCcsICdwb3N0Z3JlcyddLmluZGV4T2YodHlwZSk+PTApIGZ1biA9ICdxdWVyeSc7DQogICAgICAgICAgICAgICAgICAgIGlmKHR5cGU9PSdzcWxpdGUnKSBmdW4gPSAnYWxsJzsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgLy8gRE1MDQogICAgICAgICAgICAgICAgICAgIGlmKFsnbXlzcWwnLCAncG9zdGdyZXMnXS5pbmRleE9mKHR5cGUpPj0wKSBmdW4gPSAncXVlcnknOw0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlPT0nc3FsaXRlJykgZnVuID0gJ3J1bic7DQoNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5Ub29sLmRtbENhY2hlID0gdGhpcy5Ub29sLmRtbENhY2hlIHx8IHt9Ow0KICAgICAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wuZG1sQ2FjaGVbdGhpcy5oYXNoQ29kZShzcWwpXSkgcmV0dXJuIF9vaygwKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5Ub29sLmRtbENhY2hlW3RoaXMuaGFzaENvZGUoc3FsKV0gPSBzcWw7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKHR5cGU9PSdzcWxpdGUnICYmIHR5cGVvZih3aW5kb3cpIT09J3VuZGVmaW5lZCcpIGZ1biA9ICIiOw0KICAgICAgICAgICAgICAgIGlmKGZ1biAmJiAhZGJbZnVuXSkgZnVuID0gIiI7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgc3FsID0gdHlwZW9mKHNxbEZvcm1hdHRlcikhPT0ndW5kZWZpbmVkJz9zcWxGb3JtYXR0ZXIuZm9ybWF0KHNxbCk6c3FsOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT5gJHt0eXBlfS4ke2Z1bn1gLCBzcWwpOw0KICAgICAgICAgICAgICAgIGlmKDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbikgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uLnNxbHMucHVzaChzcWwpOw0KDQogICAgICAgICAgICAgICAgaWYgKGZ1bikgew0KICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gW107DQogICAgICAgICAgICAgICAgICAgIGlmKHR5cGU9PSJwb3N0Z3JlcyIpew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZGJbZnVuXShzcWwpLnRoZW4ocm93cyA9PiBfb2socm93cywgc3FsKSkuY2F0Y2gocmV0RXggPT4gcmVqZWN0KHJldEV4KSk7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZGJbZnVuXShzcWwsIFtdLCAoZXJyb3IsIHJvd3MpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlcnJvcil7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vayhyb3dzLCBzcWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlPT0nc25vd2ZsYWtlJykgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLlRvb2wuZGIuZXhlY3V0ZSh7DQogICAgICAgICAgICAgICAgICAgICAgICBzcWxUZXh0OiBzcWwsDQogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oZXJyLCBzdG10LCByb3dzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vayhyb3dzLCBzcWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlPT0nc3FsaXRlJykgew0KICAgICAgICAgICAgICAgICAgICAvLyBzcWxpdGUgaW4gdGhlIGJyb3dzZXINCiAgICAgICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJldCA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBkYi5leGVjKHNxbCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZighcmV0IHx8ICFyZXQubGVuZ3RoKSByZXR1cm4gX29rKHJldCwgc3FsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gcmV0WzBdLnZhbHVlcy5tYXAociA9PiBPYmplY3QuZnJvbUVudHJpZXMobmV3IE1hcChyZXRbMF0uY29sdW1ucy5tYXAoKGMsIGkpID0+IFtjLCByW2ldXSkpKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIF9vayhyZXQsIHNxbCk7DQogICAgICAgICAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGU9PSdxdWVzdGRiJyl7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3QobnVsbCwge3F1ZXJ5OiBzcWx9KS50aGVuKHIgPT4gX29rKHIsIHNxbCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+YA0KRVJST1I6DQoke2V4fQ0KDQpXaGlsZSBTZW5kaW5nIFF1ZXJ5IA0KJHtzcWx9DQpgKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKHJldCAmJiByZXQucm93cykgcmV0ID0gcmV0LnJvd3M7ICAgICAgICANCiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShyZXQpKSByZXQgPSByZXQubWFwKHIgPT4gRG90T2JqZWN0Lm9iamVjdChyKSk7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0FpclRhYmxlJ10pKXslPg0KPCUNCmxldCBfdG9UeXBlQVQgPSBlYSA9PiB7DQogICAgbGV0IHJldCA9IHtuYW1lOiBuTmFtZShlYSksIGRlc2NyaXB0aW9uOiBlYS5OYW1lLCB0eXBlOiAic2luZ2xlTGluZVRleHQifTsNCiAgICBpZihlYS5Jc0Jvb2wpew0KICAgICAgICByZXQudHlwZSA9ICJjaGVja2JveCI7DQogICAgICAgIHJldC5vcHRpb25zID0gew0KICAgICAgICAgICAgY29sb3I6ICJncmVlbkJyaWdodCIsDQogICAgICAgICAgICBpY29uOiAiY2hlY2siDQogICAgICAgIH07DQogICAgfQ0KICAgIGlmKGVhLklzRGF0ZSl7DQogICAgICAgIHJldC50eXBlID0gImRhdGVUaW1lIjsNCiAgICAgICAgcmV0Lm9wdGlvbnMgPSB7DQogICAgICAgICAgICBkYXRlRm9ybWF0OiB7DQogICAgICAgICAgICAgICAgbmFtZTogJ2lzbycNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB0aW1lRm9ybWF0OiB7DQogICAgICAgICAgICAgICAgbmFtZTogJzI0aG91cicsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdGltZVpvbmU6ICd1dGMnLA0KICAgICAgICB9Ow0KICAgIH0NCiAgICANCiAgICByZXR1cm4gcmV0Ow0KfTsNCiU+DQogICAgPCU9bU5hbWU9J190b0FUVGFibGUnJT4obGV2ZWwpew0KICAgICAgICBsZXQgcmV0ID0gW3sNCiAgICAgICAgICAgIG5hbWU6ICc8JT1uTmFtZShjKSU+JywNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJywNCiAgICAgICAgICAgIGZpZWxkczogWw0KICAgICAgICAgICAgICAgIHtuYW1lOiB0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyksIGRlc2NyaXB0aW9uOiAnSUQnLCB0eXBlOiAnc2luZ2xlTGluZVRleHQnfSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+PCU9X0ZyRU1ELl90b0pTKF90b1R5cGVBVChlYSkpJT4sPCUgfSklPl0sDQogICAgICAgIH1dOw0KDQogICAgICAgIHJldCA9IHRoaXMuX19leHBvcnQocmV0LCB7DQogICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAiPCU9bk5hbWUoZWEpJT4iOiAob2JqLCBlYUNvZGUsIHYpID0+IHJldC5wdXNoKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KCkpLA0KICAgIDwlIH0pOyAlPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gcmV0LnB1c2gobmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MsIHRydWUpJT4oKS48JT1tTmFtZSU+KCkpLA0KICAgIDwlIH0pJT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICA8JT1sb2coKSU+cmV0LnNxbCk7DQogICAgICAgIHJldHVybiByZXQuc3FsOw0KDQogICAgICAgIHJldCA9IHJldC5maWx0ZXIoKHRhZywgaW5kZXgsIGFycmF5KSA9PiBhcnJheS5maW5kSW5kZXgodCA9PiB0Lm5hbWUgPT0gdGFnLm5hbWUpID09IGluZGV4KTsNCiAgICAgICAgPCU9bG9nKCklPnJldCwgbGV2ZWwpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3RvQVRGdW5jdGlvbiclPigpew0KICAgICAgICBsZXQgdFByZWYgPSBgJHt0aGlzLl9RKCl9JHs8JT1fbkNvZGUoKSU+fSR7dGhpcy5fUSgpfS5gOw0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7ZnVuOiAiIn0sIHsNCiAgICAgICAgICAgIF9maWVsZHM6ICh0aGlzLl9fc3luY19vbigpIHx8IHRoaXMuSWQ9PXRoaXMuSWQpP1snSWQnXTp1bmRlZmluZWQsDQogICAgICAgICAgICBfVEhJUzogb2JqID0+IG9iai5mdW4gKz0gYCBhbmQgJHt0UHJlZn0ke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gYCArICh0aGlzLl9USElTX2Nvb3AgfHwgIklOIikgKyAiICgiICsgdGhpcy5fVEhJUy5tYXAodCA9PiB0LjwlPW1OYW1lJT4odC5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpKSkuam9pbignIFVOSU9OIEFMTCAnKSArICIpIiwNCiAgICAgICAgICAgIElkOiBvYmogPT4gb2JqLmZ1biArPSBgIGFuZCAke3RQcmVmfSR7dGhpcy5fUSgpfSR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpfSR7dGhpcy5fUSgpfT0nJHt0aGlzLklkfSdgLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgbGV0IGNvb3AgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICAgICAgICAgIHN3aXRjaChjb29wKXsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiIT0iOg0KICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJOT1QgSU4iOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICI9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3AgPSAiSU4iOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICIiOg0KICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJJTiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKHYpew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9IGAgYW5kICR7dFByZWZ9JHt0aGlzLl9RKCl9JHtlYUNvZGV9aWQke3RoaXMuX1EoKX0gJHtjb29wfSAoJHt2LjwlPW1OYW1lJT4odi5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpKX0pYDsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgb2JqLmZ1biArPSBgIGFuZCAoJHt0UHJlZn0ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSAke2Nvb3B9ICgwKSBPUiAke3RQcmVmfSR7dGhpcy5fUSgpfSR7ZWFDb2RlfWlkJHt0aGlzLl9RKCl9IElTIE5VTEwpYDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1RleHQgfHwgZWEuSXNJbWFnZSB8fCBlYS5Jc0ZpbGUpeyU+DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gYCBhbmQgJHt0UHJlZn0ke3RoaXMuX1EoKX0ke2VhQ29kZX0ke3RoaXMuX1EoKX0gYCArIDwlaWYoZWEuSXNCb29sKXslPiI9IjwlfWVsc2V7JT4odGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCB8fCAiTElLRSIpPCV9JT4gKyAiICI7DQogICAgICAgIDwlIH0lPg0KICAgICAgICANCiAgICAgICAgPCUgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICBpZih2ICYmIHYudG9JU09TdHJpbmcpew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9ICInIiArIHYudG9JU09TdHJpbmcoKSArICInIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXsgJT4NCiAgICAgICAgICAgICAgICBpZih0eXBlb2Yodik9PT0ic3RyaW5nIil7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIiciICsgKCh0aGlzLl88JT1uTmFtZShlYSklPl9jb29wPT0iTElLRSIgfHwgIXRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3ApPyIlIjoiIikgKyB2ICsgKCh0aGlzLl88JT1uTmFtZShlYSklPl9jb29wPT0iTElLRSIgfHwgIXRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3ApPyIlIjoiIikgKyAiJyI7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQm9vbCl7ICU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHYpPT09ImJvb2xlYW4iKXsNCiAgICAgICAgICAgICAgICAgICAgb2JqLmZ1biArPSAiJyIgKyAodj8iMSI6IjAiKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgPCUgfSAlPg0KICAgICAgICAgICAgICAgIGlmKHYgJiYgdi5FbnRpdHlDbGFzcyl7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIigiICsgdi48JT1tTmFtZSU+KCkgKyAiKSI7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIiciICsgdiArICInIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pOyAlPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiBhbmQgLyo8JT10YU5hbWUlPiovICI7DQogICAgICAgICAgICAgICAgaWYodGhpcy5fPCU9dGFOYW1lJT5fY29vcD09JyE9Jyl7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIk5PVCBFWElTVFMiOw0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSc9Jyl7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIkVYSVNUUyI7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gYCR7dFByZWZ9JHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9ICR7dGhpcy5fPCU9dGFOYW1lJT5fY29vcCB8fCAiSU4ifWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIiAoIiArICh2IHx8IFtdKS5tYXAodCA9PiAodCAmJiB0LjwlPW1OYW1lJT4pP3QuPCU9bU5hbWUlPigiPCU9bk5hbWUodGEpJT4uaWQiKToodCB8fCAnTlVMTCcpKS5qb2luKCcgVU5JT04gQUxMLypNMk0qLyAnKSArICIpIjsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfYWlydGFibGUnJT4odE5hbWUsIHBhcmFtcywgZGF0YSwgbWV0aG9kKXsNCiAgICA8JSBpZihtYWluQ2xhc3MoWydBaXJUYWJsZSddKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKG1haW5DbGFzcyhbJ0FpclRhYmxlJ10pKSU+KCkuPCU9bU5hbWUlPih0TmFtZSwgcGFyYW1zLCBkYXRhLCBtZXRob2QpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHROYW1lID0gdE5hbWUgfHwgPCU9X25Db2RlKCklPjsNCiAgICAgICAgICAgIGxldCByZXQgPSAoYXdhaXQgYXhpb3MucmVxdWVzdCh7DQogICAgICAgICAgICAgICAgdXJsOiBgJHt0aGlzLl9fY29uZmlnKCdlbmRwb2ludFVybCcpfSR7dE5hbWV9YCwNCiAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZD9tZXRob2Q6KGRhdGE/InBvc3QiOiJnZXQiKSwNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyQnlGb3JtdWxhOiBwYXJhbXMsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLA0KICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgfSkpLmRhdGE7DQogICAgICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5KU09OLnN0cmluZ2lmeShleC5yZXNwb25zZS5kYXRhLCBudWxsLCA0KSk7DQogICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICB9DQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKFsnRmlsZVN5c3RlbSddKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX2ZpbGVzeXN0ZW0nJT4oZmlsZSwgY29udGVudCwgb2JqPXRoaXMpew0KICAgIDwlIGlmKG1haW5DbGFzcyhbJ0ZpbGVTeXN0ZW0nXSkhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKFsnRmlsZVN5c3RlbSddKSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4oZmlsZSwgY29udGVudCwgb2JqKTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZighZmlsZSkgcmV0dXJuIG51bGw7DQoNCiAgICAgICAgICAgIGxldCByZXQgPSB7fTsNCiAgICAgICAgICAgIGxldCBwYXRoID0gb2JqLl9fY29uZmlnKGBwYXRoLiR7Y29udGVudD8nd3JpdGUnOidyZWFkJ31gLCAodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJz8nLi9kYi8nOidodHRwczovL3t7b3duZXJ9fS5naXRodWIuaW8vJykpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihvYmouX19jb25maWcoJ2xpdmUnLCB0cnVlKSl7DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKGNvbnRlbnQpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgICAgICAvLyB3cml0ZQ0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoZ2xvYmFsKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGZzLnByb21pc2VzLm1rZGlyKChwYXRoICsgZmlsZSkucmVwbGFjZSgvKC4qXC8pLiovZywgJyQxJyksIHsgcmVjdXJzaXZlOiB0cnVlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZ2xvYmFsLmZzLndyaXRlRmlsZVN5bmMocGF0aCArIGZpbGUsIHR5cGVvZihjb250ZW50KT09PSdvYmplY3QnPy8qdGhpcy5fYnRvYSgqL0pTT04uc3RyaW5naWZ5KGNvbnRlbnQsIG51bGwsICdcdCcpLyopKi86Y29udGVudCk7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iQ2Fubm90IHdyaXRlIHRvIGZpbGUgc3lzdGVtIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9ZWxzZSBpZihmaWxlLmVuZHNXaXRoKCcvJykpew0KICAgICAgICAgICAgICAgICAgICA8JT13YXJuKCklPiJzaW11bGF0ZWQgZGlyZWN0b3J5IGxpc3RpbmcuLi4uIiwgZmlsZSk7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IFsiRU1TIFdlYiJdOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAvLyByZWFkDQogICAgICAgICAgICAgICAgICAgIGlmKHBhdGguc3RhcnRzV2l0aCgnaHR0cCcpICYmIHBhdGguaW5kZXhPZignOi8vJyk+MCl7DQogICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLl9yZXN0KHVuZGVmaW5lZCwgbnVsbCwgbnVsbCwgbnVsbCwge3VybDogJ3BhdGgucmVhZCcsIGZpbGUsIHBhdGh9KTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyAmJiBnbG9iYWwuZnMuZXhpc3RzU3luYyhwYXRoICsgZmlsZSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZ2xvYmFsLmZzLnJlYWRGaWxlU3luYyhwYXRoICsgZmlsZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldCA9IHJldD8ocmV0LmRhdGEgfHwgcmV0KTpyZXQ7DQogICAgICAgICAgICA8JT1sb2coKSU+YFske29iai5fX2NvbmZpZygnbGl2ZScsIHRydWUpPycnOidOT1QgJ31MSVZFfCR7dHlwZW9mKGNvbnRlbnQpIT09J3VuZGVmaW5lZCc/J3dyaXRlJzoncmVhZCd9XSR7cGF0aCArIGZpbGV9OiAkeyhyZXQgfHwgJycpLmxlbmd0aH1gKTsNCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICB9DQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKF9maWxlVG9vbHMpKXslPg0KICAgIDwlPW1OYW1lPSdfZmlsZU5hbWUnJT4oX2NsYXNzPTwlPV9uQ29kZSgpJT4sIG9iaj10aGlzLCBhbGlhcz0iPCU9YWxpYXMoKSU+Iil7DQogICAgPCUgaWYobWFpbkNsYXNzKF9maWxlVG9vbHMpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUobWFpbkNsYXNzKF9maWxlVG9vbHMpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihfY2xhc3MsIG9iaiwgYWxpYXM9IjwlPWFsaWFzKCklPiIpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIDwlPWxvZygpJT5vYmouX3RvSGFzaChudWxsLCB7bm9Db2RlOiB0cnVlLCBvbmx5VW5pcXVlOiB0cnVlLCBub09wZXJhdG9yczogdHJ1ZX0sICc8JT1tTmFtZSU+JykuX3RoaXMpOw0KDQogICAgICAgICAgICBsZXQgZk5hbWUgPSBPYmplY3QudmFsdWVzKG9iai5fdG9IYXNoKG51bGwsIHtub0NvZGU6IHRydWUsIG9ubHlVbmlxdWU6IHRydWUsIG5vT3BlcmF0b3JzOiB0cnVlfSwgJzwlPW1OYW1lJT4nKS5fdGhpcykuam9pbignX18nKTsNCiAgICAgICAgICAgIGlmKGZOYW1lKSBmTmFtZSs9Jy5qc29uJzsNCiAgICAgICAgICAgIHJldHVybiAob2JqLl9fY29uZmlnKCdzdG9yZS5yb290JywgJzwlPXNjb3BlJT4vJykgKyBgJHthbGlhcy5zcGxpdCgnLicpLnNsaWNlKDEpLmpvaW4oJy8nKX0vJHtfY2xhc3N9LyR7Zk5hbWV9YCkucmVwbGFjZSgvXC9cLy9nLCAnLycpOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0dpdEh1YiddKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX2dpdGh1YiclPihmaWxlLCBjb250ZW50LCBpZCl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnR2l0SHViJ10pIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUobWFpbkNsYXNzKFsnR2l0SHViJ10pKSU+KG51bGwsIHRoaXMuVG9vbCkuPCU9bU5hbWUlPihmaWxlLCBjb250ZW50LCBpZCk7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYoIWZpbGUpIHJldHVybiBudWxsOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgc2hhMSA9IGFzeW5jIHN0ciA9PiB0eXBlb2YoY3J5cHRvLnN1YnRsZSkhPT0ndW5kZWZpbmVkJz9BcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMScsIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnYmxvYiAnICsgbmV3IEJsb2IoW3N0cl0pLnNpemUgKyAnXHgwMCcgKyBzdHIpKSkpLm1hcCh2ID0+IHYudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpOnN0ci5zdWJzdHJpbmcoMCwgMTApOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy5fcmVzdCh1bmRlZmluZWQsIG51bGwsIGNvbnRlbnQ/SlNPTi5zdHJpbmdpZnkoew0KICAgIAkJCW1lc3NhZ2U6ICJkZXBsb3llZCBieSA8JT1tTmFtZSU+KCkiLA0KICAgIAkJCXNoYTogaWQgfHwgY29udGVudFt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyldLA0KICAgIAkJCWNvbnRlbnQ6IHRoaXMuX2J0b2EodHlwZW9mKGNvbnRlbnQpPT09J29iamVjdCc/SlNPTi5zdHJpbmdpZnkoY29udGVudCwgbnVsbCwgJ1x0Jyk6Y29udGVudCksDQogICAgCQl9KTpudWxsLCBjb250ZW50PydwdXQnOm51bGwsIHsNCiAgICAJCSAgICBmaWxlLA0KICAgIAkJfSk7DQogICAgCQkNCiAgICAJCWlmKCFyZXQpIHJldHVybiByZXQ7DQogICAgCQkNCiAgICAJCXJldCA9IGNvbnRlbnQ/cmV0LmNvbnRlbnQ6cmV0Ow0KICAgIAkJaWYoZmlsZS5pbmRleE9mKCdpbmRleC5tZCcpPj0wKSByZXR1cm4gcmV0Ow0KICAgIAkJDQogICAgCQlpZihBcnJheS5pc0FycmF5KHJldCkpew0KICAgIAkJICAgIC8vIGluIGNhc2Ugd2UgYXJlIGxpc3RpbmcgdGhlIGNvbnRlbnRzIG9mIGEgZm9sZGVyIHJlc291cmNlDQogICAgCQkgICAgcmV0dXJuIHJldC5tYXAociA9PiAoe19fZmlsZW5hbWVfXzogci5uYW1lLnJlcGxhY2UoJy5qc29uJywgJycpLCBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXTogci5zaGF9KSk7DQogICAgCQl9DQogICAgCQkNCiAgICAJCWxldCBfdGhpcyA9IHt9Ow0KICAgIAkJaWYocmV0LnNoYSl7DQogICAgCQkgICAgX3RoaXMgPSByZXQuY29udGVudD9KU09OLnBhcnNlKHRoaXMuX2F0b2IocmV0LmNvbnRlbnQpKTp7fTsNCiAgICAJCSAgICBfdGhpc1t0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyldID0gcmV0LnNoYTsgLy8/Pw0KICAgIAkJfWVsc2UgaWYocmV0W3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKV0pew0KICAgIAkJICAgIC8vPCU9d2FybigpJT4nc2hhMScsIGZpbGUsIGF3YWl0IHNoYTEoSlNPTi5zdHJpbmdpZnkocmV0KSkpOw0KICAgIAkJICAgIF90aGlzID0gcmV0Ow0KICAgIAkJfQ0KICAgIAkJDQogICAgCQk8JT1sb2coKSU+ZmlsZSwgY29udGVudD8ncHV0JzonZ2V0JywgX3RoaXMpOw0KICAgICAgICAgICAgcmV0dXJuIF90aGlzOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ1NhbGVzRm9yY2UnXSkpeyU+DQogICAgPCU9bU5hbWU9J190b1NGUXVlcnknJT4oZmllbGRzLCBvYmpzLCBiU3RyaW5nKXsNCiAgICAgICAgbGV0IHJldCA9IHRoaXMuX19leHBvcnQoe1s8JT1fbkNvZGUoKSU+XToge3BhcmFtczoge3doZXJlOiB7YW5kOiBbXSwgb3I6IFtdfX0sIGVkZ2VzOiB7bm9kZToge319fX0sIHsNCiAgICAgICAgICAgIC8vT1BFUkFUT1JTOiB0cnVlLA0KICAgICAgICAgICAgSWQ6IChvYmosIGVhQ29kZSwgdikgPT4gb2JqWzwlPV9uQ29kZSgpJT5dLnBhcmFtcy53aGVyZS5hbmQucHVzaCh7SWQ6IHtlcTogdn19KSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIGxldCBvcCA9ICdlcSc7DQogICAgICAgICAgICAgICAgbGV0IGNvbmQgPSB7W2VhQ29kZV06IHtbb3BdOiANCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5xOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBpTmFtZTogJ0lkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbPCU9X25Db2RlKGVhLkVudGl0eVR5cGUpJT5dOiB2P3YuPCU9bU5hbWUlPigpWzwlPV9uQ29kZShlYS5FbnRpdHlUeXBlKSU+XS5wYXJhbXMud2hlcmUuYW5kOltdLA0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0RhdGUpeyU+DQogICAgICAgICAgICAgICAgICAgICh2P3YudG9JU09TdHJpbmcoKTpudWxsKQ0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgICAgICB2DQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgIH19Ow0KICAgICAgICAgICAgICAgIG9ials8JT1fbkNvZGUoKSU+XS5wYXJhbXMud2hlcmUuYW5kLnB1c2goY29uZCk7DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pOyAlPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICANCiAgICAgICAgLy9PYmplY3Qua2V5cyhyZXQpLmZpbHRlcihrID0+ICFTdHJpbmcocmV0W2tdKS5sZW5ndGgpLmZvckVhY2goayA9PiBkZWxldGUgcmV0W2tdKTsNCiAgICAgICAgDQogICAgICAgIGlmKGJTdHJpbmcpew0KICAgICAgICAgICAgcmV0ID0ge3F1ZXJ5OiB7WzwlPV9uQ29kZSgpJT4gKyAnUXVlcnknXToge3VpYXBpOiB7cXVlcnk6IHJldH19fX07DQogICAgICAgICAgICByZXQgPSBKU09OLnN0cmluZ2lmeShyZXQsIG51bGwsIDQpOw0KICAgICAgICB9DQoNCiAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ1NlcnZpY2VOb3cnXSkpeyU+DQogICAgPCUNCiAgICBsZXQgX2lkID0gcyA9PiAvKnM/czoqL2B0aGlzLl91dWlkKCR7c3x8dW5kZWZpbmVkfSkucmVwbGFjZSgvLS9nLCAnJylgOw0KICAgIGxldCBfdGlkID0gX2MgPT4gX2lkKCInIitzY29wZSsiLiIrIChfYyB8fCBjKS5OYW1lICsgIiciKTsNCiAgICBsZXQgYXBwID0gKCkgPT4geyU+YXBwbGljYXRpb24obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdBcHBsaWNhdGlvbicsIHRydWUpJT4oKS5jb2RlKHRoaXMuX19jb25maWcoJ3Njb3BlJywgJzwlPXNjb3BlJT4nKSkpPCV9Ow0KICAgIA0KICAgIGxldCBsYWJlbCA9ICh0LCBuLCBjLCBwKSA9PiB7bj1zci5FbmdsaXNoTmFtZShuKTsgJT4uPCU9dCU+X0ZpZWxkX0xhYmVscyhbbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGaWVsZCBMYWJlbCcsIHRydWUpJT4oPCU9X2lkKCklPikucmVtYXJrKCc8JT1uJT4nKS5uYW1lKCc8JT1uJT4nKS5jb2RlKDwlPWMlPikubGFuZ3VhZ2UoJ2VuJykucGx1cmFsKCc8JT0ocCB8fCAobiArICdzJykpJT4nKS48JWFwcCgpJT5dKTwlfTslPg0KDQogICAgPCU9bU5hbWU9J190b1NOVGFibGUnJT4oKXsNCiAgICAgICAgLy90aGlzLl9kZWZhdWx0cygpOw0KDQogICAgICAgIHRyeXsNCiAgICA8JSBpZihfY05hbWUoJ0FwcGxpY2F0aW9uJykpeyU+DQogICAgICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydChuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1RhYmxlJywgdHJ1ZSklPig8JT1fdGlkKCklPikuY29kZSg8JT1fbkNvZGUoKSU+KS48JWFwcCgpJT4ubmFtZSgnPCU9Yy5OYW1lJT4nKS5yZW1hcmsoYDwlPWMuUmVtYXJrJT5gKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKSwgew0KICAgICAgICAgICAgICAgIEZ1bGw6IHRydWUsDQogICAgICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmoudGFibGVfQ29sdW1ucyhuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0NvbHVtbicsIHRydWUpJT4oPCU9X2lkKCInIitzY29wZSsiLiIrYy5OYW1lKyInK2VhQ29kZSIpJT4pLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLm5hbWUoIjwlPXNyLkVuZ2xpc2hOYW1lKGVhLk5hbWUpJT4iKS5jb2RlKGVhQ29kZSkudHlwZSgnPCU9X0ZyRU1ELl9hdHRyKGVhKSU+JykucmVmZXJlbmNlKDwlaWYoZWEuRW50aXR5VHlwZSl7JT4odiB8fCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoZWEuRW50aXR5VHlwZSwgdHJ1ZSklPigpKS48JT1tTmFtZSU+KCk8JX1lbHNleyU+bnVsbDwlfSU+KS8qPCVsYWJlbCgnY29sdW1uJywgZWEuTmFtZSwgJ2VhQ29kZScsIGVhLlBsdXJhbCklPiovKSwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7bGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmoucmVmZXJlbmNlX0NvbHVtbnMobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdDb2x1bW4nLCB0cnVlKSU+KCkuYWN0aXZlKGZhbHNlKS5lbmFibGVkKHRydWUpLmNvZGUoZWFDb2RlKS50eXBlKCdMaXN0JykubmFtZSgiPCU9bk5hbWUodGEpJT4gPCU9dGEuRW50aXR5Q2xhc3MuUGx1cmFsJT4iKS5yZWZlcmVuY2UobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuPCU9bU5hbWUlPigpKS8qPCVsYWJlbCgnY29sdW1uJywgdGEuTmFtZSsnICcrdGEuRW50aXR5Q2xhc3MuUGx1cmFsLCAnZWFDb2RlJywgdGEuRW50aXR5Q2xhc3MuUGx1cmFsKSU+Ki8pLA0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICA8JSB9JT4NCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3RvU05GbG93JyU+KGJEcmFmdCwgYkhlYWRlcil7DQogICAgICAgIHRyeXsNCiAgICA8JSBpZihfY05hbWUoJ0FwcGxpY2F0aW9uJykpeyU+DQogICAgICAgIDwlIGxldCBiT3JkZXIgPSAxOyBsZXQgX2ZpZCA9IF9jID0+IF9pZCgiJyIrc2NvcGUrIi4nICsgKGJEcmFmdD8nZCc6J3MnKSArICdsIisgKF9jIHx8IGMpLk5hbWUgKyAiJyIpOw0KICAgICAgICBsZXQgbG9naWMgPSAobiwgdCwgbWFwPVtdKSA9PiB7JT4NCiAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBMb2dpYycsIHRydWUpJT4oPCU9X2lkKCklPikub3JkZXIoPCU9Yk9yZGVyKyslPikuY29kZSh0aGlzLl91dWlkKCkpLm5hbWUoJzwlPW4lPicpLnJlbWFyaygnPCU9biU+JykNCiAgICAgICAgICAgICAgICAuYmxvY2sobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IEJsb2NrJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKDwlPV9pZCgpJT4pLm5hbWUoJzwlPW4lPicpDQogICAgICAgICAgICAgICAgICAgIC5ibG9ja19FbGVtZW50X01hcHBpbmdzKFs8JSBtYXAuZmlsdGVyKG0gPT4gbSkuZm9yRWFjaChtID0+IHslPg0KICAgICAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdFbGVtZW50IE1hcHBpbmcnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLm5hbWUoIjwlPW4lPiAtICIgKyA8JT1tLmNkJT4pLmNvZGUoPCU9bS5jZCU+KS52YWx1ZSg8JT1tLnYlPik8JXBDb21wb3VuZChtLnYsIG0udHJuKSU+LA0KICAgICAgICAgICAgICAgICAgICA8JX0pJT5dKQ0KICAgICAgICAgICAgICAgICkuZGVmaW5pdGlvbihuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0xvZ2ljIERlZmluaXRpb24nLCB0cnVlKSU+KCc8JT10JT4gPCU9biU+JykuY29kZSgnPCU9dCU+JykubmFtZSgnPCU9dCU+JykpLjwlYXBwKCklPg0KICAgICAgICA8JX0NCiAgICAgICAgbGV0IGFjdGlvbiA9IChhQ29kZSwgcGFyYW1zPXt9KSA9PiB7ICU+DQogICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0FjdGlvbiBJbnN0YW5jZScsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSh0aGlzLl91dWlkKCkpLmFjdGlvbihuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0FjdGlvbiBUeXBlJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKCc8JT1hQ29kZSU+JykpLm9yZGVyKDwlPWJPcmRlcisrJT4pLjwlYXBwKCklPg0KICAgICAgICAgICAgLmFjdGlvbl9WYXJpYWJsZV9WYWx1ZXMoWw0KICAgICAgICAgICAgPCUgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKHAgPT4geyU+DQogICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdWYXJpYWJsZSBWYWx1ZScsIHRydWUpJT4oKS5jb2RlKCc8JT1wJT4nKS52YWx1ZSg8JT1wYXJhbXNbcF0lPikuYWN0aW9uSW5wdXQoDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnQWN0aW9uIElucHV0JywgdHJ1ZSklPigpLmNvZGUoJzwlPXAlPicpDQogICAgICAgICAgICAgICAgKS5tYXBwaW5nKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRWxlbWVudCBNYXBwaW5nJywgdHJ1ZSklPigpLmNvZGUoJzwlPXAlPicpLnZhbHVlKCIiKSksDQogICAgICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICBdKQ0KICAgICAgICA8JX0NCiAgICAgICAgbGV0IHN1YmZsb3cgPSAoZmxvdywgcGFyYW1zPXt9LCBiTm9XYWl0KSA9PiB7ICU+DQogICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5zdGFuY2UnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmNvZGUodGhpcy5fdXVpZCgpKS5zdWJmbG93KDwlPWZsb3clPikub3JkZXIoPCU9Yk9yZGVyKyslPikuPCVhcHAoKSU+DQogICAgICAgICAgICA8JSBpZighYk5vV2FpdCl7JT4NCiAgICAgICAgICAgIC5pbnN0YW5jZV9GbG93X0luc3RhbmNlX0lucHV0cyhbbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IEluc3RhbmNlIElucHV0JywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKCd3YWl0X2Zvcl9jb21wbGV0aW9uJykubmFtZSgnV2FpdCBmb3IgQ29tcGxldGlvbicpLnR5cGUoJ0Jvb2wnKV0pDQogICAgICAgICAgICAuaW5zdGFuY2VfVmFyaWFibGVfVmFsdWVzKFsNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdWYXJpYWJsZSBWYWx1ZScsIHRydWUpJT4oKS5jb2RlKCd3YWl0X2Zvcl9jb21wbGV0aW9uJykudmFsdWUoJzEnKQ0KICAgICAgICAgICAgICAgICAgICAubWFwcGluZyhuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0VsZW1lbnQgTWFwcGluZycsIHRydWUpJT4oKS5jb2RlKCd3YWl0X2Zvcl9jb21wbGV0aW9uJykpDQogICAgICAgICAgICBdKQ0KICAgICAgICAgICAgPCV9JT4NCiAgICAgICAgICAgIC5pbnN0YW5jZV9WYXJpYWJsZV9WYWx1ZXMoWw0KICAgICAgICAgICAgPCUgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKHAgPT4geyU+DQogICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdWYXJpYWJsZSBWYWx1ZScsIHRydWUpJT4oKS5jb2RlKCc8JT1wJT4nKS52YWx1ZSg8JT1wYXJhbXNbcF0lPikuZmxvd0lucHV0KA0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5wdXQnLCB0cnVlKSU+KCkuY29kZSgnPCU9cCU+JykNCiAgICAgICAgICAgICAgICApLm1hcHBpbmcobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdFbGVtZW50IE1hcHBpbmcnLCB0cnVlKSU+KCkuY29kZSgnPCU9cCU+JykudmFsdWUoPCU9cGFyYW1zW3BdJT4pKQ0KICAgICAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgXSkNCiAgICAgICAgPCV9DQogICAgICAgIGxldCBwQ29tcG91bmQgPSAodiwgdHJuKSA9PiB7aWYoIXRybikgcmV0dXJuOyAlPi5lbGVtZW50TWFwcGluZ19QaWxsX0NvbXBvdW5kcyhbbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdQaWxsIENvbXBvdW5kJywgdHJ1ZSklPih0aGlzLl91dWlkKCkpLmNvZGUoJycpLm5hbWUoPCU9diU+KS5vcmRlcigwKS8qLnJlbWFyayh0aGlzLl9idG9hKGA8JT1KU09OLnN0cmluZ2lmeShbXSklPmApKSovLjwlYXBwKCklPg0KICAgICAgICAgICAgLnBhcmVudF9QaWxsX0NvbXBvdW5kcyhbDQogICAgICAgICAgICA8JSBPYmplY3Qua2V5cyh0cm4pLmZvckVhY2goKHQsIGkpID0+IHslPiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1BpbGwgQ29tcG91bmQnLCB0cnVlKSU+KHRoaXMuX3V1aWQoKSkuY29kZSgiPCU9dCU+Iikub3JkZXIoPCU9aSsxJT4pLm5hbWUoPCU9diU+KS5yZW1hcmsodGhpcy5fYnRvYShgPCU9SlNPTi5zdHJpbmdpZnkodHJuW3RdKSU+YCkpLjwlYXBwKCklPi8qLnRyYW5zZm9ybShuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1RyYW5zZm9ybScsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSgnPCU9dCU+JykudHJhbnNmb3JtX1RyYW5zZm9ybV9Db21wb3NpdGlvbnMoW25ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVHJhbnNmb3JtIENvbXBvc2l0aW9uJywgdHJ1ZSklPigpLmNvZGUoJycpXSkpKi8sDQogICAgICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICBdKV0pDQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgDQogICAgICAgICAgICANCiAgICAgICAgICAgIC8qDQogICAgICAgICAgICAgKiBPT0IgRW5kcG9pbnQ6IGh0dHBzOi8vZGV2MTYyNTcwLnNlcnZpY2Utbm93LmNvbS9hcGkvbm93L3Byb2Nlc3NmbG93L2Zsb3dvYmplY3Qvc3RhcnQvc3ViZmxvdw0KICAgICAgICAgICAgICogUGF5bG9hZDogeyJuYW1lIjoieF83ODYxMV9zY2hvb2xfbWFuLlVzZXJfbG9va3VwIiwiaW5wdXRzIjp7Impzb24iOnsibmFtZSI6InRlc3QiLCJnZW5kZXIiOnsiY29kZSI6Ik0iLCAiT1BFUkFUT1JTIjogeyJjb2RlIjogIiE9In19LCJ1c2VyX1N0dWRlbnRzIjpbeyJuYW1lIjoiU1RBIiwiZ2VuZGVyIjp7ImNvZGUiOiJNIn19XX19fQ0KICAgICAgICAgICAgKi8NCg0KICAgICAgICAgICAgbGV0IGZsb3cgPSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cnLCB0cnVlKSU+KDwlPV9maWQoKSU+KS5uYW1lKCc8JT1jLk5hbWUlPiBMb29rdXAnKS5jb2RlKDwlPV9uQ29kZSgpJT4gKyAnX2xvb2t1cCcpLjwlYXBwKCklPi5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKTsNCiAgICAgICAgICAgIGlmKGJIZWFkZXIpIHJldHVybiBmbG93Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXR1cm4gdGhpcy5fX2V4cG9ydChmbG93LyouX2RlZmF1bHRzKCkqLw0KICAgICAgICAgICAgICAgIC5mbG93X0Zsb3dfU2V0dGluZ3MoW25ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBTZXR0aW5nJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKCdBQ1RJT04nKV0pDQogICAgICAgICAgICAgICAgLmZsb3dfRmxvd19JbnB1dHMoWw0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5wdXQnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmFjdGl2ZSh0cnVlKS5jb2RlKCdqc29uJykubmFtZSgnSlNPTicpLnR5cGUoJ0pTT04nKTwlbGFiZWwoJ2lucHV0JywgJ0pTT04nLCAiJ2pzb24nIiklPg0KICAgICAgICAgICAgICAgIF0pLmZsb3dfRmxvd19PdXRwdXRzKFsNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IE91dHB1dCcsIHRydWUpJT4oPCU9X2lkKCklPikuYWN0aXZlKHRydWUpLmNvZGUoPCU9X25Db2RlKCklPiArICdfbGlzdCcpLm5hbWUoJzwlPW5OYW1lKGMpJT4gTGlzdCcpLnR5cGUoJ0xpc3QnKS5yZWZlcmVuY2UobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdUYWJsZScsIHRydWUpJT4oIjwlPW5OYW1lKGMpJT4iKS5uYW1lKCc8JT1jLk5hbWUlPicpLmNvZGUoPCU9X25Db2RlKCklPikuPCVhcHAoKSU+KQ0KICAgICAgICAgICAgICAgICAgICA8JWxhYmVsKCdvdXRwdXQnLCBjLk5hbWUgKyAnIExpc3QnLCBfbkNvZGUoKSArICIrICdfbGlzdCciKSU+DQogICAgICAgICAgICAgICAgXSkuZmxvd19GbG93X1ZhcmlhYmxlcyhbDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBWYXJpYWJsZScsIHRydWUpJT4oPCU9X2lkKCklPikuYWN0aXZlKHRydWUpLmNvZGUoJ2pzb24nKS5uYW1lKCdKU09OJykudHlwZSgnSlNPTicpPCVsYWJlbCgndmFyaWFibGUnLCAnSlNPTicsICcianNvbiInKSU+LA0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgVmFyaWFibGUnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmFjdGl2ZSh0cnVlKS5jb2RlKCdlcXVlcnknKS5uYW1lKCdFUXVlcnknKS50eXBlKCdTdHJpbmcnKTwlbGFiZWwoJ3ZhcmlhYmxlJywgJ0VRdWVyeScsICciZXF1ZXJ5IicpJT4sDQogICAgICAgICAgICAgICAgXSkuZmxvd19GbG93X0xvZ2ljcyhbDQogICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ1NldCAnICsgYy5OYW1lICsgJyBKU09OJywgJ1NldCBGbG93IFZhcmlhYmxlcycsIFt7Y2Q6ICInanNvbiciLCB2OiAiJ3t7c3ViZmxvdy5qc29ufX0nIn1dKSU+LA0KICAgICAgICAgICAgICAgICAgICA8JSAvLyAsIHRybjoge3JlcGxhY2Vfc3RyaW5nOiB7cmVnZXg6ICIvL2ciLCByZXBsYWNlX3N0cmluZzogIiJ9fSU+DQogICAgICAgICAgICAgICAgXSkuc2VjdXJpdHlDb250cm9sKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnU2VjdXJpdHkgQ29udHJvbCcsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSgnc3lzX2h1Yl9mbG93JykubmFtZShgc3lzX3Njb3BlLnNjb3BlPSR7dGhpcy5fX2NvbmZpZygnc2NvcGUnLCAnPCU9c2NvcGUlPicpfWApLnR5cGUobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdTZWN1cml0eSBUeXBlJywgdHJ1ZSklPigpLmNvZGUoJ2NsaWVudF9jYWxsYWJsZV9mbG93X29iamVjdCcpKS5vcGVyYXRpb24obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdTZWN1cml0eSBPcGVyYXRpb24nLCB0cnVlKSU+KCkuY29kZSgnZXhlY3V0ZScpKS48JWFwcCgpJT4pLCB7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgLy9leHBvcnRlcjogdiA9PiB2Lm9iaiA9IHYucmV1c2VkP25ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdycsIHRydWUpJT4odi5vYmouSWQpOnYub2JqLCAvKmluZm9ybWF0aW9uIGxvc3MqLw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIE51bGw6ICFiSGVhZGVyLA0KICAgICAgICAgICAgICAgIEZ1bGw6IHRydWUsDQogICAgICAgICAgICAgICAgDQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqPCVpZigwIHx8IChbJ25hbWUnLCAncmVtYXJrJywgJ2RhdGUnLCAnb3JkZXInLCAnYWN0aXZlJywgJ2VuYWJsZWQnXS5pbmRleE9mKGVhLk5hbWUpPDApKXslPi5mbG93X0Zsb3dfVmFyaWFibGVzKFsNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IFZhcmlhYmxlJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKGVhQ29kZSkubmFtZSgnPCU9c3IuRW5nbGlzaE5hbWUoZWEuTmFtZSklPicpLnR5cGUoPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4nSlNPTic8JSB9ZWxzZXslPic8JT1fRnJFTUQuX2F0dHIoZWEpJT4nPCV9JT4pPCVsYWJlbCgndmFyaWFibGUnLCBlYS5OYW1lLCAiZWFDb2RlIiklPiwNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IFZhcmlhYmxlJywgdHJ1ZSklPig8JT1faWQoKSU+KS5uYW1lKCc8JT1uTmFtZShjKSU+LjwlPWVhLk5hbWUlPi5TZXQnKS5jb2RlKGVhQ29kZSArICdfc2V0JykubmFtZSgnPCU9c3IuRW5nbGlzaE5hbWUoZWEuTmFtZSklPiBTZXQnKS50eXBlKCdCb29sJyk8JWxhYmVsKCd2YXJpYWJsZScsIGVhLk5hbWUgKyAnIFNldCcsICJlYUNvZGUgKyAnX3NldCciKSU+LA0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgVmFyaWFibGUnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmNvZGUoZWFDb2RlICsgJ19vcCcpLm5hbWUoJzwlPXNyLkVuZ2xpc2hOYW1lKGVhLk5hbWUpJT4gT3BlcmF0b3InKS50eXBlKCdTdHJpbmcnKTwlbGFiZWwoJ3ZhcmlhYmxlJywgZWEuTmFtZSArICcgT3BlcmF0b3InLCAiZWFDb2RlICsgJ19vcCciKSU+LA0KICAgICAgICAgICAgICAgICAgICBdKS5mbG93X0Zsb3dfTG9naWNzKFsNCiAgICAgICAgICAgICAgICAgICAgPCVsb2dpYygnU2V0ICcrZWEuTmFtZSwgJ1NldCBGbG93IFZhcmlhYmxlcycsIFsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVhLkVudGl0eVR5cGU/bnVsbDp7Y2Q6ICJlYUNvZGUiLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS5qc29ufX0nIiwgdHJuOiBPYmplY3QuYXNzaWduKHt9LCB7dmFsdWVfbWFwOiB7a2V5OiAiJHtlYUNvZGV9IiwgZGVmYXVsdDogIiJ9fSwgZWEuX0lzRGF0ZT97c3RyaW5nX3RvX2RhdGU6IHtkYXRlX2Zvcm1hdDogInl5eXktTU0tZGRcJ1RcJ0hIOm1tOnNzXCdaXCciLCBjdXN0b21fZm9ybWF0OiAiIn19Ont9KX0sDQogICAgICAgICAgICAgICAgICAgICAgICAvL3tjZDogImVhQ29kZSsnX3NldCciLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS4nK2VhQ29kZSsnfX19JyIsIHRybjoge2lzX251bGw6IHt9fX0sDQogICAgICAgICAgICAgICAgICAgICAgICAvL3tjZDogImVhQ29kZSsnX29wJyIsIHY6ICIne3tmbG93X3ZhcmlhYmxlLm9wZXJhdG9yc319JyIsIHRybjoge3ZhbHVlX21hcDoge2tleTogIiR7ZWFDb2RlfSJ9fX0sDQogICAgICAgICAgICAgICAgICAgIF0pJT4ubG9naWNfRmxvd19JbnB1dF9TY3JpcHRzKFsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlaWYoZWEuRW50aXR5VHlwZSl7JT5uZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5wdXQgU2NyaXB0JywgdHJ1ZSklPig8JT1faWQoKSU+KS5uYW1lKCdTZXQgPCU9ZWEuTmFtZSU+JykuYWN0aXZlKHRydWUpLmNvZGUoZWFDb2RlKS5yZW1hcmsoYHJldHVybiBmZF9kYXRhLmZsb3dfdmFyLmpzb24uJHtlYUNvZGV9O2ApLDwlfSU+DQogICAgICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5wdXQgU2NyaXB0JywgdHJ1ZSklPig8JT1faWQoKSU+KS5uYW1lKCdTZXQgPCU9ZWEuTmFtZSU+IFNldCcpLmFjdGl2ZSh0cnVlKS5jb2RlKGVhQ29kZSArICdfc2V0JykucmVtYXJrKGByZXR1cm4gdHlwZW9mKGZkX2RhdGEuZmxvd192YXIuanNvbi4ke2VhQ29kZX0pIVx1MDAzZFx1MDAzZFx1MDAyN3VuZGVmaW5lZFx1MDAyNztgKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBJbnB1dCBTY3JpcHQnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLm5hbWUoJ1NldCA8JT1lYS5OYW1lJT4gT3BlcmF0b3InKS5hY3RpdmUodHJ1ZSkuY29kZShlYUNvZGUgKyAnX29wJykucmVtYXJrKGByZXR1cm4gKGZkX2RhdGEuZmxvd192YXIuanNvbi5PUEVSQVRPUlMgfHwge30pLiR7ZWFDb2RlfTtgKSwNCiAgICAgICAgICAgICAgICAgICAgXSksDQoNCiAgICAgICAgICAgICAgICAgICAgPCVsb2dpYygnSWYgJyArIGMuTmFtZSArICcgJytlYS5OYW1lKycgU2V0JywgJ0lmJywgW3tjZDogIidjb25kaXRpb24nIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuJyArIGVhQ29kZSArICdfc2V0fX09dHJ1ZScifV0pJT4NCiAgICAgICAgICAgICAgICAgICAgPCVpZihlYS5FbnRpdHlUeXBlKXslPi5wYXJlbnRfRmxvd19JbnN0YW5jZXMoPCVzdWJmbG93KCduZXcgJytzY29wZSsnLicrX2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpKycoKS4nK21OYW1lKycoZmFsc2UsIHRydWUpJywge2pzb246ICIne3tmbG93X3ZhcmlhYmxlLicrZWFDb2RlKyd9fScifSklPik8JX0lPg0KICAgICAgICAgICAgICAgICAgICAucGFyZW50X0Zsb3dfTG9naWNzKFsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ0FkZCAnK2VhLk5hbWUrJyB0byAnICsgYy5OYW1lICsgJyBFUXVlcnknLCAnU2V0IEZsb3cgVmFyaWFibGVzJywgW3tjZDogIidlcXVlcnknIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuZXF1ZXJ5fX1eJytlYUNvZGUifV0pJT4sDQogICAgICAgICAgICAgICAgICAgICAgICA8JWxvZ2ljKCdJZiAnICsgYy5OYW1lICsgJyAnK2VhLk5hbWUrJyBPcGVyYXRvciBpcyBub3QgZW1wdHknLCAnSWYnLCBbe2NkOiAiJ2NvbmRpdGlvbiciLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS4nK2VhQ29kZSsnX29wfX0hPScifV0pJT4ucGFyZW50X0Zsb3dfTG9naWNzKFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8JWxvZ2ljKCdBcHBlbmQgJytlYS5OYW1lKycgT3BlcmF0b3IgdG8gJyArIGMuTmFtZSArICcgRVF1ZXJ5JywgJ1NldCBGbG93IFZhcmlhYmxlcycsIFt7Y2Q6ICInZXF1ZXJ5JyIsIHY6ICIne3tmbG93X3ZhcmlhYmxlLmVxdWVyeX19e3tmbG93X3ZhcmlhYmxlLicrZWFDb2RlKydfb3B9fScifV0pJT4NCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgPCVsb2dpYygnRWxzZSAnICsgYy5OYW1lICsgJyAnK2VhLk5hbWUrJyBub3QgU2V0JywgJ0Vsc2UnKSU+LnBhcmVudF9GbG93X0xvZ2ljcyhbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCVsb2dpYygnQXBwZW5kID0gdG8gJyArIGMuTmFtZSArICcgRVF1ZXJ5IGZvciAnK2VhLk5hbWUsICdTZXQgRmxvdyBWYXJpYWJsZXMnLCBbe2NkOiAiJ2VxdWVyeSciLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS5lcXVlcnl9fT0nIn1dKSU+DQogICAgICAgICAgICAgICAgICAgICAgICBdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlaWYoZWEuRW50aXR5VHlwZSl7JT48JWxvZ2ljKCdGb3IgZWFjaCAnK2MuTmFtZSsnICcrZWEuTmFtZSwgJ0ZvciBFYWNoJywgW3tjZDogIidpdGVtcyciLCB2OiAiJ3t7PDwqKiMkZltpbnRlcm5hbF9uYW1lPVxcJyIrYy5OYW1lKyJfbG9va3VwXFwnIGFuZCAkbm90KCRleGlzdHMoZmxvd19GbG93X1NuYXBzaG90cykpXS5zbmFwc2hvdF9GbG93X0xvZ2ljcy4qKi5wYXJlbnRfRmxvd19JbnN0YW5jZXMjJGZpWyRudW1iZXIob3JkZXIpPD0iK2JPcmRlcisiIGFuZCBzdWJmbG93LmludGVybmFsX25hbWU9XFwnIitlYS5FbnRpdHlUeXBlLk5hbWUrIl9sb29rdXBcXCddLnVpX2lkPj4uIitlYS5FbnRpdHlUeXBlLk5hbWUrIl9saXN0fX0nIn1dKSU+LnBhcmVudF9GbG93X0xvZ2ljcyhbPCV9JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ0FwcGVuZCAnK2VhLk5hbWUrJyB0byAnICsgYy5OYW1lICsgJyBFUXVlcnknLCAnU2V0IEZsb3cgVmFyaWFibGVzJywgW3tjZDogIidlcXVlcnknIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuZXF1ZXJ5fX17e2Zsb3dfdmFyaWFibGUuJytlYUNvZGUrJ319JyJ9XSklPiwNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlaWYoZWEuRW50aXR5VHlwZSl7JT5dKTwlfSU+LA0KICAgICAgICAgICAgICAgICAgICBdKSwNCiAgICAgICAgICAgICAgICBdKTwlfSU+DQogICAgICAgICAgICAgICAgLA0KICAgICAgICA8JSB9KSU+DQogICAgICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHtsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iajwlaWYoMCB8fCBbJ1VzZXInLCAnR2VuZGVyJywgJ19TdHVkZW50JywgJ19UZWFjaGVyJ10uaW5kZXhPZih0YS5FbnRpdHlDbGFzcy5OYW1lKT49MCl7JT4uZmxvd19GbG93X0xvZ2ljcyhbPCVsb2dpYygnSWYgJyt0YU5hbWUrJyBub3QgZW1wdHknLCAnSWYnKSU+LnBhcmVudF9GbG93X0luc3RhbmNlcyg8JXN1YmZsb3coJ25ldyAnK3Njb3BlKycuJytfY05hbWUodGEuRW50aXR5Q2xhc3MsIHRydWUpKycoKS4nK21OYW1lKycoYkRyYWZ0LCB0cnVlKScsIHtqc29uOiAiJ3Rlc3QnIn0pJT4pXSk8JX0lPiwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgICAgIF9sb29rdXA6IG9iaiA9PiBvYmouZmxvd19GbG93X0xvZ2ljcyhbPCVsb2dpYygnSWYgRVF1ZXJ5IG5vdCBlbXB0eScsICdJZicsIFt7Y2Q6ICInY29uZGl0aW9uJyIsIHY6ICIne3tmbG93X3ZhcmlhYmxlLmVxdWVyeX19IT0nIn1dKSU+DQogICAgICAgICAgICAgICAgICAgIC5wYXJlbnRfQWN0aW9uX0luc3RhbmNlcyhbDQogICAgICAgICAgICAgICAgICAgICAgICA8JWFjdGlvbignbG9va191cF9yZWNvcmRzJywge3RhYmxlOiAnIjw8JC5zeXNfc2NvcGUuc2NvcGU+Pl8iKygnK19uQ29kZSgpKycpLnRvTG93ZXJDYXNlKCknfSklPiwNCiAgICAgICAgICAgICAgICAgICAgXSkubG9naWNfRmxvd19JbnB1dF9TY3JpcHRzKFsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBJbnB1dCBTY3JpcHQnLCB0cnVlKSU+KCkubmFtZSgnU2V0IENvbmRpdGlvbicpLmFjdGl2ZSh0cnVlKS5jb2RlKCdjb25kaXRpb25zJykucmVtYXJrKGByZXR1cm4gZmRfZGF0YS5mbG93X3Zhci5lcXVlcnk7YCksDQogICAgICAgICAgICAgICAgICAgIF0pDQogICAgICAgICAgICAgICAgXSksDQogICAgICAgICAgICAgICAgX3NuYXBzaG90OiBvYmogPT4gYkRyYWZ0P251bGw6b2JqLmZsb3dfRmxvd19TbmFwc2hvdHMobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IFNuYXBzaG90JywgdHJ1ZSklPig8JT1fZmlkKCklPikuc25hcHNob3RfRmxvd19QbGFucyhbDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBQbGFuJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKCc8JT1jLk5hbWUlPl9QbGFuJykubmFtZSgnPCU9Yy5OYW1lJT4gUGxhbicpDQogICAgICAgICAgICAgICAgICAgIF0pLmZyb21GbG93KHRoaXMuPCU9bU5hbWUlPih0cnVlKSkpLA0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iLCBiRHJhZnQsIGJIZWFkZXIpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICByZXR1cm4gW107DQogICAgPCUgfSU+DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgYXN5bmMgPCU9bU5hbWU9J190b1NOU2NyaXB0JyU+KG9wdGlvbnM9e30pew0KICAgICAgICBvcHRpb25zLl90aGlzID0gb3B0aW9ucy5fdGhpcyB8fCB0aGlzOw0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KG9wdGlvbnMpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgIDwlIGlmKF9jTmFtZSgnQXBwbGljYXRpb24nKSl7JT4NCiAgICAgICAgICAgIGxldCBleHAgPSBvcHRpb25zLnJhdz8iX3RvSlNPTiI6Il90b0RvY3VtZW50IjsNCiAgICAgICAgICAgIGxldCByb2xsYmFjayA9IChvcHRpb25zLmFwcCAmJiBvcHRpb25zLnJvbGxiYWNrKT9hd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1JvbGxiYWNrIENvbnRleHQnLCB0cnVlKSU+KCkuY29kZSgnbGFzdCcpW2V4cF0oT2JqZWN0LmFzc2lnbih7YkpTT046IHRydWV9LCBvcHRpb25zKSk6IiI7DQogICAgICAgICAgICBsZXQgZGIgPSBvcHRpb25zLmRiP2F3YWl0IG9wdGlvbnMuX3RoaXMvKi5fdG9PYmpUcmVlKHRydWUpKi8uX3RvU05UYWJsZSgpW2V4cF0oT2JqZWN0LmFzc2lnbih7YkpTT046IHRydWV9LCBvcHRpb25zKSk6IiI7DQogICAgICAgICAgICBsZXQgZmxvdyA9IG9wdGlvbnMuZmxvdz9hd2FpdCBvcHRpb25zLl90aGlzLyouX3RvT2JqVHJlZSh0cnVlKSovLl90b1NORmxvdyhvcHRpb25zLmRyYWZ0KVtleHBdKE9iamVjdC5hc3NpZ24oe2JKU09OOiB0cnVlfSwgb3B0aW9ucykpOiIiOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihvcHRpb25zLmd6aXApew0KICAgICAgICAgICAgICAgIGlmKGZsb3cpIGZsb3cgPSB0aGlzLlV0ZjhBcnJheVRvU3RyKGF3YWl0IHRoaXMuX2NvbXByZXNzKGZsb3cpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IHRlc3QgPSAob3B0aW9ucy50ZXN0ICYmIG9wdGlvbnMuZmxvdyAmJiAhb3B0aW9ucy5kcmFmdCk/YFxuLypncy5jYWNoZUZsdXNoKCk7ICovZ3MuaW5mbyhzbl9mZC5GbG93QVBJLmdldFJ1bm5lcigpLnN1YmZsb3coJyR7dGhpcy5fX2NvbmZpZygnc2NvcGUnLCAnPCU9c2NvcGUlPicpfS5Vc2VyX2xvb2t1cCcpLmluRm9yZWdyb3VuZCgpLndpdGhJbnB1dHMoe2pzb246IHtjb2RlOiJ0ZXN0IixkYXRlOicyMDI0LTA1LTAzVDE4OjQ0OjAzLjE3N1onLGdlbmRlcjp7Y29kZToiTSIsIE9QRVJBVE9SUzoge2NvZGU6ICIhPSJ9fSx1c2VyX1N0dWRlbnRzOlt7Y29kZToiU1RBIixnZW5kZXI6e2NvZGU6Ik0ifX1dLCBPUEVSQVRPUlM6IHtkYXRlOiAnPCd9fX0pLnJ1bigpLmdldE91dHB1dHMoKVsiVXNlcl9saXN0Il0pO1xuYDonJzsNCiAgICAgICAgICAgIGxldCBhcHAgPSBvcHRpb25zLmFwcD8obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdBcHBsaWNhdGlvbicsIHRydWUpJT4oKS8qLl90b09ialRyZWUodHJ1ZSkqLy5fdG9TTlNhdmUob3B0aW9ucykgKyBgXG4gdmFyIGNvbmZpZyA9IHtBcHBsaWNhdGlvbjoge3JlYWRPbmx5OiB0cnVlfSwgVGFibGU6IHtpZEtleTogJ25hbWUnLCBMb2dTZXQ6IDB9LCBDb2x1bW46IHtMb2dTZXQ6IDB9LCBFbGVtZW50X01hcHBpbmc6IHtMb2dTZXQ6IDB9LCBBY3Rpb25fSW5wdXQ6IHtyZWFkT25seTogdHJ1ZX0sIEFjdGlvbl9UeXBlOiB7cmVhZE9ubHk6IHRydWUsIGlkS2V5OiAnbWFzdGVyX3NuYXBzaG90J30sIEFjdGlvbl9JbnN0YW5jZToge0xvZ1NldDogMH0sIFNlY3VyaXR5X1R5cGU6IHtyZWFkT25seTogdHJ1ZSwgaWRLZXk6ICduYW1lJ30sIFNlY3VyaXR5X09wZXJhdGlvbjoge3JlYWRPbmx5OiB0cnVlLCBpZEtleTogJ25hbWUnfSwgTG9naWNfRGVmaW5pdGlvbjoge3JlYWRPbmx5OiB0cnVlfSwgRmxvdzoge0xvZ1NldDogMH0sIFRyYW5zZm9ybToge3JlYWRPbmx5OiB0cnVlfSwgVHJhbnNmb3JtX0NvbXBvc2l0aW9uOiB7cmVhZE9ubHk6IHRydWV9LCBSb2xsYmFja19Db250ZXh0OiB7cmVhZE9ubHk6IHRydWV9fTsgXG5gICsgKG9wdGlvbnMucm9sbGJhY2s/KCJ2YXIgY2lkID0gc2F2ZVJvbGxiYWNrX0NvbnRleHQoIityb2xsYmFjaytgKTsgaWYoY2lkKXt2YXIgcncgPSBuZXcgR2xpZGVSb2xsYmFja1dvcmtlcigpOyBydy5zZXRSb2xsYmFja0NvbnRleHRJRChjaWQuc3lzX2lkKTsgcncuc3RhcnQoKTt9IFxuYCk6IiIpKyAob3B0aW9ucy5kYj8oInNhdmVUYWJsZSgiK2RiKyIpOyBcbiIpOiIiKSArIChvcHRpb25zLmZsb3c/KCJzYXZlRmxvdygiK2Zsb3crIik7IFxuIik6IiIpICsgdGVzdCk6KHJvbGxiYWNrICsgZGIgKyBmbG93KTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IHNjcmlwdCA9IHRoaXMuX2JlYXV0aWZ5KGFwcCwgJ2phdmFzY3JpcHQnKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIW9wdGlvbnMuZGVwbG95KSByZXR1cm4gc2NyaXB0Ow0KICAgIDwlIH0lPg0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQo8JSB9JT4NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3RvU05TYXZlJyU+KG9wdGlvbnMpew0KICAgICAgICB0cnl7DQogICAgICAgICAgICA8JSB2YXIgX2ZSZWdFeHAgPSAvX2Z7W159XSt9L2dtOyAlPg0KICAgICAgICAgICAgbGV0IF9mID0gKHYsIGVhQ29kZSkgPT4gew0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih2KT09PSJzdHJpbmciKXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IHJldCA9IHY7DQogICAgICAgICAgICAgICAgICAgIC8vaWYodi5zdGFydHNXaXRoKCJmKCIpICYmIHYuZW5kc1dpdGgoIikiKSkgcmV0ID0gJygnK3Yuc2xpY2UoMiwtMSkrJyknOw0KICAgICAgICAgICAgICAgICAgICBpZih2LnN0YXJ0c1dpdGgoInMoIikgJiYgdi5lbmRzV2l0aCgiKSIpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGAoZnVuY3Rpb24gKG9iaiwgJHtlYUNvZGV9KXtgK3Yuc2xpY2UoMiwtMSkrYH0pKG9iaiwgJHtlYUNvZGV9KWA7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKHJldCAmJiByZXQubWF0Y2ggJiYgcmV0Lm1hdGNoKDwlPV9mUmVnRXhwJT4pKSByZXQgPSBgKGZ1bmN0aW9uIChvYmosICR7ZWFDb2RlfSl7JHtyZXQuaW5kZXhPZigicmV0dXJuIik8MD8icmV0dXJuICI6IiJ9ICdgK3JldC5yZXBsYWNlKDwlPV9mUmVnRXhwJT4sIG0gPT4gYCcgKyAke20uc2xpY2UoMywgLTEpfSArICdgKStgJzt9KShvYmosICR7ZWFDb2RlfSlgOw0KICAgICAgICAgICAgICAgICAgICBpZihyZXQgJiYgcmV0Lm1hdGNoICYmIHJldC5tYXRjaCgvPDxbXj4+XSs+Pi9nbSkpIHJldCA9ICciIic7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBgKGZ1bmN0aW9uKHYpeyB0cnl7IHJldHVybiAodiAmJiB2LnJlcGxhY2UpP3YucmVwbGFjZSg8JT1fZlJlZ0V4cCU+LCBmdW5jdGlvbihtKXtyZXR1cm4gZXZhbChtLnNsaWNlKDMsIC0xKSk7fSk6djsgIH1jYXRjaChleCl7Z3MuaW5mbygnX2Z7RXhjZXB0aW9ufTogJHtlYUNvZGV9OiAnICsgZXgpOyByZXR1cm4gdjt9IH0pKCR7cmV0fSB8fCAke2VhQ29kZX0pYDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIGVhQ29kZTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGxldCByZXQgPSB0aGlzLl9fZXhwb3J0KHtJZDogIjwlPXNjb3BlJT4uPCU9X2NOYW1lKGMsIHRydWUpJT4iLCB2YXJzOiBgYCwgY29kZTogYGAsIHF1ZXJ5OiBgYCwgc2V0OiBgYCwgZXNldDogYGAsIGRzZXQ6IGBgLCB0YXM6IGBgLCBkZXBzOiB7fX0sIHsNCiAgICAgICAgICAgICAgICBleHBvcnRlcjogdiA9PiB2Lm9iaiA9ICh0eXBlb2Yob3B0aW9ucy5yZXVzZWQpPT09J3VuZGVmaW5lZCcgfHwgb3B0aW9ucy5yZXVzZWQ+PXYucmV1c2VkKT92Lm9iajp7Y29kZTogdi5vYmouY29kZSArIGBcblxuLyoqIHJldXNlZDogdi5vYmouSWQqKi9cblxuYCwgZGVwczogJycsIElkOiB2Lm9iai5JZH0sDQoNCiAgICAgICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgICAgICAgICAgSWQ6IChvYmosIGlkQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBvYmouSWQgPSBgaWYob2JqLiR7aWRDb2RlfSAmJiBvYmouJHtpZENvZGV9LnJlcGxhY2UoLy0vZywgJycpLmxlbmd0aD09MzIpe190b1N0cmluZys9J18nK29iai4ke2lkQ29kZX0ucmVwbGFjZSgvLS9nLCAnJyk7IGdyLmdldCgnc3lzX2lkJywgb2JqLiR7aWRDb2RlfS5yZXBsYWNlKC8tL2csICcnKSk7fVxuYDsNCiAgICAgICAgICAgICAgICAgICAgb2JqLmlkVG9TdHJpbmcgPSBgX3RvU3RyaW5nICs9IChvYmo/b2JqLiR7aWRDb2RlfTooJ2dyXycrZ3Iuc3lzX2lkKSkgKyAnOiAnOyBgOw0KICAgICAgICAgICAgICAgICAgICBvYmoubmV3VVVJRCA9IGBpZighb2JqLiR7aWRDb2RlfSB8fCBvYmouJHtpZENvZGV9LnJlcGxhY2UoLy0vZywgJycpLmxlbmd0aCE9MzIpe29iai4ke2lkQ29kZX0gPSBnci5zZXROZXdHdWlkKCk7fWVsc2V7Z3Iuc2V0TmV3R3VpZFZhbHVlKG9iai4ke2lkQ29kZX0ucmVwbGFjZSgvLS9nLCAnJykpO319XG5gOw0KICAgICAgICAgICAgICAgIH0sDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUgJiYgZWEuRW50aXR5VHlwZSE9Yyl7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLmRlcHMuPCU9bk5hbWUoZWEuRW50aXR5VHlwZSklPiA9ICh2IHx8IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkpLjwlPW1OYW1lJT4ob3B0aW9ucyk7DQogICAgICAgIDwlIH0lPg0KDQogICAgICAgICAgICAgICAgICAgIG9iai52YXJzICs9IGB2YXIgJHtlYUNvZGV9ID0gPCVpZihlYS5FbnRpdHlUeXBlKXslPigoKHJlZnMuPCU9bk5hbWUoZWEpJT4gPSAodHlwZW9mKG9iai4ke2VhQ29kZX0pIT09J3VuZGVmaW5lZCc/Lyp0aGlzLiovc2F2ZTwlPW5OYW1lKGVhLkVudGl0eVR5cGUpJT4ob2JqLiR7ZWFDb2RlfSwgezwlPW5OYW1lKGMpJT46IG9iaiwgPCU9bk5hbWUoYy8qZWEqLyklPlJlZnM6IHJlZnMsIDwlPW5OYW1lKGMpLnRvTG93ZXJDYXNlKCklPjogZ3J9LCAiPCU9bk5hbWUoYyklPiIsIHJlZnMuPCU9bk5hbWUoZWEpJT4gfHwgLypFWFA6IHJlZnMuPCU9bk5hbWUoZWEuRW50aXR5VHlwZSkudG9Mb3dlckNhc2UoKSU+IHx8ICovKCR7X2YoPCV2YWx1ZU9mKGVhLkRlZmF1bHQpJT4sIGVhQ29kZSl9KSk6cmVmcy48JT1uTmFtZShlYSklPikpIHx8IHtzeXNfaWQ6ICcnfSlbLyp0aGlzLiovY29uZmlnLjwlPW5OYW1lKGVhLkVudGl0eVR5cGUpJT4uaWRLZXkgfHwgInN5c19pZCJdKS50b1N0cmluZygpPCV9ZWxzZXslPm9iai4ke2VhQ29kZX08JX0lPjtgOw0KICAgICAgICA8JSBpZihlYS5Jc1VuaXF1ZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLnF1ZXJ5ICs9IGBfdG9TdHJpbmcrPSdfJyske2VhQ29kZX07IF90b1F1ZXJ5LiR7ZWFDb2RlfSA9ICR7X2YodiwgZWFDb2RlKX07IGA7DQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgICAgICBvYmouc2V0ICs9IGBpZih0eXBlb2YoX3RvU2V0LiR7ZWFDb2RlfSA9ICR7X2YodiwgZWFDb2RlKX0pIT09J3VuZGVmaW5lZCc8JWlmKGVhLkVudGl0eVR5cGUpeyU+JiYgX3RvU2V0LiR7ZWFDb2RlfTwlfSU+KSBnci5zZXRWYWx1ZSgnJHtlYUNvZGV9JywgX3RvU2V0LiR7ZWFDb2RlfSk7YDsNCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICA8JSBjLkVudGl0eUZpZWxkcy5mb3JFYWNoKGVmID0+IHslPg0KICAgICAgICAgICAgICAgIGVmXzwlPW5OYW1lKGVmKSU+OiAob2JqLCBlZkNvZGUsIHYpID0+IG9iai5lc2V0ICs9IGBpZih0eXBlb2YoX3RvU2V0LiR7ZWZDb2RlfSA9ICR7X2YoSlNPTi5zdHJpbmdpZnkodiksICdvYmouJytlZkNvZGUpfSkhPT0ndW5kZWZpbmVkJykgZ3Iuc2V0VmFsdWUoJyR7ZWZDb2RlfScsIF90b1NldC4ke2VmQ29kZX0pO2AsDQogICAgPCUgfSklPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHtsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgb2JqLnRhcyArPSBgcmVmcy48JT10YU5hbWUlPiA9ICgob2JqP29iai4ke2VhQ29kZX06W10pIHx8IFtdKS5tYXAoZnVuY3Rpb24obyl7Z3MuaW5mbyhfdG9TdHJpbmcgKyAnID0+IHNhdmU8JT1uTmFtZSh0YS5FbnRpdHlDbGFzcyklPigke2VhQ29kZX1bXSknKTsgcmV0dXJuIC8qdGhpcy4qL3NhdmU8JT1uTmFtZSh0YS5FbnRpdHlDbGFzcyklPihvLCB7PCU9bk5hbWUoYyklPjogb2JqLCA8JT1uTmFtZShjKS50b0xvd2VyQ2FzZSgpJT46IGdyLCBtYW55UmVmczogcmVmc30sICI8JT1uTmFtZShjKSU+Iik7fSk7YA0KICAgICAgICAgICAgICAgICAgICBvYmouZGVwcy48JT1uTmFtZSh0YS5FbnRpdHlDbGFzcyklPiA9ICh2ICYmIHYubGVuZ3RoKT92WzBdOm5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4ob3B0aW9ucyk7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZighcmV0LmRzZXQpIHJldC5kc2V0ICs9IGBcbmlmKHR5cGVvZihvYmopPT09Im9iamVjdCIpIE9iamVjdC5rZXlzKG9iaikuZmlsdGVyKGZ1bmN0aW9uKGspe3JldHVybiAhay5zdGFydHNXaXRoKCdfXycpICYmIFsnc3lzX2lkJywgJ0lkJywgJ09QRVJBVE9SUyddLmluZGV4T2Yoayk8MCAmJiB0eXBlb2YoX3RvU2V0W2tdKT09PSd1bmRlZmluZWQnICYmICFBcnJheS5pc0FycmF5KG9ialtrXSk7fSkuZm9yRWFjaChmdW5jdGlvbihrKXtfdG9TZXRba10gPSAke19mKCJvYmpba10iLCAibnVsbCIpfTsgaWYoX3RvU2V0W2tdICYmIF90b1NldFtrXS5fX2NsYXNzKXtfdG9TZXRba10gPSBfdG9TZXRba11bY29uZmlnW190b1NldFtrXS5fX2NsYXNzXS5pZEZpZWxkIHx8ICdJZCddOyB9IGdyLnNldFZhbHVlKGssIF90b1NldFtrXSApOyB9KVxuYDsNCg0KICAgICAgICAgICAgcmV0LmNvZGUgKz0gYCR7T2JqZWN0LnZhbHVlcyhyZXQuZGVwcykuam9pbignXG4nKX1mdW5jdGlvbiBzYXZlPCU9bk5hbWUoYyklPihvYmosIHJlZnMsIHNvdXJjZSwgZ3Ipe3JlZnMgPSByZWZzIHx8IHt9OyAvKnRoaXMuKi9jb25maWcuc2F2ZV8kezwlPV9uQ29kZSgpJT59ID0gc2F2ZTwlPW5OYW1lKGMpJT47IC8qdGhpcy4qL2NvbmZpZy48JT1uTmFtZShjKSU+ID0gLyp0aGlzLiovY29uZmlnLjwlPW5OYW1lKGMpJT4gfHwge307IC8qdGhpcy4qL2NvbmZpZy5faWRNYXAgPSAvKnRoaXMuKi9jb25maWcuX2lkTWFwIHx8IFtdOyB2YXIgX3RvU3RyaW5nID0gc291cmNlICsgJ1snICsgKHJlZnNbc291cmNlXS5zeXNfaWQpICsgJ109PiBzYXZlPCU9bk5hbWUoYyklPignOyBpZih0eXBlb2Yob2JqKT09PSdzdHJpbmcnICYmIG9iai5sZW5ndGg+PTMyKXt2YXIgcmV0ID0ge307IHJldFsvKnRoaXMuKi9jb25maWcuPCU9bk5hbWUoYyklPi5pZEtleSB8fCAic3lzX2lkIl09b2JqOyBncy5pbmZvKF90b1N0cmluZyArICcpOiBvYmogaXMgdXVpZCwgcmV0dXJuaW5nIHsnK29iaisnfScpOyByZXR1cm4gcmV0O30gaWYoIW9iaiAmJiAhZ3Ipe2dzLmluZm8oX3RvU3RyaW5nICsgJyk6IG9iaiBpcyBudWxsJyk7IHJldHVybiBudWxsO30gJHtyZXQuaWRUb1N0cmluZ30gdmFyIGJTYXZlID0gIS8qdGhpcy4qL2NvbmZpZy48JT1uTmFtZShjKSU+LnJlYWRPbmx5OyBpZighZ3IpeyBnciA9IG5ldyBHbGlkZVJlY29yZCgnJHs8JT1fbkNvZGUoKSU+fScpO1xuJHtyZXQuSWR9XG4ke3JldC52YXJzfVxuaWYoIWdyLmlzVmFsaWRSZWNvcmQoKSl7Z3IgPSBuZXcgR2xpZGVSZWNvcmQoJyR7PCU9X25Db2RlKCklPn0nKTsgdmFyIF90b1F1ZXJ5PXt9OyAke3JldC5xdWVyeX0gXG5fdG9TdHJpbmcgKz0gJyk6ICc7IGlmKG9iai5fX2tleXMgJiYgKGJTYXZlIHx8IGNvbmZpZy48JT1uTmFtZShjKSU+LnJlYWRPbmx5KSl7aWYoX3RvUXVlcnkuX19lbmNvZGVkUXVlcnkpe2dyLmFkZEVuY29kZWRRdWVyeShfdG9RdWVyeS5fX2VuY29kZWRRdWVyeSk7fWVsc2V7b2JqLl9fa2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGspe2dyLmFkZFF1ZXJ5KGssIF90b1F1ZXJ5W2tdIHx8IG9ialtrXSk7fSk7fSBnci5zZXRMaW1pdCgxKTsgaWYoIWdyLmdldEVuY29kZWRRdWVyeSgpKSBnci5hZGRRdWVyeSgnc3lzX2lkJywgJy0xJyk7IGdzLmluZm8oX3RvU3RyaW5nICsgJ0VuY29kZWQgUXVlcnk6ICcgKyBnci5nZXRFbmNvZGVkUXVlcnkoKSk7IGdyLnF1ZXJ5KCk7aWYoIWdyLm5leHQoKSl7Z3MuaW5mbyhfdG9TdHJpbmcgKyAnbm90IGZvdW5kJyk7fWVsc2V7Z3MuaW5mbyhfdG9TdHJpbmcgKyAnZm91bmQgWyR7PCU9X25Db2RlKCklPn0vJyArIGdyLnN5c19pZCArICddIC0gaXMgdmFsaWQ6ICcgKyBnci5pc1ZhbGlkUmVjb3JkKCkpOyBvYmouSWQgPSBnci5zeXNfaWQudG9TdHJpbmcoKTsgaWYob2JqLl9fcmV1c2VkKXsvKmdzLmluZm8oX3RvU3RyaW5nICsgJzogX19yZXVzZWQ6IFskezwlPV9uQ29kZSgpJT59LycgKyBnci5zeXNfaWQgKyAnXSAtIGlzIHZhbGlkOiAnICsgZ3IuaXNWYWxpZFJlY29yZCgpKTsgKi9yZXR1cm4gZ3I7fSB9fX19ZWxzZXtiU2F2ZT1mYWxzZTt9IGlmKGJTYXZlICYmICFnci5pc1ZhbGlkUmVjb3JkKCkpe2dzLmluZm8oX3RvU3RyaW5nICsgJ2luc2VydGluZy4uLicpOyBnciA9IG5ldyBHbGlkZVJlY29yZCgnJHs8JT1fbkNvZGUoKSU+fScpOyBnci5pbml0aWFsaXplKCk7ICR7cmV0Lm5ld1VVSUR9IGlmKGJTYXZlICYmIG9iail7dmFyIF90b1NldCA9IHt9OyAvKnNldCovJHtyZXQuc2V0fSAvKmVzZXQqLyR7cmV0LmVzZXR9ICAke3JldC5kc2V0fSBpZigvKnRoaXMuKi9jb25maWcuPCU9bk5hbWUoYyklPi5Ob1dvcmtmbG93KSBnci5zZXRXb3JrZmxvdyhmYWxzZSk7IGlmKC8qdGhpcy4qL2NvbmZpZy48JT1uTmFtZShjKSU+LkxvZ1NldCkgZ3MuaW5mbyhfdG9TdHJpbmcgKyAnX3RvU2V0OiAnICsgSlNPTi5zdHJpbmdpZnkoX3RvU2V0KSk7IH1lbHNlIGlmKCFnci5pc1ZhbGlkUmVjb3JkKCkpe2dzLmluZm8oX3RvU3RyaW5nICsgJ1tiU2F2ZT0nICsgYlNhdmUgKyAnXSAtIHJldHVybmluZyBudWxsLicpOyByZXR1cm4gbnVsbDt9XG5pZighYlNhdmUgfHwgZ3IudXBkYXRlKCkpeyBpZihmYWxzZSAmJiBiU2F2ZSl7Y29uZmlnLl9pZE1hcC5wdXNoKHt0YWJsZTogJyR7PCU9X25Db2RlKCklPn0nLCBzeXNfaWQ6IGdyLnN5c19pZC50b1N0cmluZygpLCBrZXlzOiBvYmouX19rZXlzLm1hcChmdW5jdGlvbihrKXtyZXR1cm4ge2s6IGssIHY6IF90b1F1ZXJ5W2tdIHx8IG9ialtrXX07fSl9KTt9ICR7cmV0LnRhc31cbmdzLmluZm8oX3RvU3RyaW5nICsgJ1tiU2F2ZT0nICsgYlNhdmUgKyAnXSAtIHJldHVybmluZyAnICsgZ3Iuc3lzX2lkKTsgcmV0dXJuIGdyO319XG5gOw0KDQogICAgICAgICAgICAvKnJldHVybiBPYmplY3QudmFsdWVzKE9iamVjdC5hc3NpZ24oe30sIC4uLnJldC5jb2RlLnNwbGl0KCdmdW5jdGlvbiBzYXZlJykuZmlsdGVyKHMgPT4gcykuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggLSBiLmxlbmd0aCkubWFwKHMgPT4gKHtbcy5zcGxpdCgnKG9iaiwgcmVmcywgc291cmNlLCBnciknKVswXV06ICdmdW5jdGlvbiBzYXZlJytzfSkpKSkuam9pbignXG4nKTsgKi8NCiAgICAgICAgICAgIHJldHVybiByZXQuY29kZTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3RvU05RdWVyeSclPihmaWVsZHMsIG9ianMsIGJVUkwpew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7fSwgew0KICAgICAgICAgICAgT1BFUkFUT1JTOiB0cnVlLA0KICAgICAgICAgICAgLy9fbWFwOiB0cnVlLA0KICAgICAgICAgICAgSWQ6IChvYmosIGlkQ29kZSwgdikgPT4gb2JqW2lkQ29kZV0gPSB2LA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSB2P3YuPCU9bU5hbWUlPigpOm51bGw7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzRGF0ZSl7JT4NCiAgICAgICAgICAgICAgICBsZXQgZCA9IGAke3YuZ2V0RnVsbFllYXIoKX0tJHsoJzAnKyh2LmdldE1vbnRoKCkrMSkpLnNsaWNlKC0yKX0tJHt2LmdldERhdGUoKX1gOw0KICAgICAgICAgICAgICAgIGxldCB0ID0gYCR7di5nZXRIb3VycygpfToke3YuZ2V0TWludXRlcygpfToke3YuZ2V0U2Vjb25kcygpfWA7DQogICAgICAgICAgICAgICAgaWYoKHYuZ2V0SG91cnMoKT09MCAmJiB2LmdldE1pbnV0ZXMoKT09MCAmJiB2LmdldFNlY29uZHMoKT09MCkgfHwgdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09Jz0nIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKXsNCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSBgT04ke2R9QGphdmFzY3JpcHQ6Z3MuZGF0ZUdlbmVyYXRlKCcke2R9Jywnc3RhcnQnKUBqYXZhc2NyaXB0OmdzLmRhdGVHZW5lcmF0ZSgnJHtkfScsJ2VuZCcpYDsNCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLl88JT1uTmFtZShlYSklPl9jb29wIT09J0JFVFdFRU4nKXsNCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSBgamF2YXNjcmlwdDpncy5kYXRlR2VuZXJhdGUoJyR7ZH0nLCAnJHt0fScpYDsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSBgamF2YXNjcmlwdDpncy5kYXRlR2VuZXJhdGUoJyR7ZH0nLCAnJHt0fScpQGphdmFzY3JpcHQ6Z3MuZGF0ZUdlbmVyYXRlKCcke2R9JywgJyR7dH0nKWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyU+DQogICAgICAgICAgICAgICAgb2JqLk9QRVJBVE9SUy48JT1uTmFtZShlYSklPiA9ICc9JzsNCiAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHY7DQogICAgICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSB2Ow0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgICAgIA0KICAgICAgICBPYmplY3Qua2V5cyhyZXQuT1BFUkFUT1JTIHx8IHt9KS5maWx0ZXIoayA9PiB0eXBlb2YocmV0W2tdKSE9PSd1bmRlZmluZWQnICYmIHR5cGVvZihyZXRba10pIT09J29iamVjdCcpLmZvckVhY2goayA9PiByZXRba10gPSByZXQuT1BFUkFUT1JTW2tdICsgcmV0W2tdKTsNCg0KICAgICAgICBkZWxldGUgcmV0Lk9QRVJBVE9SUzsNCiAgICAgICAgT2JqZWN0LmtleXMocmV0KS5maWx0ZXIoayA9PiAhU3RyaW5nKHJldFtrXSkubGVuZ3RoKS5mb3JFYWNoKGsgPT4gZGVsZXRlIHJldFtrXSk7DQoNCiAgICAgICAgcmV0ID0gRG90T2JqZWN0LmRvdChyZXQpOw0KDQogICAgICAgIC8vIGF2b2lkIHNlbmRpbmcgd2l0aCBubyBjb21wYXJpc29uIG9wZXJhdG9ycw0KICAgICAgICBPYmplY3Qua2V5cyhyZXQpLmZpbHRlcihrID0+ICFbJz4nLCAnPCcsICdCRVRXRUVOJywgJ09OJywgJyEnLCAnPScsICdTVEFSVFNXSVRIJywgJ0xJS0UnXS5zb21lKHMgPT4gU3RyaW5nKHJldFtrXSkuc3RhcnRzV2l0aChzKSkpLmZvckVhY2goayA9PiByZXRba10gPSAodGhpc1tgXyR7a31fY29vcGBdIHx8ICdTVEFSVFNXSVRIJykgKyByZXRba10pOw0KICAgICAgICANCiAgICAgICAgPCU9bG9nKCklPnJldCk7DQoNCiAgICAgICAgaWYoYlVSTCkgcmV0ID0gT2JqZWN0LmVudHJpZXMocmV0IHx8IHt9KS5tYXAocCA9PiBgJHtwWzBdfSR7cFsxXX1gKS5qb2luKCJeIik7DQogICAgICAgIA0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCjwlIH0lPg0KDQoJPCU9bU5hbWU9J19fZXhwb3J0JyU+KG9iaiwgb3B0aW9ucywgZnVuLCAuLi5mQXJncykgew0KCSAgICB0cnl7DQogICAgCSAgICBpZighb2JqKSByZXR1cm4gdGhpczsNCiAgICAJICAgIA0KICAgIAkgICAgaWYob3B0aW9ucy5PUEVSQVRPUlMpIG9iai5PUEVSQVRPUlMgPSBvYmouT1BFUkFUT1JTIHx8IHt9Ow0KICAgIAkgICAgDQogICAgCSAgICA8JSAvKiBJTVBPUlRBTlQ6IHRoaXMuSWQ9PXRoaXMuSWQgbWFrZXMgc3VyZSB0aGUgSWQgaXMgZml4ZWQgZm9yIHRoZSB0b29sLCBub3QgZ2V0dGluZyBnZW5lcmF0ZWQgZXZlcnkgdGltZSB3ZSBjYWxsIGl0ICovICU+DQogICAgCSAgICANCiAgICAJICAgIGxldCBlYUNvZGVzID0gew0KICAgIAkgICAgICAgIGV4cG9ydGVyOiAiIiwNCiAgICAJICAgICAgICBJZDogIiIsDQogICAgCSAgICB9Ow0KICAgIAkgICAgDQogICAgCQlpZiAoIW9wdGlvbnMuVW5pcXVlICYmIChvcHRpb25zLkZ1bGwgfHwgdGhpcy5fX3N5bmNfb24oKSB8fCB0aGlzLklkPT10aGlzLklkKSkgdGhpcy5fX29wdGlvbnMoIklkIiwgb2JqLCBlYUNvZGVzLklkID0gKG9wdGlvbnMuX21hcD90aGlzLl9uQ29kZSgnSWQnKTonSWQnKSwgdGhpcy5JZCwgdGhpcywgb3B0aW9ucywgZnVuKTsNCiAgICAJCQ0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYoIW9wdGlvbnMuVW5pcXVlIHx8IChvcHRpb25zLlVuaXF1ZSAmJiA8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pKSB0aGlzLl9fb3B0aW9ucygiPCU9bk5hbWUoZWEpJT4iLCBvYmosIGVhQ29kZXMuPCU9bk5hbWUoZWEpJT4gPSAob3B0aW9ucy5fbWFwPzwlPV9uQ29kZShlYSklPjo8JV92Q29kZShlYSklPiksIHRoaXMuPCU9bk5hbWUoZWEpJT4oKSwgdGhpcywgb3B0aW9ucywgZnVuLCAiPCU9X2NGaWVsZChlYSklPiIpOw0KPCUgfSklPg0KDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSAmJiBlYS5Jc1VuaXF1ZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5VbmlxdWUgfHwgKG9wdGlvbnMuVW5pcXVlICYmIDwldmFsdWVPZihlYS5Jc1VuaXF1ZSklPikpIHRoaXMuX19vcHRpb25zKCI8JT1uTmFtZShlYSklPiIsIG9iaiwgZWFDb2Rlcy48JT1uTmFtZShlYSklPiA9IChvcHRpb25zLl9tYXA/PCU9X25Db2RlKGVhKSU+OjwlX3ZDb2RlKGVhKSU+KSwgdGhpcy48JT1uTmFtZShlYSklPigpLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKGVhKSU+Iik7DQo8JSB9KSU+DQoNCjwlIGMuRW50aXR5RmllbGRzLmZvckVhY2goZWYgPT4geyU+DQogICAgICAgICAgICBpZiAoIW9wdGlvbnMuVW5pcXVlIHx8IChvcHRpb25zLlVuaXF1ZSAmJiA8JXZhbHVlT2YoZWYuSXNVbmlxdWUpJT4pKSB0aGlzLl9fb3B0aW9ucygiZWZfPCU9bk5hbWUoZWYpJT4iLCBvYmosIGVhQ29kZXMuZWZfPCU9bk5hbWUoZWYpJT4gPSAob3B0aW9ucy5fbWFwPzwlPV9uQ29kZShlZiklPjo8JV92Q29kZShlZiklPiksIDwldmFsdWVPZihlZi5WYWx1ZSklPiwgdGhpcywgb3B0aW9ucywgZnVuKTsNCjwlIH0pJT4NCg0KCQkgICAgPCUgdW5SZWN1cnNlKCdvYmonLCAnZnVuJywgJ2ZBcmdzJywgJ2lmKHR5cGVvZihvcHRpb25zLmV4cG9ydGVyKT09PSJmdW5jdGlvbiIpIG9wdGlvbnMuZXhwb3J0ZXIodiknKSU+DQoNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlICYmICFlYS5Jc1VuaXF1ZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5VbmlxdWUpIHRoaXMuX19vcHRpb25zKCI8JT1uTmFtZShlYSklPiIsIG9iaiwgZWFDb2Rlcy48JT1uTmFtZShlYSklPiA9IChvcHRpb25zLl9tYXA/PCU9X25Db2RlKGVhKSU+OjwlX3ZDb2RlKGVhKSU+KSwgdGhpcy48JT1uTmFtZShlYSklPigpLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKGVhKSU+Iik7DQo8JSB9KSU+DQoNCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5VbmlxdWUpIHRoaXMuX19vcHRpb25zKCJfVEhJUyIsIG9iaiwgZWFDb2Rlcy5fVEhJUyA9IChvcHRpb25zLl9tYXA/dGhpcy5fbkNvZGUoJ19USElTJyk6Il9USElTIiksIHRoaXMuX1RISVMsIHRoaXMsIG9wdGlvbnMsIGZ1bik7DQoNCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHtsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgaWYgKCFvcHRpb25zLlVuaXF1ZSkgdGhpcy5fX29wdGlvbnMoIjwlPXRhTmFtZSU+Iiwgb2JqLCBlYUNvZGVzLjwlPXRhTmFtZSU+ID0gKG9wdGlvbnMuX21hcD88JT1fbkNvZGUodGEsIHRydWUpJT46IjwlPXRhTmFtZSU+IiksIHRoaXMuPCU9dGFOYW1lJT4oKSwgdGhpcywgb3B0aW9ucywgZnVuLCAiPCU9X2NGaWVsZCh0YSklPiIpOw0KPCUgfSklPg0KDQogICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5maWx0ZXIoayA9PiB0eXBlb2Yob3B0aW9uc1trXSk9PT0nZnVuY3Rpb24nICYmICFPYmplY3Qua2V5cyhlYUNvZGVzKS5pbmNsdWRlcyhrKSkuZm9yRWFjaChrID0+IHRoaXMuX19vcHRpb25zKGssIG9iaiwgaywgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4pKTsNCiAgICAgICAgDQogICAgICAgICAgICA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPltmdW5dID0gPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bZnVuXSB8fCB7fTsNCiAgICAgICAgICAgICg8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPltmdW5dLkN5Y2xpYyB8fCBbXSkuZm9yRWFjaChuID0+IG4uX2Nbbi5lYUZpZWxkXShuLl9jW24uZWFGaWVsZF0oKS5fdG9IYXNoKG51bGwsIHtub0NvZGU6IHRydWUsIG9ubHlVbmlxdWU6IHRydWUsIG5vQXJnczogdHJ1ZSwgX21hcDogb3B0aW9ucy5fbWFwfSwgZnVuKSkpOw0KICAgICAgICAgICAgPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bZnVuXS5DeWNsaWMgPSBbXTsgLy8/Pw0KICAgICAgICAgICAgDQogICAgCQlyZXR1cm4gb2JqOw0KICAgIAl9Y2F0Y2goZXgpew0KICAgIAkgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgIAl9DQoJfQ0KCQ0KCTwlPW1OYW1lPSdfX29wdGlvbnMnJT4oZmllbGQsIG9iaiwgZWFDb2RlLCBlYU9iaiwgX3RoaXM9dGhpcywgb3B0aW9ucz17fSwgZnVuLCBlYUZpZWxkKXsNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihmaWVsZCwgb2JqLCBlYUNvZGUsIGVhT2JqLCBfdGhpcywgb3B0aW9ucywgZnVuLCBlYUZpZWxkKTsNCjwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKG9wdGlvbnMuX2ZpZWxkcyAmJiAhb3B0aW9ucy5fZmllbGRzLmluY2x1ZGVzKGZpZWxkKSkgcmV0dXJuOw0KICAgICAgICAgICAgaWYoIW9iaikgcmV0dXJuOw0KICAgICAgICAgICAgaWYodHlwZW9mKG9wdGlvbnNbZmllbGRdKSE9PSJmdW5jdGlvbiIpew0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT5gJHtmdW59Lm9wdGlvbnMuJHtmaWVsZH0gaXMgbm90IGEgZnVuY3Rpb25gKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihlYU9iaikhPT0ndW5kZWZpbmVkJyAmJiAhb3B0aW9ucy5OdWxsKXsNCiAgICAgICAgICAgICAgICBpZihmaWVsZCE9J0lkJyAmJiB0eXBlb2YoX3RoaXNbZmllbGRdKT09PSdmdW5jdGlvbicgJiYgIV90aGlzWydfJytmaWVsZCsnX3NldCddKSByZXR1cm47DQogICAgICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShlYU9iaikgJiYgdHlwZW9mKGVhT2JqLmxlbmd0aCkhPT0ndW5kZWZpbmVkJykgZWFPYmogPSBlYU9iai5maWx0ZXIodiA9PiB2KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIW9wdGlvbnMuTnVsbCAmJiBBcnJheS5pc0FycmF5KGVhT2JqKSAmJiAhZWFPYmoubGVuZ3RoKSByZXR1cm47DQoNCiAgICAgICAgICAgIGxldCBfcmV0ID0gb3B0aW9uc1tmaWVsZF0ob2JqLCBlYUNvZGUsIGVhT2JqLCBfdGhpcyk7DQogICAgICAgICAgICBpZihvcHRpb25zLk9QRVJBVE9SUyAmJiBfdGhpc1snXycgKyBmaWVsZCArICdfY29vcCddKSBvYmouT1BFUkFUT1JTID0gT2JqZWN0LmFzc2lnbihvYmouT1BFUkFUT1JTIHx8IHt9LCB7W2ZpZWxkXTogX3RoaXNbJ18nICsgZmllbGQgKyAnX2Nvb3AnXX0pOw0KDQogICAgICAgICAgICBpZighb3B0aW9ucy5DeWNsaWMgJiYgZWFGaWVsZCAmJiBvYmogJiYgb2JqLkVudGl0eUNsYXNzICYmIHR5cGVvZihvYmpbZmllbGRdKT09PSdmdW5jdGlvbicpew0KICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+W2Z1bl0gPSA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPltmdW5dIHx8IHt9Ow0KICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+W2Z1bl0uQ3ljbGljID0gPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bZnVuXS5DeWNsaWMgfHwgW107DQogICAgICAgICAgICAgICAgbGV0IF9jeWNsZXMgPSBvYmpbZmllbGRdKCk7DQogICAgICAgICAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkoX2N5Y2xlcykpIF9jeWNsZXMgPSBbX2N5Y2xlc107DQogICAgICAgICAgICAgICAgX2N5Y2xlcyA9IF9jeWNsZXMuZmlsdGVyKF9jID0+IF9jICYmIHR5cGVvZihfY1tlYUZpZWxkXSk9PT0nZnVuY3Rpb24nICYmIF9jWydfJyArIGVhRmllbGQgKyAnX3NldCddICYmIG9iai5fc2FtZUVudGl0eShfY1tlYUZpZWxkXSgpKSkubWFwKF9jID0+ICh7DQogICAgICAgICAgICAgICAgICAgIC8qbWFyayBfY1tlYUZpZWxkXV9zZXQgdG8gbnVsbCBpbnN0ZWFkKi8NCiAgICAgICAgICAgICAgICAgICAgX2MsDQogICAgICAgICAgICAgICAgICAgIGVhRmllbGQsDQogICAgICAgICAgICAgICAgfSkpOw0KICAgICAgICAgICAgICAgIGlmKF9jeWNsZXMubGVuZ3RoKSA8JT13YXJuKCklPmZ1biArICIvX2N5Y2xlcyIsIF9jeWNsZXMpOw0KICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+W2Z1bl0uQ3ljbGljLnB1c2goLi4uX2N5Y2xlcyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKG9wdGlvbnMuX21hcCkgX3RoaXMuX21hcChmaWVsZCwgdHlwZW9mKGVhT2JqKT09PSd1bmRlZmluZWQnLCBmdW4sIHR5cGVvZihlYU9iaik9PT0ndW5kZWZpbmVkJz9vYmo6ZWFPYmosIHR5cGVvZihlYU9iaik9PT0ndW5kZWZpbmVkJz9fdGhpczpvYmosIGVhQ29kZSk7DQoNCiAgICAgICAgICAgIHJldHVybiBfcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZnVuLCBmaWVsZCwgZXgpOw0KICAgICAgICB9DQo8JSB9JT4NCgl9DQoJDQoJPCU9bU5hbWU9J19faW1wb3J0JyU+KG9iaiwgb3B0aW9ucywgZnVuLCAuLi5mQXJncykgew0KICAgICAgICBpZih0eXBlb2Yob2JqKSE9PSdvYmplY3QnKXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+YCR7ZnVufTogTm90IGFuIG9iamVjdDogJHt0eXBlb2Yob2JqKX1gLCBvYmopOw0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH0NCgkgICAgDQogICAgICAgIGxldCBlYUNvZGVzID0ge307DQoNCgkJdGhpcy5fX29wdGlvbnMoIklkIiwgb2JqLCBlYUNvZGVzLklkID0gKG9wdGlvbnMuX21hcD90aGlzLl9uQ29kZSgnSWQnKTonSWQnKSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4pOw0KCQkNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiAhZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgdGhpcy5fX29wdGlvbnMoIjwlPW5OYW1lKGVhKSU+Iiwgb2JqLCBlYUNvZGVzLjwlPW5OYW1lKGVhKSU+ID0gKG9wdGlvbnMuX21hcD88JT1fbkNvZGUoZWEpJT46PCVfdkNvZGUoZWEpJT4pLCB1bmRlZmluZWQsIHRoaXMsIG9wdGlvbnMsIGZ1biwgIjwlPV9jRmllbGQoZWEpJT4iKTsNCjwlIH0pJT4NCg0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUgJiYgZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIHRoaXMuX19vcHRpb25zKCI8JT1uTmFtZShlYSklPiIsIG9iaiwgZWFDb2Rlcy48JT1uTmFtZShlYSklPiA9IChvcHRpb25zLl9tYXA/PCU9X25Db2RlKGVhKSU+OjwlX3ZDb2RlKGVhKSU+KSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKGVhKSU+Iik7DQo8JSB9KSU+DQoNCgkJPCUgdW5SZWN1cnNlKCd0aGlzJywgJ2Z1bicsICdmQXJncycsICdpZih0eXBlb2Yob3B0aW9ucy5pbXBvcnRlcik9PT0iZnVuY3Rpb24iKSBvcHRpb25zLmltcG9ydGVyKHYpJyklPg0KDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSAmJiAhZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIHRoaXMuX19vcHRpb25zKCI8JT1uTmFtZShlYSklPiIsIG9iaiwgZWFDb2Rlcy48JT1uTmFtZShlYSklPiA9IChvcHRpb25zLl9tYXA/PCU9X25Db2RlKGVhKSU+OjwlX3ZDb2RlKGVhKSU+KSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKGVhKSU+Iik7DQo8JSB9KSU+DQoNCgkJdGhpcy5fX29wdGlvbnMoIl9USElTIiwgb2JqLCBlYUNvZGVzLl9USElTID0gKG9wdGlvbnMuX21hcD90aGlzLl9uQ29kZSgnX1RISVMnKTonX1RISVMnKSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4pOw0KDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7DQogICAgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7DQolPg0KICAgICAgICB0aGlzLl9fb3B0aW9ucygiPCU9dGFOYW1lJT4iLCBvYmosIGVhQ29kZXMuPCU9dGFOYW1lJT4gPSAob3B0aW9ucy5fbWFwPzwlPV9uQ29kZSh0YSwgdHJ1ZSklPjoiPCU9dGFOYW1lJT4iKSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKHRhKSU+Iik7DQo8JSB9KSU+DQoNCiAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZmlsdGVyKGsgPT4gdHlwZW9mKG9wdGlvbnNba10pPT09J2Z1bmN0aW9uJyAmJiAhT2JqZWN0LmtleXMoZWFDb2RlcykuaW5jbHVkZXMoaykpLmZvckVhY2goayA9PiB0aGlzLl9fb3B0aW9ucyhrLCBvYmosIGssIHVuZGVmaW5lZCwgdGhpcywgb3B0aW9ucywgZnVuKSk7DQoNCgkJcmV0dXJuIHRoaXM7DQoJfQ0KDQo8JSBpZihtYWluQ2xhc3MoWydOZW80aiddKSl7JT4NCiAgICA8JT1tTmFtZT0nX3RvQ3lUYWJsZSclPigpew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7Y3FsOiBgDQpDUkVBVEUgQ09OU1RSQUlOVCBJRiBOT1QgRVhJU1RTIEZPUiAobzokezwlPV9uQ29kZSgpJT59KSBSRVFVSVJFIG8uJHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9IElTIFVOSVFVRTsNCkNSRUFURSBDT05TVFJBSU5UIElGIE5PVCBFWElTVFMgRk9SIChvOiR7PCU9X25Db2RlKCklPn0pIFJFUVVJUkUgby4ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0gSVMgTk9UIE5VTEw7DQogICAgICAgIGB9LCB7DQogICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICAiPCU9bk5hbWUoZWEpJT4iOiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICBvYmouY3FsICs9IHY/di48JT1tTmFtZSU+KCk6Jyc7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzVW5pcXVlKXslPg0KICAgICAgICAgICAgICAgIG9iai5jcWwgKz0gYENSRUFURSBDT05TVFJBSU5UIElGIE5PVCBFWElTVFMgRk9SIChvOiR7PCU9X25Db2RlKCklPn0pIFJFUVVJUkUgby4ke2VhQ29kZX0gSVMgVU5JUVVFOw0KYA0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouY3FsICs9IHYubWFwKF92ID0+IF92LjwlPW1OYW1lJT4oKSkuam9pbignXG4nKSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQoNCiAgICAgICAgPCU9bG9nKCklPnJldC5jcWwpOw0KICAgICAgICByZXR1cm4gcmV0LmNxbDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b0N5TWVyZ2UnJT4oZmllbGRzLCBiUmF3KXsNCiAgICAgICAgbGV0IG9iaiA9IHRoaXMuX3RvREJPYmplY3QoZmllbGRzLCB0cnVlKTsNCiAgICAgICAgbGV0IHVrZXlzID0gW107DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLklzVW5pcXVlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICBpZig8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pIHVrZXlzLnB1c2goPCU9X25Db2RlKGVhKSU+KTsNCiAgICA8JSB9KSU+DQogICAgICAgIGxldCBjcWwgPSBgOiR7PCU9X25Db2RlKCklPn0ge2AgKyBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+IHVrZXlzLmluY2x1ZGVzKGspKS5tYXAoayA9PiBrICsgIjogIiArIG9ialtrXSkuam9pbignLCAnKSArIGB9KWA7DQogICAgICAgIA0KICAgICAgICBpZighYlJhdyl7DQogICAgICAgICAgICBsZXQgbWF0Y2ggPSAnXG5NQVRDSCAobycgKyBjcWw7DQogICAgICAgICAgICBjcWwgPSAnTUVSR0UgKG8nICsgY3FsOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgb25TZXQgPSBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+ICF1a2V5cy5pbmNsdWRlcyhrKSkubWFwKGsgPT4gIm8uIiArIGsgKyAiPSIgKyBvYmpba10pLmpvaW4oJywgJykNCiAgICAgICAgICAgIGNxbCArPSAnXG5PTiBDUkVBVEUgU0VUICcgKyBvblNldCArICdcbk9OIE1BVENIIFNFVCAnICsgb25TZXQ7DQogICAgICAgICAgICBjcWwgKz0gJ1xuUkVUVVJOIG87JzsNCg0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYodGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSBjcWwgKz0gbWF0Y2ggKyAnLCAnICsgdGhpcy48JT1uTmFtZShlYSklPigpLjwlPW1OYW1lJT4obnVsbCwgdHJ1ZSkucmVwbGFjZSgnKDonLCAnKDwlPW5OYW1lKGVhKSU+OicpICsgJyBNRVJHRSAobyktWzo8JT1uTmFtZShjKSU+XzwlPW5OYW1lKGVhKSU+XS0+KDwlPW5OYW1lKGVhKSU+KTsnOw0KICAgIDwlIH0pJT4NCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgICBjcWwgPSAnKCcgKyBjcWw7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIDwlPWxvZygpJT5jcWwpOw0KICAgICAgICByZXR1cm4gY3FsOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9DeVF1ZXJ5JyU+KGZpZWxkcywgb2Jqcyl7DQogICAgICAgIGxldCBzcWwgPSAiTUFUQ0ggIjsNCiAgICAgICAgDQogICAgICAgIGxldCB0UHJlZiA9IGAke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT4udG9Mb3dlckNhc2UoKX0ke3RoaXMuX1EoKX1gOw0KDQogICAgICAgIGxldCBoZWFkZXIgPSB0aGlzLl90b1NlbGVjdEhlYWRlcihmaWVsZHMpOw0KDQogICAgICAgIHNxbCArPSBgICgke3RQcmVmfToke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT59JHt0aGlzLl9RKCl9KWA7DQogICAgICAgIA0KICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXIuam9pbnMpLmZvckVhY2goayA9PiBzcWwgKz0gYCBPUFRJT05BTCBNQVRDSCAoJHt0aGlzLl9RKCl9JHtrfSR7dGhpcy5fUSgpfToke3RoaXMuX1EoKX0ke2hlYWRlci5qb2luc1trXS50YWJsZX0ke3RoaXMuX1EoKX0pIE9QVElPTkFMIE1BVENIICgke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT4udG9Mb3dlckNhc2UoKX0ke3RoaXMuX1EoKX0pLVs6JHt0aGlzLl9RKCl9JHtoZWFkZXIuam9pbnNba10udGFibGV9XyR7a30ke3RoaXMuX1EoKX1dLT4oJHt0aGlzLl9RKCl9JHtrfSR7dGhpcy5fUSgpfSlgKTsNCiAgICAgICAgDQoNCiAgICAgICAgLy9zcWwgKz0gT2JqZWN0LnZhbHVlcyhoZWFkZXIuZmllbGRzKS5tYXAoZiA9PiBgJHt0UHJlZn0uJHtmfWApLmpvaW4oJywgJyk7DQogICAgICAgIC8vT2JqZWN0LmtleXMoaGVhZGVyLmpvaW5zKS5mb3JFYWNoKGsgPT4gc3FsICs9ICIsICIgKyBPYmplY3QudmFsdWVzKGhlYWRlci5qb2luc1trXS5maWVsZHMpLm1hcChmID0+IGAke3RoaXMuX1EoKX0ke2hlYWRlci5qb2luc1trXS50YWJsZX1fJHtrfSR7dGhpcy5fUSgpfS4ke2Z9IGFzICR7dGhpcy5fUSgpfSR7a30uJHtmLnJlcGxhY2UodGhpcy5fUSgpLCAnJyl9YCkuam9pbignLCAnKSk7DQogICAgICAgIA0KICAgICAgICBpZih0aGlzLl9fZmllbGRBZ2dyZWdhdGVzKXsNCiAgICAgICAgICAgIC8vIHtmaWVsZDogZnVuY3Rpb259DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5Jc1RleHQgJiYgIWVhLklzSW1hZ2UgJiYgIWVhLklzRmlsZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICBpZih0aGlzLl9fZmllbGRBZ2dyZWdhdGVzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7c3FsPT0oJ3NlbGVjdCAnKT8nJzonLCd9ICR7dGhpcy5fX2ZpZWxkQWdncmVnYXRlcy48JT1uTmFtZShlYSklPn0oJHt0aGlzLl9RKCl9JHs8JT1fbkNvZGUoZWEpJT59JHt0aGlzLl9RKCl9KWA7DQogICAgPCUgfSklPg0KICAgICAgICB9DQoNCiAgICAgICAgc3FsICs9IGAgd2hlcmUgMT0xYDsNCg0KICAgICAgICBzcWwgPSB0aGlzLl9fZXhwb3J0KHtzcWw6IHNxbH0sIHsNCiAgICAgICAgICAgIF9maWVsZHM6ICh0aGlzLl9fc3luY19vbigpIHx8IHRoaXMuSWQ9PXRoaXMuSWQpP1snSWQnXTp1bmRlZmluZWQsDQogICAgICAgICAgICBOdWxsOiB0cnVlLA0KICAgICAgICAgICAgX1RISVM6IG9iaiA9PiB7DQogICAgICAgICAgICAgICAgaWYoIXRoaXMuX1RISVMgfHwgIXRoaXMuX1RISVMubGVuZ3RoKSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgIGFuZCAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gYCArICh0aGlzLl9USElTX2Nvb3AgfHwgIklOIikgKyAiICgiICsgdGhpcy5fVEhJUy5tYXAodCA9PiB0LjwlPW1OYW1lJT4odC5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpKSkuam9pbignIFVOSU9OIEFMTCAnKSArICIpIjsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBJZDogb2JqID0+IG9iai5zcWwgKz0gYCBhbmQgJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9PScke3RoaXMuSWR9J2AsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgbGV0IGNvb3AgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICAgICAgICAgIHN3aXRjaChjb29wKXsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiIT0iOg0KICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJOT1QgIjsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiPSI6DQogICAgICAgICAgICAgICAgICAgICAgICBjb29wID0gIiI7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIiI6DQogICAgICAgICAgICAgICAgICAgICAgICBjb29wID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKHYpew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICR7Y29vcH0gRVhJU1RTIHske3YuPCU9bU5hbWUlPigpfX1gOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICgke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSAke2Nvb3B9ICgwKSBPUiAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSBJUyBOVUxMKWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNUZXh0IHx8IGVhLklzSW1hZ2UgfHwgZWEuSXNGaWxlKXslPg0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICR7dFByZWZ9LiR7dGhpcy5fUSgpfSR7ZWFDb2RlfSR7dGhpcy5fUSgpfSBgICsgPCVpZihlYS5Jc0Jvb2wpeyU+Ij0iPCV9ZWxzZXslPih0aGlzLl88JT1uTmFtZShlYSklPl9jb29wIHx8ICJDT05UQUlOUyIpPCV9JT4gKyAiICI7DQogICAgICAgIDwlIH0lPg0KICAgICAgICANCiAgICAgICAgPCUgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICBpZih2ICYmIHYudG9JU09TdHJpbmcpew0KICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCd0eXBlJyk9PSdzcWxpdGUnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gInN0cmZ0aW1lKCclcycsICciICsgdi50b0lTT1N0cmluZygpICsgIicpIjsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICInIiArIHYudG9JU09TdHJpbmcoKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1N0cmluZyl7ICU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHYpPT09InN0cmluZyIpew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICInIiArICgodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09IkxJS0UiIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKT8iJSI6IiIpICsgdiArICgodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09IkxJS0UiIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKT8iJSI6IiIpICsgIiciOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih2KT09PSJib29sZWFuIil7DQogICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiciICsgKHY/IjEiOiIwIikgKyAiJyI7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgICAgICBpZih2ICYmIHYuRW50aXR5Q2xhc3Mpew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICIoIiArIHYuPCU9bU5hbWUlPigpICsgIikiOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICInIiArIHYgKyAiJyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9dGFOYW1lJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IHNxdWVyaWVzID0gKHYgfHwgW10pLmZpbHRlcih0ID0+IHQpLm1hcCh0ID0+IHQuPCU9bU5hbWUlPigiPCU9bk5hbWUodGEpJT4uaWQiKSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IGpPUCA9ICdVTklPTiBBTEwnOw0KICAgICAgICAgICAgICAgIGxldCBpbk9QID0gJ0lOJzsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBvYmouc3FsICs9IGBgOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSchPScgfHwgdGhpcy5fPCU9dGFOYW1lJT5fY29vcD09J05PVCBJTicpew0KICAgICAgICAgICAgICAgICAgICBpbk9QID0gJ05PVCBJTic7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5fPCU9dGFOYW1lJT5fY29vcD09Jz0nIHx8IHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSdJTicpew0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSc9PScpew0KICAgICAgICAgICAgICAgICAgICBqT1AgPSAnSU5URVJTRUNUJzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgYW5kIC8qPCU9dGFOYW1lJT4qLyAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gJHtpbk9QfSAoYCArIHNxdWVyaWVzLmpvaW4oYCAke2pPUH0vKk0yTSovIGApICsgJyknOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+IiwgZmllbGRzKS5zcWw7DQoNCiAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzKXsNCiAgICAgICAgICAgIGlmKE9iamVjdC5rZXlzKHRoaXMuX19maWVsZEdyb3VwcykubGVuZ3RoKSBzcWwgKz0gIiBncm91cCBieSAiOw0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiAhZWEuSXNUZXh0ICYmICFlYS5Jc0ltYWdlICYmICFlYS5Jc0ZpbGUpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKGVhKSU+PCU9KGVhLkVudGl0eVR5cGU/JysiaWQiJzonJyklPn0ke3RoaXMuX1EoKX0gJHt0aGlzLl9fZmllbGRHcm91cHMuPCU9bk5hbWUoZWEpJT59YDsNCiAgICA8JSB9KSU+DQogICAgICAgIH0NCg0KICAgICAgICBpZihzcWwuZW5kc1dpdGgoIndoZXJlIDE9MSIpKXsNCiAgICAgICAgICAgIC8vIHNxbCA9IHNxbC5yZXBsYWNlKCJ3aGVyZSAxPTEiLCAid2hlcmUgMT0wIik7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgc3FsID0gc3FsLnJlcGxhY2UoIndoZXJlIDE9MSBhbmQgIiwgIndoZXJlICIpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBzcWwgKz0gJyByZXR1cm4gJyArIFt0UHJlZl0uY29uY2F0KE9iamVjdC5rZXlzKGhlYWRlci5qb2lucykubWFwKGsgPT4gYCR7dGhpcy5fUSgpfSR7a30ke3RoaXMuX1EoKX1gKSkuam9pbignLCAnKTsNCiAgICAgICAgDQogICAgICAgIDwlPWxvZygpJT5zcWwpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHNxbDsNCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX25lbzRqJyU+KGNxbCl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnTmVvNGonXSk9PWMpeyU+DQogICAgICAgIGxldCBzZXNzaW9uID0gbnVsbDsNCiAgICAgICAgbGV0IHJldCA9IFtdOw0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZighdGhpcy5Ub29sLmRiIHx8ICFjcWwgfHwgIWNxbC50cmltKCkpew0KICAgICAgICAgICAgICAgIGlmKCF0aGlzLlRvb2wuZGIpIDwlPWxvZygpJT5jcWwsICIgPD09U0tJUFBFRD09PiIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBbXTsNCiAgICAgICAgICAgIH0NCiAgICANCiAgICAgICAgICAgIGlmKGNxbC5pbmRleE9mKCc7XG4nKT4wKXsNCiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHNxbFMgb2YgY3FsLnNwbGl0KCc7XG4nKSl7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuPCU9bU5hbWUlPihzcWxTLnRyaW0oKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGJTdG9yZSA9IFsiTUVSR0UiLCAiQ1JFQVRFIiwgIlVQREFURSJdLmZpbHRlcihuID0+IGNxbC5pbmRleE9mKG4pPj0wKS5maW5kKG4gPT4gbik7DQogICAgICAgICAgICBsZXQgYkRNTCA9IFsiQ09OU1RSQUlOVCJdLmZpbHRlcihuID0+IGNxbC5pbmRleE9mKG4pPj0wKS5maW5kKG4gPT4gbik7DQoNCiAgICAgICAgICAgIGlmKGJETUwpew0KICAgICAgICAgICAgICAgIHRoaXMuVG9vbC5kbWxDYWNoZSA9IHRoaXMuVG9vbC5kbWxDYWNoZSB8fCB7fTsNCiAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wuZG1sQ2FjaGVbdGhpcy5oYXNoQ29kZShjcWwpXSkgcmV0dXJuOw0KICAgICAgICAgICAgICAgIHRoaXMuVG9vbC5kbWxDYWNoZVt0aGlzLmhhc2hDb2RlKGNxbCldID0gY3FsOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzZXNzaW9uID0gdGhpcy5Ub29sLmRiLnNlc3Npb24oeyBkYXRhYmFzZTogdGhpcy5fX2NvbmZpZygnZGF0YWJhc2UnKSB9KTsNCiAgICAgICAgICAgIGxldCBmdW4gPSAnUmVhZCc7DQogICAgICAgICAgICBpZihiU3RvcmUgfHwgYkRNTCkgZnVuID0gJ1dyaXRlJzsNCiAgICAgICAgICAgIGlmKGZ1bj09J1dyaXRlJykgdGhpcy5Ub29sLl9fZG1sU3RhdGVtZW50cy5wdXNoKGNxbCk7DQogICAgICAgICAgICA8JT1sb2coKSU+Y3FsKTsNCiAgICAgICAgICAgIC8vcmV0ID0gKGF3YWl0IHNlc3Npb25bJ2V4ZWN1dGUnK2Z1bl0odHggPT4gdHgucnVuKGNxbCkpKS5yZWNvcmRzOw0KICAgICAgICAgICAgLy88JT1sb2coKSU+cmV0KTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgICAgICBpZihzZXNzaW9uKSBhd2FpdCBzZXNzaW9uLmNsb3NlKCk7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKG1haW5DbGFzcyhbJ05lbzRqJ10pKSU+KCkuPCU9bU5hbWUlPihjcWwpOw0KICAgIDwlIH0lPg0KICAgIH0NCjwlIH0lPg0KDQo8JSBpZihtYWluQ2xhc3MoWydSeERCJywgJ01vbmdvREInXSkpeyU+DQogICAgPCU9bU5hbWU9J190b0pTT05TY2hlbWEnJT4oKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IHR5cGUgPSB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUnLCAndHlwZScpOw0KICAgICAgICAgICAgbGV0IHNjaGVtYSA9IHsNCiAgICAgICAgICAgICAgICAkaWQ6ICc8JT1jLklkJT4nLA0KICAgICAgICAgICAgICAgICRzY2hlbWE6ICJodHRwczovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC8yMDIwLTEyL3NjaGVtYSIsDQogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICc8JT1jLlJlbWFyayU+JywNCiAgICAgICAgICAgICAgICB0aXRsZTogPCU9X25Db2RlKCklPiwNCiAgICAgICAgICAgICAgICBbdHlwZV06ICdvYmplY3QnLA0KICAgICAgICAgICAgICAgIHZlcnNpb246IDAsDQogICAgICAgICAgICAgICAgcHJvcGVydGllczogew0KICAgICAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICAgICAgICAgIFs8JT1fbkNvZGUoZWEpJT5dOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIjwlPWVhLlJlbWFyayU+IiwNCiAgICAgICAgICAgIDwlIGlmKGVhLklzQXJyYXkpeyU+DQogICAgICAgICAgICAgICAgICAgICAgICBbdHlwZV06IHRoaXMuX19jb25maWcoJ2pzb24udHlwZS5hcnJheScsICdhcnJheScpLA0KICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgICRyZWY6ICc8JT1lYS5FbnRpdHlDbGFzcy5JZCU+JywNCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdOiB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUuc3RyaW5nJywgJ3N0cmluZycpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNUZXh0KXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdOiB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUudGV4dCcsICdzdHJpbmcnKSwNCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQm9vbCl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXTogdGhpcy5fX2NvbmZpZygnanNvbi50eXBlLmJvb2wnLCAnYm9vbGVhbicpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNJbnQpeyU+DQogICAgICAgICAgICAgICAgICAgICAgICBbdHlwZV06IHRoaXMuX19jb25maWcoJ2pzb24udHlwZS5pbnQnLCAnaW50ZWdlcicpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNGbG9hdCl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXTogdGhpcy5fX2NvbmZpZygnanNvbi50eXBlLmZsb2F0JywgJ251bWJlcicpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNJbWFnZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXTogdGhpcy5fX2NvbmZpZygnanNvbi50eXBlLmltYWdlJywgJ29iamVjdCcpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNGaWxlKXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdOiB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUuZmlsZScsICdvYmplY3QnKSwNCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgPCUgaWYoZWEuSXNBcnJheSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFs8JWMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5SZXF1aXJlZCkubWFwKGVhID0+IHslPjwlPV9uQ29kZShlYSklPjwlfSkuam9pbignLCcpJT5dLA0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgPCU9bG9nKCklPnNjaGVtYSk7DQogICAgICAgICAgICByZXR1cm4gc2NoZW1hOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ01vbmdvREInLCAnUnhEQicsICdaYW5nb0RCJ10pKXslPg0KICAgIDwlPW1OYW1lPSdfdG9TZWxlY3RNZGInJT4oKXsNCiAgICAgICAgcmV0dXJuIHRoaXMuX19leHBvcnQoe30sIHsNCiAgICAgICAgICAgIF9USElTOiBvYmogPT4gb2JqLl9pZCA9IHskaW46IHRoaXMuX1RISVMubWFwKHQgPT4gdC48JT1tTmFtZSU+KCkpfSwNCiAgICAgICAgICAgIElkOiBvYmogPT4gb2JqLl9pZCA9IHRoaXMuSWQsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5Jc1RleHQgJiYgIWVhLklzSW1hZ2UgJiYgIWVhLklzRmlsZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgaWYoIXYuPCU9bU5hbWUlPikgcmV0dXJuOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHt9Ow0KICAgICAgICAgICAgICAgIGxldCBvcCA9ICIkZSI7DQogICAgICAgICAgICAgICAgc3dpdGNoKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3Apew0KICAgICAgICAgICAgICAgICAgICBjYXNlICI9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICI+IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRndCI7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiPCI6DQogICAgICAgICAgICAgICAgICAgICAgICBvcCA9ICIkbHQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIj49IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRndGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIjw9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRsdGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIiE9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRuZSI7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiSU4iOg0KICAgICAgICAgICAgICAgICAgICAgICAgb3AgPSAiJGluIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSBpZihlYS5Jc0RhdGUpeyAlPg0KICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdW29wXSA9IHYuPCU9bU5hbWUlPigpLnRvSVNPU3RyaW5nKCk7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSB2LjwlPW1OYW1lJT4oKTsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHY7DQogICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmpbZWFDb2RlXSA9IHskaW46IHYubWFwKHQgPT4gdC48JT1tTmFtZSU+KCkpfSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhfc3FsVG9vbHMpKXslPg0KICAgIDwlPW1OYW1lPSdfdG9EQk9iamVjdCclPihmaWVsZHMsIGJOb1JlZil7DQogICAgICAgIGlmKCF0aGlzLklkKXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPiJJbnZhbGlkIElEIiwgdGhpcy5FbnRpdHlDbGFzcy5OYW1lLCB0aGlzLlRvb2wpOw0KICAgICAgICB9DQogICAgICAgIGxldCByZXQgPSB7DQogICAgICAgICAgICBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXTogIiciICsgdGhpcy5JZCArICInIg0KICAgICAgICB9Ow0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgIGlmKCgoZmllbGRzICYmIGZpZWxkcy5pbmRleE9mKCI8JT1lYS5OYW1lJT4iKSkgfHwgIWZpZWxkcykgJiYgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ICYmICghYk5vUmVmIHx8IDwlPWVhLkVudGl0eVR5cGU/J2ZhbHNlJzondHJ1ZSclPikpew0KICAgICAgICAgICAgbGV0IGZWYWx1ZSA9IG51bGw7DQogICAgICAgICAgICBsZXQgdiA9IHRoaXMuPCU9bk5hbWUoZWEpJT4oKTsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgIGlmKHYgJiYgKHYuX19zeW5jX29uKCkgfHwgdi5JZD09di5JZCkpew0KICAgICAgICAgICAgICAgIGZWYWx1ZSA9ICInIiArIHYuSWQgKyAiJyI7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBmVmFsdWUgPSAiTlVMTCI7DQogICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQm9vbCl7JT4NCiAgICAgICAgICAgIGZWYWx1ZSA9IHY/MTowOw0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J05lbzRqJykgZlZhbHVlID0gZlZhbHVlPydUcnVlJzonRmFsc2UnOw0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J1NxbERCJykgZlZhbHVlID0gIiciICsgZlZhbHVlICsgIiciOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0ludCB8fCBlYS5Jc0xvbmcgfHwgZWEuSXNGbG9hdCl7JT4NCiAgICAgICAgICAgIGZWYWx1ZSA9IHYgfHwgJzAnOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0RhdGUpeyU+DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgZlZhbHVlID0gIiciICsgKHY/di50b0lTT1N0cmluZygpOiIxOTcwLTEtMSIpICsgIiciOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J215c3FsJyl7DQogICAgICAgICAgICAgICAgICAgIGZWYWx1ZSA9IGBTVFJfVE9fREFURSgke2ZWYWx1ZX0sICclWS0lbS0lZFQlVC4lZlonKWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICBmVmFsdWUgPSAiJyIgKyB2ICsgIiciOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J05lbzRqJykgZlZhbHVlID0gJ2RhdGV0aW1lKCcgKyBmVmFsdWUgKyAnKSc7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzT2JqZWN0KXslPg0KICAgICAgICAgICAgZlZhbHVlID0gIiciICsgSlNPTi5zdHJpbmdpZnkodiwgbnVsbCwgJ1x0JykgKyAiJyI7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXslPg0KICAgICAgICAgICAgZlZhbHVlID0gdj09PW51bGw/Ik5VTEwiOigiJyIgKyAoKGZhbHNlICYmIHYgJiYgdi5yZXBsYWNlKT92LnJlcGxhY2UoL1xcbi9nLCAiXFxcXG4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwnL2csICJcXFxcJyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCIvZywgJ1xcXFwiJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJi9nLCAiXFxcXCYiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csICJcXFxcciIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHQvZywgIlxcXFx0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcYi9nLCAiXFxcXGIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICJcXFxcZiIpICA6dikgKyAiJyIpOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1RleHQpeyU+DQogICAgICAgICAgICBpZih2PT09bnVsbCl7DQogICAgICAgICAgICAgICAgZlZhbHVlID0gIk5VTEwiOw0KICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J1NxbERCJyl7DQogICAgICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygndHlwZScpPT0nbXlzcWwnKXsNCiAgICAgICAgICAgICAgICAgICAgZlZhbHVlID0gYEZST01fQkFTRTY0KCcke3RoaXMuX2J0b2Eodil9JylgOw0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J3NxbGl0ZScpew0KICAgICAgICAgICAgICAgICAgICBmVmFsdWUgPSBgY2FzdCh1bmhleCgnJHt2LnNwbGl0KCIiKS5tYXAoeCA9PiAoMjU2ICsgeC5jaGFyQ29kZUF0KCkpLnRvU3RyaW5nKDE2KS5zdWJzdHIoLTIpKS5qb2luKCIiKX0nKSBhcyB2YXJjaGFyKWA7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGZWYWx1ZSA9IHY7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgZlZhbHVlID0gIiciICsgdiArICInIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICBmVmFsdWUgPSAiJyIgKyB2ICsgIiciOw0KICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldFs8JT1fbkNvZGUoZWEpJT4gKyAiPCU9KGVhLkVudGl0eVR5cGU/J2lkJzonJyklPiJdID0gZlZhbHVlOw0KICAgICAgICB9DQogICAgPCUgfSk7ICU+DQogICAgDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCjwlIH0lPg0KDQo8JSBpZihtYWluQ2xhc3MoWydCSVNlcnZlciddKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nZ2V0JyU+KG5hbWUpIHsNCiAgICAgICAgaWYgKCF0aGlzLklkKSByZXR1cm4gbnVsbDsNCiAgICAgICAgdmFyIHQgPSBudWxsOw0KICAgICAgICAkLmVhY2gobmFtZS5zcGxpdCgnLicpLCAoXywgZikgPT4gew0KICAgICAgICAgICAgdCA9IHsNCiAgICAgICAgICAgICAgICBFbnRpdHlPYmplY3Q6IHQgPyB7DQogICAgICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgVmFsdWVFbnRpdGllczogW3RdDQogICAgICAgICAgICAgICAgfSA6IHsNCiAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBJZDogdGhpcy5JZA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgRW50aXR5QXR0cmlidXRlOiB7DQogICAgICAgICAgICAgICAgICAgIE5hbWU6IGYsDQogICAgICAgICAgICAgICAgICAgIE9QRVJBVE9SUzogew0KICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogIj0iDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuICQud2hlbih0aGlzLnNyKCkuXygiRW50ZXJwcmlzZU1hbmFnZXIuZW1zRW50aXR5VmFsdWVGaW5kIiwgbnVsbCwgdCkpLnRoZW4oZXYgPT4gew0KICAgICAgICAgICAgPCU9bG9nKCklPmV2KTsNCiAgICAgICAgICAgIGlmIChldiA9PT0gbnVsbCkgcmV0dXJuIG51bGw7DQogICAgICAgICAgICBpZiAoZXYuRW50aXR5QXR0cmlidXRlLklzU3RyaW5nKSByZXR1cm4gZXYuU3RyaW5nVmFsdWU7DQogICAgICAgICAgICBpZiAoZXYuRW50aXR5QXR0cmlidXRlLklzRmxvYXQpIHJldHVybiBldi5GbG9hdFZhbHVlOw0KICAgICAgICAgICAgaWYgKGV2LkVudGl0eUF0dHJpYnV0ZS5Jc0ludCkgcmV0dXJuIGV2LkludFZhbHVlOw0KICAgICAgICAgICAgaWYgKGV2LkVudGl0eUF0dHJpYnV0ZS5Jc0xvbmcpIHJldHVybiBldi5Mb25nVmFsdWU7DQogICAgICAgICAgICBpZiAoZXYuRW50aXR5QXR0cmlidXRlLklzVGV4dCkgcmV0dXJuIGV2LlRleHRWYWx1ZTsNCiAgICAgICAgICAgIGlmIChldi5FbnRpdHlBdHRyaWJ1dGUuSXNCb29sKSByZXR1cm4gZXYuQm9vbFZhbHVlOw0KDQogICAgICAgICAgICBpZiAoIWV2Lk9iamVjdFZhbHVlKSByZXR1cm4gbnVsbDsNCg0KICAgICAgICAgICAgcmV0dXJuIG5ldyA8JT1zY29wZSU+WyQuZ3JlcCg8JT1zY29wZSU+LkVudGl0eUNsYXNzZXMsIGMgPT4gYy5JZCA9PSBldi5FbnRpdHlBdHRyaWJ1dGUuRW50aXR5VHlwZWlkKVswXS5OYW1lLnJlcGxhY2UoLyAvZywgJ18nKV0oZXYuT2JqZWN0VmFsdWUuSWQpOw0KICAgICAgICB9KTsNCiAgICB9DQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKF9zcWxUb29scykpeyU+DQogICAgPCU9bU5hbWU9J19RJyU+KCl7DQogICAgICAgIGxldCBfbyA9ICciJzsNCiAgICAgICAgbGV0IF9xID0gX287DQoNCiAgICAgICAgaWYoWydTYWxlc0ZvcmNlJ10uaW5kZXhPZih0aGlzLlRvb2wudHlwZS5uYW1lKT09MCl7DQogICAgICAgICAgICBfbyA9IF9xID0gIiI7DQogICAgICAgIH1lbHNlIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J215c3FsJyB8fCB0aGlzLlRvb2wudHlwZS5uYW1lPT0nTmVvNGonKXsNCiAgICAgICAgICAgIF9vID0gX3EgPSAnYCc7DQogICAgICAgIH1lbHNlIGlmKFsnU2FsZXNGb3JjZSddLmluZGV4T2YodGhpcy5Ub29sLnR5cGUubmFtZSk9PTApew0KICAgICAgICAgICAgX28gPSBfcSA9IGAnYDsNCiAgICAgICAgfWVsc2UgaWYodGhpcy5fX2NvbmZpZygndHlwZScpPT0nc3Fsc2VydmVyJyl7DQogICAgICAgICAgICBfbyA9ICdbJzsNCiAgICAgICAgICAgIF9xID0gJ10nOw0KICAgICAgICB9ZWxzZSBpZih0aGlzLl9fY29uZmlnKCdhcGlLZXknKT09J2FpcnRhYmxlJyl7DQogICAgICAgICAgICBfbyA9ICd7JzsNCiAgICAgICAgICAgIF9xID0gJ30nOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBfbz9fcTpfbzsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19maWVsZEdyb3VwcyclPihmZ3MgPSB7fSl7DQogICAgICAgIHRoaXMuX19maWVsZEdyb3VwcyA9IGZnczsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZmllbGRBZ2dyZWdhdGVzJyU+KGZhcyA9IHt9KXsNCiAgICAgICAgdGhpcy5fX2ZpZWxkQWdncmVnYXRlcyA9IGZhczsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9GaWVsZHNTUUwnJT4oZmllbGRzKXsNCiAgICAgICAgDQogICAgICAgIGZpZWxkcyA9IGZpZWxkcyB8fCBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpLCA8JT1jLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLm1hcChlYSA9PiBfbkNvZGUoZWEpICsgKGVhLkVudGl0eVR5cGU/JysiLmlkIic6JycpKS5qb2luKCcsJyklPl07DQogICAgICAgIGZpZWxkcyA9IEFycmF5LmlzQXJyYXkoZmllbGRzKT9maWVsZHM6W2ZpZWxkc107DQoNCiAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzKXsNCiAgICAgICAgICAgIC8vIHtmaWVsZDogb3JkZXJ9DQogICAgICAgICAgICBmaWVsZHMgPSBbXTsNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgIWVhLklzVGV4dCAmJiAhZWEuSXNJbWFnZSAmJiAhZWEuSXNGaWxlKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgIGlmKHRoaXMuX19maWVsZEdyb3Vwcy48JT1uTmFtZShlYSklPikgZmllbGRzLnB1c2goYCR7PCU9X25Db2RlKGVhKSU+PCU9KGVhLkVudGl0eVR5cGU/JysiaWQiJzonJyklPn1gKTsNCiAgICA8JSB9KSU+DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZpZWxkczsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19mcm9tREJPYmplY3QnJT4ocj17fSl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9faW1wb3J0KHIsIHsNCiAgICAgICAgICAgICAgICBJZDogb2JqID0+IHRoaXMuSWQgPSBvYmpbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihvYmpbZWFDb2RlXSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9TZWxlY3RIZWFkZXInJT4oZmllbGRzKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IHJldCA9IHsNCiAgICAgICAgICAgICAgICB0YWJsZTogPCU9X25Db2RlKCklPiwNCiAgICAgICAgICAgICAgICBmaWVsZHM6IERvdE9iamVjdC5vYmplY3QoT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuX3RvRmllbGRzU1FMKGZpZWxkcykubWFwKGYgPT4gdGhpcy5fUSgpICsgZi5yZXBsYWNlKC9cLi9nLCAnJykgKyB0aGlzLl9RKCkpLm1hcChmID0+IFtmLCBmXSkpKSwNCiAgICAgICAgICAgICAgICBqb2luczoge30sDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihmaWVsZHMpIHJldHVybiByZXQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldC5qb2lucyA9IHRoaXMuX19leHBvcnQoe30sIHsNCiAgICAgICAgICAgICAgICBOdWxsOiB0cnVlLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9ialtlYUNvZGVdID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KCksDQogICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3RvU2VsZWN0U1FMJyU+KGZpZWxkcyl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCBzcWwgPSAic2VsZWN0ICI7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCB0UHJlZiA9IGAke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT59JHt0aGlzLl9RKCl9YDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGhlYWRlciA9IHRoaXMuX3RvU2VsZWN0SGVhZGVyKGZpZWxkcyk7DQoNCiAgICAgICAgICAgIHNxbCArPSBPYmplY3QudmFsdWVzKGhlYWRlci5maWVsZHMpLm1hcChmID0+IGAke3RQcmVmfS4ke2Z9YCkuam9pbignLCAnKTsNCiAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRlci5qb2lucykuZm9yRWFjaChrID0+IHNxbCArPSAiLCAiICsgT2JqZWN0LnZhbHVlcyhoZWFkZXIuam9pbnNba10uZmllbGRzKS5tYXAoZiA9PiBgJHt0aGlzLl9RKCl9JHtoZWFkZXIuam9pbnNba10udGFibGV9XyR7a30ke3RoaXMuX1EoKX0uJHtmfSBhcyAke3RoaXMuX1EoKX0ke2t9LiR7Zi5yZXBsYWNlKHRoaXMuX1EoKSwgJycpfWApLmpvaW4oJywgJykpOw0KICAgIA0KICAgICAgICAgICAgaWYodGhpcy5fX2ZpZWxkQWdncmVnYXRlcyl7DQogICAgICAgICAgICAgICAgLy8ge2ZpZWxkOiBmdW5jdGlvbn0NCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgIWVhLklzVGV4dCAmJiAhZWEuSXNJbWFnZSAmJiAhZWEuSXNGaWxlKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICAgICBpZih0aGlzLl9fZmllbGRBZ2dyZWdhdGVzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7c3FsPT0oJ3NlbGVjdCAnKT8nJzonLCd9ICR7dGhpcy5fX2ZpZWxkQWdncmVnYXRlcy48JT1uTmFtZShlYSklPn0oJHt0aGlzLl9RKCl9JHs8JT1fbkNvZGUoZWEpJT59JHt0aGlzLl9RKCl9KWA7DQogICAgPCUgfSklPg0KICAgICAgICAgICAgfQ0KICAgIA0KICAgICAgICAgICAgc3FsICs9IGAgZnJvbSAke3RQcmVmfSBgOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXIuam9pbnMpLmZvckVhY2goayA9PiBzcWwgKz0gYGxlZnQgam9pbiAke3RoaXMuX1EoKX0ke2hlYWRlci5qb2luc1trXS50YWJsZX0ke3RoaXMuX1EoKX0gYXMgJHt0aGlzLl9RKCl9JHtoZWFkZXIuam9pbnNba10udGFibGV9XyR7a30ke3RoaXMuX1EoKX0gb24gJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHtrfWlkJHt0aGlzLl9RKCl9PSR7dGhpcy5fUSgpfSR7aGVhZGVyLmpvaW5zW2tdLnRhYmxlfV8ke2t9JHt0aGlzLl9RKCl9LiR7dGhpcy5fUSgpfSR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpfSR7dGhpcy5fUSgpfSBgKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgc3FsICs9IGAgd2hlcmUgMT0xYDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgc3FsID0gdGhpcy5fX2V4cG9ydCh7c3FsOiBzcWx9LCB7DQogICAgICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBfZmllbGRzOiAodGhpcy5fX3N5bmNfb24oKSB8fCB0aGlzLklkPT10aGlzLklkKT9bJ0lkJ106dW5kZWZpbmVkLA0KICAgICAgICAgICAgICAgIGV4cG9ydGVyOiB2ID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodi5yZXVzZWQ+Mil7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyA8JT13YXJuKCklPiJSZXVzZWQ6ICIsIHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdi5vYmouc3FsID0gYC8qUkVTVUVEOiAke3YucmV1c2VkfSovYDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgX1RISVM6IG9iaiA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLl9USElTIHx8ICF0aGlzLl9USElTLmxlbmd0aCkgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgIC8qYW5kICovJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9IGAgKyAodGhpcy5fVEhJU19jb29wIHx8ICJJTiIpICsgIiAoIiArIHRoaXMuX1RISVMubWFwKHQgPT4gdC48JT1tTmFtZSU+KHQuX19jb25maWcoJ2lkRmllbGQnKXx8J0lkJykudGhpcykuam9pbignIFVOSU9OIEFMTCAnKSArICIpIjsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9iai5zcWwgKz0gKHRoaXMuSWQ9PXRoaXMuSWQpP2AgYW5kICR7dFByZWZ9LiR7dGhpcy5fUSgpfSR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpfSR7dGhpcy5fUSgpfT0nJHt0aGlzLklkfSdgOicnLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgbGV0IGNvb3AgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICAgICAgICAgICAgICBzd2l0Y2goY29vcCl7DQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICIhPSI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJOT1QgSU4iOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiPSI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJJTiI7DQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICIiOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3AgPSAiSU4iOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZih2KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gYCBhbmQgJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHtlYUNvZGV9aWQke3RoaXMuX1EoKX0gJHtjb29wfSAoJHt2LjwlPW1OYW1lJT4odi5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpKX0pYDsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICgke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSAke2Nvb3B9ICgwKSBPUiAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSBJUyBOVUxMKWA7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1RleHQgfHwgZWEuSXNJbWFnZSB8fCBlYS5Jc0ZpbGUpeyU+DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgIGFuZCAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX0ke3RoaXMuX1EoKX0gYCArIDwlaWYoZWEuSXNCb29sKXslPiI9IjwlfWVsc2V7JT4odGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCB8fCAiTElLRSIpPCV9JT4gKyAiICI7DQogICAgICAgIDwlIH0lPg0KICAgICAgICANCiAgICAgICAgPCUgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICAgICAgaWYodiAmJiB2LnRvSVNPU3RyaW5nKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J3NxbGl0ZScpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gInN0cmZ0aW1lKCclcycsICciICsgdi50b0lTT1N0cmluZygpICsgIicpIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiciICsgdi50b0lTT1N0cmluZygpICsgIiciOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXsgJT4NCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKHYpPT09InN0cmluZyIpew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSAiJyIgKyAoKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSJMSUtFIiB8fCAhdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk/IiUiOiIiKSArIHYgKyAoKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSJMSUtFIiB8fCAhdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk/IiUiOiIiKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyAlPg0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2Yodik9PT0iYm9vbGVhbiIpew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSAiJyIgKyAodj8iMSI6IjAiKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICAgICAgICAgIGlmKHYgJiYgdi5FbnRpdHlDbGFzcyl7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICIoIiArIHYuPCU9bU5hbWUlPigpICsgIikiOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiciICsgdiArICInIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9dGFOYW1lJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBsZXQgak9QID0gJ1VOSU9OIEFMTCc7DQogICAgICAgICAgICAgICAgICAgIGxldCBpbk9QID0gJ0lOJzsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSchPScgfHwgdGhpcy5fPCU9dGFOYW1lJT5fY29vcD09J05PVCBJTicpew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5PUCA9ICdOT1QgSU4nOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLl88JT10YU5hbWUlPl9jb29wPT0nPScgfHwgdGhpcy5fPCU9dGFOYW1lJT5fY29vcD09J0lOJyl7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSc9PScpew0KICAgICAgICAgICAgICAgICAgICAgICAgak9QID0gJ0lOVEVSU0VDVCc7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gYGFuZCAvKjwlPXRhTmFtZSU+Ki8gJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9ICR7aW5PUH0gKGAgKyAodiB8fCBbXSkuZmlsdGVyKHQgPT4gdCkubWFwKHQgPT4gdC48JT1tTmFtZSU+KCI8JT1uTmFtZSh0YSklPi5pZCIpKS5qb2luKGAgJHtqT1B9LypNMk0qLyBgKSArICcpJzsNCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+IiwgZmllbGRzKS5zcWw7DQoNCiAgICAgICAgICAgIGlmKHRoaXMuX19maWVsZEdyb3Vwcyl7DQogICAgICAgICAgICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5fX2ZpZWxkR3JvdXBzKS5sZW5ndGgpIHNxbCArPSAiIGdyb3VwIGJ5ICI7DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5Jc1RleHQgJiYgIWVhLklzSW1hZ2UgJiYgIWVhLklzRmlsZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKGVhKSU+PCU9KGVhLkVudGl0eVR5cGU/JysiaWQiJzonJyklPn0ke3RoaXMuX1EoKX0gJHt0aGlzLl9fZmllbGRHcm91cHMuPCU9bk5hbWUoZWEpJT59YDsNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKCFzcWwuZW5kc1dpdGgoIndoZXJlIDE9MSIpKXsNCiAgICAgICAgICAgICAgICBzcWwgPSBzcWwucmVwbGFjZSgid2hlcmUgMT0xIGFuZCAiLCAid2hlcmUgIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHNxbCA9IHR5cGVvZihzcWxGb3JtYXR0ZXIpIT09J3VuZGVmaW5lZCc/c3FsRm9ybWF0dGVyLmZvcm1hdChzcWwpOnNxbDsNCiAgICAgICAgICAgIDwlPWxvZygpJT5zcWwpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXR1cm4gc3FsOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9QYXRocyclPigpew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7fSwgew0KICAgICAgICAgICAgX1RISVM6IG9iaiA9PiB7fSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouPCU9bk5hbWUoZWEpJT4gPSB2LjwlPW1OYW1lJT4oKSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai48JT10YU5hbWUlPiA9IHYubWFwKF92ID0+IF92LjwlPW1OYW1lJT4oKSksDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICAvLyByZXR1cm4gcmV0Ow0KICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocmV0KS5tYXAoayA9PiAoe1trXTogcmV0W2tdfSkpOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9VcGRhdGVTUUwnJT4oZmllbGRzKXsNCiAgICAgICAgbGV0IHJldEZpZWxkcyA9IHRoaXMuX3RvRmllbGRzU1FMKGZpZWxkcykubWFwKGYgPT4gdGhpcy5fUSgpICsgZi5yZXBsYWNlKC9cLi9nLCAnJykgKyB0aGlzLl9RKCkpLmpvaW4oJywgJyk7DQogICAgICAgIGxldCBzcWwgPSBgdXBkYXRlICR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKCklPn0ke3RoaXMuX1EoKX0gc2V0IGAgKyBPYmplY3QuZW50cmllcyh0aGlzLl90b0RCT2JqZWN0KGZpZWxkcykpLm1hcCh2ID0+IHRoaXMuX1EoKSArIHZbMF0gKyB0aGlzLl9RKCkgKyAiPSIgKyB2WzFdKSArIGAgd2hlcmUgJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9PScke3RoaXMuSWR9J2A7IC8vYCByZXR1cm5pbmcgJHtyZXRGaWVsZHN9YDsNCiAgICAgICAgPCU9bG9nKCklPnNxbCk7DQogICAgICAgIHJldHVybiBzcWw7DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J190b0luc2VydFNRTCclPihmaWVsZHMpew0KICAgICAgICBsZXQgb2JqID0gdGhpcy5fdG9EQk9iamVjdChmaWVsZHMpOw0KICAgICAgICBsZXQgc3FsID0gYGluc2VydCBpbnRvICR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKCklPn0ke3RoaXMuX1EoKX0gKGAgKyBPYmplY3Qua2V5cyhvYmopLm1hcChrID0+IHRoaXMuX1EoKSArIGsgKyB0aGlzLl9RKCkpICsgIikgdmFsdWVzICgiICsgT2JqZWN0LnZhbHVlcyhvYmopICsgYClgOw0KICAgICAgICA8JT1sb2coKSU+c3FsKTsNCiAgICAgICAgcmV0dXJuIHNxbDsNCiAgICB9DQo8JSB9ICU+DQogICAgDQogICAgPCU9bU5hbWU9J19jb3B5RnJvbSclPihvYmopew0KICAgICAgICBpZighb2JqKSByZXR1cm4gbnVsbDsNCiAgICAgICAgcmV0dXJuIHRoaXMuX3JldmVydChvYmopOw0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3RvT2JqVHJlZSclPihiQ3ljbGljKXsNCiAgICAgICAgPCU9d2FybigpJT4iZGVwcmVjYXRlZCIpOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgDQogICAgICAgIHRoaXMuX2RlZmF1bHRzKCk7DQoNCiAgICAgICAgcmV0dXJuIHRoaXMuX19leHBvcnQobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGMuTmFtZSwgdHJ1ZSklPignPCU9Yy5OYW1lJT4nKSwgew0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgIEN5Y2xpYzogYkN5Y2xpYywNCiAgICAgICAgICAgIC8vZXhwb3J0ZXI6IHYgPT4gPCU9d2FybigpJT52LnJldXNlZCksDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLjwlPW5OYW1lKGVhKSU+KDwlaWYoZWEuRW50aXR5VHlwZSl7JT5uZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoZWEuRW50aXR5VHlwZSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4oYkN5Y2xpYyk8JX1lbHNleyU+djwlfSU+KSwNCiAgICA8JSB9KTslPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLjwlPXRhTmFtZSU+KG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4oYkN5Y2xpYykpLA0KICAgIDwlIH0pOyU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdW5DeWNsZSclPihzb3VyY2U9dGhpcyl7DQogICAgICAgIHJldHVybiB0aGlzLl9fZXhwb3J0KHRoaXMsIHsNCiAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouPCU9bk5hbWUoZWEpJT4oc291cmNlPT1vYmouPCU9bk5hbWUoZWEpJT4oKT9udWxsOnVuZGVmaW5lZCksDQogICAgPCUgfSk7JT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHRydWUsDQogICAgPCUgfSk7JT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICB9DQogICAgDQogICAgYXN5bmMgPCU9bU5hbWU9J19zdG9yZUVudGl0eUNsYXNzJyU+KGRlcHRoKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYodHlwZW9mKGRlcHRoKT09PSJ1bmRlZmluZWQiKSBkZXB0aCA9IHRoaXMuX19jb25maWcoImNyZWF0ZSIpOw0KICAgICAgICAgICAgaWYoIWRlcHRoKSByZXR1cm47DQogICAgICAgICAgICANCiAgICAgICAgICAgIHRoaXMuVG9vbC48JT1tTmFtZSU+ID0gdGhpcy5Ub29sLjwlPW1OYW1lJT4gfHwge307DQogICAgICAgICAgICBpZih0aGlzLlRvb2wuPCU9bU5hbWUlPi48JT1uTmFtZShjKSU+KSByZXR1cm47DQogICAgICAgICAgICB0aGlzLlRvb2wuPCU9bU5hbWUlPi48JT1uTmFtZShjKSU+ID0gdHJ1ZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPCU9bG9nKCklPmBzdG9yaW5nICcke3RoaXMuVG9vbC50eXBlLm5hbWV9JyBtb2RlbCB3aXRoIGRlcHRoICR7ZGVwdGh9YCk7DQogICAgICAgICAgICANCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgICAgIGF3YWl0IHRoaXMuRFNDb25uZWN0KCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iTmVvNGoiKXslPg0KICAgICAgICAgICAgICAgIGxldCBjcWwgPSB0aGlzLyouX3RvT2JqVHJlZSh0cnVlKSovLl90b0N5VGFibGUoZGVwdGgpOw0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT5jcWwpOw0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX25lbzRqKGNxbCk7DQogICAgPCUgfWVsc2UgaWYodD09IkFpclRhYmxlIil7JT4NCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9haXJ0YWJsZSgnbWV0YS9iYXNlcycsIG51bGwsIHtuYW1lOiAnPCU9c2NvcGUlPicsIHdvcmtzcGFjZUlkOiB0aGlzLlRvb2wuZGIud29ya3NwYWNlSWQsIHRhYmxlczogdGhpcy5fdG9BVFRhYmxlKGRlcHRoKX0pOw0KICAgIDwlIH1lbHNlIGlmKF9zcWxUb29scy5pbmRleE9mKHQpPj0wKXslPg0KICAgICAgICAgICAgICAgIGxldCBzcWwgPSB0aGlzLyouX3RvT2JqVHJlZSh0cnVlKSovLl90b1NRTFRhYmxlKHtyZXVzZWQ6IDN9KTsgPCUvKmRlcHRoOiBjaGFsbGVuZ2UgLSB0b28gbG93IGRvZXMgbm90IGNvdmVyIGFsbCB0YWJsZXMsIHRvbyBoaWdoIChtYXggZGVwdGgpIHJlc3VsdHMgaW4gb3V0LW9mLW1lbW9yeSBvbiBicm93c2VyKi8lPg0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT5zcWwpOw0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NxbChzcWwpOw0KICAgIDwlIH1lbHNlIGlmKHQ9PSJTZXJ2aWNlTm93Iil7JT4NCiAgICAgICAgICAgICAgICAvLzwlPWxvZygpJT50aGlzLyouX3RvT2JqVHJlZSh0cnVlKSovLl90b1NOVGFibGUoKSk7DQogICAgPCUgfWVsc2UgaWYodD09IkVNUyIpeyU+DQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fdG9FTVNDbGFzcyhkZXB0aCkuc3RvcmUoKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iQklTZXJ2ZXIiKXslPg0KICAgICAgICAgICAgICAgIC8vIG9ubHkgZG8gdGhpcyBpZiB0aGUgbW9kdWxlIGlzIG5vdCBsb2FkZWQgZnJvbSANCiAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy5zcigpLl8oIkVudGVycHJpc2VNYW5hZ2VyLmVtc0VudGl0eUF0dHJpYnV0ZUZpbmRhbGwiLCBudWxsLCB7DQogICAgICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgRW50aXR5Q2xhc3M6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIENvbXBhbnk6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29kZTogdGhpcy5fX2NvbmZpZygnY29tcGFueScsICc8JT1zY29wZSU+JyksDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgfSkpLmZvckVhY2goZWEgPT4gLyogdHJ5ZSBfZWFUeXBlcyAqLzwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlcy5mb3JFYWNoKHNlYSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKHNlYS5JZCE9PWVhLklkICYmIHNlYS5OYW1lPT1lYS5OYW1lICYmIChzZWEuRW50aXR5Q2xhc3MuSWQ9PWVhLkVudGl0eUNsYXNzLklkIHx8IHNlYS5FbnRpdHlDbGFzcy5OYW1lPT1lYS5FbnRpdHlDbGFzcy5OYW1lKSl7DQogICAgICAgICAgICAgICAgICAgICAgICBzZWEuSWQgPT0gZWEuSWQ7DQogICAgICAgICAgICAgICAgICAgICAgICBzZWEuRW50aXR5Q2xhc3MuSWQgPSBlYS5FbnRpdHlDbGFzcy5JZDsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uRW50aXR5Q2xhc3Nlcy5maW5kKGMgPT4gYy5OYW1lPT1zZWEuRW50aXR5Q2xhc3MuTmFtZSkuRW50aXR5QXR0cmlidXRlcy5maW5kKHNjZWEgPT4gc2NlYS5OYW1lPT1lYS5OYW1lKS5JZCA9IGVhLklkOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSkpOw0KICAgIDwlIH1lbHNlIGlmKHQ9PSJNb25nb0RCIiB8fCB0PT0iWmFuZ29EQiIpeyU+DQogICAgICAgICAgICAgICAgaWYodGhpcy5Ub29sLmRiKSBhd2FpdCB0aGlzLlRvb2wuZGIuY3JlYXRlQ29sbGVjdGlvbig8JT1fbkNvZGUoKSU+LCB7dmFsaWRhdG9yOiB7JGpzb25TY2hlbWE6IHRoaXMuX3RvSlNPTlNjaGVtYSgpfX0pOw0KICAgIDwlIH1lbHNlIGlmKHQ9PSJSeERCIil7JT4NCiAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wuZGIpIGF3YWl0IHRoaXMuVG9vbC5kYi5hZGRDb2xsZWN0aW9ucyh7WzwlPV9uQ29kZSgpJT5dOiB7c2NoZW1hOiB0aGlzLl90b0pTT05TY2hlbWEoKX19KTsNCiAgICA8JSB9JT4NCiAgICAgICAgICAgIH0NCjwlIH0pJT4NCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX2xvZyclPihvYmo9dGhpcyl7DQo8JSBpZihtYWluQ2xhc3MoKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoKSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4ob2JqKTsNCjwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkob2JqKSkgcmV0dXJuIG9iai5tYXAobyA9PiB0aGlzLl9sb2cobykpOw0KICAgICAgICAgICAgaWYob2JqLkVudGl0eUNsYXNzKSBvYmogPSBvYmouX3RvSlNPTih7Yk1hcDogdHJ1ZX0pOw0KICAgICAgICAgICAgPCU9bG9nKCklPm9iaik7DQogICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J0RTQ29ubmVjdCclPih0b29sPXRoaXMuVG9vbCl7DQo8JSBpZihtYWluQ2xhc3MoKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoKSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4odG9vbCk7DQo8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZighdG9vbCl7DQogICAgICAgICAgICAgICAgPCU9ZXJyb3IoKSU+IlRvb2wgaXMgbnVsbCIsIHRoaXMuVG9vbHMubGVuZ3RoLCA8JT1zY29wZSU+LlRvb2xzLmxlbmd0aCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfWVsc2UgaWYoIXRvb2wudHlwZSl7DQogICAgICAgICAgICAgICAgPCU9ZXJyb3IoKSU+IlRvb2wudHlwZSBpcyBudWxsIiwgdG9vbCwgdGhpcy5Ub29scy5sZW5ndGgsIDwlPXNjb3BlJT4uVG9vbHMubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YodG9vbC5kYikhPT0idW5kZWZpbmVkIil7DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPiJUb29sIGFscmVhZHkgY29ubmVjdGVkISIpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH1lbHNlIGlmKDwlPW5zY29wZSU+Ll9ub2RlICYmIC8qPCU9bnNjb3BlJT4uX25vZGUuX3BhcmVudF9zZXQgJiYgKi88JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnQoKS5fc2FtZUVudGl0eSg8JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnQoKSkpew0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iTm9kZSBoYXMgYSB2YWxpZCBwYXJlbnQsIG5vIGxvY2FsIFNRTCBwb3NzaWJsZSIpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgdG9vbC5fX2RtbFN0YXRlbWVudHMgPSB0b29sLl9fZG1sU3RhdGVtZW50cyB8fCBbXTsNCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgICAgIDwlPWxvZygpJT4iWzwlPXQlPl06IENvbm5lY3RpbmcuLi4iKTsNCg0KICAgICAgICAgICAgaWYodG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iRU1TIil7JT4NCiAgICA8JSB9ZWxzZSBpZih0PT0iTW9uZ29EQiIpeyU+DQogICAgICAgICAgICAgICAgLy88JT1sb2coKSU+dGhpcy5fX2NvbmZpZygndXJpJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwgdGhpcy5fX2NvbmZpZygnY29uZmlnJywgbnVsbCwge3Rvb2w6IHRvb2x9KSk7DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKG1vbmdvZGIpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgICAgICB0b29sLmRiID0gKGF3YWl0IG5ldyBtb25nb2RiLk1vbmdvQ2xpZW50KHRoaXMuX19jb25maWcoJ3VyaScsIG51bGwsIHt0b29sOiB0b29sfSksIHRoaXMuX19jb25maWcoJ2NvbmZpZycsIG51bGwsIHt0b29sOiB0b29sfSkpLmNvbm5lY3QoKSkuZGIodGhpcy5fX2NvbmZpZygnZGF0YWJhc2UnLCAiPCU9c2NvcGUlPiIsIHt0b29sOiB0b29sfSkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICA8JSB9ZWxzZSBpZih0PT0nUnhEQicpeyU+DQogICAgICAgICAgICAgICAgdG9vbC5kYiA9IGF3YWl0IFJ4REIuY3JlYXRlUnhEYXRhYmFzZSh7bmFtZTogdGhpcy5fX2NvbmZpZygnZGF0YWJhc2UnLCAiPCU9c2NvcGUlPiIsIHt0b29sOiB0b29sfSksIHN0b3JhZ2U6IG51bGx9KTsNCiAgICA8JSB9ZWxzZSBpZih0PT0nWmFuZ29EQicpeyU+DQogICAgICAgICAgICAgICAgdG9vbC5kYiA9IG5ldyB6YW5nby5EYih0aGlzLl9fY29uZmlnKCdkYXRhYmFzZScsICI8JT1zY29wZSU+Iiwge3Rvb2w6IHRvb2x9KSwgew0KICAgICAgICA8JSBhckNsYXNzZXMuZm9yRWFjaChlYyA9PiB7JT4NCiAgICAgICAgICAgICAgICAgICAgPCU9bk5hbWUoZWMpJT46IFsiPCU9ZWMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkubWFwKGVhID0+IG5OYW1lKGVhKSkuam9pbignXCIsIFwiJyklPiJdLA0KICAgICAgICA8JSB9KSAlPg0KICAgICAgICAgICAgICAgIH0pOw0KICAgIDwlIH1lbHNlIGlmKHQ9PSdLYWZrYScpeyU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKGthZmthanMpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgICAgICB0b29sLmRiID0gbmV3IGthZmthanMuS2Fma2Eoew0KICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuX19jb25maWcoJ2NsaWVudElkJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlcnM6IFt0aGlzLl9fY29uZmlnKCdicm9rZXJzJywgbnVsbCwge3Rvb2w6IHRvb2x9KV0sDQogICAgICAgICAgICAgICAgICAgICAgICBzc2w6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBzYXNsOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMuX19jb25maWcoJ2NsaWVudElkJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5fX2NvbmZpZygnc2FzbF9wYXNzd29yZCcsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVjaGFuaXNtOiB0aGlzLl9fY29uZmlnKCdzYXNsX21lY2hhbmlzbXMnLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAzMDAwLA0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgdG9vbC5wcm9kdWNlciA9IHRvb2wuZGIucHJvZHVjZXIoKTsNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdG9vbC5wcm9kdWNlci5jb25uZWN0KCk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICB0b29sLmNvbnN1bWVyID0gdG9vbC5kYi5jb25zdW1lcih7Z3JvdXBJZDogdGhpcy5fX2NvbmZpZygnY2xpZW50SWQnLCBudWxsLCB7dG9vbDogdG9vbH0pfSk7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IHRvb2wuY29uc3VtZXIuY29ubmVjdCgpOw0KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0b29sLmNvbnN1bWVyLnN1YnNjcmliZSh7DQogICAgICAgICAgICAgICAgICAgICAgICB0b3BpYzogJzwlPXNjb3BlJT4uY2FsbCcsDQogICAgICAgICAgICAgICAgICAgICAgICBmcm9tQmVnaW5uaW5nOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgIDwlIGlmKF9jTmFtZSgnRXZlbnQnKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgdG9vbC5jb25zdW1lci5ydW4oe2VhY2hNZXNzYWdlOiBhc3luYyAoeyB0b3BpYywgcGFydGl0aW9uLCBtZXNzYWdlIH0pID0+IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRXZlbnQnLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChtZXNzYWdlLnZhbHVlLnRvU3RyaW5nKCkpLnByb2Nlc3MoKX0pOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICB9DQogICAgPCV9ZWxzZSBpZih0PT0nTWVtb3J5Jyl7JT4NCiAgICAgICAgICAgICAgICB0b29sLmRiID0gew0KICAgICAgICA8JSBhckNsYXNzZXMuZm9yRWFjaChlYyA9PiB7JT4NCiAgICAgICAgICAgICAgICAgICAgJzwlPW5OYW1lKGVjKSU+JzogW10sDQogICAgICAgIDwlIH0pOyAlPg0KICAgICAgICAgICAgICAgIH07DQogICAgPCV9ZWxzZSBpZih0PT0iRXhjZWwiKXslPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih3aW5kb3cpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgICAgICA8JT1zY29wZSU+LmRiID0gPCU9c2NvcGUlPi54bHN4RGF0YT9YTFNYLnJlYWQoPCU9c2NvcGUlPi54bHN4RGF0YSk6WExTWC51dGlscy5ib29rX25ldygpOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICA8JT1zY29wZSU+LmRiID0gWExTWC5yZWFkKGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHRoaXMuX19jb25maWcoJ2ZpbGVuYW1lJywgbnVsbCwge3Rvb2w6IHRvb2x9KSkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICA8JX1lbHNlIGlmKHQ9PSJTbm93Rmxha2UiKXslPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZihnbG9iYWwpIT09J3VuZGVmaW5lZCcgJiYgZ2xvYmFsLnNub3dmbGFrZSl7DQogICAgICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBnbG9iYWwuc25vd2ZsYWtlLmNyZWF0ZUNvbm5lY3Rpb24oew0KICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudDogdGhpcy5fX2NvbmZpZygiYWNjb3VudCIsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdGhpcy5fX2NvbmZpZygidXNlcm5hbWUiLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuX19jb25maWcoInBhc3N3b3JkIiwgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uOiB0aGlzLl9fY29uZmlnKCJzY29wZSIsIG51bGwsIHt0b29sOiB0b29sfSkgfHwgIjwlPXNjb3BlJT4iLA0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0b29sLmRiLmNvbm5lY3QoKGVyciwgY29ubik9PnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCU9ZXJyb3IoKSU+J1VuYWJsZSB0byBjb25uZWN0OiAnICsgZXJyLm1lc3NhZ2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWooZXJyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sLmRiLmNvbm5lY3Rpb25fSUQgPSBjb25uLmdldElkKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgPCV9ZWxzZSBpZih0PT0iTmVvNGoiKXslPg0KICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBuZW80ai5kcml2ZXIoDQogICAgICAgICAgICAgICAgICAgIHRoaXMuX19jb25maWcoJ3VybCcsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgIG5lbzRqLmF1dGguYmFzaWModGhpcy5fX2NvbmZpZygndXNlcm5hbWUnLCBudWxsLCB7dG9vbDogdG9vbH0pLCB0aGlzLl9fY29uZmlnKCdwYXNzd29yZCcsIG51bGwsIHt0b29sOiB0b29sfSkpDQogICAgICAgICAgICAgICAgKTsNCiAgICA8JX1lbHNlIGlmKHQ9PSJBaXJUYWJsZSIpeyU+DQogICAgICAgICAgICAgICAgdG9vbC5kYiA9IHsNCiAgICAgICAgICAgICAgICAgICAgYmFzZUlkOiAnJywNCiAgICAgICAgICAgICAgICAgICAgd29ya3NwYWNlSWQ6IHRoaXMuX19jb25maWcoJ3dvcmtzcGFjZUlkJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsDQogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJywNCiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiAoYXdhaXQgdGhpcy5fYWlydGFibGUoJ21ldGEvd2hvYW1pJykpLmlkLA0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBsZXQgYmFzZXMgPSAoYXdhaXQgdGhpcy5fYWlydGFibGUoJ21ldGEvYmFzZXMnKSkuYmFzZXM7DQogICAgICAgICAgICAgICAgaWYoYmFzZXMubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICAgICAgdG9vbC5kYi5iYXNlSWQgPSBiYXNlcy5maWx0ZXIoYiA9PiBiLm5hbWU9PSc8JT1zY29wZSU+JykuaWQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKCF0aGlzLlRvb2wuZGIuYmFzZUlkKSB0b29sLmRiLmJhc2VJZCA9ICdhcHAnICsgdGhpcy5fdXVpZCgpLnNwbGl0KCctJykuc2xpY2UoLTEpWzBdOw0KICAgIDwlfWVsc2UgaWYodD09IlNxbERCIil7JT4NCiAgICAgICAgICAgICAgICBpZih0eXBlb2YoZ2xvYmFsKSE9PSd1bmRlZmluZWQnICYmIGdsb2JhbFt0aGlzLl9fY29uZmlnKCd0eXBlJywgbnVsbCwge3Rvb2w6IHRvb2x9KV0pew0KICAgICAgICAgICAgICAgICAgICBpZihnbG9iYWxbdGhpcy5fX2NvbmZpZygndHlwZScsIG51bGwsIHt0b29sOiB0b29sfSldLkRhdGFiYXNlKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBuZXcgZ2xvYmFsW3RoaXMuX19jb25maWcoJ3R5cGUnLCBudWxsLCB0b29sKV0uRGF0YWJhc2UodGhpcy5fX2NvbmZpZygnZGF0YWJhc2UnLCBudWxsLCB7dG9vbDogdG9vbH0pIHx8ICIuLzwlPXNjb3BlJT4uZGIiKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZ2xvYmFsW3RoaXMuX19jb25maWcoJ3R5cGUnLCBudWxsLCB7dG9vbDogdG9vbH0pXS5jcmVhdGVDb25uZWN0aW9uKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBnbG9iYWxbdGhpcy5fX2NvbmZpZygndHlwZScsIG51bGwsIHt0b29sOiB0b29sfSldLmNyZWF0ZUNvbm5lY3Rpb24oew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHRoaXMuX19jb25maWcoJ3NlcnZlcicsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogdGhpcy5fX2NvbmZpZygndXNlcm5hbWUnLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLl9fY29uZmlnKCdwYXNzd29yZCcsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2U6IHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJywgbnVsbCwge3Rvb2w6IHRvb2x9KSB8fCAiPCU9c2NvcGUlPiIsDQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZ2xvYmFsW3RoaXMuX19jb25maWcoJ3R5cGUnLCBudWxsLCB7dG9vbDogdG9vbH0pXS5DbGllbnQpew0KICAgICAgICAgICAgICAgICAgICAgICAgdG9vbC5kYiA9IG5ldyBnbG9iYWxbdGhpcy5fX2NvbmZpZygndHlwZScsIG51bGwsIHt0b29sOiB0b29sfSldLkNsaWVudCh7Y29ubmVjdGlvblN0cmluZzogdGhpcy5fX2NvbmZpZygnY29ubnN0cicsIG51bGwsIHt0b29sOiB0b29sfSl9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRvb2wuZGIuY29ubmVjdCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mKGdsb2JhbCk9PT0ndW5kZWZpbmVkJyAmJiB0aGlzLl9fY29uZmlnKCd0eXBlJywgbnVsbCwge3Rvb2w6IHRvb2x9KT09PSdzcWxpdGUnKXsNCiAgICAgICAgICAgICAgICAgICAgLy8gc3FsaXRlIGluIGJyb3dzZXINCiAgICAgICAgICAgICAgICAgICAgdG9vbC5kYiA9IG5ldyBTUUwuRGF0YWJhc2UoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgPCV9ZWxzZSBpZih0PT0iU2VydmljZU5vdyIpeyU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHRvb2wuc3lzX3Njb3BlKT09PSJ1bmRlZmluZWQiKXsNCiAgICAgICAgICAgICAgICAgICAgLy8gdG9vbC5zeXNfc2NvcGUgPSAoYXdhaXQgdGhpcy5fcmVzdCgic3lzX2FwcCIsIHtzeXNfc2NvcGU6IHRoaXMuX19jb25maWcoInNjb3BlIiwgbnVsbCwge3Rvb2w6IHRvb2x9KSB8fCAiZ2xvYmFsIn0pKVswXS5zeXNfaWQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0b29sLnN5c19wcm9wZXJ0aWVzKT09PSJ1bmRlZmluZWQiKXsNCiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZGluZyBzb21lIHBsYXRmb3JtIHN0dWZmDQogICAgICAgICAgICAgICAgICAgIHRvb2wuc3lzX3Byb3BlcnRpZXMgPSB7fTsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IE9iamVjdC5rZXlzKHRvb2wuc3lzX3Byb3BlcnRpZXMpLmZpbHRlcihrID0+ICF0b29sLnN5c19wcm9wZXJ0aWVzW2tdKS5qb2luKCcsJyk7DQogICAgICAgICAgICAgICAgICAgIGlmKGNvbmRpdGlvbil7DQogICAgICAgICAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy5fcmVzdCgic3lzX3Byb3BlcnRpZXMiLCB7bmFtZTogIklOIitjb25kaXRpb259KSkuZm9yRWFjaChyID0+IHRvb2wuc3lzX3Byb3BlcnRpZXNbci5uYW1lXSA9IHIudmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlfSU+DQogICAgICAgICAgICB9DQo8JSB9KSU+DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRoaXM7DQo8JSB9JT4NCiAgICB9DQogICAgLyogRW5kOiBVdGlsIGZ1bmN0aW9ucyAqLw0KICAgIA0KICAgIDwlPW1OYW1lPSdfbWF0Y2hlcyclPihxdWVyeSwgb3B0aW9ucyl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKCFxdWVyeSB8fCAhcXVlcnkuRW50aXR5Q2xhc3MgfHwgcXVlcnkuRW50aXR5Q2xhc3MuTmFtZSE9IjwlPW5OYW1lKGMpJT4iKSByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBvTWF0Y2ggPSB0aGlzLl9fZXhwb3J0KHt9LCB7DQogICAgICAgICAgICAgICAgLy9GdWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgIC8vTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBJZDogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouX2lkID0gdGhpcy5JZD09cXVlcnkuSWQsDQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9bk5hbWUoZWEpJT4gPSB2P3YuPCU9bU5hbWUlPihxdWVyeT9xdWVyeS48JT1uTmFtZShlYSklPigpOm51bGwpOnRydWU7DQogICAgICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9bk5hbWUoZWEpJT4gPSB2PT1xdWVyeS48JT1uTmFtZShlYSklPigpOw0KICAgICAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIGlmKA0KICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCAmJiAhcXVlcnkuXzwlPW5OYW1lKGVhKSU+X3NldCkgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlDQogICAgICAgICAgICAgICAgICAgICkgb2JqLjwlPW5OYW1lKGVhKSU+ID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKA0KICAgICAgICAgICAgICAgICAgICAgICAgKCF0aGlzLl88JT1uTmFtZShlYSklPl9zZXQgJiYgcXVlcnkuXzwlPW5OYW1lKGVhKSU+X3NldCkgfHwNCiAgICAgICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgICAgICAgICAodGhpcy48JT1uTmFtZShlYSklPigpICYmICF0aGlzLjwlPW5OYW1lKGVhKSU+KCkuPCU9bU5hbWUlPihxdWVyeS48JT1uTmFtZShlYSklPigpKSkgfHwNCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UNCiAgICAgICAgICAgICAgICAgICAgKSBvYmouPCU9bk5hbWUoZWEpJT4gPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KTsgJT4NCiAgICAgICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9dGFOYW1lJT4gPSB2Lm1hcChfdiA9PiBxdWVyeS48JT10YU5hbWUlPigpLmFueShxID0+IF92LjwlPW1OYW1lJT4ocSkpKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+b01hdGNoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9NYXRjaCkuZXZlcnkoayA9PiBvTWF0Y2hba10pOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J19tYXRjaGluZyclPihxdWVyeSl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCByZXQgPSBbXTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSB0aGlzLl9fZXhwb3J0KHt9LCB7DQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPiJGb3IgPCU9bk5hbWUoZWEpJT4iKTsNCiAgICAgICAgICAgICAgICAgICAgb2JqLjwlPW5OYW1lKGVhKSU+ID0gdj9bdi48JT1tTmFtZSU+KHF1ZXJ5KT92Om51bGxdLmNvbmNhdCh2LjwlPW1OYW1lJT4ocXVlcnkpKS5maWx0ZXIobSA9PiBtKTpbXTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgb2JqLjwlPXRhTmFtZSU+ID0gdi5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPihxdWVyeSkpLmZsYXQoKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KDQogICAgICAgICAgICA8JT1sb2coKSU+Im1hdGNoZXMiLCBtYXRjaGVzKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0ID0gWy4uLm5ldyBTZXQoT2JqZWN0LmtleXMobWF0Y2hlcykubWFwKGsgPT4gbWF0Y2hlc1trXSkuZmxhdCgpKV0uZmlsdGVyKG0gPT4gbSE9cXVlcnkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+InJldCIsIHJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZGVSZWZlcmVuY2UnJT4ocm9vdCl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKCFyb290KSByb290PXRoaXM7DQoNCiAgICAgICAgICAgIGlmKHJvb3QhPXRoaXMgJiYgdGhpcy5TZXRfT24pIHsNCiAgICAgICAgICAgICAgICBsZXQgbXlNYXRjaGVzID0gcm9vdC5fbWF0Y2hpbmcodGhpcyk7DQogICAgICAgICAgICAgICAgaWYoIW15TWF0Y2hlcy5sZW5ndGgpIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iUXVlcnkiLCBteU1hdGNoZXMubGVndGgpOw0KICAgICAgICAgICAgICAgIHJldHVybiBteU1hdGNoZXNbMF07DQogICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICB0aGlzLl9fZXhwb3J0KHt9LCB7DQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodil7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gdi48JT1tTmFtZSU+KHJvb3QpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocmV0IT12KSB0aGlzLjwlPW5OYW1lKGVhKSU+KHJldCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KTsgJT4NCiAgICAgICAgDQogICAgICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdi5maWx0ZXIodGEgPT4gdGEpLmZvckVhY2goKHRhLCBpKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gdGEuPCU9bU5hbWUlPihyb290KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJldCE9dGEpIHRoaXMuPCU9dGFOYW1lJT4oKVtpXSA9IHJldDsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19mcm9tRG9jdW1lbnQnJT4ob2JqLCBiVG9vbCl7DQogICAgICAgIGlmKCFvYmopIHJldHVybiB0aGlzOw0KICAgICAgICBpZihvYmouPCU9bU5hbWUlPikgcmV0dXJuIG9iajsNCiAgICAgICAgDQogICAgICAgIGlmKHR5cGVvZihvYmopPT09J3N0cmluZycpew0KICAgICAgICAgICAgaWYoPCU9X2I2NHRlc3QoJ29iaicpJT4pIG9iaiA9IHRoaXMuX2F0b2Iob2JqKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgIGlmKG9iai5sZW5ndGg8MzMgJiYgIW9iai5tYXRjaCgvXHMvZykpew0KICAgICAgICAgICAgICAgICAgICBvYmogPSB7DQogICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcsIHt0b29sOiBvYmouX190b29sfSldOiBvYmoNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgb2JqID0gSlNPTi5wYXJzZShvYmopOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgPCU9d2FybigpJT4iSW52YWxpZCBKU09OIG9yIFVVSUQiLCBvYmopOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9ZWxzZSBpZihBcnJheS5pc0FycmF5KG9iaikpew0KICAgICAgICAgICAgcmV0dXJuIG9iai5tYXAobyA9PiB0aGlzLjwlPW1OYW1lJT4obywgYlRvb2wpKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYob2JqLl9fdG9vbCkgdGhpcy5Ub29sID0gb2JqLl9fdG9vbDsNCiAgICAgICAgDQogICAgICAgIGlmKCFPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+IHR5cGVvZihvYmpba10pIT09J3VuZGVmaW5lZCcgJiYgb2JqW2tdIT09bnVsbCkubGVuZ3RoKXsNCiAgICAgICAgICAgIDwlPWxvZygpJT4iRW1wdHkgb2JqZWN0IG9yIG9iamVjdCBvZiBudWxscyIsIG9iaik7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KDQogICAgICAgIDwlPWxvZygpJT5vYmopOw0KICAgICAgICByZXR1cm4gdGhpcy5fX2ltcG9ydChvYmosIHsNCiAgICAgICAgICAgIF9tYXA6IGJUb29sLA0KICAgICAgICAgICAgaW1wb3J0ZXI6IHYgPT4gdi5vYmogPSAodi5vYmomJnYub2JqLlNldF9Db3VudDx0aGlzLlNldF9Db3VudCk/dGhpczp2Lm9iaiwNCiAgICAgICAgICAgIF9USElTOiBvYmogPT4gdGhpcy5USElTKG9iai5USElTLCBvYmouT1BFUkFUT1JTP29iai5PUEVSQVRPUlMuVEhJUzp1bmRlZmluZWQpLA0KICAgICAgICAgICAgSWQ6IChvYmosIGlkQ29kZSkgPT4gew0KICAgICAgICAgICAgICAgIGlmKGlkQ29kZT09J0lkJykgaWRDb2RlID0gdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpOw0KICAgICAgICAgICAgICAgIGlmKG9ialtpZENvZGVdKSB0aGlzLklkID0gb2JqW2lkQ29kZV07DQogICAgICAgICAgICB9LA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlKSA9PiB7DQogICAgICAgICAgICAgICAgaWYob2JqLk9QRVJBVE9SUyAmJiBvYmouT1BFUkFUT1JTW2VhQ29kZV0pew0KICAgICAgICAgICAgICAgICAgICB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wID0gb2JqLk9QRVJBVE9SU1tlYUNvZGVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgcmVmID0gb2JqW2VhQ29kZV07DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHJlZik9PT0ndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7ICU+DQogICAgICAgICAgICAgICAgPCUgaWYoIWVhLklzQXJyYXkpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSJSZXN0REJJTyIpIHJlZiA9IHJlZlswXTsNCiAgICAgICAgICAgICAgICBpZighcmVmKSByZXR1cm47DQogICAgICAgICAgICAgICAgPCUgfSAlPg0KDQogICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPigodGhpcy48JT1uTmFtZShlYSklPigpIHx8IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkpLjwlPW1OYW1lJT4ocmVmLCBiVG9vbCkpOw0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wudHlwZS5uYW1lPT0iU3FsREIiKXsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKG1vbWVudCkhPT0idW5kZWZpbmVkIiAmJiB0eXBlb2YodGhpcy5Ub29sLnN5c19wcm9wZXJ0aWVzKSE9PSJ1bmRlZmluZWQiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IG1vbWVudC5wYXJzZVpvbmUocmVmLCB0aGlzLlRvb2wuc3lzX3Byb3BlcnRpZXNbImdsaWRlLnN5cy5kYXRlX2Zvcm1hdCJdICsgIiAiICsgdGhpcy5Ub29sLnN5c19wcm9wZXJ0aWVzWyJnbGlkZS5zeXMudGltZV9mb3JtYXQiXSwgdGhpcy5Ub29sLnN5c19wcm9wZXJ0aWVzWyJnbGlkZS5zeXMuZGVmYXVsdC50eiJdKS50b0RhdGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBuZXcgRGF0ZShyZWYpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZihyZWYpPT09J3N0cmluZycpew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVmLmluZGV4T2YoJ1QnKT4wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBEYXRlLnBhcnNlKHJlZik7DQogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBEYXRlLnBhcnNlKHJlZiArICIgR01UIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmVmID0gbmV3IERhdGUocmVmKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihyZWYpOw0KICAgICAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihyZWYpOw0KICAgICAgICAgICAgPCUgfSAlPg0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUpID0+IG9ialtlYUNvZGVdP3RoaXMuPCU9dGFOYW1lJT4ob2JqW2VhQ29kZV0ubWFwKF92ID0+IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihfdiwgYlRvb2wpKSwgb2JqLk9QRVJBVE9SUz9vYmouT1BFUkFUT1JTW2VhQ29kZV06dW5kZWZpbmVkLCB0cnVlKTp1bmRlZmluZWQsDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgIH0NCiAgICANCjwlIGlmKF9jTmFtZSgnRXZlbnQnKSl7JT4NCiAgICA8JT1tTmFtZT0nX3RvUHJvdG8nJT4ob3B0aW9ucz17fSwgc1BhdGgpew0KICAgICAgICB0cnl7DQogICAgICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7SWQ6IDwlPV9uQ29kZSgpJT4sIHByb3RvOiBgXG5cbm1lc3NhZ2UgJHs8JT1fbkNvZGUoKSU+fSB7YCwgaW5kZXg6IDF9LCB7DQogICAgICAgICAgICAgICAgX21hcDogb3B0aW9ucy5iTWFwLA0KICAgICAgICAgICAgICAgIEZ1bGw6IHRydWUsDQogICAgICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBleHBvcnRlcjogdiA9PiB2Lm9iaj0odi5yZXVzZWQ+MSk/e3Byb3RvOiBgXG5cbi8vIHJldXNlZFske3YucmV1c2VkfV06ICR7PCU9X25Db2RlKCklPn1cblxuYH06di5vYmosDQogICAgICAgICAgICAgICAgX1RISVM6IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLnByb3RvICs9IGBcblx0cmVwZWF0ZWQgJHs8JT1fbkNvZGUoKSU+fSAke2VhQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9iai5wcm90byArPSBgXG5cdHN0cmluZyAke2lkQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gYFxuXHRgICsgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KG9wdGlvbnMsIGAke3NQYXRofS4ke2VhQ29kZX1gKTsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSBgXG5cdGA7DQogICAgICAgIDwlIGlmKGVhLlJlcXVpcmVkKXslPg0KICAgICAgICAgICAgICAgICAgICBpZig8JXZhbHVlT2YoZWEuUmVxdWlyZWQpJT4pIG9iai5wcm90byArPSAncmVxdWlyZWQgJzsNCiAgICAgICAgPCUgfSU+DQogICAgICAgIDwlIGlmKGVhLklzQXJyYXkpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSAncmVwZWF0ZWQgJzsNCiAgICAgICAgPCUgfSU+DQogICAgICAgIDwlIGlmKGVhLklzU3RyaW5nIHx8IGVhLklzVGV4dCl7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLnByb3RvICs9ICJzdHJpbmciOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSAiYm9vbCI7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzSW50KXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gImludDMyIjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNMb25nKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gImludDY0IjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNGbG90KXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gImZsb2F0IjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEb3VibGUpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSAiZG91YmxlIjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEYXRlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gInN0cmluZyI7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSA8JT1fbkNvZGUoZWEuRW50aXR5VHlwZSklPjsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSBgICR7ZWFDb2RlfSA9ICR7b2JqLmluZGV4Kyt9O2A7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4ge2xldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLnByb3RvICs9IGBcblx0YCArIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4ob3B0aW9ucywgYCR7c1BhdGh9LiR7ZWFDb2RlfVtdYCkgKyBgXG5cdHJlcGVhdGVkICR7PCU9X25Db2RlKHRhLkVudGl0eUNsYXNzKSU+fSAke2VhQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgIDwlIH0pJT4NCiAgICA8JSBjLkVudGl0eUZpZWxkcy5mb3JFYWNoKGVmID0+IHslPg0KICAgICAgICAgICAgICAgIGVmXzwlPW5OYW1lKGVmKSU+OiAob2JqLCBlZkNvZGUsIHYpID0+IG9iai5wcm90byArPSBgXG5cdHN0cmluZyAke2VmQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgICAgICBfX2Nsb3NlOiBvYmogPT4gb2JqLnByb3RvICs9ICdcbn1cblxuJywNCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+Iiwgb3B0aW9ucywgc1BhdGgpLnByb3RvOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihyZXQgJiYgIXNQYXRoKXsNCiAgICAgICAgICAgICAgICByZXQgPSBgcGFja2FnZSA8JT1zY29wZSU+O1xuXG5zeW50YXggPSAicHJvdG8zIjtcblxuYCArIHJldDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQo8JX0lPg0KDQogICAgPCU9bU5hbWU9J190b0pTT04nJT4ob3B0aW9ucz17fSwgc1BhdGgpew0KICAgICAgICB0cnl7DQogICAgICAgICAgICBzUGF0aCA9IHNQYXRoIHx8ICIiOw0KICAgICAgICAgICAgbGV0IHJldCA9IHt9Ow0KICAgICAgICAgICAgcmV0Ll9fa2V5cyA9IFtdOyAvLyEhDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKCFvcHRpb25zLmJNYXApew0KICAgICAgICAgICAgICAgIHJldC5fX2dlbmVyYXRlZCA9ICciJyArIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArICciJzsNCiAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wubmFtZSl7DQogICAgICAgICAgICAgICAgICAgIHJldC5fX3Rvb2wgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLlRvb2wubmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLlRvb2wudHlwZS5uYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICByZXQuX19jbGFzcyA9ICciPCU9bk5hbWUoYyklPiInOw0KICAgICAgICAgICAgICAgICAgICByZXQuX190eXBlID0gJyInKzwlPV9uQ29kZSgpJT4rJyInOw0KICAgICAgICAgICAgICAgICAgICAvL3JldC5fX3BhdGggPSAnIicrc1BhdGgrJyInOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZig8JT1uc2NvcGUlPi5fbm9kZSl7DQogICAgICAgICAgICAgICAgICAgIHJldC5fX25vZGUgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiA8JT1uc2NvcGUlPi5fbm9kZS5jb2RlKCkNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0cygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgdHJNYXAgPSAob2JqLCBlYUNvZGUsIHYsIHNQYXRoKSA9PiAodiAmJiB0eXBlb2Yodik9PT0nc3RyaW5nJyAmJiB2LnJlcGxhY2UpP3YucmVwbGFjZSgvPDxbXj4+XSs+Pi9nbSwgbSA9PiB7DQogICAgICAgICAgICAgICAgPCU9c2NvcGUlPi5fX3RyTWFwID0gPCU9c2NvcGUlPi5fX3RyTWFwIHx8IFtdOw0KDQogICAgICAgICAgICAgICAgbGV0IHRyaWQgPSB0aGlzLl91dWlkKCk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IHBQYXRoID0gJy4nKyhzUGF0aC5zcGxpdCgnLicpLnNsaWNlKDEsIC0xKS5qb2luKCcuJykpOw0KICAgICAgICAgICAgICAgIGlmKHBQYXRoPT0iLiIpIHBQYXRoID0gIiI7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IHRyID0gbS5yZXBsYWNlKCc8PCcsICcnKS5yZXBsYWNlKCc+PicsICcnKS5yZXBsYWNlKC97e25yfX0vZ20sICckbm90KCRleGlzdHMoX19yZXVzZWQpKScpLnJlcGxhY2UoL3t7dmZ9fS9nLCBvYmpbZWFDb2RlXSk7DQogICAgICAgICAgICAgICAgaWYodHIuc3RhcnRzV2l0aCgncygnKSAmJiB0ci5lbmRzV2l0aCgnKScpKXsNCiAgICAgICAgICAgICAgICAgICAgdHIgPSB0ci5yZXBsYWNlKC97e19ffX0vZ20sICdvSlNPTicrc1BhdGgpLnJlcGxhY2UoL3t7cHBhdGh9fS9nbSwgJ29KU09OJytwUGF0aCk7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgve3tfX319L2dtLCBgKipbSWQ9JHtvYmouSWR9XVswXWApOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIDwlPXdhcm4oKSU+ZWFDb2RlLCB0cmlkLCB0cik7DQoNCiAgICAgICAgICAgICAgICB0ciA9IHRoaXMuX2J0b2EodHIpOw0KICAgICAgICAgICAgICAgIGxldCBtYXAgPSA8JT1zY29wZSU+Ll9fdHJNYXAuZmluZChvID0+IG8udHJhbnNmb3JtPT10cik7DQogICAgICAgICAgICAgICAgcmV0dXJuIChtYXA/bWFwLmlkOjwlPXNjb3BlJT4uX190ck1hcFs8JT1zY29wZSU+Ll9fdHJNYXAucHVzaCh7aWQ6IHRyaWQsIHRyYW5zZm9ybTogdHJ9KS0xXS5pZCk7DQogICAgICAgICAgICB9KTp2Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXQgPSB0aGlzLl9fZXhwb3J0KHJldCwgew0KICAgICAgICAgICAgICAgIF9tYXA6IG9wdGlvbnMuYk1hcCwNCiAgICAgICAgICAgICAgICBGdWxsOiBvcHRpb25zLmJGdWxsLA0KICAgICAgICAgICAgICAgIE51bGw6IG9wdGlvbnMuYk51bGwsDQogICAgICAgICAgICAgICAgZXhwb3J0ZXI6IHYgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2Yob3B0aW9ucy5yZXVzZWQpPT09J3VuZGVmaW5lZCcgfHwgb3B0aW9ucy5yZXVzZWQ+PXYucmV1c2VkKSByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZih2ICYmIHYub2JqICYmIHR5cGVvZih2Lm9iai5fcmV0dXJuKT09PSdzdHJpbmcnICYmIHYub2JqLl9yZXR1cm4uaW5kZXhPZignX19yZXVzZWQ6IDEnKT4wKSByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBsZXQgb0hhc2ggPSBvcHRpb25zLmJIYXNoP1t0aGlzLl90b0hhc2gobnVsbCwge25vQ29kZTogdHJ1ZSwgb25seVVuaXF1ZTogdHJ1ZSwgbm9BcmdzOiB0cnVlLCBfbWFwOiBvcHRpb25zLmJNYXAsIG5vVHlwZXM6IGZhbHNlfSwgIjwlPW1OYW1lJT4iKV06T2JqZWN0LmtleXMocmV0KS5maWx0ZXIoayA9PiBrPT0nSWQnIHx8IGsuaW5kZXhPZignX18nKT09MCkubWFwKGsgPT4ge3RyeXtyZXR1cm4geyBba106IEpTT04ucGFyc2UocmV0W2tdKSB9OyB9Y2F0Y2goZXgpe3JldHVybiB7W2tdOiByZXRba119OyB9IH0pOw0KICAgICAgICAgICAgICAgICAgICBsZXQgZVJldCA9IE9iamVjdC5hc3NpZ24oLi4ub0hhc2gsIHtfX3JldXNlZDogdi5yZXVzZWR9ICk7DQogICAgICAgICAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkoZVJldC5fX2tleXMpKSBlUmV0Ll9fa2V5cy5mb3JFYWNoKGVrID0+IHt0cnl7IGVSZXRbZWtdID0gSlNPTi5wYXJzZShyZXRbZWtdKTt9Y2F0Y2goZXgpe2VSZXRbZWtdID0gcmV0W2VrXTsgfSB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2Lm9iaiA9IHtfcmV0dXJuOiBKU09OLnN0cmluZ2lmeShlUmV0KX07DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBfVEhJUzogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuYk1hcCkgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICBvYmouVEhJUyA9IHRoaXMuX1RISVMubWFwKHQgPT4gdC48JT1tTmFtZSU+KG9wdGlvbnMsIGAke3NQYXRofS4ke2VhQ29kZX1gKSk7DQogICAgICAgICAgICAgICAgICAgIG9iai5PUEVSQVRPUlMgPSBvYmouT1BFUkFUT1JTIHx8IHt9Ow0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgSWQ6IChvYmosIGlkQ29kZSwgdikgPT4gb2JqW2lkQ29kZV0gPSBgIiR7dn0iYCwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgPCUgaWYoZWEuSXNVbmlxdWUpeyU+DQogICAgICAgICAgICAgICAgICAgIGlmKG9iai5fX2tleXMpIG9iai5fX2tleXMucHVzaChlYUNvZGUpOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLklzVGV4dCl7JT4NCiAgICAgICAgICAgICAgICAgICAgaWYoITwlPV9iNjR0ZXN0KCd2JyklPil7IC8vIGlzIG5vdCBiYXNlNjQ/DQogICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5fYnRvYSh2KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0RhdGUpeyU+DQogICAgICAgICAgICAgICAgICAgIHYgPSB2JiZ2LnRvSVNPU3RyaW5nP3YudG9JU09TdHJpbmcoKTp2Ow0KICAgICAgICA8JSB9JT4NCiAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gdj92LjwlPW1OYW1lJT4ob3B0aW9ucywgYCR7c1BhdGh9LiR7ZWFDb2RlfWApOidudWxsJzsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNCb29sIHx8IGVhLklzSW50IHx8IGVhLklzTG9uZyB8fCBlYS5Jc0Zsb2F0IHx8IGVhLklzRG91YmxlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHRyTWFwKG9iaiwgZWFDb2RlLCB2LCBzUGF0aCk7DQogICAgICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gJyInICsgdHJNYXAob2JqLCBlYUNvZGUsIHYsIHNQYXRoKSArICciJzsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4ge2xldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqW2VhQ29kZV0gPSAnWycgKyAodiB8fCBbXSkubWFwKChfdiwgX2kpID0+IF92LjwlPW1OYW1lJT4ob3B0aW9ucywgYCR7c1BhdGh9LiR7ZWFDb2RlfVske19pfV1gKSkuZmlsdGVyKF92ID0+IF92KS5qb2luKCkgKyAnXScsDQogICAgPCUgfSklPg0KICAgIDwlIGMuRW50aXR5RmllbGRzLmZvckVhY2goZWYgPT4geyU+DQogICAgICAgICAgICAgICAgZWZfPCU9bk5hbWUoZWYpJT46IChvYmosIGVmQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHYpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtlZkNvZGVdID0gSlNPTi5zdHJpbmdpZnkodik7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHRyTWFwKG9iaiwgZWZDb2RlLCB2LCBzUGF0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2Yodik9PT0ndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBvYmpbZWZDb2RlXSA9IHY7DQogICAgICAgIDwlIGlmKCFlZi5Jc0Jvb2wgJiYgIWVmLklzSW50ICYmICFlZi5Jc0xvbmcgJiYgIWVmLklzRmxvYXQgJiYgIWVmLklzRG91YmxlKXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2VmQ29kZV0gPSAnIicgKyBvYmpbZWZDb2RlXSArICciJzsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCg0KICAgICAgICAgICAgICAgIF9fdHJNYXA6IG9iaiA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKCFzUGF0aCl7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouX190ck1hcCA9IDwlPXNjb3BlJT4uX190ck1hcCB8fCBbXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSA8JT1zY29wZSU+Ll9fdHJNYXA7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KDQogICAgICAgICAgICAgICAgX3JldHVybjogb2JqID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYob2JqKSBvYmouX3JldHVybiA9IChPYmplY3Qua2V5cyhvYmp8fHt9KS5sZW5ndGgpPygneycgKyBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+IHR5cGVvZihvYmpba10pPT09InN0cmluZyIpLm1hcChrID0+IGAiJHtrfSI6ICR7b2JqW2tdfWApLmNvbmNhdChPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+IHR5cGVvZihvYmpba10pIT09InN0cmluZyIpLm1hcChrID0+IGAiJHtrfSI6ICR7SlNPTi5zdHJpbmdpZnkob2JqW2tdKX1gKSkuam9pbigpICsgJ30nKTonbnVsbCc7DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+Iiwgb3B0aW9ucywgc1BhdGgpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXQgPSByZXQ/cmV0Ll9yZXR1cm46cmV0Ow0KICAgICAgICAgICAgcmV0ID0gdHlwZW9mKHJldCk9PT0ndW5kZWZpbmVkJz9udWxsOnJldDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIXNQYXRoICYmIHJldCl7DQogICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5fYmVhdXRpZnkocmV0LCAnamF2YXNjcmlwdCcpOw0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMucGFyc2UpIHJldHVybiBKU09OLnBhcnNlKHJldCk7DQogICAgICAgICAgICAgICAgaWYob3B0aW9ucy5nemlwKSByZXR1cm4gdGhpcy5VdGY4QXJyYXlUb1N0cih0aGlzLl9jb21wcmVzcyhyZXQpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHJldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfdG9Eb2N1bWVudCclPihvcHRpb25zPXt9KXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IGpzb24gPSB0aGlzLl90b0pTT04ob3B0aW9ucyk7DQogICAgICAgICAgICBsZXQgb0pTT04gPSBKU09OLnBhcnNlKGpzb24pOw0KICAgICAgICAgICAgbGV0IHRyTWFwID0gb0pTT04uX190ck1hcCB8fCBbXTsNCiAgICAgICAgICAgIGRlbGV0ZSBvSlNPTi5fX3RyTWFwOw0KICAgICAgICAgICAganNvbiA9IEpTT04uc3RyaW5naWZ5KG9KU09OKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGxvZyA9ICguLi5zKSA9PiA8JT1sb2coKSU+Li4ucyk7DQogICAgICAgICAgICBsZXQgd2FybiA9ICguLi5zKSA9PiA8JT13YXJuKCklPi4uLnMpOw0KICAgICAgICAgICAgbGV0IGVycm9yID0gKC4uLnMpID0+IDwlPWVycm9yKCklPi4uLnMpOw0KDQogICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHQgb2YgdHJNYXApew0KICAgICAgICAgICAgICAgIGlmKCFuZXcgUmVnRXhwKHQuaWQpLnRlc3QoanNvbikpIGNvbnRpbnVlOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCB0cm4gPSB0aGlzLl9hdG9iKHQudHJhbnNmb3JtKTsNCiAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgIG9KU09OID0gSlNPTi5wYXJzZShqc29uKTsNCiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IHVuZGVmaW5lZDsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKHRybi5zdGFydHNXaXRoKCJzKCIpICYmIHRybi5lbmRzV2l0aCgiKSIpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMucnVuU2NyaXB0KGAob0pTT04sIG9TY29wZSwgbG9nLCB3YXJuLCBlcnJvcikgPT4gJHt0cm4uc3Vic3RyaW5nKDIsIHRybi5sZW5ndGgtMSl9YCkob0pTT04sIDwlPXNjb3BlJT4sIGxvZywgd2FybiwgZXJyb3IpOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVzID0gYXdhaXQganNvbmF0YSh0cm4pLmV2YWx1YXRlKG9KU09OKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgLy88JT13YXJuKCklPnQuaWQsIHJlcywgdHJuKTsNCiAgICAgICAgICAgICAgICAgICAganNvbiA9IGpzb24ucmVwbGFjZShuZXcgUmVnRXhwKHQuaWQsICJnIiksICghQXJyYXkuaXNBcnJheShyZXMpICYmIHR5cGVvZihyZXMpIT09J29iamVjdCcpP3Jlczp0aGlzLl9idG9hKEpTT04uc3RyaW5naWZ5KHJlcykpKTsNCiAgICAgICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgICAgICA8JT13YXJuKCklPnQuaWQsIHRybiwgZXgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8ganNvbiA9IGpzb24ucmVwbGFjZSgvIl9fdHJNYXAiOlxzXFtce1tePj5dK1x9XF0vZ20sICciX190ck1hcCI6ICIiJyk7DQoNCiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmJKU09OP3RoaXMuX2JlYXV0aWZ5KGpzb24sICdqYXZhc2NyaXB0Jyk6SlNPTi5wYXJzZShqc29uKTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KPCUNCl9jbG9uZUZ1bmN0aW9uID0gKG8sIGYsIHNjb3BlLCBjKSA9PiB7DQoNCiAgICBsZXQgb2JqID0gbnVsbDsNCiAgICBpZihvPT0nc3InICYmIHR5cGVvZihzcikhPT0ndW5kZWZpbmVkJykgb2JqID0gc3I7DQogICAgaWYobz09J19GckVNRCcgJiYgdHlwZW9mKF9GckVNRCkhPT0ndW5kZWZpbmVkJykgb2JqID0gX0ZyRU1EOw0KICAgIA0KICAgIGxldCBjb2RlID0gb2JqW2ZdID8gb2JqW2ZdLnRvU3RyaW5nKCkgOiBgICAgJHtmfSgpew0KICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgaW4gX2Nsb25lRnVuY3Rpb24oJHtvfSwgJHtmfSk6IEludmFsaWQgRnVuY3Rpb24gTmFtZScpOw0KICAgIH1gOw0KICAgIGxldCBzID0gY29kZS5yZXBsYWNlKCcpJywgJykgPT4gJyk7DQogICAgaWYgKHMuaW5kZXhPZignZnVuY3Rpb24nKSA9PSAwIHx8IHMuaW5kZXhPZignYXN5bmMgZnVuY3Rpb24nKSA9PSAwKSB7DQogICAgCXMgPSBzLnJlcGxhY2UoJ2Z1bmN0aW9uJywgJyAnKTsNCiAgICB9IGVsc2Ugew0KICAgIAlzID0gcy5yZXBsYWNlKGYsICcnKTsNCiAgICB9DQoNCiAgICBpZiAoYy5Jc01haW4gJiYgIW9ialtmXSkgew0KICAgIAljb25zb2xlLmxvZygnRXJyb3IgaW4gX2Nsb25lRnVuY3Rpb24oKTogSW52YWxpZCBGdW5jdGlvbiBOYW1lICcgKyBmKTsNCiAgICB9DQoNCiAgICByZXR1cm4gYA0KICAgICR7Zn0oLi4ucGFyYW1zKXsNCiAgICAgICAgaWYodHlwZW9mKHdpbmRvdykhPT0idW5kZWZpbmVkIiAmJiB0eXBlb2Yod2luZG93LiR7b30pIT09InVuZGVmaW5lZCIpew0KICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy4ke299LiR7Zn0oLi4ucGFyYW1zKTsNCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgICBgICsgKGMuSXNNYWluID8gYHJldHVybiAoJHtzfSkoLi4ucGFyYW1zKTtgIDogYHJldHVybiBuZXcgJHtzY29wZX0uJHtuTmFtZShtYWluQ2xhc3MoKSl9KCkuJHtmfSguLi5wYXJhbXMpO2ApICsgYA0KICAgICAgICB9DQoJfQ0KICAgIGA7DQp9Ow0KDQoNClt7DQogICAgd09iajogJ3NyJywNCiAgICBmdW5jdGlvbnM6IFsnaGFzaENvZGUnLCAnRXF1YWxzJywgJ3NlcnZlckRhdGUnLCAnX19zY29wZScsICdhZGRNU2Vjb25kcycsICdpcEFkZHJlc3MnXS5jb25jYXQobWFpbkNsYXNzKFsnQklTZXJ2ZXInXSk/WydfJywgJ2J1aWxkVVJMJywgJyRfUkVRVUVTVCcsICdwYXJhbScsICdfdG9YTUwnLCAnY29vcCcsICdPUicsICdteVJlcGxhY2UnLCAnc2VuZFhNTCcsICdwcm9jZXNzUmVzcG9uc2UnLCAncHJvY2Vzc1Jlc3VsdCcsICdydW5TUlNjcmlwdCcsICdncm91cEJ5JywgJ1Nob3dEZWJ1ZycsICdjYWNoZVJlc3VsdCcsICd0b0hleCcsICdTaG93RXJyb3InXTpbXSksDQp9LCB7DQogICAgd09iajogJ19GckVNRCcsDQogICAgZnVuY3Rpb25zOiBbJ19hdHRyJywgJ3J1blNjcmlwdCcsICdfdW5pcXVlJywgJ3NyJywgJ19hdG9iJywgJ19nZXRTdG9yZWRTY3JpcHQnLCAnX2J0b2EnLCAnX190aW1lJywgJ193YWl0JywgJ19zcWxUeXBlJywgJ191dWlkJywgJ3JlcXVpcmUnLCAnX2luY2x1ZGUnLCAnX2JlYXV0aWZ5JywgJ19pbmplY3QnLCAnX2NvbXByZXNzJywgJ19kZWNvbXByZXNzJywgJ1V0ZjhBcnJheVRvU3RyJywgJ3JhbmRVUkwnXSwNCn1dLmZvckVhY2goY2MgPT4geyAlPg0KLyogU1RBUlQ6IDwlPWNjLndPYmolPiBmdW5jdGlvbiBjb3BpZXMgKi8NCjwlIGNjLmZ1bmN0aW9ucy5mb3JFYWNoKGYgPT4geyU+DQoNCi8qIENMT05FOjpTVEFSVDogPCU9Y2Mud09iaiU+LjwlPWYlPigpICovPCU9X2Nsb25lRnVuY3Rpb24oY2Mud09iaiwgZiwgc2NvcGUsIGMpICU+LyogQ0xPTkU6OkVORCAgOiA8JT1jYy53T2JqJT4uPCU9ZiU+KCkgKi8NCjwlIH0pJT4NCi8qIEVORDogPCU9Y2Mud09iaiU+IGZ1bmN0aW9uIGNvcGllcyAqLw0KPCUgfSk7ICU+DQogICAgDQogICAgPCU9bU5hbWU9J2kxOG4nJT4oZXYsIHYpew0KICAgICAgICBpZih0eXBlb2Yod2luZG93KT09PSJ1bmRlZmluZWQiIHx8IHR5cGVvZih3aW5kb3cuaTE4bl9zdG9yZSk9PT0idW5kZWZpbmVkIikgcmV0dXJuIHY7DQogICAgICAgIA0KICAgICAgICBpZighZXYuRW50aXR5QXR0cmlidXRlLklzVGV4dCAmJiAhZXYuRW50aXR5QXR0cmlidXRlLklzU3RyaW5nKXsNCiAgICAgICAgICAgIHJldHVybiB2Ow0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaTE4bl9zdG9yZVt0aGlzLmhhc2hDb2RlKHYpXSA9IHdpbmRvdy5pMThuX3N0b3JlW3RoaXMuaGFzaENvZGUodildIHx8IHY7DQogICAgICAgIH0NCiAgICB9DQoNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgIDwlPW1OYW1lPSdieScgKyBuTmFtZShlYS5FbnRpdHlUeXBlKSU+KGFyKSB7DQogICAgICAgIHZhciByZXQgPSBbXTsNCiAgICAgICAgYXIuZm9yRWFjaChhID0+IHsNCiAgICAgICAgICAgIHJldC5mb3JFYWNoKHIgPT4gew0KICAgICAgICAgICAgICAgIGlmIChhWyJfPCU9bk5hbWUoZWEpJT4iXSAmJiAoYVsiXzwlPW5OYW1lKGVhKSU+Il0uRXF1YWxzP2FbIl88JT1uTmFtZShlYSklPiJdLkVxdWFscyhyKTpzci5FcXVhbHMoYVsiXzwlPW5OYW1lKGVhKSU+Il0sIHIpKSkgew0KICAgICAgICAgICAgICAgICAgICByLl88JT1uTmFtZShlYSklPl88JT1jLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyklPi5wdXNoKGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQo8JSB9KSU+DQoNCiAgICA8JT1tTmFtZT0nZ2V0IF9Ub1N0cmluZyclPigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J3RvU3RyaW5nJyU+KCkgew0KICAgICAgICBsZXQgcmV0ID0gW107DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIGlmKHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCAmJiA8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pIHJldC5wdXNoKHRoaXMuPCU9bk5hbWUoZWEpJT4oKTwlaWYoZWEuRW50aXR5VHlwZSl7JT4uPCU9bU5hbWUlPigpPCV9JT4pOw0KPCUgfSklPg0KICAgICAgICByZXR1cm4gcmV0LmpvaW4oJy0nKTsNCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nRW50aXR5VmFsdWUnJT4oYU5hbWUpIHsNCiAgICAgICAgbGV0IHJldCA9IFtdLmNvbmNhdCh0aGlzLkVudGl0eVZhbHVlcywgdGhpcy5WYWx1ZUVudGl0aWVzKS5maW5kKGV2ID0+IGV2LkVudGl0eUF0dHJpYnV0ZSAmJiBldi5FbnRpdHlBdHRyaWJ1dGUuTmFtZSA9PSBhTmFtZSk7DQogICAgICAgIA0KICAgICAgICBpZighcmV0KXsNCiAgICAgICAgICAgIC8vIGFuIGF0dHJpYnV0ZSB0aGF0IGhhcyB5ZXQgbm8ga25vd24gZW50aXR5IHZhbHVlDQogICAgICAgICAgICByZXQgPSB7QWN0aXZlOiB0cnVlLCBPUEVSQVRPUlM6IHt9LCBFbnRpdHlBdHRyaWJ1dGU6IHtOYW1lOiBhTmFtZSwgQWN0aXZlOiB0cnVlLCBFbnRpdHlDbGFzczoge0lkOiB0aGlzLkVudGl0eUNsYXNzLklkfX19Ow0KICAgICAgICAgICAgdGhpcy5FbnRpdHlWYWx1ZXMucHVzaChyZXQpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdmaW5kJyU+KGRlcHRoID0gMSwgb2JqcywgZmllbGRzKSB7DQogICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5maW5kQWxsKGRlcHRoLCBvYmpzLCBudWxsLCBudWxsLCBmaWVsZHMpKVswXTsNCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX19hc3NlcnRWYWxpZCclPihiU3luYyl7DQo8JSBpZighYy5Ub29scy5sZW5ndGgpeyU+DQogICAgICAgIHJldHVybiB0cnVlOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgbGV0IGVycm9yID0ge307DQoNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuUmVxdWlyZWQpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIGlmKDwldmFsdWVPZihlYS5SZXF1aXJlZCklPil7DQogICAgICAgICAgICBlcnJvci48JT1uTmFtZShlYSklPiA9IHt9Ow0KICAgICAgICAgICAgaWYoIXRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCkgZXJyb3IuPCU9bk5hbWUoZWEpJT5bIjAxIl0gPSAiTm90IFNldCI7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICBpZighdGhpcy48JT1uTmFtZShlYSklPigpKSBlcnJvci48JT1uTmFtZShlYSklPlsiMDIiXSA9ICJFbXB0eSBWYWx1ZSI7DQogICAgICAgICAgICBpZih0aGlzLjwlPW5OYW1lKGVhKSU+KCkgJiYgYlN5bmMgJiYgIXRoaXMuPCU9bk5hbWUoZWEpJT4oKS5fX3N5bmNfb24oKSkgZXJyb3IuPCU9bk5hbWUoZWEpJT5bIjAzIl0gPSAiTm90IGluIFN5bmMiOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgIGlmKCFPYmplY3Qua2V5cyhlcnJvci48JT1uTmFtZShlYSklPikubGVuZ3RoKSBkZWxldGUgZXJyb3IuPCU9bk5hbWUoZWEpJT47DQogICAgICAgIH0NCiAgICA8JSB9KSU+DQoNCiAgICAgICAgaWYoT2JqZWN0LmtleXMoZXJyb3IpLmxlbmd0aCl7DQogICAgICAgICAgICB0aGlzLl9fYXNzZXJ0RXJyb3IgPSBlcnJvcjsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPkpTT04uc3RyaW5naWZ5KGVycm9yLG51bGwsNCksIHRoaXMuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgZGVsZXRlIHRoaXMuX19hc3NlcnRFcnJvcjsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQo8JSB9JT4NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3JhbmsnJT4oXzwlPW1OYW1lJT49MCl7DQoJCXRyeSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fX2V4cG9ydCh7XzwlPW1OYW1lJT46IF88JT1tTmFtZSU+fSwgew0KICAgICAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgICAgICAgICAgZXhwb3J0ZXI6IHYgPT4gdi5yZXVzZWQ/di5vYmouX19yZXVzZWQgPSB2LnJldXNlZDowLA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9ialtpZENvZGVdID0gIjwlPV9jTmFtZShjLCB0cnVlKSU+IiwNCgk8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouXzwlPW1OYW1lJT4gKz0gKG9ialtlYUNvZGVdID0gKHYgfHwgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKSkuPCU9bU5hbWUlPihfPCU9bU5hbWUlPisxKSkuXzwlPW1OYW1lJT4sDQoJPCUgfSklPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHtsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCB0YUNvZGUsIHYpID0+IChvYmpbdGFDb2RlXSA9IFtuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUodGEuRW50aXR5VHlwZSwgdHJ1ZSklPigpXS5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPihfPCU9bU5hbWUlPisxKSkpLmZvckVhY2godiA9PiB2Ll88JT1tTmFtZSU+KSwNCiAgICA8JSB9KSU+DQoJICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KCQl9IGNhdGNoIChleCkgew0KCQkJPCU9ZXJyb3IoKSU+ZXgpOw0KCQl9DQoJfQ0KDQogICAgPCU9bU5hbWU9J19pc1F1ZXJ5JyU+KCl7DQogICAgICAgIGxldCByZXQgPSB0aGlzLl9fZXhwb3J0KC8qX190eXBlKi97SWQ6ICI8JT1uTmFtZShjKSU+IiwgPCU9bU5hbWUlPkNvdW50OiAwfSwgew0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0ge19jb29wOiB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wIHx8IHVuZGVmaW5lZH07DQogICAgICAgICAgICAgICAgb2JqLjwlPW1OYW1lJT5Db3VudCArPSB0eXBlb2Yob2JqW2VhQ29kZV0uX2Nvb3ApPT09InVuZGVmaW5lZCI/MDoxOw0KICAgICAgICAgICAgICAgIGlmKHYgJiYgdi48JT1tTmFtZSU+KXsNCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0uX29iamVjdCA9IHYuPCU9bU5hbWUlPigpOw0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9bU5hbWUlPkNvdW50ICs9IG9ialtlYUNvZGVdLl9vYmplY3QuPCU9bU5hbWUlPkNvdW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4ge2xldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgdGFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgb2JqW3RhQ29kZV0gPSB7X2Nvb3A6IHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3AgfHwgdW5kZWZpbmVkLCBfb2JqZWN0czogKHZ8fFtdKS5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPigpKX07DQogICAgICAgICAgICAgICAgaWYob2JqW3RhQ29kZV0uX29iamVjdHMubGVuZ3RoKSBvYmpbdGFDb2RlXS48JT1tTmFtZSU+Q291bnQgKz0gb2JqW3RhQ29kZV0uX29iamVjdHMucmVkdWNlKCh2LCBvKSA9PiB2ICs9IG8uPCU9bU5hbWUlPkNvdW50KTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19uZXcnJT4oY2xOYW1lLCB0b29sKXsNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbE5hbWUsIHRvb2wpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgc3dpdGNoKGNsTmFtZSl7DQogICAgPCUgYXJDbGFzc2VzLmZvckVhY2goX2MgPT4geyU+DQogICAgICAgICAgICAgICAgY2FzZSAiPCU9bk5hbWUoX2MpJT4iOg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKF9jLCB0cnVlKSU+KHVuZGVmaW5lZCwgdG9vbCk7DQogICAgPCUgfSklPg0KICAgICAgICAgICAgfQ0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQo8JSB9JT4NCiAgICB9DQogICAgDQogICAgYXN5bmMgPCU9bU5hbWU9J3N0b3JlJyU+KCkgew0KICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IHRoaXMuX2V4ZWN1dGUobnVsbCwgPCU9YWxpYXMoKSU+LCAiPCU9bU5hbWUlPiIsIDwlbVJvdXRpbmcoYyklPiwgYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgLyoqKiBTVEFSVCBMT0NBTCA8JT1tTmFtZSU+KCkgKioqLw0KICAgICAgICAgICAgDQogICAgICAgIGxldCBiVXBkYXRlID0gZmFsc2U7DQogICAgICAgIGxldCBiSW5zZXJ0ID0gZmFsc2U7DQoNCiAgICAgICAgaWYodGhpcy5fX2NvbmZpZygnc3RvcmUuZGlzYWJsZWQnKSl7DQogICAgICAgICAgICA8JT13YXJuKCklPiJzdG9yaW5nIGRpc2FibGVkIik7DQogICAgICAgIH1lbHNlIGlmKHRoaXMuX2lzUXVlcnkoKS5faXNRdWVyeUNvdW50KXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+IkNhbm5vdCBzdG9yZSBhIHF1ZXJ5ISIpOw0KICAgICAgICB9ZWxzZSBpZighdGhpcy5fX3N5bmNfb24oKSl7DQogICAgICAgICAgICBsZXQgX3RoaXMgPSBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+KCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBiRmluZCA9IGZhbHNlOw0KICAgICAgICAgICAgaWYodGhpcy5JZD09dGhpcy5JZCl7DQogICAgICAgICAgICAgICAgYkZpbmQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIF90aGlzLklkID0gdGhpcy5JZDsNCiAgICAgICAgICAgIH0NCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICBpZig8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pew0KICAgICAgICAgICAgICAgIGJGaW5kID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICBfdGhpcy48JT1uTmFtZShlYSklPih0aGlzLjwlPW5OYW1lKGVhKSU+KCksICc9Jyk7DQogICAgICAgICAgICB9DQo8JSB9KTsgJT4NCg0KICAgICAgICAgICAgaWYoYkZpbmQpew0KICAgICAgICAgICAgICAgIF90aGlzID0gYXdhaXQgX3RoaXMuZmluZCgpOw0KICAgICAgICAgICAgfWVsc2UgX3RoaXMgPSBudWxsOw0KICAgICAgICAgICAgaWYoX3RoaXMpew0KICAgICAgICAgICAgICAgIHRoaXMuSWQgPSBfdGhpcy5JZDsNCiAgICAgICAgICAgICAgICAvLzwlPWxvZygpJT4iX3RoaXMuSWQiLCBfdGhpcy5JZCwgdGhpcy5JZCwgX3RoaXMuVG9vbC5uYW1lLCB0aGlzLlRvb2wubmFtZSk7DQogICAgICAgICAgICAgICAgYlVwZGF0ZSA9IHRydWU7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICB0aGlzLklkID0gdGhpcy5JZDsgLy8gdG8gZW5mb3JjZSB0aGUgSWQgYW5kIG5vdCBnZXQgYSBuZXcgb25lIGV2ZXJ5IHRpbWUNCiAgICAgICAgICAgICAgICBiSW5zZXJ0ID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfWVsc2UgaWYoTWF0aC5hYnMoKHRoaXMuU2V0X09uLmdldFRpbWUoKSAtIHRoaXMuX19zeW5jX29uKCkuZ2V0VGltZSgpKSAvIDEwMDApIDwgdGhpcy5fX2NvbmZpZygnc3RvcmUuc2Vuc2l0aXZpdHknLCA1KSl7DQogICAgICAgICAgICA8JT1sb2coKSU+IkFscmVhZHkgc3RvcmVkIiwgTWF0aC5hYnMoKHRoaXMuU2V0X09uLmdldFRpbWUoKSAtIHRoaXMuX19zeW5jX29uKCkuZ2V0VGltZSgpKSAvIDEwMDApICsiPCIrdGhpcy5fX2NvbmZpZygnc3RvcmUuc2Vuc2l0aXZpdHknLCA1KSk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgYlVwZGF0ZSA9IHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBpZighYlVwZGF0ZSAmJiAhYkluc2VydCl7DQogICAgICAgICAgICA8JT1sb2coKSU+Ik5vIGRhdGEgY2hhbmdlcyIpOw0KICAgICAgICB9ZWxzZXsNCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iU3FsREIiKXsgJT4NCiAgICAgICAgICAgICAgICBpZih0eXBlb2YoPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uKT09PSJ1bmRlZmluZWQiIHx8IDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbi5lbmQpew0KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zcWwoYCR7dGhpcy5fX2NvbmZpZygndHlwZScpPT0nc3FsaXRlJz8nQkVHSU4nOidTVEFSVCd9IFRSQU5TQUNUSU9OYCk7DQogICAgICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbiA9IHtPd25lcjogdGhpcywgc3FsczogW10sIHN0YXJ0OiBuZXcgRGF0ZSgpLCBlbmQ6IG51bGx9Ow0KICAgICAgICAgICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICAgICAgICAgIH0NCjwlIH0pJT4NCg0KICAgICAgICAgICAgdGhpcy5fZGVmYXVsdHMoKTsNCg0KICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygiU3luY0VudGl0eUF0dHJpYnV0ZXMiKSl7DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICBpZih0aGlzLjwlPW5OYW1lKGVhKSU+KCkgJiYgIShhd2FpdCB0aGlzLjwlPW5OYW1lKGVhKSU+KCkuPCU9bU5hbWUlPigpKSkgdGhpcy5jbGVhcl88JT1uTmFtZShlYSklPigpOw0KPCUgfSk7ICU+DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKCF0aGlzLl9fYXNzZXJ0VmFsaWQodHJ1ZSkpIHJldHVybiBudWxsOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+YD09PT4gSW5zZXJ0OiR7Ykluc2VydH0sIFVwZGF0ZToke2JVcGRhdGV9LCBJZDpbJHt0aGlzLklkfV1gKTsNCiAgICAgICAgICAgIGlmKGJVcGRhdGUpIGF3YWl0IHRoaXMudXBkYXRlKCk7DQogICAgICAgICAgICBpZihiSW5zZXJ0KSBhd2FpdCB0aGlzLmluc2VydCgpOw0KICAgICAgICAgICAgPCU9bG9nKCklPmA8PT09IEluc2VydDoke2JJbnNlcnR9LCBVcGRhdGU6JHtiVXBkYXRlfSwgSWQ6WyR7dGhpcy5JZH1dYCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoIlN5bmNUeXBlZEF0dHJpYnV0ZXMiKSl7DQo8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHRhIG9mIHRoaXMuPCU9dGFOYW1lJT4oKSl7DQogICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iU3luY2luZy4uLjwlPXRhTmFtZSU+IiwgdGEpOw0KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0YS48JT1tTmFtZSU+KCk7DQogICAgICAgICAgICAgICAgfQ0KPCUgfSk7ICU+DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKGJVcGRhdGUgfHwgYkluc2VydCl7DQo8JSBjbHNUb29scyhjKS5mb3JFYWNoKHQgPT4geyU+DQogICAgICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgIDwlIGlmKHQ9PSJTcWxEQiIpeyAlPg0KICAgICAgICAgICAgICAgICAgICBpZig8JT1zY29wZSU+Ll9fc3FsVHJhbnNhY3Rpb24gJiYgITwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbi5lbmQgJiYgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uLk93bmVyPT10aGlzKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NxbChgQ09NTUlUJHt0aGlzLl9fY29uZmlnKCd0eXBlJyk9PSdzcWxpdGUnPycgVFJBTlNBQ1RJT04nOicnfWApOw0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uLmVuZCA9IG5ldyBEYXRlKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICB9DQo8JSB9KSU+DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgfSwge19fYmVmb3JlUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkJlZm9yZSkubWFwKHIgPT4geyU+PCU9X0ZyRU1ELl90b0pTKHIpJT48JSB9KS5qb2luKCcsICcpJT5dLCBfX2FmdGVyUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkFmdGVyKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl19KTsNCiAgICAgICAgDQogICAgICAgIHJldHVybiAocmVzdWx0cy5maW5kKHIgPT4gci5yZXQpIHx8IHtyZXQ6IG51bGx9KS5yZXQ7IC8vIGZpcnN0IG9uZSB0byBleGVjdXRlIGNvcnJlY3RseQ0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdpbnNlcnQnJT4oKXsNCiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLl9leGVjdXRlKG51bGwsIDwlPWFsaWFzKCklPiwgIjwlPW1OYW1lJT4iLCA8JW1Sb3V0aW5nKGMpJT4sIGFzeW5jICgpID0+IHsNCiAgICAgICAgICAgIC8qKiogU1RBUlQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCg0KPCUgY2xzVG9vbHMoYykuZm9yRWFjaCh0ID0+IHslPg0KICAgICAgICBpZih0aGlzLlRvb2wudHlwZS5uYW1lPT0iPCU9dCU+Iil7DQogICAgPCUgaWYodD09Ik1vbmdvREIiIHx8IHQ9PSJaYW5nb0RCIil7ICU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLlRvb2wuZGIuZ2V0Q29sbGVjdGlvbig8JT1fbkNvZGUoYyklPikuaW5zZXJ0T25lKHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KSk7DQogICAgICAgICAgICB0aGlzLlRvb2wuX19kbWxTdGF0ZW1lbnRzLnB1c2goYGRiLmdldENvbGxlY3Rpb24oJyR7PCU9X25Db2RlKCklPn0nKS5pbnNlcnRPbmUoJHt0aGlzLl90b0pTT04oe2JNYXA6IHRydWV9KX0pYCk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIlJ4REIiKSB7JT4NCiAgICAgICAgICAgIGF3YWl0IHRoaXMuVG9vbC5kYls8JT1fbkNvZGUoYyklPl0uPCU9bU5hbWUlPih0aGlzLl90b0RvY3VtZW50KHtiTWFwOiB0cnVlfSkpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJLYWZrYSIpIHslPg0KICAgICAgICAgICAgdGhpcy5fX3RpbWUoJzwlPXNjb3BlJT4uPCU9bk5hbWUoYywgdHJ1ZSklPi48JT1tTmFtZSU+LmthZmthJyk7DQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy5Ub29sLnByb2R1Y2VyLnNlbmQoew0KICAgICAgICAgICAgICAgIHRvcGljOiAnPCU9c2NvcGUlPi5jYWxsJywNCiAgICAgICAgICAgICAgICBtZXNzYWdlczogW3sNCiAgICAgICAgICAgICAgICAgICAga2V5OiB0aGlzLklkLA0KICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZX0pDQogICAgICAgICAgICAgICAgfV0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgPCU9bG9nKCklPidjYWxsOiAnICsgdGhpcy5fX3RpbWUoJzwlPXNjb3BlJT4uPCU9bk5hbWUoYywgdHJ1ZSklPi48JT1tTmFtZSU+LmthZmthJykpOw0KICAgICAgICAgICAgPCU9bG9nKCklPidyZXNwb25zZTogJywgcmV0KTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiTWVtb3J5IikgeyU+DQogICAgICAgICAgICB0aGlzLlRvb2wuZGIuPCU9bk5hbWUoYyklPi5wdXNoKHRoaXMpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJOZW80aiIpIHslPg0KICAgICAgICAgICAgbGV0IHJldCA9IGF3YWl0IHRoaXMuX25lbzRqKHRoaXMuX3RvQ3lNZXJnZSgpKTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiU2FsZXNGb3JjZSIpIHslPg0KICAgICAgICAgICAgbGV0IG9iaiA9IHt9Ow0KICAgICAgICAgICAgPCUgJC5lYWNoKGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCksIChfLCBlYSkgPT4geyU+DQogICAgICAgICAgICBpZih0aGlzLl88JT1uTmFtZShlYSklPl9zZXQpew0KICAgICAgICAgICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyAlPg0KICAgICAgICAgICAgICAgIG9iai48JT1uTmFtZShlYSklPiA9IHRoaXMuXzwlPW5OYW1lKGVhKSU+LklkOw0KICAgICAgICAgICAgICAgIDwlIH1lbHNleyAlPg0KICAgICAgICAgICAgICAgIG9iai48JT1uTmFtZShlYSklPiA9IHRoaXMuPCU9bk5hbWUoZWEpJT4oKTsNCiAgICAgICAgICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICB9DQogICAgICAgICAgICA8JSB9KTsgJT4NCiAgICANCiAgICAgICAgICAgIGxvZygiU2VuZGluZyB0byBTRiIsIG9iaik7DQogICAgDQogICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy5Ub29sLmRiLnNvYmplY3QoIjwlPW5OYW1lKGMpJT4iKS5jcmVhdGUob2JqKTsNCiAgICAgICAgICAgIHRoaXMuSWQgPSByZXMuaWQ7DQogICAgPCUgfSBlbHNlIGlmKF9zcWxUb29scy5pbmRleE9mKHQpPj0wKSB7JT4NCiAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLl9zcWwodGhpcy5fdG9JbnNlcnRTUUwoKSk7DQogICAgICAgICAgICA8JT1sb2coKSU+InJlc3VsdCIsIHJldCk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIlNlcnZpY2VOb3ciKSB7JT4NCiAgICAgICAgICAgIHRoaXMuX2Zyb21Eb2N1bWVudChhd2FpdCB0aGlzLl9yZXN0KG51bGwsIG51bGwsIGF3YWl0IHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWUsIHJldXNlZDogMX0pKSk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIkdpdEh1YiIpIHslPg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5fZ2l0aHViKHRoaXMuX2ZpbGVOYW1lKCksIHRoaXMuX3RvSlNPTih7Yk1hcDogdHJ1ZSwgcmV1c2VkOiAxfSksIHRoaXMuSWQpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJGaWxlU3lzdGVtIikgeyU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLl9maWxlc3lzdGVtKHRoaXMuX2ZpbGVOYW1lKCksIHRoaXMuX3RvSlNPTih7Yk1hcDogdHJ1ZSwgcmV1c2VkOiAxfSkpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJFTVMiKSB7JT4NCiAgICAgICAgICAgIHRoaXMuSWQgPSAoYXdhaXQgdGhpcy5fdG9FTVNPYmplY3QoKS5zdG9yZSgpKS5JZDsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiUmVzdERCSU8iKSB7JT4NCiAgICAgICAgICAgIGxldCBvYmogPSB7fTsNCiAgICAgICAgICAgIDwlICQuZWFjaChjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLCAoXywgZWEpID0+IHslPg0KICAgICAgICAgICAgaWYodGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KXsNCiAgICAgICAgICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXsgJT4NCiAgICAgICAgICAgICAgICBvYmouPCU9bkNvZGUoZWEpJT4gPSB0aGlzLjwlPW5OYW1lKGVhKSU+KCkuSWQvKl9pZCgpKi87DQogICAgICAgICAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICAgICAgb2JqLjwlPW5Db2RlKGVhKSU+ID0gdGhpcy48JT1uTmFtZShlYSklPigpOw0KICAgICAgICAgICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIDwlIH0pOyAlPg0KICAgIA0KICAgICAgICAgICAgbGV0IHVybCA9ICJodHRwczovLyIgKyB0aGlzLl9fY29uZmlnKCdkYXRhYmFzZScpICsgIi5yZXN0ZGIuaW8vcmVzdC8iICsgPCU9X25Db2RlKCklPi50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgbG9nKCI8JT10JT4gVVJMIiwgdXJsKTsNCiAgICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KHVybCwgb2JqLCB7DQogICAgICAgICAgICAgICAgaGVhZGVyczogew0KICAgICAgICAgICAgICAgICAgICAiY2FjaGUtY29udHJvbCI6ICJuby1jYWNoZSIsDQogICAgICAgICAgICAgICAgICAgICJ4LWFwaWtleSI6IHRoaXMuX19jb25maWcoJ2FwaWtleScpLA0KICAgICAgICAgICAgICAgICAgICAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL2pzb24iLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgIA0KICAgICAgICAgICAgbG9nKCJyZXN1bHQiLCByZXMuZGF0YSk7DQogICAgICAgICAgICB0aGlzLl9mcm9tRG9jdW1lbnQocmVzLmRhdGEpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJCSVNlcnZlciIpIHslPg0KICAgICAgICAgICAgLy8gd2UgbmVlZCBkZXB0aCAyIHRvIGdldCB0aGUgRW50aXR5VmFsdWVzIGJvdW5kIHRvIHRoZSBvbmVzIHdlIHNlbnQNCiAgICAgICAgICAgIGxldCBpbnNPYmogPSBhd2FpdCB0aGlzLnNyKCkuXygiRW50ZXJwcmlzZU1hbmFnZXIuZW1zRW50aXR5T2JqZWN0SW5zZXJ0IiwgbnVsbCwgdGhpcy50b0VudGl0eU9iamVjdCgpLCBudWxsLCAyKTsNCiAgICAgICAgICAgIGlmKCFpbnNPYmopIHJldHVybiBudWxsOw0KICAgICAgICAgICAgdGhpcy5JZCA9IGluc09iai5JZDsNCiAgICAgICAgICAgIHRoaXMuRW50aXR5VmFsdWVzID0gaW5zT2JqLkVudGl0eVZhbHVlczsNCiAgICAgICAgICAgIHRoaXMuX3JldmVydCgpOw0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgPCUgfSAlPg0KICAgICAgICB9DQo8JSB9KSAlPg0KDQogICAgICAgIHRoaXMuX19zeW5jX29uKG5ldyBEYXRlKCkpOw0KDQogICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9LCB7X19iZWZvcmVSdWxlczogWzwlKGMuRW50aXR5UnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHJbbU5hbWVdICYmIHIuQmVmb3JlKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl0sIF9fYWZ0ZXJSdWxlczogWzwlKGMuRW50aXR5UnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHJbbU5hbWVdICYmIHIuQWZ0ZXIpLm1hcChyID0+IHslPjwlPV9GckVNRC5fdG9KUyhyKSU+PCUgfSkuam9pbignLCAnKSU+XX0pOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIChyZXN1bHRzLmZpbmQociA9PiByLnJldCkgfHwge3JldDogbnVsbH0pLnJldDsgLy8gZmlyc3Qgb25lIHRvIGV4ZWN1dGUgY29ycmVjdGx5DQogICAgfQ0KICAgIA0KICAgIGFzeW5jIDwlPW1OYW1lPSd1cGRhdGUnJT4oKSB7DQogICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgdGhpcy5fZXhlY3V0ZShudWxsLCA8JT1hbGlhcygpJT4sICI8JT1tTmFtZSU+IiwgPCVtUm91dGluZyhjKSU+LCBhc3luYyAoKSA9PiB7DQogICAgICAgIC8qKiogU1RBUlQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCg0KICAgICAgICBsZXQgcmV0ID0gbnVsbDsNCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KDQogICAgPCUgaWYodCA9PSAiTW9uZ29EQiIpIHslPg0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5Ub29sLmRiLmNvbGxlY3Rpb24oPCU9X25Db2RlKGMpJT4pLnVwZGF0ZU9uZSh7X2lkOiB0aGlzLklkfSwgeyRzZXQ6IHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KX0pOw0KICAgICAgICAgICAgdGhpcy5Ub29sLl9fZG1sU3RhdGVtZW50cy5wdXNoKGBkYi5nZXRDb2xsZWN0aW9uKCckezwlPV9uQ29kZSgpJT59JykudXBkYXRlT25lKHtfaWQ6ICcke3JldC5faWR9J30sIHskc2V0OiAke3RoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KX0pYCk7DQogICAgPCUgfWVsc2UgaWYodCA9PSAiTWVtb3J5IikgeyU+DQogICAgICAgICAgICB0aGlzLlRvb2wuZGIuPCU9bk5hbWUoYyklPlt0aGlzLlRvb2wuZGIuPCU9bk5hbWUoYyklPi5maW5kSW5kZXgobyA9PiBvLklkPT10aGlzLklkKV0gPSB0aGlzOw0KICAgIDwlIH1lbHNlIGlmKHQgPT0gIkthZmthIikgeyU+DQogICAgICAgICAgICB0aGlzLl9fdGltZSgnPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+LjwlPW1OYW1lJT4ua2Fma2EnKTsNCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuVG9vbC5wcm9kdWNlci5zZW5kKHsNCiAgICAgICAgICAgICAgICB0b3BpYzogJzwlPXNjb3BlJT4uY2FsbCcsDQogICAgICAgICAgICAgICAgbWVzc2FnZXM6IFt7DQogICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5JZCwNCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KQ0KICAgICAgICAgICAgICAgIH1dDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwlPWxvZygpJT4nY2FsbDogJyArIHRoaXMuX190aW1lKCc8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4uPCU9bU5hbWUlPi5rYWZrYScpKTsNCiAgICAgICAgICAgIDwlPWxvZygpJT4ncmVzcG9uc2U6ICcsIHJldCk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIk5lbzRqIikgeyU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLl9uZW80aih0aGlzLl90b0N5TWVyZ2UoKSk7DQogICAgPCUgfWVsc2UgaWYoX3NxbFRvb2xzLmluZGV4T2YodCk+PTApIHslPg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5fc3FsKHRoaXMuX3RvVXBkYXRlU1FMKCkpOw0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5fc3FsKHRoaXMuX3RvU2VsZWN0U1FMKCkpOw0KICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShyZXQpKSByZXQgPSByZXRbMF07DQogICAgPCUgfWVsc2UgaWYodCA9PSAiU2VydmljZU5vdyIpIHslPg0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IHRoaXMuX3Jlc3QobnVsbCwgbnVsbCwgYXdhaXQgdGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZSwgcmV1c2VkOiAxfSksICdwdXQnKSkucmVzdWx0Ow0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJHaXRIdWIiKSB7JT4NCiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2dpdGh1Yih0aGlzLl9maWxlTmFtZSgpLCB0aGlzLl90b0pTT04oe2JNYXA6IHRydWUsIHJldXNlZDogMX0pLCB0aGlzLklkKTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiRmlsZVN5c3RlbSIpIHslPg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5fZmlsZXN5c3RlbSh0aGlzLl9maWxlTmFtZSgpLCB0aGlzLl90b0pTT04oe2JNYXA6IHRydWUsIHJldXNlZDogMX0pKTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiRU1TIikgeyU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLl90b0VNU09iamVjdCgpLnN0b3JlKCk7DQogICAgPCUgfWVsc2UgaWYodCA9PSAiUmVzdERCSU8iKSB7JT4NCiAgICAgICAgICAgIDwlPWxvZygpJT4iU2VuZGluZyB1cGRhdGUgdG8gUkVTVERCSU8gdG8gc2F2ZSIpOw0KDQogICAgICAgICAgICBsZXQgdXJsID0gImh0dHBzOi8vIiArIHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJykgKyAiLnJlc3RkYi5pby9yZXN0LyIgKyA8JT1fbkNvZGUoKSU+LnRvTG93ZXJDYXNlKCkgKyAiLyIgKyB0aGlzLklkOw0KICAgICAgICAgICAgLy8gPCU9bG9nKCklPiJVcGRhdGUgdG8gUkVTVERCSU8iLCB1cmwpOw0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IGF4aW9zLnB1dCh1cmwsIG9iaiwgew0KICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgICAgICAgICAgImNhY2hlLWNvbnRyb2wiOiAibm8tY2FjaGUiLA0KICAgICAgICAgICAgICAgICAgICAieC1hcGlrZXkiOiB0aGlzLl9fY29uZmlnKCdhcGlrZXknKSwNCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KSkuZGF0YTsNCiAgICA8JSB9ZWxzZSBpZih0ID09ICJCSVNlcnZlciIpIHslPg0KICAgICAgICAgICAgLy8gd2UgbmVlZCBkZXB0aCAyIHRvIGdldCB0aGUgRW50aXR5VmFsdWVzIGJvdW5kIHRvIHRoZSBvbmVzIHdlIHNlbnQNCiAgICAgICAgICAgIGxldCB1cGRPYmogPSBhd2FpdCB0aGlzLnNyKCkuXygiRW50ZXJwcmlzZU1hbmFnZXIuZW1zRW50aXR5T2JqZWN0VXBkYXRlIiwgbnVsbCwgdGhpcy50b0VudGl0eU9iamVjdCgpLCAyKTsNCiAgICAgICAgICAgIGlmKCF1cGRPYmopIHJldHVybiBudWxsOw0KICAgICAgICAgICAgdGhpcy5fX3N5bmNfb24obmV3IERhdGUoKSk7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fY29weUZyb20odXBkT2JqKTsNCiAgICA8JSB9ICU+DQogICAgICAgIH0NCjwlIH0pJT4NCg0KICAgICAgICAgICAgPCU9bG9nKCklPiJyZXN1bHQiLCByZXQpOw0KICAgICAgICAgICAgdGhpcy5fX3N5bmNfb24obmV3IERhdGUoKSk7DQogICAgICAgICAgICB0aGlzLl9mcm9tRG9jdW1lbnQocmV0LCB0cnVlKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgICAgICAgICAgLyoqKiBFTkQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCiAgICAgICAgfSwge19fYmVmb3JlUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkJlZm9yZSkubWFwKHIgPT4geyU+PCU9X0ZyRU1ELl90b0pTKHIpJT48JSB9KS5qb2luKCcsICcpJT5dLCBfX2FmdGVyUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkFmdGVyKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl19KTsNCiAgICAgICAgDQogICAgICAgIHJldHVybiAocmVzdWx0cy5maW5kKHIgPT4gci5yZXQpIHx8IHtyZXQ6IG51bGx9KS5yZXQ7IC8vIGZpcnN0IG9uZSB0byBleGVjdXRlIGNvcnJlY3RseQ0KICAgIH0NCiAgICANCiAgICBhc3luYyA8JT1tTmFtZT0nZmluZEFsbCclPihkZXB0aCA9IDEsIG9ianM9W10sIHN0YXJ0LCBlbmQsIGZpZWxkcykgew0KICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IHRoaXMuX2V4ZWN1dGUobnVsbCwgPCU9YWxpYXMoKSU+LCAiPCU9bU5hbWUlPiIsIDwlbVJvdXRpbmcoYyklPiwgYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgICAgIC8qKiogU1RBUlQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCiAgICAgICAgDQogICAgICAgIGxldCByZXQgPSBbXTsgLy8gYSBqc29uIGFycmF5DQoNCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgIDwlIGlmKHQ9PSJNb25nb0RCIil7ICU+DQogICAgICAgICAgICBpZih0aGlzLlRvb2wuZGIpIHJldCA9IGF3YWl0IHRoaXMuVG9vbC5kYi5jb2xsZWN0aW9uKDwlPV9uQ29kZShjKSU+KS5maW5kKHRoaXMuX3RvU2VsZWN0TW9uZ29EQihmaWVsZHMsIG9ianMpKS50b0FycmF5KCk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIlJ4REIiKSB7JT4NCiAgICAgICAgICAgIGF3YWl0IHRoaXMuVG9vbC5kYls8JT1fbkNvZGUoYyklPl0uZmluZCh0aGlzLl90b1NlbGVjdFJ4REIoZmllbGRzLCBvYmpzKSkuZXhlYygpOw0KICAgIDwlIH1lbHNlIGlmKF9zcWxUb29scy5pbmRleE9mKHQpPj0wKXsgJT4NCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuX3NxbCh0aGlzLl90b1NlbGVjdFNRTChmaWVsZHMsIG9ianMpKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iRU1TIil7ICU+DQogICAgICAgICAgICBsZXQgbyA9IHRoaXMuX3RvRU1TT2JqZWN0KHRydWUsIHRydWUpOw0KICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygnZW1zLmRlZXAucXVlcnknKSkgbyA9IG5ldyA8JT1zY29wZSU+LkVudGl0eU9iamVjdCgpLlRISVMoW29dLmNvbmNhdChvYmpzLm1hcChfbyA9PiBfby5fdG9FTVNPYmplY3QodHJ1ZSwgdHJ1ZSkpKSk7DQogICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLl9mcm9tRU1TVmFsdWVzKGF3YWl0IG5ldyA8JT1zY29wZSU+LkVudGl0eVZhbHVlKCkuYWN0aXZlKHRydWUpLmVudGl0eU9iamVjdChvKS48JT1tTmFtZSU+KCkpOw0KICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygnZW1zLmRlZXAucXVlcnknKSkgcmV0dXJuIHJldDsNCiAgICA8JSB9ZWxzZSBpZih0PT0iTWVtb3J5Iil7ICU+DQogICAgICAgICAgICByZXR1cm4gdGhpcy5Ub29sLmRiWzwlPV9uQ29kZSgpJT5dLmZpbHRlcihvID0+IG8gJiYgdGhpcy5fc2FtZUVudGl0eShvKSk7DQogICAgPCUgfWVsc2UgaWYodD09Ikh1YlNwb3QiKXsgJT4NCiAgICA8JSB9ZWxzZSBpZih0PT0iU2VydmljZU5vdyIpeyAlPg0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IHRoaXMuX3Jlc3QobnVsbCwge3N5c3Bhcm1fcXVlcnk6IHRoaXMuX3RvU05RdWVyeShmaWVsZHMsIG9ianMsIHRydWUpfSkpLnJlc3VsdDsNCiAgICA8JSB9ZWxzZSBpZih0PT0iU2FsZXNGb3JjZSIpeyAlPg0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5fcmVzdChudWxsLCBudWxsLCB0aGlzLl90b1NGUXVlcnkoZmllbGRzLCBvYmpzLCB0cnVlKSwgbnVsbCwge3VybDogJ3Jlc3QudXJsLmdxbCd9KTsNCiAgICA8JSB9ZWxzZSBpZihfZmlsZVRvb2xzLmluZGV4T2YodCk+LTEpeyAlPg0KICAgICAgICAgICAgcmV0ID0gW2F3YWl0IHRoaXMuXzwlPXQudG9Mb3dlckNhc2UoKSU+KHRoaXMuX2ZpbGVOYW1lKCkpXTsNCiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgZiBvZiAodGhpcy5USElTKCkgfHwgW10pKXsNCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+ImZpbmRpbmcgIitmLm5hbWUoKSk7DQogICAgICAgICAgICAgICAgcmV0LnB1c2goYXdhaXQgZi5fPCU9dC50b0xvd2VyQ2FzZSgpJT4oZi5fZmlsZU5hbWUoKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0ID0gcmV0LmZsYXQoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYocmV0Lmxlbmd0aCAmJiB0eXBlb2YocmV0WzBdKT09PSdvYmplY3QnICYmIHJldFswXSAmJiByZXRbMF0uX19maWxlbmFtZV9fKXsNCiAgICAgICAgICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuX3RvSGFzaChudWxsLCB7bm9Db2RlOiB0cnVlLCBvbmx5VW5pcXVlOiB0cnVlLCBub09wZXJhdG9yczogdHJ1ZX0sICc8JT1tTmFtZSU+JykuX3RoaXMpOw0KICAgICAgICAgICAgICAgIC8vPCU9d2FybigpJT4icmV0IiwgcmV0LCAia2V5cyIsIGtleXMpOw0KICAgICAgICAgICAgICAgIGxldCBfcmV0ID0gW107DQogICAgICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBfciBvZiByZXQubWFwKHNyID0+IE9iamVjdC5hc3NpZ24oe1t0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyldOiBzclt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyldfSwgLi4ua2V5cy5tYXAoKGssIGkpID0+ICh7W2tdOiBzci5fX2ZpbGVuYW1lX18uc3BsaXQoJ19fJylbaV19KSkpICkubWFwKHIgPT4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGMsIHRydWUpJT4oclt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyldKS5fZnJvbURvY3VtZW50KHIpKS5maWx0ZXIociA9PiByKSl7DQogICAgICAgICAgICAgICAgICAgIC8vIF9yZXQucHVzaChhd2FpdCBfci5fPCU9dC50b0xvd2VyQ2FzZSgpJT4oX3IuX2ZpbGVOYW1lKCkpKTsNCiAgICAgICAgICAgICAgICAgICAgX3JldC5wdXNoKF9yKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0ID0gX3JldDsNCiAgICAgICAgICAgIH0NCiAgICA8JSB9ZWxzZSBpZih0PT0iTmVvNGoiKXsgJT4NCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuX25lbzRqKHRoaXMuX3RvQ3lRdWVyeShmaWVsZHMsIG9ianMpKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iUmVzdERCSU8iKXsgJT4NCiAgICAgICAgICAgIGxldCB0aGlzRG9jID0gdGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZX0pOw0KICAgICAgICAgICAgbGV0IGVhQ29kZSA9ICIiOw0KICAgICAgICA8JSAkLmVhY2goYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKSwgKF8sIGVhKSA9PiB7JT4NCiAgICAgICAgICAgIGVhQ29kZSA9IDwlPV9uQ29kZShlYSklPjsNCiAgICAgICAgICAgIGlmKHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCl7DQogICAgICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXsgJT4NCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQXJyYXkpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSIhPSIpew0KICAgICAgICAgICAgICAgICAgICB0aGlzRG9jW2VhQ29kZV0gPSB7IiRuaW4iOiB0aGlzRG9jW2VhQ29kZV19Ow0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICB0aGlzRG9jW2VhQ29kZV0gPSB7IiRpbiI6IHRoaXNEb2NbZWFDb2RlXX07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNTdHJpbmcgfHwgZWEuSXNUZXh0KXsgJT4NCiAgICAgICAgICAgICAgICBpZihbbnVsbCwgJyUnLCAnTElLRSddLmluZGV4T2YodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk+LTEpew0KICAgICAgICAgICAgICAgICAgICB0aGlzRG9jW2VhQ29kZV0gPSB7IiRyZWdleCI6IHRoaXNEb2NbZWFDb2RlXSB8fCAiLioifTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICB9DQogICAgICAgIDwlIH0pOyAlPg0KDQogICAgICAgICAgICBsZXQgdXJsID0gImh0dHBzOi8vIiArIHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJykgKyAiLnJlc3RkYi5pby9yZXN0LyIgKyA8JT1fbkNvZGUoKSU+LnRvTG93ZXJDYXNlKCkgKyAiP3E9IiArIEpTT04uc3RyaW5naWZ5KGNvbmRpdGlvbnMpOw0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IGF4aW9zLmdldCh1cmwsIHsNCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7DQogICAgICAgICAgICAgICAgICAgICJjYWNoZS1jb250cm9sIjogIm5vLWNhY2hlIiwNCiAgICAgICAgICAgICAgICAgICAgIngtYXBpa2V5IjogdGhpcy5fX2NvbmZpZygnYXBpa2V5JyksDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSkpLmRhdGE7DQogICAgPCUgfWVsc2UgaWYodD09IkJJU2VydmVyIil7ICU+DQogICAgICAgICAgICBsZXQgcSA9IHsNCiAgICAgICAgICAgICAgICBUSElTOiB0aGlzLl9idWlsZFRoaXMoZGVwdGgpLmNvbmNhdCgob2JqcyB8fCBbXSkubWFwKG9iaiA9PiBvYmoudG9FbnRpdHlPYmplY3Q/ew0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eU9iamVjdDogb2JqLnRvRW50aXR5T2JqZWN0KHRydWUpLA0KICAgICAgICAgICAgICAgIH06b2JqKSksDQogICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgIEVudGl0eU9iamVjdDogeyAvLyBhYnNvbHV0ZWx5IHJlcXVpcmVkIGZvciBpbmRleGluZw0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eUNsYXNzOiB0aGlzLl92YWx1ZUNsYXNzKCksDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIDwlPWxvZygpJT5xKTsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hc09iamVjdHMoKGF3YWl0IHRoaXMuc3IoKS5fKCJFbnRlcnByaXNlTWFuYWdlci5lbXNFbnRpdHlWYWx1ZUZpbmRhbGwiLCBudWxsLCBxKSkpOw0KICAgIDwlIH0gJT4NCiAgICAgICAgfQ0KPCUgfSklPg0KDQogICAgICAgIDwlPWxvZygpJT4iQmVmb3JlIF9mcm9tRG9jdW1lbnQoKSIsIGRlcHRoLCByZXQpOw0KICAgICAgICANCiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkocmV0KSkgcmV0ID0gW3JldF07DQogICAgICAgIHJldCA9IHJldC5maWx0ZXIociA9PiByKS5tYXAociA9PiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChyLCB0cnVlKSkuZmlsdGVyKHIgPT4gcikubWFwKHIgPT4gci5fX3N5bmNfb24obmV3IERhdGUoKSkpOw0KICAgICAgICANCg0KICAgICAgICA8JT1sb2coKSU+IkJlZm9yZSBfbWF0Y2hlcygpIiwgZGVwdGgsIHJldCk7DQogICAgICAgIC8vaWYoPCU9SlNPTi5zdHJpbmdpZnkoX2ZpbGVUb29scyklPi5pbmRleE9mKHRoaXMuVG9vbC50eXBlLm5hbWUpPi0xKSByZXQgPSByZXQuZmlsdGVyKHIgPT4gdGhpcy5fbWF0Y2hlcyhyKSk7DQogICAgICAgIA0KICAgICAgICBpZihkZXB0aD4xKXsNCiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgciBvZiByZXQpew0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiBlYS5FbnRpdHlUeXBlICYmICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICAgICAgaWYoci5fPCU9bk5hbWUoZWEpJT5fc2V0KXsNCiAgICAgICAgICAgICAgICAgICAgLy8gPCU9bG9nKCklPiI8JT1uTmFtZShlYSklPiIsIHIuPCU9bk5hbWUoZWEpJT4oKS5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgICAgICAgICAgci48JT1uTmFtZShlYSklPihhd2FpdCByLl88JT1uTmFtZShlYSklPi5maW5kKGRlcHRoLTEpKTsNCiAgICAgICAgICAgICAgICB9DQo8JSB9KSU+DQogICAgDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7ICU+DQogICAgPCUgY2xzVG9vbHMoYykuZm9yRWFjaCh0ID0+IHslPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICAgICAgPCUgaWYoX2ZpbGVUb29scy5pbmRleE9mKHQpPj0wKXsgJT4NCiAgICAgICAgICAgICAgICAgICAgbGV0IHJfPCU9dGFOYW1lJT4gPSBbXTsNCiAgICAgICAgICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBfdGEgb2Ygci48JT10YU5hbWUlPigpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iPCU9dGFOYW1lJT4iLCBfdGEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcl88JT10YU5hbWUlPi5wdXNoKGF3YWl0IF90YS5maW5kKGRlcHRoLTEpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByLmNsZWFyXzwlPXRhTmFtZSU+KCk7DQogICAgICAgICAgICAgICAgICAgIHIuPCU9dGFOYW1lJT4ocl88JT10YU5hbWUlPik7DQogICAgICAgIDwlIH1lbHNleyAlPg0KICAgICAgICAgICAgICAgICAgICAvLyA8JT1sb2coKSU+IjwlPXRhTmFtZSU+Iiwgci48JT10YU5hbWUlPigpKTsNCiAgICAgICAgICAgICAgICAgICAgci48JT10YU5hbWUlPihhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUodGEuRW50aXR5Q2xhc3MsIHRydWUpJT4oKS48JT1uTmFtZSh0YSklPihyKQ0KICAgICAgICAgICAgPCUgaWYoZmFsc2UgJiYgWydTcWxEQiddLmluZGV4T2YodCk+PTApeyAvLyBzcWwgc3RhdGVtZW50cyBkbyBub3QgaW5jbHVkZSBsZWZ0IGpvaW5zIHdpdGhvdXQgZXhwbGljaXQgcmVmZXJlbmNlcyAlPg0KICAgICAgICAgICAgICAgICAgICAgICAgPCV0YS5FbnRpdHlDbGFzcy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUgJiYgZWEhPXRhKS5mb3JFYWNoKGVhID0+IHslPi48JT1uTmFtZShlYSklPihuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkpPCV9KSU+DQogICAgICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIC48JT1tTmFtZSU+KGRlcHRoLTEpKTsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlIH0pJT4NCjwlIH0pJT4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGxldCByZWZzID0gcmV0LmZpbHRlcihyID0+IHIuRW50aXR5Q2xhc3MpOw0KICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IG8gb2YgKG9ianMgfHwgW10pLmZpbHRlcihfbyA9PiAhX28uX19zeW5jX29uKCkpKXsNCiAgICAgICAgICAgIGlmKG8uX3RvRU1TT2JqZWN0KXsNCiAgICAgICAgICAgICAgICByZWZzLnB1c2goLi4uKGF3YWl0IHRoaXMuX2Zyb21FTVNWYWx1ZXMoYXdhaXQgby5fdG9FTVNPYmplY3QodHJ1ZSwgdHJ1ZSkuPCU9bU5hbWUlPihkZXB0aCkpKSk7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICByZWZzLnB1c2goLi4uKGF3YWl0IG8uPCU9bU5hbWUlPihkZXB0aCkpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZWZzID0gcmVmcy5maWx0ZXIociA9PiByKTsNCiAgICAgICAgDQogICAgICAgIHJlZnMuZm9yRWFjaChyID0+IHIuX3Jlc29sdmUocmVmcykpOw0KDQogICAgICAgIDwlPWxvZygpJT4iT3V0cHV0IiwgcmV0KTsNCg0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICAgICAgICAgIC8qKiogRU5EIExPQ0FMIDwlPW1OYW1lJT4oKSAqKiovDQogICAgICAgIH0sIHtkZXB0aCwgb2Jqcywgc3RhcnQsIGVuZCwgZmllbGRzLCBfX2JlZm9yZVJ1bGVzOiBbPCUoYy5FbnRpdHlSdWxlcyB8fCBbXSkuZmlsdGVyKHIgPT4gclttTmFtZV0gJiYgci5CZWZvcmUpLm1hcChyID0+IHslPjwlPV9GckVNRC5fdG9KUyhyKSU+PCUgfSkuam9pbignLCAnKSU+XSwgX19hZnRlclJ1bGVzOiBbPCUoYy5FbnRpdHlSdWxlcyB8fCBbXSkuZmlsdGVyKHIgPT4gclttTmFtZV0gJiYgci5BZnRlcikubWFwKHIgPT4geyU+PCU9X0ZyRU1ELl90b0pTKHIpJT48JSB9KS5qb2luKCcsICcpJT5dfSk7DQoNCiAgICAgICAgcmV0dXJuIChyZXN1bHRzLmZpbmQociA9PiByLnJldCkgfHwge3JldDogW119KS5yZXQgfHwgW107IC8vIGZpcnN0IG9uZSB0byBleGVjdXRlIGNvcnJlY3RseQ0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3Jlc29sdmUnJT4ocmVmcyl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKCFyZWZzLmxlbmd0aCkgcmV0dXJuIHRoaXM7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHRoaXMuX19pbXBvcnQoe30sIHsNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46ICgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy48JT1uTmFtZShlYSklPigpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwlPWxvZygpJT4iPCU9bk5hbWUoZWEpJT4iLCB0aGlzLjwlPW5OYW1lKGVhKSU+KCkuSWQsIHJlZnMubWFwKHIgPT4gKHtpZDogci5JZCwgY29kZTogci5jb2RlKCl9KSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihyZWZzLmZpbmQobyA9PiBvLklkPT10aGlzLjwlPW5OYW1lKGVhKSU+KCkuSWQpIHx8IHRoaXMuPCU9bk5hbWUoZWEpJT4oKS48JT1tTmFtZSU+KHJlZnMpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuPCU9dGFOYW1lJT4oKS5sZW5ndGgpIHRoaXMuPCU9dGFOYW1lJT4odGhpcy48JT10YU5hbWUlPigpLm1hcCh0YSA9PiByZWZzLmZpbmQobyA9PiBvLklkPT10YS5JZCkgfHwgdGEuPCU9bU5hbWUlPihyZWZzKSksIG51bGwsIHRydWUpOw0KICAgICAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQo8JSBpZihtYWluQ2xhc3MoWydFTVMnXSkpeyU+DQogICAgYXN5bmMgPCU9bU5hbWU9J19mcm9tRU1TVmFsdWVzJyU+KGV2cyl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnRU1TJ10pPT1jKXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBhd2FpdCB0aGlzLl9maW5kUmVmZXJlbmNlcyhldnMsIFsuLi5uZXcgU2V0KGV2cy5tYXAodiA9PiB2LmVudGl0eUF0dHJpYnV0ZSgpLklkKS5mbGF0KCkpXS5tYXAoaWQgPT4gbmV3IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlKGlkKSkpOw0KICAgICAgICAgICAgPCU9bG9nKCklPmV2cyk7DQogICAgICAgIA0KICAgICAgICAgICAgbGV0IG9ianMgPSBbXTsNCiAgICAgICAgICAgIHRoaXMuZ3JvdXBCeShldnMsICJfZW50aXR5T2JqZWN0IikuZm9yRWFjaChldmcgPT4gew0KICAgICAgICAgICAgICAgIGV2Zy5rZXkuZW50aXR5T2JqZWN0X0VudGl0eVZhbHVlcyhldmcudmFsdWVzKTsNCiAgICAgICAgICAgICAgICBvYmpzLnB1c2goZXZnLmtleSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgb2Jqcy5mb3JFYWNoKHIgPT4gci5lbnRpdHlDbGFzcyhyLmVudGl0eU9iamVjdF9FbnRpdHlWYWx1ZXMoKVswXS5lbnRpdHlBdHRyaWJ1dGUoKS5lbnRpdHlDbGFzcygpKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCByZXQgPSBbXTsNCiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgciBvZiBvYmpzKXsNCiAgICAgICAgICAgICAgICByZXQucHVzaChhd2FpdCBuZXcgPCU9c2NvcGUlPltyLmVudGl0eUNsYXNzKCkubmFtZSgpXSgpLl9mcm9tRU1TT2JqZWN0KHIpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgPCV9ZWxzZXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUobWFpbkNsYXNzKFsnRU1TJ10sYykpJT4oKS48JT1tTmFtZSU+KGV2cyk7DQogICAgPCV9JT4NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b0VNU0NsYXNzJyU+KGRlcHRoKXsNCiAgICAgICAgLy8gd2h5IG5vdCBfX2V4cG9ydCA/DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCByZXQgPSBuZXcgPCU9c2NvcGUlPi5FbnRpdHlDbGFzcygnPCU9Yy5JZCU+JykubmFtZSgiPCU9Yy5OYW1lJT4iKS5jb2RlKCI8JT1uTmFtZShjKSU+IikuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkuZGF0ZShuZXcgRGF0ZSgpKS5jb21wYW55KG5ldyA8JT1zY29wZSU+LkNvbXBhbnkoKS5uYW1lKCI8JT1zY29wZSU+IikuY29kZSgiPCU9c2NvcGUlPiIpKS5lbnRpdHlNb2R1bGUobmV3IDwlPXNjb3BlJT4uRW50aXR5TW9kdWxlKCkuY29kZSgiPCU9c2NvcGUlPiIpLm5hbWUoIjwlPXNjb3BlJT4iKSk7DQogICAgICAgICAgICBpZighZGVwdGgpIHJldHVybiByZXQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldC5lbnRpdHlDbGFzc19FbnRpdHlNZXRob2RzKFsNCiAgICA8JSBjLkVudGl0eU1ldGhvZHMuZm9yRWFjaChtID0+IHslPg0KICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LkVudGl0eU1ldGhvZCgnPCU9bS5JZCU+JykuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkubmFtZSgiPCU9bS5OYW1lJT4iKS5jb2RlKCI8JT1uTmFtZShtKSU+IikuZW50aXR5TWV0aG9kX0VudGl0eUF0dHJpYnV0ZXMoWw0KICAgICAgICA8JSBtLk1ldGhvZFBhcmFtZXRlcnMuZm9yRWFjaChwID0+IHslPg0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi5FbnRpdHlBdHRyaWJ1dGUoJzwlPXAuSWQlPicpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLm5hbWUoIjwlPXAuTmFtZSU+IikuY29kZSgiPCU9bk5hbWUocCklPiIpLmlzQXJyYXkoPCU9cC5Jc0FycmF5Pyd0cnVlJzonZmFsc2UnJT4pLnJlbWFyaygiPCU9Yy5OYW1lJT4uPCU9bS5OYW1lJT4oKSIpLmVudGl0eUNsYXNzKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4oKS48JT1tTmFtZSU+KCkpDQogICAgICAgICAgICA8JSBpZihwLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgICAgIC5lbnRpdHlUeXBlKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHAuRW50aXR5VHlwZSklPigpLjwlPW1OYW1lJT4oZGVwdGgtMSkpDQogICAgICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgICAgICAuaXM8JT1fRnJFTUQuX2F0dHIocCklPih0cnVlKQ0KICAgICAgICAgICAgPCUgfSU+LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICAgICAgXSkucmVzcG9uc2VBdHRyaWJ1dGUobmV3IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlKCc8JT1tLlJlc3BvbnNlQXR0cmlidXRlLklkJT4nKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5uYW1lKCI8JT1tLlJlc3BvbnNlQXR0cmlidXRlLk5hbWUlPiIpLmNvZGUoIjwlPW5OYW1lKG0uUmVzcG9uc2VBdHRyaWJ1dGUpJT4iKS5lbnRpdHlDbGFzcyhuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+KCkuPCU9bU5hbWUlPigpKQ0KICAgICAgICA8JSBpZihtLlJlc3BvbnNlQXR0cmlidXRlLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgLmVudGl0eVR5cGUobmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUobS5SZXNwb25zZUF0dHJpYnV0ZS5FbnRpdHlUeXBlKSU+KCkuPCU9bU5hbWUlPihkZXB0aC0xKSkNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICAuaXM8JT1fRnJFTUQuX2F0dHIobS5SZXNwb25zZUF0dHJpYnV0ZSklPih0cnVlKQ0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICApLA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIF0pLmVudGl0eUNsYXNzX0VudGl0eUF0dHJpYnV0ZXMoWw0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi5FbnRpdHlBdHRyaWJ1dGUoJzwlPWVhLklkJT4nKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5uYW1lKCI8JT1lYS5OYW1lJT4iKS5jb2RlKCI8JT1uTmFtZShlYSklPiIpLnJlbWFyaygnPCU9Yy5OYW1lJT4uPCU9ZWEuTmFtZSU+JykNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICAuZW50aXR5VHlwZShuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihkZXB0aC0xKSkNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICAuaXM8JT1fRnJFTUQuX2F0dHIoZWEpJT4odHJ1ZSkNCiAgICAgICAgPCUgfSU+LA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIF0pOw0KICAgICAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19mcm9tRU1TT2JqZWN0JyU+KG9iail7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHRoaXMuSWQgPSBvYmouSWQ7DQogICAgICAgICAgICBsZXQgZXYgPSBudWxsOw0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIGV2ID0gb2JqLmVudGl0eU9iamVjdF9FbnRpdHlWYWx1ZXMoKS5maW5kKGV2ID0+IGV2LmVudGl0eUF0dHJpYnV0ZSgpLmNvZGUoKT09PCU9X25Db2RlKGVhKSU+KTsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgIGlmKGV2KSB0aGlzLjwlPW5OYW1lKGVhKSU+KGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KGV2Lm9iamVjdFZhbHVlKCkpKTsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgIGlmKGV2KSB0aGlzLjwlPW5OYW1lKGVhKSU+KGV2LjwlPV9GckVNRC5fYXR0cihlYSkudG9Mb3dlckNhc2UoKSU+VmFsdWUoKSk7DQogICAgICAgIDwlIH0lPg0KICAgIDwlIH0pJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICA8JSB9KSU+DQogICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9FTVNPYmplY3QnJT4oYlF1ZXJ5LCBiVHlwZWRBdHRyaWJ1dGVzKXsNCiAgICAgICAgbGV0IHJldCA9IG5ldyA8JT1zY29wZSU+LkVudGl0eU9iamVjdCgpLmFjdGl2ZSh0cnVlKS5lbnRpdHlDbGFzcyh0aGlzLl90b0VNU0NsYXNzKCkpOw0KDQogICAgICAgIHJldCA9IHRoaXMuX19leHBvcnQocmV0LCB7DQogICAgICAgICAgICBGdWxsOiAhYlF1ZXJ5LA0KICAgICAgICAgICAgLy9OdWxsOiAhYlF1ZXJ5LA0KICAgICAgICAgICAgSWQ6IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLklkID0gdiwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgIjwlPW5OYW1lKGVhKSU+IjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgbGV0IGV2ID0gbmV3IDwlPXNjb3BlJT4uRW50aXR5VmFsdWUoKS5hY3RpdmUodHJ1ZSkuZW50aXR5QXR0cmlidXRlKG5ldyA8JT1zY29wZSU+LkVudGl0eUF0dHJpYnV0ZSgnPCU9ZWEuSWQlPicpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLm5hbWUoIjwlPWVhLk5hbWUlPiIpLmNvZGUoIjwlPW5OYW1lKGVhKSU+IikuZW50aXR5Q2xhc3ModGhpcy5fdG9FTVNDbGFzcygpKSk7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgZXYub2JqZWN0VmFsdWUodj92LjwlPW1OYW1lJT4oYlF1ZXJ5LCBiVHlwZWRBdHRyaWJ1dGVzKTpudWxsLCB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKTsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICBldi48JT1fRnJFTUQuX2F0dHIoZWEpLnRvTG93ZXJDYXNlKCklPlZhbHVlKHYsIHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3ApOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICBvYmouZW50aXR5T2JqZWN0X0VudGl0eVZhbHVlcyhldiwgJz09Jyk7DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pOyAlPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIGlmKHYgJiYgYlR5cGVkQXR0cmlidXRlcykgb2JqLm9iamVjdFZhbHVlX0VudGl0eVZhbHVlcyh2Lm1hcChfdiA9PiBuZXcgPCU9c2NvcGUlPi5FbnRpdHlWYWx1ZSgpLmFjdGl2ZSh0cnVlKS5lbnRpdHlBdHRyaWJ1dGUobmV3IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlKCc8JT10YS5JZCU+JykuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkuY29kZSgiPCU9bk5hbWUodGEpJT4iKS5uYW1lKCI8JT10YS5OYW1lJT4iKS5lbnRpdHlDbGFzcyhuZXcgPCU9c2NvcGUlPi48JT1uTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLl90b0VNU0NsYXNzKCkpKS5vYmplY3RWYWx1ZShfdi48JT1tTmFtZSU+KGJRdWVyeSwgYlR5cGVkQXR0cmlidXRlcykpKSwgJz09Jyk7DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQo8JSB9ICU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0JJU2VydmVyJ10pKXslPg0KICAgIDwlPW1OYW1lPSdfYXNPYmplY3RzJyU+KGV2cyl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnQklTZXJ2ZXInXSkhPWMpeyU+DQogICAgICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUobWFpbkNsYXNzKFsnQklTZXJ2ZXInXSxjKSklPigpLjwlPW1OYW1lJT4oZXZzKTsNCiAgICA8JX1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKHR5cGVvZihldnMpPT09InVuZGVmaW5lZCIgfHwgIWV2cyB8fCAhQXJyYXkuaXNBcnJheShldnMpIHx8ICFldnMubGVuZ3RoKSByZXR1cm4gW107DQoNCiAgICAgICAgICAgIGV2cy5mb3JFYWNoKGV2ID0+IHsNCiAgICAgICAgICAgICAgICBldi5FbnRpdHlBdHRyaWJ1dGUgPSA8JT1zY29wZSU+LkVudGl0eUF0dHJpYnV0ZXMuZmluZChlYSA9PiBlYS5JZD09ZXYuRW50aXR5QXR0cmlidXRlaWQpOw0KICAgICAgICAgICAgICAgIGV2LkVudGl0eU9iamVjdC5FbnRpdHlDbGFzcyA9IGV2LkVudGl0eUF0dHJpYnV0ZS5FbnRpdHlDbGFzczsNCiAgICAgICAgICAgICAgICBpZihldi5PYmplY3RWYWx1ZSl7DQogICAgICAgICAgICAgICAgICAgIGV2Lk9iamVjdFZhbHVlLkVudGl0eUNsYXNzID0gPCU9c2NvcGUlPi5FbnRpdHlDbGFzc2VzLmZpbmQoZWMgPT4gZWMuSWQ9PWV2Lk9iamVjdFZhbHVlLkVudGl0eUNsYXNzLklkKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICANCiAgICAgICAgICAgIGxldCBvYmogPSBbXTsNCiAgICAgICAgICAgIHRoaXMuZ3JvdXBCeShldnMsICJFbnRpdHlPYmplY3QiKS5mb3JFYWNoKGV2ZyA9PiB7DQogICAgICAgICAgICAgICAgbGV0IGMgPSBuZXcgPCU9c2NvcGUlPltldmcua2V5LkVudGl0eUNsYXNzLk5hbWUucmVwbGFjZSgvIC9nLCAnXycpXSgpOw0KICAgICAgICAgICAgICAgIGMuRW50aXR5VmFsdWVzID0gZXZnLnZhbHVlczsNCiAgICAgICAgICAgICAgICBjLlZhbHVlRW50aXRpZXMgPSBbXTsNCiAgICAgICAgICAgICAgICAvLyBjLkVudGl0eUNsYXNzID0gZXZnLmtleS5FbnRpdHlDbGFzczsNCiAgICAgICAgICAgICAgICBjLklkID0gZXZnLmtleS5JZDsNCiAgICAgICAgICAgICAgICBldmcudmFsdWVzLmZvckVhY2godiA9PiB2LkVudGl0eU9iamVjdCA9IGMpOw0KICAgICAgICAgICAgICAgIG9iai5wdXNoKGMpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGV2cy5maWx0ZXIoZXYgPT4gZXYuT2JqZWN0VmFsdWUpLmZvckVhY2goZXYgPT4gew0KICAgICAgICAgICAgICAgIHZhciBfZiA9IG9iai5maW5kKG8gPT4gby5JZCA9PSBldi5PYmplY3RWYWx1ZS5JZCk7DQogICAgICAgICAgICAgICAgaWYoX2YpIF9mLlZhbHVlRW50aXRpZXMucHVzaChldik7DQogICAgICAgICAgICAgICAgZXYuT2JqZWN0VmFsdWUgPSBfZjsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgICAgIGxldCByZXQgPSBbXTsNCiAgICAgICAgICAgIG9iai5mb3JFYWNoKG8gPT4gew0KICAgICAgICAgICAgICAgIGlmKG8uRW50aXR5Q2xhc3MgJiYgby5FbnRpdHlDbGFzcy5JZCE9dGhpcy5FbnRpdHlDbGFzcy5JZCkgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgcmV0LnB1c2gobyk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHJldC5tYXAobyA9PiBvLl9yZXZlcnQoKSk7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICA8JX0lPg0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3JldmVydCclPihlbykgew0KICAgICAgICBpZiAoZW8pIHsNCiAgICAgICAgICAgIC8vIHJldmVydCBmcm9tIHNvdXJjZSBkYXRhDQogICAgICAgICAgICBpZihlby5FbnRpdHlDbGFzcyAmJiAoKHRoaXMuRW50aXR5Q2xhc3MuSWQgJiYgZW8uRW50aXR5Q2xhc3MuSWQhPXRoaXMuRW50aXR5Q2xhc3MuSWQpIHx8ICh0aGlzLkVudGl0eUNsYXNzLk5hbWUgJiYgZW8uRW50aXR5Q2xhc3MuTmFtZSE9dGhpcy5FbnRpdHlDbGFzcy5OYW1lKSkpew0KICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPiJDYW5ub3QgcmV2ZXJ0ICIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLkVudGl0eUNsYXNzKSArICIgZnJvbSAiICsgZW8uRW50aXR5Q2xhc3MuTmFtZSwgZW8pOw0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGhpcy5JZCA9IGVvLklkOw0KICAgICAgICAgICAgdGhpcy5FbnRpdHlWYWx1ZXMgPSBlby5FbnRpdHlWYWx1ZXMgfHwgW107DQogICAgICAgICAgICB0aGlzLlZhbHVlRW50aXRpZXMgPSBlby5WYWx1ZUVudGl0aWVzIHx8IFtdOw0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuPCU9bU5hbWUlPigpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYodGhpcy5fX3N5bmNfb24oKSAmJiBNYXRoLmFicygobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLl9fc3luY19vbigpLmdldFRpbWUoKSkgLyAxMDAwKSA8IDUpew0KICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+Ik9iamVjdCBhbHJlYWR5IHJldmVydGVkIiwgdGhpcy5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuX19zeW5jX29uKG5ldyBEYXRlKCkpOw0KICAgICAgICANCiAgICAgICAgICAgIC8vIHVzZSBFbnRpdHlWYWx1ZXMgYW5kIFZhbHVlRW50aXRpZXMgdG8gcmV2ZXJ0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzDQogICAgICAgICAgICB0aGlzLkVudGl0eVZhbHVlcy5mb3JFYWNoKGV2ID0+IHsNCiAgICAgICAgICAgICAgICBsZXQgZWEgPSBudWxsOw0KICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgZWEgPSA8JT1zY29wZSU+LkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKF9lYSA9PiBfZWEuRW50aXR5Q2xhc3MuTmFtZT09JzwlPWMuTmFtZSU+JykuZmluZChfZWEgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXYuRW50aXR5QXR0cmlidXRlaWQ9PV9lYS5JZCkgcmV0dXJuIF9lYTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGV2LkVudGl0eUF0dHJpYnV0ZSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXYuRW50aXR5QXR0cmlidXRlLklkPT1fZWEuSWQpIHJldHVybiBfZWE7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXYuRW50aXR5QXR0cmlidXRlLk5hbWU9PV9lYS5OYW1lKSByZXR1cm4gX2VhOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIGlmKCFlYSl7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT13YXJuKCklPiJ1bmFibGUgdG8gZGV0ZWN0IGF0dHJpYnV0ZSBmcm9tIHZhbHVlIiwgZXYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgICAgICA8JT1lcnJvcigpJT5ldiwgZXgpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgbGV0IHYgPSBldlsodGhpc1siX2F0dHIiXT90aGlzOl9GckVNRCkuX2F0dHIoZWEpICsgIlZhbHVlIl07DQogICAgICAgICAgICAgICAgbGV0IHAgPSBlYS5OYW1lLnJlcGxhY2UoLyAvZywgJ18nKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZih0eXBlb2YodGhpc1twXSkhPT0nZnVuY3Rpb24nKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iaW52YWxpZCB0eXBlIiwgZWEsIHAsIHYpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmKHYgJiYgZWEuRW50aXR5VHlwZSAmJiB0eXBlb2Yodik9PT0nb2JqZWN0Jyl7DQogICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4icmV2ZXJ0aW5nICIgKyBlYS5OYW1lLCB2LCBuZXcgPCU9c2NvcGUlPltlYS5FbnRpdHlUeXBlLk5hbWUucmVwbGFjZSgvIC9nLCAnXycpXSgpLjwlPW1OYW1lJT4odikpOw0KICAgICAgICAgICAgICAgICAgICBpZighdi5FbnRpdHlWYWx1ZXMpew0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iZW1wdHkgdmFsdWVzIGZvciAiICsgZWEuTmFtZSwgdik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgdiA9IHYuPCU9bU5hbWUlPj92LjwlPW1OYW1lJT4oKTpuZXcgPCU9c2NvcGUlPltlYS5FbnRpdHlUeXBlLk5hbWUucmVwbGFjZSgvIC9nLCAnXycpXSgpLjwlPW1OYW1lJT4odik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXNbcF0odik7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgdGhpcy5WYWx1ZUVudGl0aWVzLmZpbHRlcih2ZSA9PiB2ZS5FbnRpdHlBdHRyaWJ1dGUpLmZvckVhY2godmUgPT4gew0KICAgICAgICAgICAgICAgIHZhciB0YSA9IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlcy5maW5kKGVhID0+IGVhLklkPT12ZS5FbnRpdHlBdHRyaWJ1dGUuSWQpOw0KICAgICAgICAgICAgICAgIGlmKCF0YSkgcmV0dXJuIG51bGw7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdmFyIHRhTmFtZSA9IHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7DQoNCiAgICAgICAgICAgICAgICBsZXQgdiA9IHZlLkVudGl0eU9iamVjdDsNCiAgICAgICAgICAgICAgICBpZih2KXsNCiAgICAgICAgICAgICAgICAgICAgdiA9IHYuPCU9bU5hbWUlPj92LjwlPW1OYW1lJT4oKTpuZXcgPCU9c2NvcGUlPlt0YS5FbnRpdHlUeXBlLk5hbWUucmVwbGFjZSgvIC9nLCAnXycpXSgpLjwlPW1OYW1lJT4odik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXNbdGEuTmFtZS5yZXBsYWNlKC8gL2csICJfIikgKyAiXyIgKyB0YU5hbWVdKHYpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdmFsdWVDbGFzcyclPigpew0KICAgICAgICBsZXQgX2NsYXNzID0ge0FjdGl2ZTogdHJ1ZX07DQogICAgICAgIGlmKHRoaXMuRW50aXR5Q2xhc3MuRW50aXR5TW9kdWxlKXsNCiAgICAgICAgICAgIF9jbGFzcy5FbnRpdHlNb2R1bGUgPSB0aGlzLkVudGl0eUNsYXNzLkVudGl0eU1vZHVsZTsNCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgICBfY2xhc3MgPSB7DQogICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgIENvbXBhbnk6IHtBY3RpdmU6IHRydWUsIEVuYWJsZWQ6IHRydWUsIEVudGl0eUNsYXNzZXM6IFt0aGlzLkVudGl0eUNsYXNzXX0NCiAgICAgICAgICAgIH07DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIF9jbGFzczsNCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3RvWE1MJyU+KCl7DQogICAgICAgIC8vIGFuIG92ZXJsb2FkIG9mIHRoZSBzci5fdG9YTUwNCiAgICAgICAgbGV0IHJldCA9IHt4bWw6IGBgfTsNCiAgICAgICAgcmV0ID0gdGhpcy5fX2V4cG9ydChyZXQsIHsNCiAgICAgICAgICAgIElkOiAob2JqLCBlYUNvZGUsIHYpID0+IHJldC54bWwgKz0gYDwke3RoaXMuX19jb25maWcoJ2lkRmllbGQnKXx8J0lkJ30+JHt2fTwvJHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJyl8fCdJZCd9PmAsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICI8JT1uTmFtZShlYSklPiI6IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIHJldC54bWwgKz0gYDwke2VhQ29kZX0+YDsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICByZXQueG1sICs9IHY/di48JT1tTmFtZSU+KCk6bnVsbDsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICByZXQueG1sICs9IGA8IVtDREFUQVske3Z9XV0+YDsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgcmV0LnhtbCArPSBgPC8ke2VhQ29kZX0+YDsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgcmV0LnhtbCArPSBgPCR7ZWFDb2RlfT5gICsgdi5tYXAoX3YgPT4gJzxPYmplY3Q+JyArIF92LjwlPW1OYW1lJT4oKSArICI8L09iamVjdD4iKS5qb2luKCcnKSArIGA8LyR7ZWFDb2RlfT5gOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQoNCiAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgIHJldHVybiByZXQueG1sOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfYnVpbGRUaGlzJyU+KGRlcHRoPTEpew0KICAgICAgICAvLyBjYW5kaWRhdGUgZm9yIF9fZXhwb3J0DQogICAgICAgIHZhciByZXQgPSBbew0KICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgRW50aXR5QXR0cmlidXRlOiB7QWN0aXZlOiB0cnVlLCBFbnRpdHlDbGFzczogdGhpcy5fdmFsdWVDbGFzcygpfSwNCiAgICAgICAgICAgIEVudGl0eU9iamVjdDogdGhpcy50b0VudGl0eU9iamVjdCh0cnVlKSwNCiAgICAgICAgfV07DQogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGRlcHRoOyBpKyspIHsNCiAgICAgICAgICAgIHJldC5wdXNoKHsNCiAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgRW50aXR5T2JqZWN0OiB7DQogICAgICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgVmFsdWVFbnRpdGllczogW3JldFtpIC0gMV1dDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICAgICAgDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7JT4NCiAgICAgICAgaWYoZGVwdGg+MSl7DQogICAgICAgICAgICBsZXQgdiA9IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuPCU9bk5hbWUodGEpJT4odGhpcyk7DQogICAgICAgICAgICByZXQucHVzaCh7DQogICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgIEVudGl0eU9iamVjdDogdj92LnRvRW50aXR5T2JqZWN0KHRydWUpOm51bGwsDQogICAgICAgICAgICB9KTsNCiAgICANCiAgICAgICAgICAgIHJldC5wdXNoKHsNCiAgICAgICAgICAgICAgICBFbnRpdHlPYmplY3Q6IHsNCiAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBWYWx1ZUVudGl0aWVzOiBbew0KICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgRW50aXR5T2JqZWN0OiB2P3YudG9FbnRpdHlPYmplY3QodHJ1ZSk6bnVsbCwNCiAgICAgICAgICAgICAgICAgICAgfV0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KPCUgfSklPg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J3RvRW50aXR5T2JqZWN0JyU+KGJRdWVyeSwgYlR5cGVkQXR0cmlidXRlcykgew0KICAgICAgICBsZXQgcmV0ID0ge0FjdGl2ZTogdHJ1ZSwgRW50aXR5Q2xhc3M6IHRoaXMuX3ZhbHVlQ2xhc3MoKSwgRW50aXR5VmFsdWVzOiBbXSwgVmFsdWVFbnRpdGllczogW119Ow0KICAgICAgICBpZighYlF1ZXJ5KSByZXQuRGF0ZSA9IHRoaXMuc2VydmVyRGF0ZSgpOyANCg0KICAgICAgICByZXQgPSB0aGlzLl9fZXhwb3J0KHJldCwgew0KICAgICAgICAgICAgRnVsbDogIWJRdWVyeSwNCiAgICAgICAgICAgIElkOiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai5JZCA9IHYsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICI8JT1uTmFtZShlYSklPiI6IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIGxldCBldiA9IHsNCiAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBFbnRpdHlBdHRyaWJ1dGU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIElkOiA8JT1zY29wZSU+LkVudGl0eUNsYXNzZXMuZmluZChjID0+IGMuSWQgPSB0aGlzLkVudGl0eUNsYXNzLklkKS5FbnRpdHlBdHRyaWJ1dGVzLmZpbmQoZWEgPT4gZWEuTmFtZT09JzwlPWVhLk5hbWUlPicpLklkLA0KICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogIjwlPWVhLk5hbWUlPiIsDQogICAgICAgICAgICAgICAgICAgICAgICBFbnRpdHlDbGFzczogdGhpcy5fdmFsdWVDbGFzcygpLA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICBPUEVSQVRPUlM6IHt9LA0KICAgICAgICAgICAgICAgIH07DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgaWYodil7DQogICAgICAgICAgICAgICAgICAgIGV2Lk9iamVjdFZhbHVlID0gdi48JT1tTmFtZSU+KGJRdWVyeSwgYlR5cGVkQXR0cmlidXRlcyk7DQogICAgICAgICAgICAgICAgICAgIGV2Lk9QRVJBVE9SUy5PYmplY3RWYWx1ZSA9IHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIGV2LjwlPV9GckVNRC5fYXR0cihlYSklPlZhbHVlID0gdjsNCiAgICAgICAgICAgICAgICBldi5PUEVSQVRPUlMuPCU9X0ZyRU1ELl9hdHRyKGVhKSU+VmFsdWUgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICBvYmouVmFsdWVFbnRpdGllcy5wdXNoKGV2KTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgaWYodiAmJiBiVHlwZWRBdHRyaWJ1dGVzKSBvYmouRW50aXR5VmFsdWVzLnB1c2godi5tYXAoX3YgPT4gKHsNCiAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBFbnRpdHlBdHRyaWJ1dGU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIElkOiAnPCU9dGEuSWQlPicsDQogICAgICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiAiPCU9dGEuTmFtZSU+IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIEVudGl0eUNsYXNzOiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLl92YWx1ZUNsYXNzKCksDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIE9iamVjdFZhbHVlOiBfdi48JT1tTmFtZSU+KGJRdWVyeSwgYlR5cGVkQXR0cmlidXRlcyksDQogICAgICAgICAgICAgICAgfSkpKTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCjwlIH0gJT4NCn0NCg==",
	"__keys": ["name"],
	"active": true,
	"enabled": true,
	"__trMap": []
}