{
	"Id": "bb716650ac01d44dfaec19c5c992a609a6c005c2",
	"after": null,
	"async": null,
	"before": null,
	"date": "undefined",
	"name": "EntityClass",
	"order": null,
	"remark": "dW5kZWZpbmVk",
	"script": "PCUNCmxldCBhdXRoQ2xhc3MgPSBhckNsYXNzZXMuZmluZChfYyA9PiBfYy5FbnRpdHlNZXRob2RzLmZpbmQobSA9PiBtLk5hbWU9PSdhdXRob3JpemUnICYmIG0uSXNQdWJsaWMpKTsNCmxldCBlbXMgPSBhckNsYXNzZXMuZmluZChfYyA9PiBfYy5OYW1lPT0nRW50aXR5Q2xhc3MnKTsNCg0KLy8gdGhlIGRlZmF1bHQgU2V0X09uIGRhdGUgdG8gdXNlDQpsZXQgU2V0X09uID0gYG5ldyBEYXRlKClgOw0KDQpsZXQgX2I2NHRlc3QgPSBzID0+IGAodHlwZW9mKCR7c30pPT09J3N0cmluZyc/KC8qJHtzfS5sZW5ndGg+MTAwMCB8fCovIC9eKFswLTlhLXpBLVorXC9dezR9KSooKFswLTlhLXpBLVorXC9dezJ9PT0pfChbMC05YS16QS1aK1wvXXszfT0pKT8kLy50ZXN0KCR7c318fCcuJykpOmZhbHNlKWA7DQoNCmxldCBfZGVmID0gKHMsIHYpID0+ICU+PCU9cyU+ID0gdHlwZW9mKDwlPXMlPikhPT0ndW5kZWZpbmVkJz88JT1zJT46PCU9diU+OzwlDQoNCmxldCBfZGVmYXVsdHMgPSAob2JqPSd0aGlzJywgX2M9YykgPT4gX2MuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5EZWZhdWx0KS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYoITwlPW9iaiU+Ll88JT1uTmFtZShlYSklPl9zZXQpew0KICAgICAgICAgICAgICAgIDwlPW9iaiU+LjwlPW5OYW1lKGVhKSU+KDwldmFsdWVPZihlYS5EZWZhdWx0KSU+KTsNCiAgICAgICAgICAgIH0NCjwlIH0pOw0KDQpsZXQgbG9nID0gKG4sIF90aGlzPSd0aGlzJykgPT4gYCR7X3RoaXN9LmxvZyhudWxsLCB1bmRlZmluZWQsICcke24gfHwgbU5hbWV9JywgJ0VudGl0eU9iamVjdCcsIDAsIGA7DQpsZXQgd2FybiA9IChuLCBfdGhpcz0ndGhpcycpID0+IGAke190aGlzfS5sb2cobnVsbCwgdW5kZWZpbmVkLCAnJHtuIHx8IG1OYW1lfScsICdFbnRpdHlPYmplY3QnLCAxLCBgOw0KbGV0IGVycm9yID0gKG4sIF90aGlzPSd0aGlzJykgPT4gYCR7X3RoaXN9LmxvZyhudWxsLCB1bmRlZmluZWQsICcke24gfHwgbU5hbWV9JywgJ0VudGl0eU9iamVjdCcsIDIsIGA7DQoNCmxldCBxbFR5cGUgPSAoZWEsIGJJbnB1dCkgPT4gew0KICAgIGlmKGVhLklzQm9vbCkgcmV0dXJuICdCb29sZWFuJzsNCiAgICAvL2lmKGVhLklzRGF0ZSkgcmV0dXJuICdEYXRlVGltZSc7DQogICAgaWYoZWEuSXNJbnQgfHwgZWEuSXNGbG9hdCkgcmV0dXJuICdJbnQnOw0KICAgIGlmKGVhLkVudGl0eVR5cGUpIHJldHVybiBuTmFtZShlYS5FbnRpdHlUeXBlKSsoYklucHV0PyJJbnB1dCI6IiIpOw0KICAgIHJldHVybiAnU3RyaW5nJzsNCn07DQoNCi8vIHdoeSBoYXJkIGNvZGVkPz8/DQpsZXQgX3Jlc3RUb29scyA9IFsnU2VydmljZU5vdycsICdTYWxlc0ZvcmNlJywgJ1Jlc3REQklPJywgJ0dpdEh1YicsICdGaWxlU3lzdGVtJ107DQpsZXQgX3NxbFRvb2xzID0gWydTcWxEQicsICdTYWxlc0ZvcmNlJywgJ1Nub3dGbGFrZSddOw0KbGV0IF9maWxlVG9vbHMgPSBbJ0dpdEh1YicsICdGaWxlU3lzdGVtJ107DQoNCmxldCBjbHNUb29scyA9IF9jID0+IF9jLlRvb2xzLm1hcCh0ID0+IHQudHlwZT90LnR5cGUubmFtZToodC5uYW1lIHx8IHQpKTsNCmxldCBtYWluQ2xhc3MgPSAoX2FyVG9vbHMsIF9jPWMpID0+IGFyQ2xhc3Nlcy5maW5kKF9fYyA9PiAoX2FyVG9vbHMgfHwgY2xzVG9vbHMoX2MpKS5maW5kKHQgPT4gY2xzVG9vbHMoX19jKS5pbmNsdWRlcyh0KSkpIHx8ICghKF9hclRvb2xzIHx8IGNsc1Rvb2xzKF9jKSkubGVuZ3RoICYmIGFyQ2xhc3Nlc1swXSk7DQoNCmxldCBfZWFUeXBlcyA9IChfYz1jLCBiQWxsKSA9PiBfRnJFTUQuX3RvSlMoT2JqZWN0LmFzc2lnbih7fSwgLi4uX2MuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBiQWxsP3RydWU6ZWEuRW50aXR5VHlwZSkubWFwKGVhID0+ICh7W25OYW1lKGVhKV06IG5OYW1lKGVhLkVudGl0eVR5cGUpIHx8IF9GckVNRC5fYXR0cihlYSl9KSkpKTsNCg0KbGV0IF9jRmllbGQgPSAoZWEsIF9jPWVhLkVudGl0eUNsYXNzKSA9PiAoKGVhLkVudGl0eVR5cGU/KGVhLkVudGl0eVR5cGUuVHlwZWRBdHRyaWJ1dGVzLmZpbmQodGEgPT4gdGEuRW50aXR5Q2xhc3M9PV9jKSB8fCBlYS5FbnRpdHlDbGFzcy5FbnRpdHlBdHRyaWJ1dGVzLmZpbmQoX2VhID0+IF9lYS5FbnRpdHlUeXBlPT1fYykpOm51bGwpIHx8IHtOYW1lOiAiIn0pLk5hbWU7DQoNCmxldCBfY05hbWUgPSAoY249Yy5OYW1lLCBiQWxpYXMpID0+IHsNCiAgICBpZihjbi5OYW1lKSBjbiA9IGNuLk5hbWU7DQogICAgbGV0IF9jID0gYXJDbGFzc2VzLmZpbmQoZWMgPT4gZWMuTmFtZT09Y24pOw0KICAgIGlmKCFfYykgcmV0dXJuICcnOw0KICAgIHJldHVybiBuTmFtZShfYywgYkFsaWFzKTsNCn07DQoNCmxldCBhbGlhcyA9IChjbiwgaj0nLicpID0+IChzY29wZSArICcuJyArIF9jTmFtZShjbiwgdHJ1ZSkucmVwbGFjZShfY05hbWUoY24pLCAnJykpLnNwbGl0KCcuJykuZmlsdGVyKG4gPT4gbikuam9pbihqKTsNCmxldCBuc2NvcGUgPSBhbGlhcygnTm9kZScpOw0KDQpsZXQgX3ZDb2RlID0gayA9PiB7JT4oPCV2YWx1ZU9mKGsuQ29kZSklPiB8fCAoIjwlPW5Db2RlKGspJT4iKSk8JX07DQpsZXQgX25Db2RlID0gKGVhLCBiVHlwZWQpID0+IGVhPygidGhpcy5fbkNvZGUoJyIgKyBuQ29kZShlYSkgKyAoYlR5cGVkPygnXycgKyBlYS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpKToiIikgICsgIicsICIgKyAoYlR5cGVkP251bGw6X0ZyRU1ELl90b0pTKGVhLkNvZGUpKSArICIpIik6InRoaXMuX25Db2RlKCkiOw0KbGV0IG1Sb3V0aW5nID0gKGMsIG0pID0+IHsNCiAgICBpZiAoIWMgJiYgbSkgYyA9IG0uRW50aXR5Q2xhc3M7DQogICAgaWYgKCFtICYmICFjKSByZXR1cm4gIiI7DQogICAgaWYgKCFtKSBtID0gYzsNCiAgICBpZiAoIW0uUm91dGluZyAmJiAhYy5Sb3V0aW5nKSByZXR1cm4gIiI7DQoNCiU+KF9ub2RlLCBtZXRob2QpID0+IHsNCiAgICAJbGV0IGxvZyA9IChvYmosIC4uLm1zZykgPT4gdGhpcy5sb2coIjwlPW5OYW1lKGMpJT4iLCBvYmosICI8JW0/bS5OYW1lOicnJT4iIHx8IG1ldGhvZCwgIlJvdXRlciIsIDAsIC4uLm1zZyk7DQogICAgCWxldCB3YXJuID0gKG9iaiwgLi4ubXNnKSA9PiB0aGlzLmxvZygiPCU9bk5hbWUoYyklPiIsIG9iaiwgIjwlbT9tLk5hbWU6JyclPiIgfHwgbWV0aG9kLCAiUm91dGVyIiwgMSwgLi4ubXNnKTsNCiAgICAJbGV0IGVycm9yID0gKG9iaiwgLi4ubXNnKSA9PiB0aGlzLmxvZygiPCU9bk5hbWUoYyklPiIsIG9iaiwgIjwlbT9tLk5hbWU6JyclPiIgfHwgbWV0aG9kLCAiUm91dGVyIiwgMiwgLi4ubXNnKTsNCiAgICAJbGV0IG9TY29wZSA9IDwlPWFsaWFzKCklPjsNCiAgICAJbGV0IHBTY29wZSA9IDwlPXNjb3BlJT47DQogICAgCWxldCBuU2NvcGUgPSA8JT1uc2NvcGUlPjsNCg0KICAgICAgICB0cnl7DQogICAgICAgIDwlZnVuY3Rpb25PZihtLlJvdXRpbmcpJT4NCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIHdhcm4oZXgpOw0KICAgICAgICB9DQp9DQo8JX07DQoNCmxldCBtTmFtZSA9ICcnOw0KDQpsZXQgZnVuY3Rpb25PZiA9IChmdW4sIF90aGlzPSd0aGlzJykgPT4geyU+DQogICAgICAgIGxldCBfX3JldCA9IHVuZGVmaW5lZDsNCiAgICA8JSBpZihmdW4peyU+DQogICAgICAgIDwlIGlmKHR5cGVvZihmdW4pPT09J29iamVjdCcpeyU+DQogICAgICAgICAgICA8JSBjbHNUb29scyhjKS5mb3JFYWNoKHQgPT4geyU+DQogICAgICAgIGlmKDwlPV90aGlzJT4uVG9vbCAmJiA8JT1fdGhpcyU+LlRvb2wudHlwZS5uYW1lPT0iPCU9dCU+Iil7DQogICAgICAgICAgICAgICAgPCUgaWYodHlwZW9mKGZ1blt0XSk9PT0nZnVuY3Rpb24nKXslPg0KICAgICAgICAgICAgX19yZXQgPSA8JT1mdW5bdF0lPjsNCiAgICAgICAgICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgX19yZXQgPSA8JT0oSlNPTi5zdHJpbmdpZnkoZnVuW3RdKSB8fCAnIiInKSU+Ow0KICAgICAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICB9DQogICAgICAgICAgICA8JSB9KSU+DQogICAgICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICBfX3JldCA9IDwlPWZ1biU+Ow0KICAgICAgICA8JSB9JT4NCiAgICA8JSB9JT4NCiAgICAgICAgaWYodHlwZW9mKF9fcmV0KT09PSdzdHJpbmcnICYmIF9fcmV0LnN0YXJ0c1dpdGgoInMoIikgJiYgX19yZXQuZW5kc1dpdGgoIikiKSl7DQogICAgICAgICAgICBfX3JldCA9IHRoaXMucnVuU2NyaXB0KF9fcmV0LnNsaWNlKDIsLTEpKTsNCiAgICAgICAgfQ0KICAgICAgICBpZih0eXBlb2YoX19yZXQpPT09ImZ1bmN0aW9uIil7DQogICAgICAgICAgICBfX3JldCA9IF9fcmV0KDwlPV90aGlzJT4pOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBfX3JldDsNCjwlfTsNCg0KbGV0IHZhbHVlT2YgPSAoZnVuLCBfdGhpcz0ndGhpcycpID0+IHslPigoDQoob1Njb3BlKSA9PiB7DQogICAgdHJ5ew0KPCVmdW5jdGlvbk9mKGZ1biwgX3RoaXMpJT4NCiAgICB9Y2F0Y2goX3ZPZkV4KXsNCiAgICAgICAgPCU9d2FybigpJT4ndmFsdWVPZicsIF92T2ZFeCwgPCU9X0ZyRU1ELl90b0pTKGZ1biklPik7DQogICAgfQ0KfQ0KKSg8JT1hbGlhcygpJT4pKTwlfTsNCg0KbGV0IHVuUmVjdXJzZSA9IChvYmosIGZ1biwgZkFyZ3M9J2FyZ3VtZW50cycsIHNSZXQsIHZhbGlkaXR5PWB0aGlzLl9fY29uZmlnKCd1blJlY3Vyc2UudmFsaWRpdHknLCAwLjUpYCwgaWRmKSA9PiB7DQogICAgaWRmID0gaWRmIHx8IGAodGhpcz90aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyk6J0lkJylgOw0KICAgIGZ1biA9IGZ1biB8fCBgIiR7bU5hbWV9ImA7DQogICAgc1JldCA9IGANCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYodil7DQogICAgICAgICAgICAgICAgdi5kYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7DQogICAgICAgICAgICAgICAgdi5yZXVzZWQrKzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgJHtzUmV0fQ0KICAgICAgICB9Y2F0Y2goc1JldF9leCl7DQogICAgICAgICAgICB0aGlzLmxvZyhudWxsLCB1bmRlZmluZWQsICR7ZnVufSwgJyR7bU5hbWV9LnVuUmVjdXJzZScsIDEsICdzUmV0Jywgc1JldF9leCk7DQogICAgICAgIH1maW5hbGx5ew0KICAgICAgICAgICAgaWYodiAmJiB2LnJldXNlZD4xKSByZXR1cm4gdj92Lm9iajp2Ow0KICAgICAgICB9DQogICAgYDsNCiAgICBsZXQgYkRhbmdlciA9ICgpID0+ICU+KFsiX3RvSGFzaCJdLmluZGV4T2YoPCU9ZnVuJT4pPj0wKTwlOw0KJT4NCiAgICAgICAgbGV0IHYgPSB1bmRlZmluZWQ7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIDwlPXNjb3BlJT4udW5SZWN1cnNlQWJvcnQgPSA8JT1zY29wZSU+LnVuUmVjdXJzZUFib3J0IHx8IHt9Ow0KICAgICAgICAgICAgaWYoPCU9c2NvcGUlPi51blJlY3Vyc2VBYm9ydFs8JT1mdW4lPl0pew0KICAgICAgICAgICAgICAgIDwlPXdhcm4oYCR7bU5hbWV9LnVuUmVjdXJzZWApJT5gQWJvcnRpbmcgYXMgcGVyIDwlPXNjb3BlJT4udW5SZWN1cnNlQWJvcnQuJHs8JT1mdW4lPn1gKTsNCiAgICAgICAgICAgICAgICA8JT1zUmV0JT4NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgbGV0IF9pZCA9IG51bGw7DQogICAgICAgICAgICBpZih0eXBlb2YoPCU9b2JqJT4pPT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgIDwlPXdhcm4oYCR7bU5hbWV9LnVuUmVjdXJzZWApJT4iTnVsbCBpbnB1dCIsIDwlPW9iaiU+LCA8JT1mdW4lPiwgPCU9ZkFyZ3MlPik7DQogICAgICAgICAgICAgICAgcmV0dXJuIDwlPW9iaiU+Ow0KICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mKDwlPW9iaiU+KT09PSdzdHJpbmcnKXsNCiAgICAgICAgICAgICAgICBfaWQgPSB0aGlzLmhhc2hDb2RlKDwlPW9iaiU+KTsNCiAgICAgICAgICAgIH1lbHNlIGlmKHR5cGVvZig8JT1vYmolPls8JT1pZGYlPl0pIT09J3VuZGVmaW5lZCcgJiYgPCU9b2JqJT5bPCU9aWRmJT5dPT08JT1vYmolPls8JT1pZGYlPl0pew0KICAgICAgICAgICAgICAgIF9pZCA9IDwlPW9iaiU+WzwlPWlkZiU+XTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYodHlwZW9mKF9pZCk9PT0ndW5kZWZpbmVkJyB8fCAhX2lkKXsNCiAgICAgICAgICAgICAgICBpZig8JT1vYmolPi5JZCAmJiA8JT1vYmolPi5JZD09PCU9b2JqJT4uSWQpew0KICAgICAgICAgICAgICAgICAgICBfaWQgPSA8JT1vYmolPi5JZDsNCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLklkPT10aGlzLklkKXsNCiAgICAgICAgICAgICAgICAgICAgX2lkID0gdGhpcy5JZDsNCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLlNldF9Pbil7DQogICAgICAgICAgICAgICAgICAgIF9pZCA9IHRoaXMuX3RvSGFzaCg8JT1mQXJncyU+LCB7b25seVVuaXF1ZTogdHJ1ZX0sIDwlPWZ1biU+KTsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKGAke21OYW1lfS51blJlY3Vyc2VgKSU+InRoaXMuaGFzaGVkX2lkIiwgX2lkLCA8JT1mdW4lPiwgPCU9ZkFyZ3MlPik7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYob2JqLlNldF9Pbil7DQogICAgICAgICAgICAgICAgICAgIF9pZCA9IG9iai5fdG9IYXNoKDwlPWZBcmdzJT4sIHtvbmx5VW5pcXVlOiB0cnVlfSwgPCU9ZnVuJT4pOw0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coYCR7bU5hbWV9LnVuUmVjdXJzZWApJT4ib2JqLmhhc2hlZF9pZCIsIF9pZCwgPCU9ZnVuJT4sIDwlPWZBcmdzJT4pOw0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKDwlPW9iaiU+LkVudGl0eUNsYXNzKXsNCiAgICAgICAgICAgICAgICAgICAgX2lkID0gPCU9b2JqJT4uRW50aXR5Q2xhc3MuSWQgfHwgPCU9b2JqJT4uRW50aXR5Q2xhc3MuTmFtZSB8fCB0aGlzLl90b0hhc2goPCU9ZkFyZ3MlPiwge2RlcHRoOiA8JWJEYW5nZXIoKSU+PzM6dW5kZWZpbmVkfSwgPCU9ZnVuJT4pOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBfaWQgPSB0aGlzLkVudGl0eUNsYXNzLklkIHx8ICI8JT1jLklkJT4iIHx8IHRoaXMuX3RvSGFzaCg8JT1mQXJncyU+LCB7ZGVwdGg6IDwlYkRhbmdlcigpJT4/Mzp1bmRlZmluZWR9LCA8JT1mdW4lPikgfHwgIk5VTEwiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAJPCU9c2NvcGUlPi5fdW5SZWN1cnNlID0gPCU9c2NvcGUlPi5fdW5SZWN1cnNlIHx8IHt9Ow0KICAgICAgICAJPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT4gPSA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPiB8fCB7fTsNCiAgICAgICAgCTwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+WzwlPWZ1biU+XSA9IDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+WzwlPWZ1biU+XSB8fCB7fTsNCiAgICAgICAgCTwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+WzwlPWZ1biU+XVtfaWRdID0gPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bPCU9ZnVuJT5dW19pZF0gfHwge307DQogICAgICAgIAkNCiAgICAgICAgICAgIHYgPSA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPls8JT1mdW4lPl1bX2lkXTsNCg0KICAgICAgICAgICAgaWYodiAmJiBNYXRoLmFicyhuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHYuZGF0ZSkgPCAoMTAwMCo8JT12YWxpZGl0eSU+KSl7DQogICAgICAgICAgICAgICAgaWYoKDwlYkRhbmdlcigpJT4/bmV3IERhdGUoMCk6KHRoaXMuU2V0X09uIHx8IG5ldyBEYXRlKDApKSkuZ2V0VGltZSgpID4gdi5kYXRlKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKGAke21OYW1lfS51blJlY3Vyc2VgKSU+YFNwYXduaW5nIGluICR7PCU9ZnVuJT59YCwgX2lkLCA8JT1mdW4lPiwgPCU9b2JqJT4sIHYucmV1c2VkLCA8JT12YWxpZGl0eSU+KTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKGAke21OYW1lfS51blJlY3Vyc2VgKSU+IlNlbGVjdGVkIGhhc2giLCBfaWQsIDwlPWZ1biU+LCA8JT1vYmolPiwgdi5yZXVzZWQsIDwlPXZhbGlkaXR5JT4pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICA8JT1zUmV0JT4NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgPCU9bG9nKGAke21OYW1lfS51blJlY3Vyc2VgKSU+IlB1c2hpbmcgaGFzaCIsIF9pZCwgPCU9ZnVuJT4sIDwlPW9iaiU+KTsNCiAgICAgICAgCXYgPSA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPls8JT1mdW4lPl1bX2lkXSA9IHsNCiAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwNCiAgICAgICAgICAgICAgICBhcmdzOiBKU09OLnN0cmluZ2lmeSg8JT1mQXJncyU+KSwNCiAgICAgICAgICAgICAgICBvYmo6IDwlPW9iaiU+LA0KICAgICAgICAgICAgICAgIHJldXNlZDogMCwNCiAgICAgICAgICAgICAgICBwYXRoOiAnJywNCiAgICAgICAgICAgICAgICBfaWQsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JS8qZXhwZXJpbWVudGFsOiByZW1vdmUgdGhpcyBpZiBhbGwgZ29lcyB3cm9uZyovJT4NCiAgICAgICAgICAgIDwlPXNSZXQlPg0KICAgIAl9Y2F0Y2godW5SZWNFeCl7DQogICAgCSAgICBpZighdW5SZWNFeC50b1N0cmluZygpLmluZGV4T2YoJ1JhbmdlRXJyb3I6ICcpKXsNCiAgICAJICAgICAgICA8JT1zY29wZSU+LnVuUmVjdXJzZUFib3J0WzwlPWZ1biU+XSA9IHRydWU7DQogICAgCSAgICB9DQogICAgCSAgICA8JT1lcnJvcihgJHttTmFtZX0udW5SZWN1cnNlYCklPjwlPW9iaiU+LCA8JT1mdW4lPiwgPCU9ZkFyZ3MlPiwgdW5SZWNFeC50b1N0cmluZygpKTsNCiAgICAJICAgIDwlPXNSZXQlPg0KICAgIAl9DQo8JQ0KfTsNCg0KbGV0IGludm9rZVJ1bGUgPSByID0+IHsNCiU+DQphd2FpdCAoYXN5bmMgKGF1dGhPYmopID0+IHsNCiAgICBsZXQgX3J1bGUgPSA8JT1fRnJFTUQuX3RvSlMociklPjsNCiAgICBkZWxldGUgX3J1bGUuU2NyaXB0Ow0KICAgIC8vIHJ1bGVSdW5zLnB1c2goX3J1bGUpOw0KICAgIHRyeXsNCiAgICAgICAgPCU9ci5TY3JpcHQlPg0KICAgIH1jYXRjaChleCl7DQogICAgICAgIF9ydWxlLkV4Y2VwdGlvbiA9IGV4Ow0KICAgIH0NCn0pKGF1dGhPYmopOw0KPCUNCn0NCiU+DQoNCmNsYXNzIDwlPW5OYW1lKGMpJT4gew0KICAgIDwlPW1OYW1lPSdjb25zdHJ1Y3RvciclPihpZCwgdG9vbCkgew0KICAgICAgICAvL3N1cGVyKGlkLCB0b29sKTsNCg0KICAgICAgICB0aGlzLlNjb3BlID0gIjwlPXNjb3BlJT4iOw0KICAgICAgICB0aGlzLkRlYnVnID0gPCU9X0ZyRU1ELl90b0pTKGMuRGVidWcpJT47DQogICAgICAgIHRoaXMuQ29uZmlnID0gPCU9X0ZyRU1ELl90b0pTKGMuQ29uZmlnKSU+Ow0KICAgICAgICB0aGlzLlRlc3QgPSA8JT1fRnJFTUQuX3RvSlMoYy5UZXN0KSU+Ow0KICAgICAgICB0aGlzLlRvb2xzID0gPCU9X0ZyRU1ELl90b0pTKGMuVG9vbHMpJT47DQogICAgICAgIHRoaXMuTWFwcGluZ3MgPSA8JT1fRnJFTUQuX3RvSlMoYy5NYXBwaW5ncyklPjsNCg0KICAgICAgICAvLyBhdm9pZCBzdXBlciwga2VlcCB0aGlzIGhlcmUNCiAgICAgICAgdGhpcy5fX0lEID0gdGhpcy5fX0lEIHx8IHt9Ow0KICAgICAgICB0aGlzLlRvb2wgPSB0b29sOw0KICAgICAgICB0aGlzLklkID0gaWQ7DQoNCiAgICAgICAgdGhpcy5WYWx1ZUVudGl0aWVzID0gW107DQoNCiAgICAgICAgdGhpcy5EYXRlID0gbnVsbDsNCg0KICAgICAgICB0aGlzLmNsZWFyX1RISVMoKTsNCiAgICAgICAgdGhpcy5FbnRpdHlWYWx1ZXMgPSBbXTsNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgdGhpcy5FbnRpdHlWYWx1ZXMucHVzaCh7DQogICAgICAgICAgICBFbnRpdHlBdHRyaWJ1dGU6IHsNCjwlIGlmKE51bWJlcihlYS5JZCkpeyU+DQogICAgICAgICAgICAgICAgSWQ6ICI8JT1lYS5JZCU+IiwNCjwlIH0lPg0KICAgICAgICAgICAgICAgIE5hbWU6ICI8JT1lYS5OYW1lJT4iLA0KICAgICAgICAgICAgICAgIE9QRVJBVE9SUzoge05hbWU6ICI9In0sDQogICAgICAgICAgICAgICAgRW50aXR5Q2xhc3M6IHRoaXMuRW50aXR5Q2xhc3MsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgT1BFUkFUT1JTOiB7fQ0KICAgICAgICB9KTsNCiAgICAgICAgdGhpcy5jbGVhcl88JT1uTmFtZShlYSklPigpOw0KPCUgfSk7ICU+DQoNCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHslPg0KICAgICAgICB0aGlzLmNsZWFyXzwlPW5OYW1lKHRhKSU+XzwlPXRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyklPigpOw0KPCUgfSk7ICU+DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZGVmYXVsdHMnJT4oKXsNCjwlX2RlZmF1bHRzKCklPg0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J2dldCBFbnRpdHlDbGFzcyclPigpew0KICAgICAgICBsZXQgZWMgPSB7DQo8JSBpZihOdW1iZXIoYy5JZCkpeyU+DQogICAgICAgICAgICBJZDogIjwlPWMuSWQlPiIsDQo8JSB9JT4NCiAgICAgICAgICAgIE5hbWU6ICI8JT1jLk5hbWUlPiIsDQogICAgICAgICAgICBPUEVSQVRPUlM6IHtOYW1lOiAiPSJ9LA0KICAgICAgICB9Ow0KDQo8JSBpZihjLkVudGl0eU1vZHVsZWlkKXsgJT4NCiAgICAgICAgZWMuRW50aXR5TW9kdWxlID0gew0KICAgICAgICAgICAgSWQ6IDwlPWMuRW50aXR5TW9kdWxlaWQlPg0KICAgICAgICB9Ow0KPCUgfSU+DQoNCiAgICAgICAgLy8gdGhhdCdzIHdoeSB3ZSBuZWVkIGl0IGFzIGEgZ2V0dGVyDQogICAgICAgIGlmKCFOdW1iZXIoZWMuSWQpICYmIDwlPXNjb3BlJT4uRW50aXR5Q2xhc3Nlcyl7DQogICAgICAgICAgICBsZXQgY2lkID0gPCU9c2NvcGUlPi5FbnRpdHlDbGFzc2VzLmZpbmQoYyA9PiBOdW1iZXIoYy5JZCkgJiYgYy5OYW1lPT1lYy5OYW1lKTsNCiAgICAgICAgICAgIGlmKGNpZCkgZWMuSWQgPSBjaWQuSWQ7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGVjOw0KICAgIH0NCg0KCTwlPW1OYW1lPSdnZXQgSWQnJT4oKSB7DQoJCXJldHVybiB0aGlzLl9fSURbdGhpcy5Ub29sLm5hbWVdIHx8IHRoaXMuX3V1aWQoKSB8fCAoPCU9X0ZyRU1ELl90b0pTKF9maWxlVG9vbHMpJT4uaW5kZXhPZih0aGlzLlRvb2wudHlwZS5uYW1lKT49MD90aGlzLl91dWlkKG51bGwsIG51bGwsIHRydWUpOnRoaXMuX3V1aWQoKSk7DQoJfQ0KDQoJPCU9bU5hbWU9J3NldCBJZCclPihpZCkgew0KCQlpZiAoIXRoaXMuVG9vbCkgew0KCQkJPCU9bG9nKCklPiJFbXB0eSBUb29sIiwgdGhpcy5Ub29scy5sZW5ndGgsIDwlPXNjb3BlJT4uVG9vbHMubGVuZ3RoKTsNCgkJCXJldHVybjsNCgkJfQ0KCQlpZih0aGlzLl9fSURbdGhpcy5Ub29sLm5hbWVdPT1pZCkgcmV0dXJuOw0KCQl0aGlzLl9fSURbdGhpcy5Ub29sLm5hbWVdID0gaWQ7DQoJfQ0KDQogICAgPCU9bU5hbWU9J2dldCBUb29sJyU+KCkgew0KICAgICAgICBpZih0eXBlb2YodGhpcy5fX1Rvb2wpIT09J3VuZGVmaW5lZCcpIHJldHVybiB0aGlzLl9fVG9vbDsNCiAgICAgICAgbGV0IG5vVG9vbCA9IHsNCiAgICAgICAgICAgIG5hbWU6ICcnLA0KICAgICAgICAgICAgdHlwZToge25hbWU6ICcnfSwNCiAgICAgICAgfTsNCiAgICAgICAgaWYodHlwZW9mKDwlPXNjb3BlJT4uVG9vbHMpIT09InVuZGVmaW5lZCIgJiYgIUFycmF5LmlzQXJyYXkoPCU9c2NvcGUlPi5Ub29scykpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+IjwlPXNjb3BlJT4uVG9vbHMgaXMgbm90IGFuIGFycmF5OiAiLCA8JT1zY29wZSU+LlRvb2xzKTsNCiAgICAgICAgICAgIHJldHVybiBub1Rvb2w7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGxldCByZXQgPSAoPCU9c2NvcGUlPi5fX2xhc3RUb29sP1s8JT1zY29wZSU+Ll9fbGFzdFRvb2xdOltdKS5jb25jYXQodGhpcy5Ub29scykuZmluZCh0ID0+ICg8JT1zY29wZSU+LlRvb2xzIHx8IFtdKS5maW5kKF90ID0+IHQgPT0gX3QubmFtZSB8fCB0Lm5hbWU9PV90Lm5hbWUpKTsNCiAgICAgICAgaWYodHlwZW9mKHJldCkhPT0ndW5kZWZpbmVkJykgcmV0ID0gKDwlPXNjb3BlJT4uVG9vbHMgfHwgW10pLmZpbmQodCA9PiB0Lm5hbWU9PXJldCB8fCB0Lm5hbWU9PXJldC5uYW1lKTsNCiAgICAgICAgaWYodHlwZW9mKHJldCk9PT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICBpZih0aGlzLlRvb2xzLmxlbmd0aCl7DQogICAgICAgICAgICAgICAgcmV0ID0gew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLlRvb2xzWzBdLA0KICAgICAgICAgICAgICAgICAgICB0eXBlOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLlRvb2xzWzBdDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfWVsc2UgcmV0ID0gbm9Ub29sOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J3NldCBUb29sJyU+KHRvb2wpIHsNCiAgICAgICAgaWYgKHR5cGVvZih0b29sKT09PSd1bmRlZmluZWQnKSByZXR1cm47DQogICAgICAgIGlmKHR5cGVvZih0b29sKT09PSJzdHJpbmciKXsNCiAgICAgICAgICAgIHRvb2wgPSB7bmFtZTogdG9vbH07DQogICAgICAgIH0NCiAgICAgICAgaWYodG9vbC5FbnRpdHlDbGFzcyl7DQogICAgICAgICAgICB0b29sID0gdG9vbC5fdG9Eb2N1bWVudCgpOw0KICAgICAgICB9DQogICAgICAgIGlmKHR5cGVvZih0b29sLm5hbWUpPT09J3VuZGVmaW5lZCcgJiYgdHlwZW9mKHRvb2wudHlwZS5uYW1lKT09PSd1bmRlZmluZWQnKSByZXR1cm47DQogICAgICAgIHRvb2wudHlwZSA9IHRvb2wudHlwZSB8fCB7bmFtZTogdG9vbC5uYW1lfTsNCiAgICAgICAgDQogICAgICAgIGlmKCF0b29sLnR5cGUgJiYgIXRvb2wubmFtZSl7DQogICAgICAgICAgICA8JT13YXJuKCklPiJFbXB0eSBUb29sIG9iamVjdCIpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgbGV0IHQgPSAoPCU9c2NvcGUlPi5Ub29scyB8fCBbXSkuZmlsdGVyKHQgPT4gdC5uYW1lICYmIHQudHlwZSkuZmluZCh0ID0+ICh0Lm5hbWUgPT0gdG9vbC5uYW1lKSB8fCAodC50eXBlLm5hbWUgPT0gdG9vbC50eXBlLm5hbWUpKTsNCiAgICAgICAgaWYgKCF0KSB7DQogICAgICAgICAgICA8JT1sb2coKSU+Im5vIG1hdGNoaW5nIHRvb2wiLCB0b29sLCA8JT1zY29wZSU+LlRvb2xzKTsNCiAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgPCU9c2NvcGUlPi5fX2xhc3RUb29sID0gdGhpcy5fX1Rvb2wgPSB0Ow0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J1RISVMnJT4odiwgY28pew0KICAgICAgICBpZih0eXBlb2Yodik9PT0ndW5kZWZpbmVkJykgcmV0dXJuIHRoaXMuX1RISVM7DQogICAgICAgIGlmKCF2KSByZXR1cm4gdGhpczsNCiAgICAgICAgdiA9IEFycmF5LmlzQXJyYXkodik/djpbdl07DQogICAgICAgIHRoaXMuX1RISVMgPSB2LmZpbHRlcihfdiA9PiB0eXBlb2YoX3YpPT09J29iamVjdCcgJiYgX3YuRW50aXR5Q2xhc3MgJiYgX3YuRW50aXR5Q2xhc3MuTmFtZT09dGhpcy5FbnRpdHlDbGFzcy5OYW1lICYmIF92LlNjb3BlPT10aGlzLlNjb3BlKTsNCiAgICAgICAgaWYgKGNvKSB0aGlzLl9USElTX2Nvb3AgPSBjbzsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdjbGVhcl9USElTJyU+KCkgew0KICAgICAgICB0aGlzLl9USElTID0gW107DQogICAgICAgIHRoaXMuX1RISVNfY29vcCA9ICcnOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQogICAgDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgLyoqIHN0YXJ0OiBzZXR0ZXJzIGFuZCBnZXR0ZXJzIGZvciA8JT1lYS5OYW1lJT4gKiovDQogICAgPCU9bU5hbWU9bk5hbWUoZWEpJT4odiwgY28sIGlkKSB7DQogICAgICAgIGlmIChjbykgdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCA9IGNvOw0KDQogICAgICAgIHZhciBldiA9IHRoaXMuRW50aXR5VmFsdWUoIjwlPWVhLk5hbWUlPiIpOw0KICAgICAgICBpZiAoIWV2KXsNCiAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlkKSBldi5JZCA9IGlkOw0KDQogICAgICAgIGlmICh0eXBlb2YodikhPT0ndW5kZWZpbmVkJykgew0KICAgICAgICAgICAgLy8gdmFsdWVzIHdlcmUgZ2l2ZW4sIHRoZXJlZm9yZSBhIHNldHRlcg0KDQogICAgPCUgaWYoZWEuSXNBcnJheSl7JT4NCiAgICAgICAgICAgIHYgPSBBcnJheS5pc0FycmF5KHYpP3Y6W3ZdOw0KICAgICAgICAgICAgdiA9IHYubWFwKF92ID0+IHsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgdiA9IChfdiA9PiB7DQogICAgPCUgfSU+DQoNCiAgICA8JSBpZihlYS5Jc0RhdGUpeyU+DQogICAgICAgICAgICAgICAgX3YgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoX3YpID09PSAnW29iamVjdCBEYXRlXSc/X3Y6KG5ldyBEYXRlKF92KSk7DQogICAgICAgICAgICAgICAgaWYoaXNOYU4oX3YuZ2V0VGltZSgpKSkgX3YgPSBudWxsOw0KICAgIDwlIH0lPg0KICAgIDwlIGlmKGVhLklzQm9vbCl7JT4NCiAgICAgICAgICAgICAgICBfdiA9IFsidHJ1ZSIsICIxIiwgInllcyIsIHRydWUsIDFdLmluY2x1ZGVzKF92KTsNCiAgICA8JSB9JT4NCiAgICA8JSBpZihlYS5Jc0ludCB8fCBlYS5Jc0xvbmcgfHwgZWEuSXNGbG9hdCl7JT4NCiAgICAgICAgICAgICAgICBpZihpc05hTihfdikpIF92ID0gMDsNCiAgICA8JSB9JT4NCiAgICA8JSBpZihlYS5Jc1RleHQpeyU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKF92KT09PSdvYmplY3QnKSBfdiA9IEpTT04uc3RyaW5naWZ5KF92KTsNCiAgICA8JSB9JT4NCg0KICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgaWYoX3YgJiYgIV92LkVudGl0eUNsYXNzKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPiJ1c2luZyBfdG9Eb2N1bWVudCBmb3IgaW52YWxpZCBzZXR0ZXIgdmFsdWUiLCBfdik7DQogICAgICAgICAgICAgICAgICAgIF92ID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KF92KTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZihfdiAmJiBfdi5FbnRpdHlDbGFzcy5JZCE9PSc8JT1lYS5FbnRpdHlUeXBlLklkJT4nICYmIF92LkVudGl0eUNsYXNzLk5hbWUhPT0nPCU9ZWEuRW50aXR5VHlwZS5OYW1lJT4nKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iSW52YWxpZCBTZXR0ZXIgdmFsdWUiLCBfdiwgIjwlPWVhLkVudGl0eVR5cGUuSWQlPiIsIF92LkVudGl0eUNsYXNzLk5hbWUsICI8JT1lYS5FbnRpdHlUeXBlLk5hbWUlPiIpOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBfdiA9ICgoX3YgJiYgIXRoaXMuSWQpID8gX3YudG9FbnRpdHlPYmplY3QoKSA6IF92KTsNCiAgICAgICAgICAgICAgICB9DQogICAgPCUgfSU+DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gX3Y7DQogICAgPCUgaWYoZWEuSXNBcnJheSl7JT4NCiAgICAgICAgICAgIH0pOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICB9KSh2KTsNCiAgICA8JSB9JT4NCiAgICANCiAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgZGVsZXRlIGV2Lk9iamVjdFZhbHVlaWQ7DQogICAgICAgICAgICBldi5PYmplY3RWYWx1ZSA9IHY7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgIGV2LjwlPV9GckVNRC5fYXR0cihlYSklPlZhbHVlID0gdjsNCiAgICA8JSB9JT4NCg0KICAgICAgICAgICAgaWYodHJ1ZSB8fCB0aGlzLl88JT1uTmFtZShlYSklPiE9dil7DQogICAgICAgICAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ID0gPCU9U2V0X09uJT47IC8vIGEgY2hhbmdlIGluIHZhbHVlDQogICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+IlNldCBhZnRlciIsIHRoaXMuXzwlPW5OYW1lKGVhKSU+P3RoaXMuXzwlPW5OYW1lKGVhKSU+LlNldF9PbjpudWxsLCB2P3YuU2V0X09uOm51bGwpOw0KICAgICAgICAgICAgICAgIC8qaWYodikgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ID0gdi5TZXRfT247Ki8NCiAgICA8JSB9JT4NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT4gPSB2Ow0KICAgICAgICAgICAgaWYgKGNvKSBldi5PUEVSQVRPUlMuPCU9X0ZyRU1ELl9hdHRyKGVhKSU+VmFsdWUgPSBjbzsNCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5pMThuKGV2LCA8JXZhbHVlT2YoZWEuVmFsdWUpJT4gfHwgdGhpcy5fPCU9bk5hbWUoZWEpJT4pOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J2NsZWFyXycrbk5hbWUoZWEpJT4oKSB7DQogICAgICAgIGxldCByZXQgPSB0aGlzLl88JT1uTmFtZShlYSklPjsNCiAgICAgICAgLyoNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT4gPSBudWxsOw0KICAgICAgICB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wID0gIiI7DQogICAgICAgICovDQogICAgICAgIA0KICAgICAgICBkZWxldGUgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0Ow0KICAgICAgICBkZWxldGUgdGhpcy5fPCU9bk5hbWUoZWEpJT47DQogICAgICAgIGRlbGV0ZSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KICAgIC8qKiBlbmQ6IHNldHRlcnMgYW5kIGdldHRlcnMgZm9yIDwlPWVhLk5hbWUlPiAqKi8NCjwlIH0pOyAlPg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgIC8qKiBzdGFydDogc2V0dGVycyBhbmQgZ2V0dGVycyBmb3IgPCU9dGEuTmFtZSU+XzwlPXRhTmFtZSU+ICoqLw0KICAgIDwlPW1OYW1lPW5OYW1lKHRhKSsnXycrdGFOYW1lJT4odiwgY28sIGJDbGVhcikgew0KICAgICAgICBpZih0eXBlb2Yodik9PT0idW5kZWZpbmVkIikgcmV0dXJuIHRoaXMuXzwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+Ow0KICAgICAgICANCiAgICAgICAgaWYodiAmJiB2LnRvRW50aXR5T2JqZWN0ICYmIHYuRW50aXR5Q2xhc3MuSWQhPT0nPCU9dGEuRW50aXR5Q2xhc3MuSWQlPicgJiYgdi5FbnRpdHlDbGFzcy5OYW1lIT09JzwlPXRhLkVudGl0eUNsYXNzLk5hbWUlPicpIHJldHVybiB0aGlzOw0KICAgICAgICANCiAgICAgICAgdiA9IEFycmF5LmlzQXJyYXkodik/djpbdl07DQogICAgICAgIA0KICAgICAgICB2ID0gdi5maWx0ZXIoX3YgPT4gIXYgfHwgX3YuXzwlPW5OYW1lKHRhKSU+X3NldCkuY29uY2F0KHYuZmlsdGVyKF92ID0+IF92ICYmICFfdi5fPCU9bk5hbWUodGEpJT5fc2V0KS5tYXAoX3YgPT4gew0KICAgICAgICAgICAgaWYoIV92LmNvbnN0cnVjdG9yKXsNCiAgICAgICAgICAgICAgICA8JT13YXJuKCklPiI8JT1uTmFtZSh0YSklPiBoYXMgbm8gY29uc3RydWN0b3IiLCBfdik7DQogICAgICAgICAgICB9ZWxzZSBpZihfdi5jb25zdHJ1Y3Rvci5uYW1lPT0iT2JqZWN0Iil7DQogICAgICAgICAgICAgICAgX3YgPSBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLl9mcm9tRG9jdW1lbnQoX3YpDQogICAgICAgICAgICAgICAgX3YuPCU9bk5hbWUodGEpJT4odGhpcyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIF92Ow0KICAgICAgICAgICAgfWVsc2UgaWYoX3YuY29uc3RydWN0b3IubmFtZSE9IjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzKSU+Iil7DQogICAgICAgICAgICAgICAgPCU9d2FybigpJT4iPCU9bk5hbWUodGEpJT4gbm90IHZhbGlkIiwgX3YsIF92LmNvbnN0cnVjdG9yLm5hbWUsICI8JT1uTmFtZSh0YS5FbnRpdHlDbGFzcyklPiIpOw0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgX3YuPCU9bk5hbWUodGEpJT4odGhpcyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIF92Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9KS5maWx0ZXIoX3YgPT4gX3YpKTsNCiAgICAgICAgDQogICAgICAgIGlmKGJDbGVhcikgdGhpcy5jbGVhcl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPigpOw0KICAgICAgICB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPi5wdXNoKC4uLnYpOw0KICAgICAgICB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPl9zZXQgPSA8JT1TZXRfT24lPjsNCiAgICAgICAgaWYgKGNvKSB0aGlzLl88JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPl9jb29wID0gY287DQoNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIGNsZWFyXzwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+KCkgew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT47DQoNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT5fc2V0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT4gPSBuZXcgQXJyYXkoKTsNCiAgICAgICAgdGhpcy5fPCU9bk5hbWUodGEpJT5fPCU9dGFOYW1lJT5fY29vcCA9IG51bGw7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KICAgIC8qKiBlbmQ6IHNldHRlcnMgYW5kIGdldHRlcnMgZm9yIDwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+ICoqLw0KDQo8JSB9KSAlPg0KPCUgYy5FbnRpdHlGaWVsZHMuZm9yRWFjaChlZiA9PiB7JT4NCiAgICAvKiogc3RhcnQ6IGdldHRlcnMgZm9yIDwlPWVmLk5hbWUlPiAqKi8NCiAgICA8JT1tTmFtZT0nZ2V0ICcrbk5hbWUoZWYpJT4oKXsNCiAgICAgICAgcmV0dXJuIDwldmFsdWVPZihlZi5WYWx1ZSklPjsNCiAgICB9DQogICAgLyoqIGVuZDogZ2V0dGVycyBmb3IgPCU9ZWYuTmFtZSU+ICoqLw0KPCUgfSklPg0KDQogICAgPCU9bU5hbWU9J2xvZyclPihjbGFzc05hbWUsIG9iaiwgbSwgdHlwZSwgbGV2ZWwsIC4uLm1zZyl7DQogICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAiPCU9bk5hbWUoYyklPiI7DQogICAgICAgIHR5cGUgPSB0eXBlIHx8ICJFbnRpdHlPYmplY3QiOw0KICAgICAgICANCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbGFzc05hbWUsIG9iaiwgbSwgdHlwZSwgbGV2ZWwsIC4uLm1zZyk7DQo8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQoJCQlsZXQgZGVidWcgPSB0aGlzLkRlYnVnOw0KCQkJbGV0IGxldmVscyA9IFsiaW5mbyIsICJ3YXJuIiwgImVycm9yIiwgImNyaXRpY2FsIl07DQoNCgkJCWRlYnVnID0gZGVidWcgfHwgT2JqZWN0LmZyb21FbnRyaWVzKG5ldyBNYXAobGV2ZWxzLm1hcChsID0+IFtsLCAnKiddKSkpOw0KDQoJCQlsZXQgZnVuY3Rpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgLi4ubGV2ZWxzLm1hcChsID0+ICh7DQoJCQkJW2xdOiBkZWJ1Z1tsXSA/IGRlYnVnW2xdLnNwbGl0KCcsJykgOiBbXQ0KCQkJfSkpKTsNCg0KCQkJbGV0IGNzcyA9ICdiYWNrZ3JvdW5kOiAjMDBmZjk5OyBjb2xvcjogIzAwODAwMCc7DQoJCQlsZXQgZmcgPSAnXHgxYlszMm0nOw0KCQkJc3dpdGNoIChOdW1iZXIobGV2ZWwpKSB7DQoJCQkJY2FzZSAxOg0KCQkJCQljc3MgPSAnYmFja2dyb3VuZDogI2ZmZmYwMDsgY29sb3I6ICMwMDAwODAnOw0KCQkJCQlmZyA9ICdceDFiWzMzbSc7DQoJCQkJCWJyZWFrOw0KCQkJCWNhc2UgMjoNCgkJCQkJY3NzID0gJ2JhY2tncm91bmQ6ICNiMjIyMjI7IGNvbG9yOiAjZmZmZmZmJzsNCgkJCQkJZmcgPSAnXHgxYlszMW0nOw0KCQkJCQlicmVhazsNCgkJCQljYXNlIDM6DQoJCQkJCWNzcyA9ICdiYWNrZ3JvdW5kOiAjYjIyMjIyOyBjb2xvcjogI2ZmZmZmZic7DQoJCQkJCWZnID0gJ1x4MWJbMzFtW0NSSVRJQ0FMXSc7DQoJCQkJCWJyZWFrOw0KCQkJfQ0KDQoJCQlpZiAoZnVuY3Rpb25zW2xldmVsc1tOdW1iZXIobGV2ZWwpIHx8IDBdXS5ldmVyeShmID0+ICFbJyouKicsICcqLicgKyBtLCAnKicsIG0sIGNsYXNzTmFtZSArICcuJyArIG0sIGNsYXNzTmFtZSArICcuKiddLmluY2x1ZGVzKGYpKSkgew0KCQkJCXJldHVybjsNCgkJCX0NCg0KCQkJaWYgKHR5cGVvZihnbG9iYWwpICE9PSAndW5kZWZpbmVkJykgew0KCQkJCWNvbnNvbGUubG9nKGZnICsgIiVzXHgxYlswbSIsIGAke3R5cGUgfHwgJzx0eXBlPid9OiAke3RoaXMuU2NvcGV9LiR7Y2xhc3NOYW1lfS4ke20gfHwgJzxtZXRob2Q+J30oKWAsIC4uLih0eXBlb2Yob2JqKSA9PT0gJ3VuZGVmaW5lZCcgPyAobXNnIHx8IFtdKSA6IFtvYmpdLmNvbmNhdChtc2cgfHwgW10pKSk7DQoJCQl9IGVsc2Ugew0KCQkJCWNvbnNvbGUubG9nKGAlYyAke3R5cGUgfHwgJzx0eXBlPid9OiAke3RoaXMuU2NvcGV9LiR7Y2xhc3NOYW1lfS4ke20gfHwgJzxtZXRob2Q+J30oKWAsIGNzcywgLi4uKHR5cGVvZihvYmopID09PSAndW5kZWZpbmVkJyA/IChtc2cgfHwgW10pIDogW29ial0uY29uY2F0KG1zZyB8fCBbXSkpKTsNCgkJCX0NCgkJfSBjYXRjaCAoZXgpIHsNCgkJCWNvbnNvbGUubG9nKGV4KTsNCgkJfQ0KPCUgfSU+DQoJfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J3NldEludGVydmFsJyU+KGNsYXNzTmFtZSwgZnVuLCBtaW51dGVzLCAuLi5hcmdzKXsNCiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICI8JT1uTmFtZShjKSU+IjsNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbGFzc05hbWUsIGZ1biwgbWludXRlcywgLi4uYXJncyk7DQo8JSB9ZWxzZXslPg0KCQl0cnkgew0KICAgIAkJbGV0IGZOYW1lID0gZnVuLnRvU3RyaW5nKCkuc3BsaXQoJyknKVswXSArICcpJzsNCiAgICAJCXRyeSB7DQogICAgCQkJLy8gdGhpcy5fX3RpbWUoYCR7Zk5hbWV9Lkxvb3BgKTsNCiAgICANCiAgICAJCQl0aGlzLl9fdGltZShgJHtmTmFtZX0uQ2FsbGApOw0KICAgIAkJCWxldCByZXQgPSBhd2FpdCBmdW4oLi4uYXJncy5jb25jYXQoW25ldyBEYXRlKCldKSk7DQogICAgDQogICAgCQkJPCU9bG9nKCklPmB7Q2FsbDogYCArIHRoaXMuX190aW1lKGAke2ZOYW1lfS5DYWxsYCkgKyBgLCBMb29wOiBgICsgdGhpcy5fX3RpbWUoYCR7Zk5hbWV9Lkxvb3BgKSArICd9Jyk7DQogICAgCQkJaWYgKCFyZXQpIHsNCiAgICAJCQkJPCU9bG9nKCklPmBkaWQgbm90IHJldHVybiB0cnVlLCBleGl0aW5nIGxvb3BlciAoJHt0aGlzLl9fdGltZShmTmFtZSl9KWApOw0KICAgIAkJCQlyZXR1cm47DQogICAgCQkJfQ0KICAgIAkJfSBjYXRjaCAoZXgpIHsNCiAgICAJCQk8JT1lcnJvcigpJT50aGlzLl9fdGltZShmTmFtZSksIGV4KTsNCiAgICAJCQljb25zb2xlLnRyYWNlKCk7DQogICAgCQl9DQogICAgCQlpZiAoIU51bWJlcihtaW51dGVzKSkgew0KICAgIAkJCTwlPWxvZygpJT50aGlzLl9fdGltZShmTmFtZSksICJOb3QgcmVwZWF0aW5nLiBNaW51dGVzIGlzICIgKyBtaW51dGVzKTsNCiAgICAJCQlyZXR1cm47DQogICAgCQl9DQogICAgCQlhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgbWludXRlcyAqIDYwICogMTAwMCkpOw0KICAgIAkJYXdhaXQgdGhpcy48JT1tTmFtZSU+KG51bGwsIGZ1biwgbWludXRlcywgLi4uYXJncyk7DQoJCX0gY2F0Y2ggKGV4KSB7DQoJCQk8JT1lcnJvcigpJT5leCk7DQoJCX0NCjwlIH0lPg0KCX0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfZXhlY3V0ZSclPihjbGFzc05hbWUsIHNjb3BlLCBtLCBmUm91dGVyLCBmU2NyaXB0LCBvUGFyYW1zID0ge30sIHNvdXJjZSl7DQoJCXRoaXMuX190aW1lKGA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoKSwgdHJ1ZSklPi4ke219YCk7DQoJCWNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAiPCU9bk5hbWUoYyklPiI7DQoJCXNjb3BlID0gc2NvcGUgfHwgPCU9c2NvcGUlPjsNCgkJc291cmNlID0gc291cmNlIHx8IHRoaXM7DQoNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbGFzc05hbWUsIHNjb3BlLCBtLCBmUm91dGVyLCBmU2NyaXB0LCBvUGFyYW1zLCB0aGlzKTsNCjwlIH1lbHNleyU+DQoJCS8vZGVsZXRlIDwlPXNjb3BlJT4uX3VuUmVjdXJzZTsgLy8gZXhwZXJpbWVudGFsDQoJCQ0KICAgIAlsZXQgX19iZWZvcmVSdWxlcyA9IG9QYXJhbXMuX19iZWZvcmVSdWxlcyB8fCBbXTsNCiAgICAJbGV0IF9fYWZ0ZXJSdWxlcyA9IG9QYXJhbXMuX19hZnRlclJ1bGVzIHx8IFtdOw0KICAgIAlkZWxldGUgb1BhcmFtcy5fX2JlZm9yZVJ1bGVzOw0KICAgIAlkZWxldGUgb1BhcmFtcy5fX2FmdGVyUnVsZXM7DQoNCiAgICAgICAgbGV0IGxvZyA9ICguLi5zKSA9PiA8JT1sb2coKSU+Y2xhc3NOYW1lLCBtLCAuLi5zKTsNCiAgICAgICAgbGV0IHdhcm4gPSAoLi4ucykgPT4gPCU9d2FybigpJT5jbGFzc05hbWUsIG0sIC4uLnMpOw0KICAgICAgICBsZXQgZXJyb3IgPSAoLi4ucykgPT4gPCU9ZXJyb3IoKSU+Y2xhc3NOYW1lLCBtLCAuLi5zKTsNCiAgICAgICAgICAgIA0KICAgICAgICB0cnl7DQogICAgCQlsZXQgbFBhcmFtcyA9IE9iamVjdC5lbnRyaWVzKG9QYXJhbXMpLm1hcCh4ID0+IHhbMV0pOw0KICAgIAkJbGV0IHJlc3VsdHMgPSBbXTsNCiAgICANCiAgICAJCWxldCBub2RlcyA9IFtdOw0KICAgIAkJDQogICAgCQlpZiAoPCU9bnNjb3BlJT4uX25vZGUgJiYgYXdhaXQgZlJvdXRlcig8JT1uc2NvcGUlPi5fbm9kZSwgbSkpIHsNCiAgICAJCQlub2Rlcy5wdXNoKDwlPW5zY29wZSU+Ll9ub2RlKTsNCiAgICAJCX0NCiAgICANCiAgICAJCWlmICg8JT1uc2NvcGUlPi5fbm9kZSAmJiA8JT1uc2NvcGUlPi5fbm9kZS5fcGFyZW50ICYmIGF3YWl0IGZSb3V0ZXIoPCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCksIG0pKSB7DQogICAgCQkJbm9kZXMucHVzaCg8JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnQoKSk7DQogICAgCQl9DQogICAgDQogICAgCQlmb3IgYXdhaXQgKGNvbnN0IGNuIG9mICg8JT1uc2NvcGUlPi5fbm9kZT88JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnRfTm9kZXMoKTpbXSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoYXdhaXQgZlJvdXRlcihjbiwgbSkpIHsNCiAgICAgICAgICAgICAgICAJbG9nKCdhZGRpbmcgY2hpbGQgbm9kZScsIGNuKTsNCiAgICAgICAgICAgICAgICAJbm9kZXMucHVzaChjbik7DQogICAgICAgICAgICAgICAgfQ0KICAgIAkJfQ0KICAgIA0KICAgIAkJLy8gcmVtb3ZlIGFueSBudWxscw0KICAgIAkJbm9kZXMgPSBub2Rlcy5mbGF0KCkuZmlsdGVyKG4gPT4gbik7DQogICAgCQkNCiAgICAJCWlmICghbm9kZXMubGVuZ3RoKSB7DQogICAgCQkJbm9kZXMucHVzaCg8JT1uc2NvcGUlPi5fbm9kZSk7DQogICAgCQl9DQogICAgCQkNCiAgICAJCW5vZGVzID0gdGhpcy5fdW5pcXVlKG5vZGVzLCAnX2NvZGUnKTsNCiAgICAJCWxvZygnbm9kZXMubGVuZ3RoJywgbm9kZXMubGVuZ3RoKTsNCg0KICAgIAkJZm9yIGF3YWl0IChjb25zdCBuIG9mIG5vZGVzKSB7DQogICAgCQkJbGV0IG5SZXQgPSBudWxsOw0KICAgIAkJCWxvZyhgJHttfSBAICR7bj8uY29kZSgpIHx8ICdMT0NBTCd9YCk7DQogICAgCQkJaWYgKCFuIHx8IHRoaXMuX3NhbWVFbnRpdHkoPCU9bnNjb3BlJT4uX25vZGUsIG4pKSB7DQogICAgCQkJCS8vIGxvY2FsIHNjcmlwdA0KICAgIAkJCQlmb3IgYXdhaXQgKGNvbnN0IHIgb2YgX19iZWZvcmVSdWxlcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgPCV2YWx1ZU9mKCJyLlNjcmlwdCIpJT4NCiAgICAJCQkJCS8vYXdhaXQgdGhpcy5fU2NyaXB0KGNsYXNzTmFtZSwgci5TY3JpcHQsIG0sIHIuTmFtZSB8fCAnQmVmb3JlUnVsZScsIHNjb3BlLCBudWxsLCAuLi5sUGFyYW1zKTsNCiAgICAJCQkJfQ0KDQogICAgCQkJCW5SZXQgPSBhd2FpdCBmU2NyaXB0KCk7DQoNCiAgICAJCQkJZm9yIGF3YWl0IChjb25zdCByIG9mIF9fYWZ0ZXJSdWxlcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgPCV2YWx1ZU9mKCJyLlNjcmlwdCIpJT4NCiAgICAJCQkJCS8vYXdhaXQgdGhpcy5fU2NyaXB0KGNsYXNzTmFtZSwgci5TY3JpcHQsIG0sIHIuTmFtZSB8fCAnQWZ0ZXJSdWxlJywgc2NvcGUsIG51bGwsIC4uLmxQYXJhbXMpOw0KICAgIAkJCQl9DQogICAgCQkJfSBlbHNlIHsNCiAgICAJCQkJblJldCA9IGF3YWl0IHNvdXJjZS5faW52b2tlTm9kZShuLCBtLCBvUGFyYW1zKTsNCiAgICAJCQl9DQogICAgDQogICAgCQkJcmVzdWx0cy5wdXNoKHsNCiAgICAJCQkJbm9kZTogbiwNCiAgICAJCQkJcmV0OiBuUmV0DQogICAgCQkJfSk7DQogICAgCQl9DQogICAgCQlsb2cocmVzdWx0cywgIl9leGVjdXRlIiwgJ1Jlc3VsdHMnKTsNCiAgICANCiAgICAJCWxldCBlcnJvcnMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIucmV0ICYmIHIucmV0Ll9fZXhjZXB0aW9uKS5tYXAociA9PiAoew0KICAgIAkJCW5vZGU6IHIubm9kZSA/IHsNCiAgICAJCQkJY29kZTogci5ub2RlLmNvZGUoKSwNCiAgICAJCQkJYWRkcmVzczogci5ub2RlLmFkZHJlc3MoKQ0KICAgIAkJCX0gOiBudWxsLA0KICAgIAkJCV9fZXhjZXB0aW9uOiByLnJldC5fX2V4Y2VwdGlvbg0KICAgIAkJfSkpOw0KDQogICAgCQlpZiAoZXJyb3JzLmxlbmd0aCkgew0KICAgIAkJCXdhcm4oImVycm9ycyIsIGVycm9ycyk7DQogICAgCQl9DQogICAgDQogICAgCQlyZXR1cm4gcmVzdWx0czsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIGVycm9yKGV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQoJfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19TY3JpcHQnJT4oY2xhc3NOYW1lLCBzY3JpcHQsIG0sIHR5cGUsIHNjb3BlLCBfbm9kZSwgLi4uc2ZBcmdzKXsNCiAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICI8JT1uTmFtZShjKSU+IjsNCiAgICAgICAgc2NvcGUgPSBzY29wZSB8fCA8JT1zY29wZSU+Ow0KICAgICAgICANCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbGFzc05hbWUsIHNjcmlwdCwgbSwgdHlwZSwgc2NvcGUsIF9ub2RlLCAuLi5zZkFyZ3MpOw0KPCUgfWVsc2V7JT4NCiAgICAJaWYgKHR5cGVvZihzY3JpcHQpID09PSAndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgIAkNCiAgICAgICAgdHJ5ew0KICAgIAkJaWYgKHR5cGVvZihzY3JpcHQpID09PSAnc3RyaW5nJykgc2NyaXB0ID0gdGhpcy5ydW5TY3JpcHQoYCgpID0+IHske3NjcmlwdH19YCk7DQogICAgDQogICAgCQlsZXQgcmV0ID0gbnVsbDsNCiAgICAJCWlmICh0eXBlb2Yoc2NyaXB0KSA9PT0gJ2Z1bmN0aW9uJykgew0KICAgIAkJCXJldCA9IGF3YWl0IHNjcmlwdCgpOw0KICAgIAkJfQ0KICAgIA0KICAgIAkJcmV0dXJuIHJldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+Y2xhc3NOYW1lLCBtLCB0eXBlLCBzY3JpcHQsIGV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQoJfQ0KDQogICAgPCU9bU5hbWU9J19zYW1lRW50aXR5JyU+KC4uLmFyRW50aXRpZXMpew0KICAgICAgICBpZihhckVudGl0aWVzLmxlbmd0aD09MCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICBpZihhckVudGl0aWVzLmxlbmd0aD09MSkgYXJFbnRpdGllcy5wdXNoKHRoaXMpOw0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KC4uLmFyRW50aXRpZXMpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgcmV0dXJuIGFyRW50aXRpZXMuc2xpY2UoMSkuZXZlcnkoZSA9PiB7DQogICAgICAgICAgICAgICAgbGV0IHYgPSBhckVudGl0aWVzWzBdOw0KICAgICAgICAgICAgICAgIGxldCBuZWdUZXN0ID0gew0KICAgICAgICAgICAgICAgICAgICB2TnVsbDogdj09bnVsbCwNCiAgICAgICAgICAgICAgICAgICAgZU51bGw6IGU9PW51bGwsDQogICAgICAgICAgICAgICAgICAgIHZPYmplY3Q6IHR5cGVvZih2KSE9PSdvYmplY3QnLA0KICAgICAgICAgICAgICAgICAgICBlT2JqZWN0OiB0eXBlb2YoZSkhPT0nb2JqZWN0JywNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4xLCBuZWdUZXN0KTsNCiAgICAgICAgICAgICAgICBpZihPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCAuLi5PYmplY3Qua2V5cyhuZWdUZXN0KS5maWx0ZXIoayA9PiBuZWdUZXN0W2tdKS5tYXAoayA9PiAoe3YsIGUsIFtrXTogdHJ1ZX0pKSkpLmxlbmd0aCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIC8vIHBhc3NlZCBpbml0aWFsIGNvbnNpc3RlbmN5IGNoZWNrDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYodj09ZSkgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbmVnVGVzdCA9IHsNCiAgICAgICAgICAgICAgICAgICAgZXZDb25zdHI6IHYuY29uc3RydWN0b3IubmFtZSE9ZS5jb25zdHJ1Y3Rvci5uYW1lLA0KICAgICAgICAgICAgICAgICAgICBlRW50aXR5OiAhZS5FbnRpdHlDbGFzcywNCiAgICAgICAgICAgICAgICAgICAgdkVudGl0eTogIXYuRW50aXR5Q2xhc3MsDQogICAgICAgICAgICAgICAgICAgIGV2RW50aXR5TmFtZXM6IHR5cGVvZihlLkVudGl0eUNsYXNzLk5hbWUpIT09J3VuZGVmaW5lZCcgJiYgZS5FbnRpdHlDbGFzcy5OYW1lIT12LkVudGl0eUNsYXNzLk5hbWUsDQogICAgICAgICAgICAgICAgICAgIGV2RW50aXR5SWRzOiB0eXBlb2YoZS5FbnRpdHlDbGFzcy5JZCkhPT0ndW5kZWZpbmVkJyAmJiBlLkVudGl0eUNsYXNzLklkIT12LkVudGl0eUNsYXNzLklkLA0KICAgICAgICAgICAgICAgICAgICBldklEczogdi5JZD09di5JZCAmJiBlLklkPT1lLklkICYmIHYuSWQhPWUuSWQsDQogICAgICAgICAgICAgICAgICAgIGV2SGFzaDogdi5fdG9IYXNoKG51bGwsIHtvbmx5VW5pcXVlOiB0cnVlfSwgJzwlPW1OYW1lJT4nKSE9ZS5fdG9IYXNoKG51bGwsIHtvbmx5VW5pcXVlOiB0cnVlfSwgJzwlPW1OYW1lJT4nKSwNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4yLCBuZWdUZXN0KTsNCiAgICAgICAgICAgICAgICBuZWdUZXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uT2JqZWN0LmtleXMobmVnVGVzdCkuZmlsdGVyKGsgPT4gbmVnVGVzdFtrXSkubWFwKGsgPT4gKHt2LCBlLCBba106IHRydWV9KSkpOw0KICAgICAgICAgICAgICAgIGlmKCFPYmplY3Qua2V5cyhuZWdUZXN0KS5sZW5ndGgpIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4zLCBuZWdUZXN0KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J2dldCBTZXRfT24nJT4oKSB7DQogICAgICAgIGxldCByZXQgPSBuZXcgRGF0ZShNYXRoLm1heCgNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCB8fCBudWxsLA0KPCUgfSklPiAgICAgICAgICAgIA0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICB0aGlzLl88JT10YU5hbWUlPl9zZXQgfHwgbnVsbCwNCjwlIH0pJT4NCiAgICAgICAgKSk7DQogICAgICAgIA0KICAgICAgICA8JT1sb2coKSU+InJldCIsIHJldCk7DQogICAgICAgIA0KICAgICAgICBpZighcmV0IHx8ICEocmV0IGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4ocmV0KSkpIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdnZXQgU2V0X0NvdW50JyU+KCkgew0KICAgICAgICByZXR1cm4gWw0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0LA0KPCUgfSklPiAgICAgICAgICAgIA0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICB0aGlzLl88JT10YU5hbWUlPl9zZXQsDQo8JSB9KSU+DQogICAgICAgIF0uZmlsdGVyKHMgPT4gcykubGVuZ3RoOw0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX2ZsYXR0ZW4nJT4oZGVwdGgpew0KICAgICAgICA8JT13YXJuKCklPiJERVBSRUNBVEVEIik7DQogICAgICAgIGxldCByZXQgPSB7fTsNCiAgICAgICAgaWYoIWRlcHRoKSByZXR1cm4gcmV0Ow0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICByZXQuXzwlPW5OYW1lKGVhKSU+X3NldCA9IHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldDsNCiAgICAgICAgcmV0Ll88JT1uTmFtZShlYSklPl9jb29wID0gdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcDsNCiAgICAgICAgcmV0LjwlPW5OYW1lKGVhKSU+ID0gdGhpcy48JT1uTmFtZShlYSklPigpP3RoaXMuPCU9bk5hbWUoZWEpJT4oKTwlaWYoZWEuRW50aXR5VHlwZSl7JT4uPCU9bU5hbWUlPihkZXB0aC0xKTwlfSU+OnRoaXMuPCU9bk5hbWUoZWEpJT4oKTsNCjwlIH0pJT4NCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICByZXQuPCU9dGFOYW1lJT4gPSB0aGlzLjwlPXRhTmFtZSU+KCkubWFwKHQgPT4gdD90LjwlPW1OYW1lJT4oZGVwdGgtMSk6dCk7DQo8JSB9KSU+DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9IYXNoJyU+KGFyZ3MsIG9wdGlvbnMsIGZTb3VyY2Upew0KICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsNCiAgICAgICAgDQogICAgICAgIGxldCBvSGFzaCA9IHsNCiAgICAgICAgICAgIGNsYXNzOiAiPCU9bk5hbWUoYyklPiIsDQogICAgICAgICAgICBzb3VyY2U6IGZTb3VyY2UsDQogICAgICAgICAgICBhcmdzOiBhcmdzLA0KICAgICAgICAgICAgX3RoaXM6IHt9DQogICAgICAgIH07DQogICAgICAgIA0KICAgICAgICBpZighb3B0aW9ucy5ub1RoaXMgJiYgZlNvdXJjZSE9IjwlPW1OYW1lJT4iICYmICh0eXBlb2Yob3B0aW9ucy5kZXB0aCk9PT0ndW5kZWZpbmVkJyB8fCAtLW9wdGlvbnMuZGVwdGg+MCkpew0KICAgICAgICAgICAgdGhpcy5fX2V4cG9ydChvSGFzaC5fdGhpcywgew0KICAgICAgICAgICAgICAgIE9QRVJBVE9SUzogIW9wdGlvbnMubm9PcGVyYXRvcnMsDQogICAgICAgICAgICAgICAgX21hcDogb3B0aW9ucy5fbWFwLA0KICAgICAgICAgICAgICAgIFVuaXF1ZTogb3B0aW9ucy5vbmx5VW5pcXVlLA0KICAgICAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgICAgICAgICAgSWQ6IChvYmosIGlkQ29kZSwgdikgPT4gb2JqW2lkQ29kZV0gPSB2LA0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT5pZihvcHRpb25zLm5vVHlwZXMpIHJldHVybjs8JX0lPg0KICAgICAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+dj92LjwlPW1OYW1lJT4obnVsbCwgb3B0aW9ucywgZlNvdXJjZSk6PCV9JT4oKG9wdGlvbnMub25seVVuaXF1ZSAmJiA8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pPyh2fHxudWxsKTp2KTsNCiAgICAgICAgICAgICAgICB9LA0KPCUgfSklPg0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqW2VhQ29kZV0gPSAodiB8fCBbXSkubWFwKF92ID0+IF92LjwlPW1OYW1lJT4obnVsbCwgb3B0aW9ucywgZlNvdXJjZSkpLA0KPCUgfSklPg0KPCUgYy5FbnRpdHlGaWVsZHMuZm9yRWFjaChlZiA9PiB7JT4NCiAgICAgICAgICAgICAgICBlZl88JT1uTmFtZShlZiklPjogKG9iaiwgZWZDb2RlLCB2KSA9PiBvYmpbZWZDb2RlXSA9IHYsDQo8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBpZihvcHRpb25zLm5vQXJncykgb0hhc2ggPSBvSGFzaC5fdGhpczsNCiAgICAgICAgcmV0dXJuIG9wdGlvbnMubm9Db2RlP29IYXNoOnRoaXMuaGFzaENvZGUoSlNPTi5zdHJpbmdpZnkob0hhc2gpKTsNCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2F1dGhvcml6ZSclPih1c2VybmFtZSwgcGFzc3dvcmQsIGJTZXJ2ZXIpew0KPCUgaWYobWFpbkNsYXNzKCk9PWMpeyU+DQogICAgICAgIGlmKCF1c2VybmFtZSAmJiAhcGFzc3dvcmQgJiYgITwlPXNjb3BlJT4uX190b2tlbiAmJiB0aGlzLlRlc3RbJzwlPW1OYW1lJT4udXNlcm5hbWUnXSl7DQogICAgICAgICAgICB1c2VybmFtZSA9IHRoaXMuVGVzdFsnPCU9bU5hbWUlPi51c2VybmFtZSddOw0KICAgICAgICAgICAgcGFzc3dvcmQgPSB0aGlzLlRlc3RbJzwlPW1OYW1lJT4ucGFzc3dvcmQnXTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKGJTZXJ2ZXIpew0KICAgICAgICAgICAgaWYodXNlcm5hbWUgJiYgITwlPXNjb3BlJT4uX3Rlc3RVc2VyICYmIHRoaXMuVGVzdFsnPCU9bU5hbWUlPi50ZXN0VXNlciddKXsNCiAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll90ZXN0VXNlciA9IGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KHRoaXMuVGVzdFsnPCU9bU5hbWUlPi50ZXN0VXNlciddKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS51c2VybmFtZSh1c2VybmFtZSkucGFzc3dvcmQocGFzc3dvcmQpLnN0b3JlKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy51c2VybmFtZSh1c2VybmFtZSwgJz0nKS5wYXNzd29yZChwYXNzd29yZCwgJz0nKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5maW5kKCk7DQogICAgICAgICAgICA8JT1sb2coKSU+IlNlcnZlcjogIiArIGJTZXJ2ZXIrIiwgT2JqOiIsIHJldCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHJldCl7DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKGpzb253ZWJ0b2tlbikhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IGpzb253ZWJ0b2tlbi5zaWduKHJldC5fdG9Eb2N1bWVudCgpLCB0aGlzLl9fY29uZmlnKCdzZWNyZXQnKSwgeyBleHBpcmVzSW46ICcxODAwcycgfSk7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX2J0b2EoSlNPTi5zdHJpbmdpZnkocmV0Ll90b0RvY3VtZW50KCkpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldCA9IHsNCiAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW46IHJldCwNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICA8JT1sb2coKSU+IlNlcnZlcjogIiArIGJTZXJ2ZXIrIiwgdG9rZW46ICIsIHJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9fY29uZmlnKCdjbGllbnRfaWQnKTsNCiAgICAgICAgICAgIGxldCBjbGllbnRfc2VjcmV0ID0gdGhpcy5fX2NvbmZpZygnc2VjcmV0Jyk7DQogICAgDQogICAgICAgICAgICBpZighdXNlcm5hbWUgJiYgIXBhc3N3b3JkICYmIDwlPXNjb3BlJT4uX190b2tlbil7DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPiJObyB1c2VybmFtZS9wYXNzd29yZCBhbmQgdG9rZW4gYWxyZWFkeSBleGlzdHMiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICA8JWlmKF9jTmFtZSgnb0F1dGggVG9rZW4nKSl7JT4NCiAgICAgICAgICAgIGxldCBkYXRhID0gew0KICAgICAgICAgICAgICAgIGdyYW50X3R5cGU6ICdwYXNzd29yZCcsDQogICAgICAgICAgICAgICAgdXNlcm5hbWUsDQogICAgICAgICAgICAgICAgcGFzc3dvcmQsDQogICAgICAgICAgICAgICAgY2xpZW50X2lkLA0KICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgY29uZmlnID0gew0KICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIGlmKCF1c2VybmFtZSAmJiAhcGFzc3dvcmQgJiYgPCU9c2NvcGUlPi5fX3Rva2VuICYmIDwlPXNjb3BlJT4uX190b2tlbi5yZWZyZXNoX3Rva2VuKXsNCiAgICAgICAgICAgICAgICBkYXRhID0gew0KICAgICAgICAgICAgICAgICAgICBncmFudF90eXBlOiAicmVmcmVzaF90b2tlbiIsDQogICAgICAgICAgICAgICAgICAgIHJlZnJlc2hfdG9rZW46IDwlPXNjb3BlJT4uX190b2tlbi5yZWZyZXNoX3Rva2VuLA0KICAgICAgICAgICAgICAgICAgICBjbGllbnRfaWQsDQogICAgICAgICAgICAgICAgICAgIGNsaWVudF9zZWNyZXQsDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gYCR7PCU9c2NvcGUlPi5fX3Rva2VuLnRva2VuX3R5cGV9ICR7PCU9c2NvcGUlPi5fX3Rva2VuLmFjY2Vzc190b2tlbn1gOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgYXhpb3MucG9zdChgaHR0cCR7PCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCkuc2VjdXJlKCk/J3MnOicnfTovLyR7PCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCkuYWRkcmVzcygpfTokezwlPW5zY29wZSU+Ll9ub2RlLnBhcmVudCgpLnBvcnQoKSB8fCAzMDAwfS9vYXV0aC90b2tlbmAsIE9iamVjdC5rZXlzKGRhdGEpLm1hcChrZXkgPT4ga2V5ICsgJz0nICsgZGF0YVtrZXldKS5qb2luKCcmJyksIGNvbmZpZyk7DQogICAgICAgICAgICBpZihyZXQuZGF0YS5hY2Nlc3NfdG9rZW4pew0KICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX190b2tlbiA9IHJldC5kYXRhOw0KDQogICAgICAgICAgICAgICAgaWYoPCU9c2NvcGUlPi5fX3Rva2VuLnJlZnJlc2hfdG9rZW4pew0KICAgICAgICAgICAgICAgICAgICBpZihheGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuY2xlYXIpIGF4aW9zLmludGVyY2VwdG9ycy5yZXNwb25zZS5jbGVhcigpOw0KICAgICAgICAgICAgICAgICAgICBheGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHJlc3BvbnNlID0+IHJlc3BvbnNlLCBhc3luYyBlcnJvciA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFJlcXVlc3QgPSBlcnJvci5jb25maWc7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgJiYgIW9yaWdpbmFsUmVxdWVzdC5fcmV0cnkgJiYgb3JpZ2luYWxSZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbi5pbmRleE9mKDwlPXNjb3BlJT4uX190b2tlbi5hY2Nlc3NfdG9rZW4pPjApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFJlcXVlc3QuX3JldHJ5ID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9hdXRob3JpemUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFJlcXVlc3QuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgPCU9c2NvcGUlPi5fX3Rva2VuLmFjY2Vzc190b2tlbjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3Mob3JpZ2luYWxSZXF1ZXN0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICA8JSB9ZWxzZSBpZihhdXRoQ2xhc3MpeyU+DQogICAgCTwlPXNjb3BlJT4uX190b2tlbiA9IGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGF1dGhDbGFzcyklPigpLnVzZXJuYW1lKHVzZXJuYW1lKS5wYXNzd29yZChwYXNzd29yZCkuPCU9bU5hbWUucmVwbGFjZSgnXycsICcnKSU+KCk7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgPCU9d2FybigpJT4iTm8gYXV0aG9yaXphdGlvbiBkZWZpbmVkIik7DQogICAgPCUgfSU+DQogICAgICAgIH0NCjwlIH1lbHNleyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoKSklPigpLjwlPW1OYW1lJT4odXNlcm5hbWUsIHBhc3N3b3JkLCBiU2VydmVyKTsNCjwlfSU+DQogICAgfQ0KICAgIA0KPCUgaWYobWFpbkNsYXNzKCk9PWMpeyU+DQogICAgYXN5bmMgPCU9bU5hbWU9J19zZXJ2ZXInJT4ob3B0aW9ucz17fSkgew0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZihvcHRpb25zLmNsZWFyQ29uc29sZSkgY29uc29sZS5jbGVhcigpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZig8JT1zY29wZSU+Ll9fVG9vbHMpIDwlPXNjb3BlJT4uVG9vbHMgPSA8JT1zY29wZSU+Ll9fVG9vbHM7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihnbG9iYWwpPT09J3VuZGVmaW5lZCcgJiYgdHlwZW9mKDwlPXNjb3BlJT4uaHJlZnMpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAJCWZvciBhd2FpdCAoY29uc3QgbCBvZiA8JT1zY29wZSU+LmhyZWZzKSB7DQogICAgICAgIAkJCWF3YWl0IHRoaXMucmVxdWlyZShsLmxpYiwgPCU9c2NvcGUlPi5ocmVmcywgYXN5bmMgX2wgPT4gew0KICAgIDwlIGlmKF9jTmFtZSgnU3RvcmVkU2NyaXB0JykpeyU+DQogICAgICAgICAgICAgICAgICAgIGlmKF9sLnNjcmlwdCAmJiA8JT1zY29wZSU+LlRvb2xzKSByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdTdG9yZWRTY3JpcHQnLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChfbC5zY3JpcHQpLmxvYWRTY3JpcHQoKTsNCiAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgIA0KICAgICAgICAgICAgbGV0IHNlY3VyZSA9IHRoaXMuX19jb25maWcoJ3NlY3VyZScpOw0KICAgICAgICAgICAgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgLy8gZ2xvYmFscw0KICAgICAgICAgICAgICAgIHZhciBnbG9iYWxNb2R1bGVzID0gew0KICAgICAgICAgICAgICAgICAgICBleHByZXNzOiAnZXhwcmVzcycsDQogICAgICAgICAgICAgICAgICAgIGh0dHBzOiAnaHR0cHMnLA0KICAgICAgICAgICAgICAgICAgICBodHRwOiAnaHR0cCcsDQogICAgICAgICAgICAgICAgICAgIHNlbGZzaWduZWQ6ICdzZWxmc2lnbmVkJywNCiAgICAgICAgICAgICAgICAgICAgdXRpbDogJ3V0aWwnLA0KICAgICAgICAgICAgICAgICAgICBjb3JzOiAnY29ycycsDQogICAgICAgICAgICAgICAgICAgIGJvZHlQYXJzZXI6ICdib2R5LXBhcnNlcicsDQogICAgICAgICAgICAgICAgICAgIGF4aW9zOiAnYXhpb3MnLA0KICAgICAgICAgICAgICAgICAgICAvL2NyeXB0bzogJ2NyeXB0bycsDQogICAgICAgICAgICAgICAgICAgIG9zOiAnb3MnLA0KICAgICAgICAgICAgICAgICAgICAvL2ptZXNwYXRoOiAnam1lc3BhdGgnLA0KICAgICAgICAgICAgICAgICAgICBqc29ucGF0aDogJ2pzb25wYXRoJywNCiAgICAgICAgICAgICAgICAgICAganNvbmF0YTogJ2pzb25hdGEnLA0KICAgICAgICAgICAgICAgICAgICBEb3RPYmplY3Q6ICdkb3Qtb2JqZWN0JywNCiAgICAgICAgICAgICAgICAgICAgbWFjaGluZWlkOiAnbm9kZS1tYWNoaW5lLWlkJywNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIG1pbmltaXN0OiAnbWluaW1pc3QnLA0KICAgICAgICAgICAgICAgIA0KPCUgaWYoYy5Db25maWcgJiYgYy5Db25maWdbJ2dyYXBocWwnXSl7JT4NCiAgICAgICAgICAgICAgICAgICAgZ3JhcGhxbEhUVFA6ICdleHByZXNzLWdyYXBocWwnLA0KICAgICAgICAgICAgICAgICAgICBncmFwaHFsOiAnZ3JhcGhxbCcsDQogICAgICAgICAgICAgICAgICAgIHBsYXlncm91bmQ6ICdncmFwaHFsLXBsYXlncm91bmQtbWlkZGxld2FyZS1leHByZXNzJywNCjwlIH0lPg0KDQo8JSBpZihjLkNvbmZpZyAmJiBjLkNvbmZpZ1snZW1haWwuaG9zdCddKXslPg0KICAgICAgICAgICAgICAgICAgICBub2RlbWFpbGVyOiAnbm9kZW1haWxlcicsDQo8JSB9JT4NCg0KPCUgaWYoYy5Db25maWcgJiYgYy5Db25maWdbJ3RvdHAuc2VjcmV0J10peyU+DQogICAgICAgICAgICAgICAgICAgIG90cGF1dGg6ICdvdHBhdXRoJywNCjwlIH0lPg0KDQo8JSBpZihfY05hbWUoJ05vZGUnKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgY2hpbGRfcHJvY2VzczogJ2NoaWxkX3Byb2Nlc3MnLA0KPCUgfSU+DQoNCjwlIGlmKF9jTmFtZSgnRXZlbnQnKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiAnZXZlbnRzJywNCiAgICAgICAgICAgICAgICAgICAgc29ja2V0aW86ICdzb2NrZXQuaW8nLA0KICAgICAgICAgICAgICAgICAgICBtcXR0OiAnbXF0dCcsDQogICAgICAgICAgICAgICAgICAgIGFtcXBsaWI6ICdhbXFwbGliJywNCiAgICAgICAgICAgICAgICAgICAgcHJvdG9idWZqczogJ3Byb3RvYnVmanMnLA0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0ZpbGVTeXN0ZW0nXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIGZzOiAnZnMnLA0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0thZmthJ10pKXslPg0KICAgICAgICAgICAgICAgICAgICBrYWZrYWpzOiAna2Fma2FqcycsDQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKFsnTmVvNGonXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIG5lbzRqOiAnbmVvNGotZHJpdmVyJywNCjwlIH0lPg0KDQo8JSBpZihfY05hbWUoJ29BdXRoIFRva2VuJykpeyU+DQogICAgICAgICAgICAgICAgICAgIE9BdXRoU2VydmVyOiAnZXhwcmVzcy1vYXV0aC1zZXJ2ZXInLA0KPCUgfWVsc2UgaWYoYXV0aENsYXNzKXslPg0KICAgICAgICAgICAgICAgICAgICBqc29ud2VidG9rZW46ICdqc29ud2VidG9rZW4nLA0KPCUgfSU+DQoNCg0KPCUgaWYobWFpbkNsYXNzKFsnU3FsREInXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIHNxbGl0ZTogJ3NxbGl0ZTMnLA0KICAgICAgICAgICAgICAgICAgICBteXNxbDogJ215c3FsJywNCiAgICAgICAgICAgICAgICAgICAgcG9zdGdyZXM6ICdwZycsDQo8JSB9JT4NCjwlIGlmKG1haW5DbGFzcyhbJ1Nub3dGbGFrZSddKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgc25vd2ZsYWtlOiAnc25vd2ZsYWtlLXNkaycsDQo8JSB9JT4NCjwlIGlmKG1haW5DbGFzcyhbJ01vbmdvREInXSkpeyU+DQogICAgICAgICAgICAgICAgICAgIG1vbmdvZGI6ICdtb25nb2RiJywNCjwlIH0lPg0KPCUgaWYobWFpbkNsYXNzKFsnUnhEQiddKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgUnhEQjogJ3J4ZGInLA0KPCUgfSU+DQo8JSBpZihtYWluQ2xhc3MoWydFeGNlbCddKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgWExTWDogJ3hsc3gnLA0KPCUgfSU+DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBtaXNzaW5nR2xvYmFsTW9kdWxlcyA9IE9iamVjdC5lbnRyaWVzKGdsb2JhbE1vZHVsZXMpLm1hcChlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsW2VbMF1dID0gcmVxdWlyZShlWzFdKTsNCiAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+ZXgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVbMV07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KS5maWx0ZXIoZSA9PiBlKTsNCiAgICAgICAgICAgICAgICBpZihtaXNzaW5nR2xvYmFsTW9kdWxlcy5sZW5ndGgpIDwlPXdhcm4oKSU+Im5wbSBpbnN0YWxsICIgKyBtaXNzaW5nR2xvYmFsTW9kdWxlcy5qb2luKCcgJykpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgCQk8JT1sb2coKSU+YFN0YXJ0aW5nIFskezwlPW5zY29wZSU+Ll9ub2RlPzwlPW5zY29wZSU+Ll9ub2RlLmNvZGUoKTonJ31dLi4uYCk7DQoNCgkJCWlmIChvcHRpb25zLmxvYWRUb29scykgYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdOb2RlJywgdHJ1ZSkgfHwgX2NOYW1lKCklPigpLl9sb2FkVG9vbHMob3B0aW9ucy5zYXZlVG9vbHMpOw0KDQo8JSBpZihfY05hbWUoJ05vZGUnKSl7ICAvKiBUb29scyBmaXJzdCBvciBOb2RlcyBmaXJzdD8/PyAqLyU+DQogICAgICAgICAgICBpZihvcHRpb25zLmluaXROb2RlKXsNCiAgICAgICAgICAgICAgICA8JT1uc2NvcGUlPi5fbm9kZSA9IGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnTm9kZScsIHRydWUpJT4oKS5zZWN1cmUoc2VjdXJlKS5pbml0KHRoaXMuX19jb25maWcoJ2luaXQubG9vcCcsIDAuNSkpOw0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZig8JT1uc2NvcGUlPi5fbm9kZSk9PT0ndW5kZWZpbmVkJykgcmV0dXJuIDwlPWVycm9yKCklPiI8JT1uc2NvcGUlPi5fbm9kZSBpcyB1bmRlZmluZWQhIik7DQogICAgICAgICAgICB9DQo8JSB9JT4NCg0KICAgIAkJaWYgKHR5cGVvZih0aGlzLmluaXQpPT09J2Z1bmN0aW9uJyAmJiBvcHRpb25zLmluaXRTZWxmKSB7DQogICAgCQkJYXdhaXQgdGhpcy5pbml0KCk7DQogICAgDQogICAgCQkJbGV0IHNxbFRvb2wgPSAoPCU9c2NvcGUlPi5Ub29scyB8fCBbXSkuZmluZCh0ID0+IHQuX19kbWxTdGF0ZW1lbnRzKTsNCiAgICAJCQlpZiAob3B0aW9ucy5jb3B5RE1MICYmIHNxbFRvb2wpIHsNCiAgICAJCQkJbGV0IGRtbHMgPSBzcWxUb29sLl9fZG1sU3RhdGVtZW50czsNCiAgICAJCQkJaWYgKHNxbFRvb2wudHlwZS5uYW1lID09ICdTcWxEQicpIGRtbHMgPSBbImRlbW8iXS5tYXAodCA9PiBgZHJvcCB0YWJsZSBpZiBleGlzdHMgJHt0fWApLmNvbmNhdChkbWxzKTsNCiAgICAJCQkJX0ZyRU1ELl9jb3B5VGV4dFRvQ2xpcGJvYXJkKGRtbHMuam9pbignO1xuJykpOw0KICAgIAkJCX0NCiAgICAJCX0NCg0KPCUgaWYoX2NOYW1lKCdOb2RlIFR5cGUnKSl7IC8qdG9kbzogcmVwbGFjZSB0aGlzIHdpdGggYW4gT1RBVXBkYXRlIGNvbmNlcHQgKi8lPg0KICAgICAgICAgICAgLy8gcmVmcmVzaCBzY3JpcHQNCiAgICAgICAgICAgIHRoaXMuc2V0SW50ZXJ2YWwobnVsbCwgYXN5bmMgKC8qdmVyc2lvbiovKSA9PiB7DQogICAgICAgICAgICAgICAgaWYodGhpcy5zcigpLmJMb2NhbCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBzY3QgPSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ05vZGUgVHlwZScsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KDwlPXNjb3BlJT4uX188JT1fY05hbWUoJ05vZGUgVHlwZScpJT4gfHwge25hbWU6ICdOb2RlSlMnfSk7DQogICAgICAgICAgICAgICAgbGV0IGN0ID0gYXdhaXQgc2N0LmZpbmQoKTsNCiAgICAgICAgICAgICAgICBpZighY3QgfHwgIWN0LmFjdGl2ZSgpIHx8ICFjdC5lbmFibGVkKCkpIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiggIXNjdC5kYXRlKCkgfHwgKChjdC5kYXRlKCkuZ2V0VGltZSgpIC0gc2N0LmRhdGUoKS5nZXRUaW1lKCkpLzEwMDApID4gNSApew0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+YE5ld2VyIHZlcnNpb24gZm91bmQ6IFtkYXRlOiAke2N0LmRhdGUoKS50b0lTT1N0cmluZygpfSwgdG9vbDogJHtjdC5Ub29sLm5hbWV9XSwgc3RvcmluZy4uLmApOw0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoZ2xvYmFsKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHdhbnQgdG8gc3RvcmUgdGhlIGNvbnRlbnQgZGlyZWN0bHkgdG8gdGhlIG5vZGVqcy5qcyBmaWxlDQogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjdC5fZmlsZXN5c3RlbShjdC5jb2RlKCkgKyAnLmpzJywgdGhpcy5fYXRvYihjdC5yZW1hcmsoKSkpOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2Yod2luZG93KSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih3aW5kb3cuc2VsZiAhPT0gd2luZG93LnRvcCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iaUZyYW1lIHNob3VsZCBiZSByZXN0YXJ0ZWQuLi4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPiJ3aW5kb3cgbG9jYXRpb24gcmVsb2FkaW5nLi4uIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ImZyYW1lIGNoZWNrIiwgZXgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgDQogICAgICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX188JT1fY05hbWUoJ05vZGUgVHlwZScpJT4gPSBzY3QuZGF0ZShjdC5kYXRlKCkpLm5hbWUoY3QubmFtZSgpKS5jb2RlKGN0LmNvZGUoKSkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0sIDAuNSk7DQo8JSB9JT4NCiAgICAgICAgDQogICAgICAgICAgICBpZihvcHRpb25zLmxvYWRDb250ZW50ICYmIHR5cGVvZih3aW5kb3cpIT09J3VuZGVmaW5lZCcpIHdpbmRvdy5vbmhhc2hjaGFuZ2UgPSBhc3luYyAoKSA9PiBkb2N1bWVudC5ib2R5ID0gYXdhaXQgdGhpcy5fZXhwb3J0KHt0bXA6IGxvY2F0aW9uLmhhc2gucGFnZX0pOw0KICAgIA0KICAgICAgICAgICAgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgY29uc3QgYXBwID0gZXhwcmVzcygpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGFwcC51c2UoY29ycygpKTsNCiAgICAgICAgDQogICAgICAgICAgICAgICAgYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlLCBsaW1pdDogJzUwbWInfSkpOw0KICAgICAgICAgICAgICAgIGFwcC51c2UoYm9keVBhcnNlci5qc29uKHsNCiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5OiAocmVxLCByZXMsIGJ1ZikgPT4gcmVxLnJhd0JvZHkgPSBidWYNCiAgICAgICAgICAgICAgICB9KSk7DQogICAgICAgIA0KICAgICAgICAgICAgICAgIGdsb2JhbC5hdXRoZW50aWNhdGUgPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IHJlcS5oZWFkZXJzWydhdXRob3JpemF0aW9uJ107DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlciAmJiBhdXRoSGVhZGVyLnNwbGl0KCcgJylbMV07DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gPT0gbnVsbCkgcmV0dXJuIHJlcy5zZW5kU3RhdHVzKDQwMSk7DQogICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBqc29ud2VidG9rZW4udmVyaWZ5KHRva2VuLCB0aGlzLl9fY29uZmlnKCdzZWNyZXQnKSwgKGVyciwgb2JqKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gcmVzLnNlbmRTdGF0dXMoNDAzKTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICByZXEuX19hdXRob3JpemF0aW9uID0gb2JqOw0KICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICANCjwlIGlmKF9jTmFtZSgnb0F1dGggVG9rZW4nKSl7JT4NCiAgICAgICAgICAgICAgICBhcHAub2F1dGggPSBuZXcgT0F1dGhTZXJ2ZXIoew0KICAgICAgICAgICAgICAgICAgICBkZWJ1ZzogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgLy8gdXNlRXJyb3JIYW5kbGVyOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZU1pZGRsZXdhcmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVDbGllbnRBdXRoZW50aWNhdGlvbjogeyBwYXNzd29yZDogZmFsc2UgfSwNCiAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIG1vZGVsOiAoKCkgPT4gKHsNCiAgICAgICAgICAgICAgICAJCWdldEFjY2Vzc1Rva2VuOiBiZWFyZXJUb2tlbiA9PiBuZXcgPCU9c2NvcGUlPi5PQXV0aF9Ub2tlbigpLmFjY2Vzc1Rva2VuKGJlYXJlclRva2VuKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5maW5kKCkudGhlbih0ID0+IGFwcC5vYXV0aC5oYW5kbGVyKHQsICdnZXRBY2Nlc3NUb2tlbicpKS50aGVuKHQgPT4ge3QuYWNjZXNzVG9rZW5FeHBpcmVzQXQgPSBuZXcgRGF0ZSh0LmFjY2Vzc1Rva2VuRXhwaXJlc09uKTsgcmV0dXJuIHR9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGdldENsaWVudDogKGNsaWVudElkLCBjbGllbnRTZWNyZXQpID0+IG5ldyA8JT1zY29wZSU+Lk9BdXRoX0NsaWVudCgpLmluaXQoKS5maW5hbGx5KCgpID0+IG5ldyA8JT1zY29wZSU+Lk9BdXRoX0NsaWVudCgpLmlkKGNsaWVudElkKS5zZWNyZXQoY2xpZW50U2VjcmV0KS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5maW5kKCkpLnRoZW4odCA9PiBhcHAub2F1dGguaGFuZGxlcih0LCAnZ2V0Q2xpZW50JykpLA0KICAgICAgICAgICAgICAgIAkgICAgZ2V0VXNlcjogKHVzZXJuYW1lLCBwYXNzd29yZCkgPT4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUoYXV0aENsYXNzKSU+KCkuYXV0aG9yaXplKHVzZXJuYW1lLCBwYXNzd29yZCkudGhlbih0ID0+IGFwcC5vYXV0aC5oYW5kbGVyKHQsICdnZXRVc2VyJykpLA0KICAgICAgICAgICAgICAgIAkgICAgc2F2ZVRva2VuOiAodG9rZW4sIGNsaWVudCwgdXNlcikgPT4gbmV3IDwlPXNjb3BlJT4uT0F1dGhfVG9rZW4oKS5fZnJvbURvY3VtZW50KHRva2VuKS5jbGllbnQobmV3IDwlPXNjb3BlJT4uT0F1dGhfQ2xpZW50KCkuX2Zyb21Eb2N1bWVudChjbGllbnQpKS51c2VyKHVzZXIpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLnN0b3JlKCkudGhlbih0ID0+IGFwcC5vYXV0aC5oYW5kbGVyKHQsICdzYXZlVG9rZW4nKSksDQogICAgICAgICAgICAgICAgCSAgICByZXZva2VUb2tlbjogdG9rZW4gPT4gbmV3IDwlPXNjb3BlJT4uT0F1dGhfVG9rZW4oKS5yZWZyZXNoVG9rZW4odG9rZW4ucmVmcmVzaFRva2VuKS5jbGllbnQobmV3IDwlPXNjb3BlJT4uT0F1dGhfQ2xpZW50KCkuaWQodG9rZW4uY2xpZW50LmlkKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKSkuZmluZCgpLnRoZW4odCA9PiB0LmVuYWJsZWQoZmFsc2UpLmFjdGl2ZShmYWxzZSkuc3RvcmUoKSkudGhlbih0ID0+IGFwcC5vYXV0aC5oYW5kbGVyKHQsICdyZXZva2VUb2tlbicpKSwNCiAgICAgICAgICAgICAgICAJICAgIGdldFJlZnJlc2hUb2tlbjogcmVmcmVzaFRva2VuID0+IG5ldyA8JT1zY29wZSU+Lk9BdXRoX1Rva2VuKCkucmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbikuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkuZmluZCgyLyp3aHkqLykudGhlbih0ID0+IHQuX3RvRG9jdW1lbnQoKSkudGhlbih0ID0+IHt0LnJlZnJlc2hUb2tlbkV4cGlyZXNBdCA9IG5ldyBEYXRlKHQucmVmcmVzaFRva2VuRXhwaXJlc09uKTsgcmV0dXJuIHR9KSwNCiAgICAgICAgCSAgICAgICAgfSkpKCkNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICBhcHAub2F1dGguaGFuZGxlciA9ICh0LCBtKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG0pIDwlPWxvZygpJT5tLCB0Ll90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+bSwgZXgudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICANCiAgICAgICAgICAgICAgICBhcHAucG9zdCgnL29hdXRoL3Rva2VuJywgYXBwLm9hdXRoLnRva2VuKCkpOw0KICAgICAgICAgICAgICAgIGdsb2JhbC5hdXRoZW50aWNhdGUgPSBhcHAub2F1dGguYXV0aGVudGljYXRlKCk7DQo8JSB9JT4NCg0KPCUgYXJDbGFzc2VzLmZvckVhY2goX2MgPT4gX2MuRW50aXR5TWV0aG9kcy5maWx0ZXIobSA9PiBtLklzUHVibGljKS5mb3JFYWNoKG0gPT4geyU+DQogICAgICAgICAgICAgICAgYXBwLnBvc3QoJy9tZXRob2QvPCU9bk5hbWUoX2MpJT4vPCU9bk5hbWUobSklPicsIChyZXEsIHJlcykgPT4gdGhpcy5faW5ib3VuZENhbGwocmVxLCByZXMsICI8JT1uTmFtZShfYyklPiIsICI8JT1uTmFtZShtKSU+IikpOw0KICAgICAgICAgICAgICAgIGFwcC5nZXQoJy9tZXRob2QvPCU9bk5hbWUoX2MpJT4vPCU9bk5hbWUobSklPicsIChyZXEsIHJlcykgPT4gdGhpcy5faW5ib3VuZENhbGwocmVxLCByZXMsICI8JT1uTmFtZShfYyklPiIsICI8JT1uTmFtZShtKSU+IikpOw0KPCUgfSkpJT4NCg0KICAgICAgICAgICAgICAgIGFwcC5wb3N0KCcvbWV0aG9kLzpjbGFzcy86bWV0aG9kJywgZ2xvYmFsLmF1dGhlbnRpY2F0ZSwgKHJlcSwgcmVzKSA9PiB0aGlzLl9pbmJvdW5kQ2FsbChyZXEsIHJlcykpOw0KICAgICAgICAgICAgICAgIGFwcC5nZXQoJy9tZXRob2QvOmNsYXNzLzptZXRob2QnLCBnbG9iYWwuYXV0aGVudGljYXRlLCAocmVxLCByZXMpID0+IHRoaXMuX2luYm91bmRDYWxsKHJlcSwgcmVzKSk7DQogICAgICAgIA0KPCUgaWYoYy5Db25maWcgJiYgYy5Db25maWdbJ2dyYXBocWwnXSl7JT4NCiAgICAgICAgICAgICAgICBhcHAudXNlKCcvZ3JhcGhxbCcsIGdyYXBocWxIVFRQLmdyYXBocWxIVFRQKHsNCiAgICAgICAgICAgICAgICAgICAgc2NoZW1hOiBncmFwaHFsLmJ1aWxkU2NoZW1hKHRoaXMuX3RvR1FMU2NoZW1hKCkpLA0KICAgICAgICAgICAgICAgICAgICByb290VmFsdWU6IHRoaXMuX3FsUmVzb2x2ZXIoKSwNCiAgICAgICAgICAgICAgICAgICAgZ3JhcGhpcWw6IHRoaXMuX19jb25maWcoInBsYXlncm91bmQiKSwNCiAgICAgICAgICAgICAgICB9KSk7DQogICAgICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygicGxheWdyb3VuZCIpICYmIHR5cGVvZihwbGF5Z3JvdW5kKSE9PSJ1bmRlZmluZWQiKSBhcHAuZ2V0KCcvcGxheWdyb3VuZCcsIHBsYXlncm91bmQuZGVmYXVsdCh7IGVuZHBvaW50OiAnL2dyYXBocWwnIH0pKQ0KPCUgfSU+DQoNCiAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCdlbWFpbC5ob3N0Jykpew0KICAgICAgICAgICAgICAgICAgICA8JT1zY29wZSU+LnRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoew0KICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZTogdGhpcy5fX2NvbmZpZygnZW1haWwuaG9zdCcpLA0KICAgICAgICAgICAgICAgICAgICAgICAgYXV0aDogdGhpcy5fX2NvbmZpZygnZW1haWwudXNlcicpP3sNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB0aGlzLl9fY29uZmlnKCdlbWFpbC51c2VyJyksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzczogdGhpcy5fX2NvbmZpZygnZW1haWwucGFzc3dvcmQnKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH06dW5kZWZpbmVkLA0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIC8qDQogICAgICAgICAgICAgICAgICAgIGF3YWl0IDwlPXNjb3BlJT4udHJhbnNwb3J0ZXIuc2VuZE1haWwoew0KICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogdGhpcy5fX2NvbmZpZygnZW1haWwuc2VuZGVyJyksDQogICAgICAgICAgICAgICAgICAgICAgICB0bywNCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QsDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LA0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgKi8NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IHBvcnQgPSA8JT1uc2NvcGUlPi5fbm9kZT8oPCU9bnNjb3BlJT4uX25vZGUucG9ydCgpIHx8IDMwMDApOjMwMDA7DQogICAgICAgICAgICAgICAgbGV0IGFkZHJlc3MgPSAiMC4wLjAuMCI7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IGxpc3RlbiA9IGFzeW5jICgpID0+IDwlPWxvZygpJT5gPCU9c2NvcGUlPlske3RoaXMuaXBBZGRyZXNzKCl9XSBsaXN0ZW5pbmcgYXQgaHR0cCR7c2VjdXJlPydzJzonJ306Ly8ke2FkZHJlc3N9OiR7cG9ydH1gKTsNCiAgICAgICAgICAgICAgICBpZihzZWN1cmUpew0KICAgICAgICAgICAgICAgICAgICBsZXQgY2VydCA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ3NlY3VyZS5wcml2YXRlJykpew0KICAgICAgICAgICAgICAgICAgICAgICAgY2VydCA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlOiAoYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUodGhpcy5fX2NvbmZpZygnc2VjdXJlLnByaXZhdGUnKSkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlcnQ6IChhd2FpdCBmcy5wcm9taXNlcy5yZWFkRmlsZSh0aGlzLl9fY29uZmlnKCdzZWN1cmUuY2VydCcpKSksDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnQgPSBzZWxmc2lnbmVkLmdlbmVyYXRlKFt7IG5hbWU6ICdjb21tb25OYW1lJywgdmFsdWU6ICduYW1tb3VyLmNvbScgfV0sIHsgZGF5czogMzY1IH0pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGdsb2JhbC5leFNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGNlcnQucHJpdmF0ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnQ6IGNlcnQuY2VydA0KICAgICAgICAgICAgICAgICAgICB9LCBhcHApLmxpc3Rlbihwb3J0LCBhZGRyZXNzLCBsaXN0ZW4pOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBnbG9iYWwuZXhTZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApLmxpc3Rlbihwb3J0LCBhZGRyZXNzLCBsaXN0ZW4pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19pbmJvdW5kQ2FsbCclPihyZXEsIHJlcywgY05hbWUsIG1OYW1lKXsNCiAgICAgICAgbGV0IHJldCA9IHt9Ow0KICAgICAgICB0cnl7DQogICAgICAgICAgICByZXQgPSBhd2FpdCBuZXcgPCU9c2NvcGUlPltyZXEucGFyYW1zLmNsYXNzIHx8IGNOYW1lXSgpLl9pbnZva2UocmVxLnBhcmFtcy5tZXRob2QgfHwgbU5hbWUsIHJlcS5ib2R5LCByZXEucXVlcnksIHJlcS5fX2F1dGhvcml6YXRpb24pOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICAgICAgcmV0ID0gew0KICAgICAgICAgICAgICAgIEV4Y2VwdGlvbjogIkV4Y2VwdGlvbjogIiArIGV4LA0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKHJldCAmJiB0eXBlb2YocmV0KT09PSJudW1iZXIiKSByZXQgPSByZXQudG9TdHJpbmcoKTsNCiAgICAgICAgcmVzLnNlbmQocmV0KTsNCiAgICB9DQoNCjwlIGlmKGMuQ29uZmlnWydncmFwaHFsJ10peyU+DQogICAgPCU9bU5hbWU9J19xbFNlbGVjdGlvbnMnJT4oc1NldCl7DQogICAgICAgIGxldCByZXQgPSBbXTsNCiAgICAgICAgaWYoIXNTZXQgfHwgIXNTZXQuc2VsZWN0aW9ucykgcmV0dXJuIHJldDsNCiAgICAgICAgDQogICAgICAgIHNTZXQuc2VsZWN0aW9ucy5maWx0ZXIocyA9PiBzLnNlbGVjdGlvblNldCkuZm9yRWFjaChzID0+IHsNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gZWEuRW50aXR5VHlwZSAmJiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYocy5uYW1lLnZhbHVlPT0iPCU9bk5hbWUoZWEpJT4iKXsNCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+J1JlZmVyZW5jZSBmb3IgPCU9bk5hbWUoZWEpJT4nLCBzKTsNCiAgICAgICAgICAgICAgICBsZXQgc09iaiA9IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1uTmFtZShlYSklPl88JT1jLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyklPih0aGlzKTsNCiAgICAgICAgICAgICAgICByZXQucHVzaChzT2JqKTsNCiAgICAgICAgICAgICAgICByZXQucHVzaCguLi5zT2JqLl9xbFNlbGVjdGlvbnMocy5zZWxlY3Rpb25TZXQpKTsNCiAgICAgICAgICAgIH0NCjwlIH0pJT4NCiAgICAgICAgfSk7DQogICAgICAgIA0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3FsUmVzb2x2ZXInJT4oKXsNCiAgICAgICAgcmV0dXJuIHsNCjwlIGFyQ2xhc3Nlcy5mb3JFYWNoKF9jID0+IHslPg0KICAgICAgICAgICAgPCU9bk5hbWUoX2MpJT46IGFzeW5jIChwYXJlbnQsIGFyZ3MsIGNvbnRleHQsIGluZm8pID0+IHsNCiAgICAgICAgICAgICAgICBpZighcGFyZW50LmRhdGEpIHBhcmVudC5xdWVyeSA9IHBhcmVudC5xdWVyeSB8fCB7fTsNCiAgICAgICAgICAgICAgICBsZXQgb2JqID0gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUoX2MpJT4oKS5fZnJvbURvY3VtZW50KHBhcmVudC5xdWVyeSB8fCBwYXJlbnQuZGF0YSk7DQogICAgICAgICAgICAgICAgbGV0IHJldCA9IG51bGw7DQogICAgICAgICAgICAgICAgaWYocGFyZW50LnF1ZXJ5KXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGZpZWxkcyA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IGF3YWl0IG9iai5maW5kQWxsKG51bGwsIG9iai5fcWxTZWxlY3Rpb25zKGNvbnRleHQuZmllbGROb2Rlc1swXS5zZWxlY3Rpb25TZXQpLCBudWxsLCBudWxsLCBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXS5jb25jYXQoY29udGV4dC5maWVsZE5vZGVzWzBdLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLm1hcChzID0+IHMubmFtZS52YWx1ZSkpKTsNCiAgICAgICAgICAgICAgICB9ZWxzZSBpZihwYXJlbnQuZGF0YSl7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IGF3YWl0IG9iai5zdG9yZSgpOw0KICAgICAgICAgICAgICAgICAgICBpZihvYmouX19hc3NlcnRFcnJvcikgdGhyb3cgb2JqLl9fYXNzZXJ0RXJyb3I7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkocmV0KSl7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQubWFwKHIgPT4gci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldD9yZXQuX3RvRG9jdW1lbnQoKTpyZXQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICA8JSBfYy5FbnRpdHlNZXRob2RzLmZvckVhY2goX20gPT4geyU+DQogICAgICAgICAgICAvLyA8JT1uTmFtZShfbSklPjogKHBhcmVudCwgYXJncywgY29udGV4dCwgaW5mbykgPT4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUoX2MpJT4oKS48JT1uTmFtZShfbSklPigiPCU9bk5hbWUoX20pJT4iLCBwYXJlbnQsIGFyZ3MsIGNvbnRleHQsIGluZm8pLA0KICAgIDwlIH0pJT4NCjwlIH0pJT4NCiAgICAgICAgfTsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b0dRTFNjaGVtYSclPigpew0KICAgICAgICBsZXQgcmV0ID0gYA0KdHlwZSBRdWVyeSB7DQo8JSBhckNsYXNzZXMuZm9yRWFjaChfYyA9PiB7JT4NCiAgICAiIiINCiAgICBGaW5kIGFsbCBtYXRjaGVzIGZvciA8JT1uTmFtZShfYyklPg0KICAgICIiIg0KICAgIDwlPW5OYW1lKF9jKSU+KHF1ZXJ5OiA8JT1uTmFtZShfYyklPklucHV0KTogWzwlPW5OYW1lKF9jKSU+XQ0KPCUgfSklPg0KfQ0KDQp0eXBlIE11dGF0aW9uIHsNCjwlIGFyQ2xhc3Nlcy5mb3JFYWNoKF9jID0+IHslPg0KICAgICIiIg0KICAgIFN0b3JlIGEgc2luZ2xlIDwlPW5OYW1lKF9jKSU+IG9iamVjdA0KICAgICIiIg0KICAgIDwlPW5OYW1lKF9jKSU+KGRhdGE6IDwlPW5OYW1lKF9jKSU+SW5wdXQpOiA8JT1uTmFtZShfYyklPg0KPCUgfSklPg0KfQ0KICAgIA0KICAgIDwlIGFyQ2xhc3Nlcy5mb3JFYWNoKF9jID0+IHslPg0KIiIiDQpJbnB1dCB0eXBlIGZvciA8JT1uTmFtZShfYyklPg0KIiIiDQppbnB1dCA8JT1uTmFtZShfYyklPklucHV0ew0KICAgIDwlIF9jLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgPCU9bk5hbWUoZWEpJT46IDwlPXFsVHlwZShlYSwgdHJ1ZSklPg0KICAgIDwlIH0pJT4NCiAgICA8JSBfYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QgJiYgdGEuRW50aXR5VHlwZSkuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyAlPg0KICAgIDwlPW5OYW1lKHRhKSU+XzwlPXRhTmFtZSU+OiBbPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MpJT5JbnB1dF0NCiAgICA8JSB9KSU+DQogICAgT1BFUkFUT1JTOiA8JT1uTmFtZShfYyklPk9wZXJhdG9yDQp9DQoNCmlucHV0IDwlPW5OYW1lKF9jKSU+T3BlcmF0b3J7DQogICAgPCUgX2MuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICA8JT1uTmFtZShlYSklPjogU3RyaW5nDQogICAgPCUgfSklPg0KfQ0KDQoiIiINCjwlPV9jLlJlbWFyayU+DQoiIiINCnR5cGUgPCU9bk5hbWUoX2MpJT57DQogICAgX2lkOiBJRCENCiAgICA8JSBfYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICIiIg0KICAgIDwlPWVhLlJlbWFyayU+DQogICAgIiIiDQogICAgPCU9bk5hbWUoZWEpJT46IDwlPXFsVHlwZShlYSklPjwlPWVhLklzUmVxdWlyZWQ/JyEnOicnJT4NCiAgICA8JSB9KSU+DQogICAgPCUgX2MuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kICYmIHRhLkVudGl0eVR5cGUpLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTsgJT4NCiAgICA8JT1uTmFtZSh0YSklPl88JT10YU5hbWUlPjogWzwlPW5OYW1lKHRhLkVudGl0eUNsYXNzKSU+XQ0KICAgIDwlIH0pJT4NCg0KICAgIDwlIF9jLkVudGl0eU1ldGhvZHMuZmlsdGVyKF9tID0+ICFfbS5NZXRob2RQYXJhbWV0ZXJzLmxlbmd0aCkuZm9yRWFjaChfbSA9PiB7JT4NCiAgICAiIiINCiAgICA8JT1fbS5SZW1hcmslPg0KICAgICIiIg0KICAgIDwlPW5OYW1lKF9tKSU+OiA8JT1xbFR5cGUoX20uUmVzcG9uc2VBdHRyaWJ1dGUsIHRydWUpJT4NCiAgICA8JSB9KSU+DQogICAgPCUgX2MuRW50aXR5TWV0aG9kcy5maWx0ZXIoX20gPT4gX20uTWV0aG9kUGFyYW1ldGVycy5sZW5ndGgpLmZvckVhY2goX20gPT4geyU+DQogICAgIiIiDQogICAgPCU9X20uUmVtYXJrJT4NCiAgICAiIiINCiAgICA8JT1uTmFtZShfbSklPig8JT1fbS5NZXRob2RQYXJhbWV0ZXJzLm1hcChwID0+IG5OYW1lKHApICsgJzogJyArIHFsVHlwZShwLCB0cnVlKSkuam9pbignLCAnKSU+KTogPCU9cWxUeXBlKF9tLlJlc3BvbnNlQXR0cmlidXRlKSU+DQogICAgPCUgfSklPg0KfQ0KICAgIDwlIH0pJT4NCiAgICAgICAgYDsNCiAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KPCUgfSAvLyBncmFwaCU+DQoNCjwlIH0gLy8gSXNNYWluICU+DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2ludm9rZU5vZGUnJT4obiwgbWV0aG9kLCBkYXRhLCBldmVudCwgYlJhdykgew0KICAgICAgICAvLyBpZighbikgcmV0dXJuIG51bGw7DQogICAgICAgIA0KICAgICAgICBpZih0eXBlb2YoPCU9bnNjb3BlJT4uX25vZGUpPT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgPCU9d2FybigpJT4iPCU9bnNjb3BlJT4uX25vZGUgbm90IGRlZmluZWQiKTsNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBpZihldmVudCl7DQo8JSBpZihfY05hbWUoJ0V2ZW50JykpeyU+DQogICAgICAgICAgICBpZihldmVudC5fY2xhc3NOYW1lX3NldCAmJiBldmVudC5jbGFzc05hbWUoKSAmJiBldmVudC5jbGFzc05hbWUoKSE9JzwlPW5OYW1lKGMpJT4nKXsNCiAgICAgICAgICAgICAgICBsZXQgb0NsYXNzID0gbnVsbDsNCiAgICAgICAgICAgICAgICBpZihmYWxzZSl7DQogICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iRGVsZWdhdGluZyBpbnZva2F0aW9uIHRvICIgKyBldmVudC5jbGFzc05hbWUoKSsnLicrbWV0aG9kKycgLi4uLicpOw0KICAgIDwlIHNyLmdyb3VwQnkoYXJDbGFzc2VzLCAnRW50aXR5TW9kdWxlJykuZm9yRWFjaChlbSA9PiB7JT4NCiAgICAgICAgICAgICAgICB9ZWxzZSBpZihbIjwlPWVtLnZhbHVlcy5tYXAobWMgPT4gbk5hbWUobWMpKS5qb2luKCciLCAiJyklPiJdLmluZGV4T2YoZXZlbnQuY2xhc3NOYW1lKCkpPj0wKXsNCiAgICAgICAgICAgICAgICAgICAgb0NsYXNzID0gbmV3IDwlPXNjb3BlJT48JT1lbS5rZXk/KCcuJytlbS5rZXkuQWxpYXMpOicnJT5bZXZlbnQuY2xhc3NOYW1lKCldKCk7DQogICAgPCUgfSklPg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgb0NsYXNzLjwlPW1OYW1lJT4obiwgbWV0aG9kLCBkYXRhLCBldmVudCwgYlJhdyk7DQogICAgICAgICAgICB9DQo8JSB9ZWxzZXslPg0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+IkV2ZW50IGNhbm5vdCBiZSBkZWZpbmVkIHdpdGhvdXQgdGhlIEV2ZW50IGNsYXNzIik7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCjwlIH0lPg0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBsZXQgcmV0ID0gbnVsbDsNCg0KICAgICAgICBkYXRhID0gZGF0YSB8fCB7fTsNCg0KICAgICAgICBpZih0eXBlb2YoZGF0YSk9PT0ib2JqZWN0Iil7DQogICAgICAgICAgICBkYXRhLl9fdGhpcyA9IGRhdGEuX190aGlzIHx8IHRoaXMuX3RvSlNPTih7cGFyc2U6IDF9KTsNCiAgICAgICAgICAgIHN3aXRjaChtZXRob2Qpew0KICAgIDwlIGMuRW50aXR5TWV0aG9kcy5mb3JFYWNoKG0gPT4geyU+DQogICAgICAgICAgICAgICAgY2FzZSAiPCU9bkNvZGUobSklPiI6IHsNCiAgICAgICAgPCUgbS5NZXRob2RQYXJhbWV0ZXJzLmZvckVhY2gocCA9PiB7JT4NCiAgICAgICAgICAgICAgICAgICAgZGF0YS48JT1uTmFtZShwKSU+ID0gZGF0YS48JT1uTmFtZShwKSU+P2RhdGEuPCU9bk5hbWUocCklPg0KICAgICAgICAgICAgPCVpZihwLklzQXJyYXkpeyU+Lm1hcChfcCA9PiBfcDwlfSU+DQogICAgICAgICAgICA8JSBpZihwLkVudGl0eVR5cGUpeyU+Ll90b0RvY3VtZW50KCkNCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKHAuSXNEYXRlKXslPi50b0lTT1N0cmluZygpDQogICAgICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgIDwlaWYocC5Jc0FycmF5KXslPik8JX0lPjp1bmRlZmluZWQ7DQogICAgICAgIDwlIH0pJT4NCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQo8JSBpZihfY05hbWUoJ05vZGUnKSl7JT4NCiAgICAgICAgaWYodHlwZW9mKG4pPT09J3N0cmluZycpIG4gPSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ05vZGUnLCB0cnVlKSU+KCkuY29kZShuKTsNCjwlIH0lPg0KDQogICAgICAgIGlmKCFuIHx8IDwlPW5zY29wZSU+Ll9ub2RlLl9zYW1lRW50aXR5KG4pKXsNCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuX2ludm9rZShtZXRob2QsIGRhdGEpOw0KICAgICAgICAgICAgPCU9bG9nKCklPiJMb2NhbCBub2RlIiwgcmV0KTsNCg0KICAgICAgICB9ZWxzZSBpZihuLmFkZHJlc3MoKSl7DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPm4uYWRkcmVzcygpLCBuLnBvcnQoKSwgbWV0aG9kKTsNCiAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLl9yZXN0KHVuZGVmaW5lZCwgZGF0YSwgbnVsbCwgbnVsbCwge3BhdGg6IGBodHRwJHtuLnNlY3VyZSgpPydzJzonJ306Ly8ke24uYWRkcmVzcygpfToke24ucG9ydCgpIHx8IDMwMDB9L21ldGhvZC88JT1uTmFtZShjKSU+LyR7bWV0aG9kfWAsIGhlYWRlcnM6IHt9fSk7DQogICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfWVsc2V7DQo8JSBpZihfY05hbWUoJ0V2ZW50JykgJiYgYy5OYW1lIT09J0V2ZW50Jyl7JT4NCiAgICAgICAgICAgIGlmKHR5cGVvZihkYXRhKT09PSJvYmplY3QiKXsNCiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5fX3RoaXMuX19nZW5lcmF0ZWQ7DQogICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEuX190aGlzLm9ubGluZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy93aHkgZG8gd2UgbmVlZCB0aGlzPz8/DQogICAgICAgICAgICA8JSAvKnVuUmVjdXJzZSgnZGF0YScsICdtZXRob2QnLCAne30nLCAnJywgNSwgJ19fdGhpcy5jb2RlJykqLyAlPg0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgZXYgPSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0V2ZW50JywgdHJ1ZSklPigpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLmNvZGUodGhpcy5fdXVpZCgpKS5uYW1lKHRoaXMuX19jb25maWcoJ2V2ZW50JykgfHwgJzwlPXNjb3BlJT4uRXZlbnQnKS5kYXRlKHRoaXMuc2VydmVyRGF0ZSgpKS5yZWNpcGllbnQobikubWV0aG9kKG1ldGhvZCkuY2xhc3NOYW1lKCc8JT1uTmFtZShjKSU+Jykuc2VuZGVyKDwlPW5zY29wZSU+Ll9ub2RlKS5jYXJyaWVyKDwlPW5zY29wZSU+Ll9ub2RlKS5wYXlsb2FkKHRoaXMuX2J0b2EoSlNPTi5zdHJpbmdpZnkoZGF0YSkpKTsNCiAgICAgICAgICAgIGlmKGV2ZW50KXsNCiAgICAgICAgICAgICAgICBpZihldmVudC5fcmVzcG9uc2VUb19zZXQpIGV2LnJlc3BvbnNlVG8oZXZlbnQucmVzcG9uc2VUbygpKTsNCiAgICAgICAgICAgICAgICBpZihldmVudC5fc2VuZGVyX3NldCkgZXYuc2VuZGVyKGV2ZW50LnNlbmRlcigpKTsNCiAgICAgICAgICAgICAgICBpZihldmVudC5fY2xhc3NOYW1lX3NldCkgZXYuY2xhc3NOYW1lKGV2ZW50LmNsYXNzTmFtZSgpKTsNCiAgICAgICAgICAgICAgICBpZihldmVudC5fY2Fycmllcl9zZXQgfHwgZXZlbnQuX3NlbmRlcl9zZXQpIGV2LmNhcnJpZXIoZXZlbnQuY2FycmllcigpIHx8IGV2ZW50LnNlbmRlcigpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldCA9IGF3YWl0IGV2LnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYodHlwZW9mKHJldCk9PT0ic3RyaW5nIil7DQogICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICByZXQgPSBKU09OLnBhcnNlKHJldCk7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9ZWxzZSBpZihyZXQgJiYgdHlwZW9mKHJldC5wYXlsb2FkKT09PSdmdW5jdGlvbicpew0KICAgICAgICAgICAgICAgIC8vIHJldCBpcyBhbiBldmVudA0KICAgICAgICAgICAgICAgIHJldCA9IHJldC5wYXlsb2FkKCk7DQogICAgICAgICAgICB9ZWxzZSBpZihBcnJheS5pc0FycmF5KHJldCkgJiYgcmV0WzBdICYmIHR5cGVvZihyZXRbMF0ucGF5bG9hZCk9PT0nZnVuY3Rpb24nKXsNCiAgICAgICAgICAgICAgICByZXQgPSByZXQubWFwKHIgPT4gci5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgICAgIGlmKHJldC5sZW5ndGg9PTEpIHJldCA9IHJldFswXTsNCiAgICAgICAgICAgIH0NCjwlIH0lPg0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBpZighcmV0KSByZXR1cm4gbnVsbDsNCiAgICAgICAgcmV0ID0gcmV0LmRhdGEgfHwgcmV0Ow0KDQogICAgICAgIGlmKHJldC5fX2V4Y2VwdGlvbil7DQogICAgICAgICAgICAvLyBhbiBleGNlcHRpb24gb2NjdXJyZWQgYXQgdGhlIHNlcnZlcg0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+YEV4Y2VwdGlvbiBhdCAke24uX2FkZHJlc3N9YCwgcmV0Ll9fZXhjZXB0aW9uKTsNCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH0NCg0KICAgICAgICBzd2l0Y2gobWV0aG9kKXsNCjwlIGMuRW50aXR5TWV0aG9kcy5mb3JFYWNoKG0gPT4geyU+DQogICAgICAgICAgICBjYXNlICI8JT1uQ29kZShtKSU+Ijogew0KICAgIDwlIGlmKG0uUmVzcG9uc2VBdHRyaWJ1dGUuRW50aXR5VHlwZSl7ICU+DQogICAgICAgICAgICAgICAgaWYoIWJSYXcpIHJldCA9IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtLlJlc3BvbnNlQXR0cmlidXRlLkVudGl0eVR5cGUsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KHJldCk7DQogICAgPCUgfSAlPg0KICAgIDwlIGlmKG0uTmFtZT09J2F1dGhvcml6ZScpeyU+DQogICAgICAgICAgICAgICAgPCU9c2NvcGUlPi5fX3Rva2VuID0ge3Rva2VuX3R5cGU6ICJCZWFyZXIiLCBhY2Nlc3NfdG9rZW46IHJldH07DQogICAgPCUgfSAlPg0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KPCUgfSk7ICU+DQoNCiAgICAgICAgICAgIGNhc2UgImluc2VydCI6DQogICAgICAgICAgICBjYXNlICJ1cGRhdGUiOg0KICAgICAgICAgICAgY2FzZSAic3RvcmUiOg0KICAgICAgICAgICAgY2FzZSAiZGVsZXRlIjoNCiAgICAgICAgICAgIGNhc2UgImZpbmQiOiANCiAgICAgICAgICAgIGNhc2UgImZpbmRBbGwiOiB7DQogICAgICAgICAgICAgICAgaWYoIWJSYXcpIHJldCA9IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KHJldCk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6IHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KDQo8JSBpZihtYWluQ2xhc3MoKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX2ludm9rZSclPihtZXRob2QsIGJvZHksIHF1ZXJ5LCBhdXRoT2JqKXsNCiAgICAgICAgdGhpcy5fX3RpbWUoJzwlPXNjb3BlJT4uPCU9bk5hbWUoYyklPi4nICsgbWV0aG9kKTsNCiAgICAgICAgPCU9bG9nKCklPm1ldGhvZCwgcXVlcnksIGJvZHkpOw0KICAgICAgICANCiAgICAgICAgaWYodHlwZW9mKGJvZHkpPT09J3N0cmluZycpew0KICAgICAgICAgICAgaWYoPCU9X2I2NHRlc3QoJ2JvZHknKSU+KXsgLy8gYmFzZTY0Pw0KICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLl9hdG9iKGJvZHkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZigvW14sOnt9XFtcXTAtOS5cLStFYWVmbG5yLXUgXG5cclx0XS8udGVzdChib2R5KSl7IC8vIGpzb24NCiAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKGJvZHkudG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iQm9keSBpcyBub3QgYSB2YWxpZCBKU09OIiwgYm9keSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBsZXQgX3BhcmFtcyA9IHF1ZXJ5P09iamVjdC5hc3NpZ24ocXVlcnksIGJvZHkpOmJvZHk7DQogICAgICAgIGlmKHR5cGVvZihfcGFyYW1zKT09PSdzdHJpbmcnKSBfcGFyYW1zID0gSlNPTi5wYXJzZShfcGFyYW1zKTsNCiAgICAgICAgDQogICAgICAgIGlmKF9wYXJhbXMpew0KICAgICAgICAgICAgX3BhcmFtcyA9IERvdE9iamVjdC5vYmplY3QoX3BhcmFtcyk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgX3BhcmFtcyA9IHt9Ow0KICAgICAgICB9DQoNCiAgICAgICAgPCU9bG9nKCklPiJfcGFyYW1zIiwgX3BhcmFtcyk7DQoNCiAgICA8JSBpZihfY05hbWUoJ05vZGUnKSAmJiBjLk5hbWUhPSdOb2RlJyl7JT4NCiAgICAgICAgaWYoX3BhcmFtcy5fX25vZGUpew0KICAgICAgICAgICAgLy8gcHJvYmFibHkgc2hvdWxkIG5vdCBiZSBwcm9jZXNzZWQgaGVyZSwgYnV0IHJhdGhlciBjb25zdW1lZCBhcyBwYXJ0IG9mIHRoZSBleGVjdXRlKCkgbG9naWMsIHB1c2hpbmcgX19ub2RlIHRvIHRoZSBsaXN0IG9mIG15IG5vZGVzIHRvIGRlbGVnYXRlIHRvIT8NCiAgICAgICAgICAgIGxldCB0biA9IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnTm9kZScsIHRydWUpJT4oKS5fZnJvbURvY3VtZW50KF9wYXJhbXMuX19ub2RlKS8qLl9kZVJlZmVyZW5jZSgpKi87DQogICAgICAgICAgICBkZWxldGUgX3BhcmFtcy5fX25vZGU7DQogICAgICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGMsIHRydWUpJT4oKS5faW52b2tlTm9kZSh0biwgbWV0aG9kLCBfcGFyYW1zKTsNCiAgICAgICAgfQ0KICAgIDwlIH0lPg0KDQogICAgICAgIGlmKF9wYXJhbXMuX190aGlzKSB7DQogICAgICAgICAgICBfcGFyYW1zLl9fdGhpcyA9IERvdE9iamVjdC5vYmplY3QoX3BhcmFtcy5fX3RoaXMpOw0KICAgICAgICAgICAgbGV0IF9fdGhpcyA9IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShjLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChfcGFyYW1zLl9fdGhpcykvKi5fZGVSZWZlcmVuY2UoKSovOw0KICAgICAgICAgICAgZGVsZXRlIF9wYXJhbXMuX190aGlzOw0KICAgICAgICAgICAgcmV0dXJuIGF3YWl0IF9fdGhpcy48JT1tTmFtZSU+KG1ldGhvZCwgX3BhcmFtcywgbnVsbCwgYXV0aE9iaik7DQogICAgICAgIH0NCg0KICAgICAgICBsZXQgYXJBcmdzID0gW107DQogICAgICAgIHN3aXRjaChtZXRob2Qpew0KPCUgYy5FbnRpdHlNZXRob2RzLmZvckVhY2gobSA9PiB7JT4NCiAgICAgICAgICAgIGNhc2UgIjwlPW5Db2RlKG0pJT4iOiB7DQo8JSBpZihfY05hbWUoJ1RyYW5zYWN0aW9uJykgJiYgX2NOYW1lKCdDb250ZW50JykgJiYgYy5OYW1lIT0nVHJhbnNhY3Rpb24nICYmICFtLklzU3luYyl7JT4NCiAgICAgICAgaWYoIV9wYXJhbXMuU3luYyl7DQogICAgICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdDb250ZW50JywgdHJ1ZSklPigoYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdDb250ZW50JywgdHJ1ZSklPigpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLnNjb3BlKCI8JT1zY29wZSU+IikuY2xhc3MoIjwlPWMuTmFtZSU+IikubWV0aG9kKG1ldGhvZCkuYXV0aG9yaXphdGlvbihhdXRoT2JqKS5kYXRlKHRoaXMuc2VydmVyRGF0ZSgpKS5wYXlsb2FkKHRoaXMuX2J0b2EoX3BhcmFtcykpLnRyYW5zYWN0aW9uX1RyYW5zYWN0aW9uTG9ncyhbbmV3IDwlPXNjb3BlJT4uVHJhbnNhY3Rpb25Mb2coKS5kYXRlKHRoaXMuc2VydmVyRGF0ZSgpKS5zdGF0ZShuZXcgPCU9c2NvcGUlPi5UcmFuc2FjdGlvblN0YXRlKCkuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkubmFtZSgibG9hZGVkIikpXSkuc3RvcmUoKSkuSWQpLl90b0RvY3VtZW50KCk7DQogICAgICAgIH0NCjwlIH0lPg0KDQogICAgPCUgbS5NZXRob2RQYXJhbWV0ZXJzLmZvckVhY2gocCA9PiB7JT4NCiAgICAgICAgPCUgaWYocC5FbnRpdHlUeXBlICYmIHAuSXNBcnJheSl7JT4NCiAgICAgICAgICAgICAgICBfcGFyYW1zLjwlPW5Db2RlKHApJT4gPSBfcGFyYW1zLjwlPW5Db2RlKHApJT4ubWFwKHAgPT4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUocC5FbnRpdHlUeXBlKSU+KCkuX2Zyb21Eb2N1bWVudChwKS5fZGVSZWZlcmVuY2UoKSk7DQogICAgICAgIDwlIH1lbHNlIGlmKHAuRW50aXR5VHlwZSl7ICU+DQogICAgICAgICAgICAgICAgX3BhcmFtcy48JT1uQ29kZShwKSU+ID0gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUocC5FbnRpdHlUeXBlKSU+KCkuX2Zyb21Eb2N1bWVudChfcGFyYW1zLjwlPW5Db2RlKHApJT4pLl9kZVJlZmVyZW5jZSgpOw0KICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICAgICAgYXJBcmdzLnB1c2goX3BhcmFtcy48JT1uQ29kZShwKSU+KTsNCiAgICA8JSB9KTslPg0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KPCUgfSk7JT4NCg0KICAgICAgICAgICAgY2FzZSAiZmluZEFsbCI6ew0KICAgICAgICAgICAgICAgIGFyQXJncy5wdXNoKF9wYXJhbXMuZGVwdGgpOw0KICAgICAgICAgICAgICAgIGFyQXJncy5wdXNoKF9wYXJhbXMub2Jqcyk7DQogICAgICAgICAgICAgICAgYXJBcmdzLnB1c2goX3BhcmFtcy5zdGFydCk7DQogICAgICAgICAgICAgICAgYXJBcmdzLnB1c2goX3BhcmFtcy5lbmQpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2FzZSAiZmluZCI6IHsNCiAgICAgICAgICAgICAgICBhckFyZ3MucHVzaChfcGFyYW1zLmRlcHRoKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZGVmYXVsdDogew0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBsZXQgb2JqID0gdGhpczsNCiAgICAgICAgDQogICAgICAgIGxldCByZXQgPSBudWxsOw0KICAgICAgICBpZighb2JqKXsNCiAgICAgICAgICAgIHJldCA9IHsNCiAgICAgICAgICAgICAgICBfX2V4Y2VwdGlvbjogew0KICAgICAgICAgICAgICAgICAgICAnLTEnOiBgPCU9bk5hbWUoYyklPi48JT1tTmFtZSU+OiBvYmogaXMgdW5kZWZpbmVkYA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH1lbHNlIGlmKCFvYmpbbWV0aG9kXSl7DQogICAgICAgICAgICByZXQgPSB7DQogICAgICAgICAgICAgICAgX19leGNlcHRpb246IHsNCiAgICAgICAgICAgICAgICAgICAgJy0yJzogYDwlPW5OYW1lKGMpJT4uPCU9bU5hbWUlPjogbWV0aG9kICR7b2JqLmNvbnN0cnVjdG9yLm5hbWV9KCR7bWV0aG9kfSkgaXMgbm90IGZvdW5kYCwNCiAgICAgICAgICAgICAgICAgICAgJ29iaic6IG9iag0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgb2JqW21ldGhvZF0oLi4uYXJBcmdzKTsNCiAgICAgICAgfQ0KICAgICAgICANCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgIDwlIGlmKHQ9PSJTcWxEQiIpeyAlPg0KICAgICAgICAgICAgaWYoZmFsc2UgJiYgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uICYmICE8JT1zY29wZSU+Ll9fc3FsVHJhbnNhY3Rpb24uZW5kKXsNCiAgICAgICAgICAgICAgICByZXQgPSB7DQogICAgICAgICAgICAgICAgICAgIF9fZXhjZXB0aW9uOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAnLTQnOiAiVW5jb21taXR0ZWQgdHJhbnNhY3Rpb25zOiAiICsgPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uLnNxbHMubGVuZ3RoLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ29iaic6IG9iag0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgIDwlIH0lPg0KICAgICAgICB9DQo8JSB9KSU+DQoNCiAgICAgICAgaWYocmV0ICYmICFyZXQuX19leGNlcHRpb24pew0KICAgICAgICAgICAgPCU9c2NvcGUlPi5fdW5SZWN1cnNlID0ge307DQogICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHJldCkpew0KICAgICAgICAgICAgICAgIGxldCBfcmV0ID0gW107DQogICAgICAgICAgICAgICAgZm9yIGF3YWl0KGNvbnN0IHIgb2YgcmV0KXsNCiAgICAgICAgICAgICAgICAgICAgaWYociAmJiByLl90b0RvY3VtZW50KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+KSBkZWxldGUgPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT4uX3RvRG9jdW1lbnQ7DQogICAgICAgICAgICAgICAgICAgICAgICBfcmV0LnB1c2goYXdhaXQgci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2UgX3JldC5wdXNoKHIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXQgPSBfcmV0Ow0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgcmV0ID0gKHJldCAmJiByZXQuX3RvRG9jdW1lbnQpP2F3YWl0IHJldC5fdG9Eb2N1bWVudCgpOnJldDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgPCU9bG9nKCklPidyZXQnLCByZXQpOw0KICAgICAgICA8JT1sb2coKSU+YCR7bWV0aG9kfTogJHt0aGlzLl9fdGltZSgnPCU9c2NvcGUlPi48JT1uTmFtZShjKSU+LicgKyBtZXRob2QpfWApOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KPCUgaWYoX2NOYW1lKCdOb2RlJykpeyU+DQogICAgPCU9bU5hbWU9J19wYXJzZUNvZGVTdGF0ZSclPih0KXsNCiAgICA8JSBpZihtYWluQ2xhc3MoKT09Yyl7JT4NCiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5fX2NvbmZpZyh0aGlzLl9fY29uZmlnKCdvYXV0aC5yZWRpcmVjdC5zdGF0ZScsIG51bGwsIHt0b29sOiB0fSkpOw0KICAgICAgICBsZXQgY29kZSA9IHRoaXMuX19jb25maWcodGhpcy5fX2NvbmZpZygnb2F1dGgucmVkaXJlY3QuY29kZScsIG51bGwsIHt0b29sOiB0fSkpOw0KICAgICAgICBpZighc3RhdGUgfHwgIWNvZGUpIHJldHVybjsNCiAgICAgICAgc3RhdGUgPSBKU09OLnBhcnNlKHRoaXMuX2F0b2Ioc3RhdGUpKTsNCiAgICAgICAgaWYoc3RhdGUudG9vbCE9PXQubmFtZSkgcmV0dXJuOw0KDQogICAgICAgIDwlPWxvZygpJT4iR09UIENPREUgIiArIGNvZGUgKyAiIGZvciBub2RlICIgKyBzdGF0ZS5uY29kZSArICIgd2l0aCB0b29sICIgKyBzdGF0ZS50b29sKTsNCiAgICAgICAgaWYoITwlPW5zY29wZSU+Ll9ub2RlLnBhcmVudCgpIHx8ICE8JT1uc2NvcGUlPi5fbm9kZS5fcGFyZW50Ll9zYW1lRW50aXR5KDwlPW5zY29wZSU+Ll9ub2RlLnBhcmVudCgpKSl7DQogICAgICAgICAgICA8JT1sb2coKSU+J25ldyBwYXJlbnQnLCBzdGF0ZS5uY29kZSk7DQogICAgICAgICAgICA8JT1uc2NvcGUlPi5fbm9kZS5wYXJlbnQobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdOb2RlJywgdHJ1ZSklPigpLmNvZGUoc3RhdGUubmNvZGUpKTsNCiAgICAgICAgfQ0KICAgICAgICA8JT1uc2NvcGUlPi5fbm9kZS5hdXRoQ29kZShjb2RlLCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1Rvb2wnLCB0cnVlKSU+KCkubmFtZShzdGF0ZS50b29sKSk7DQogICAgICAgIHdpbmRvdy5jbG9zZSgpOw0KICAgIDwlIH1lbHNleyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoKSklPigpLjwlPW1OYW1lJT4odCk7DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2xvYWRUb29scyclPihiU3RvcmUpew0KICAgICAgICBpZig8JT1zY29wZSU+LlRvb2xzICYmIDwlPXNjb3BlJT4uVG9vbHMubGVuZ3RoKXsNCiAgICAgICAgICAgIDwlPWxvZygpJT5gVG9vbHMgYWxyZWFkeSBsb2FkZWRgKTsNCiAgICAgICAgICAgIHJldHVybiA8JT1zY29wZSU+LlRvb2xzOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICA8JT1sb2coKSU+YExvYWRpbmcgdG9vbHMuLi5gKTsNCiAgICAgICAgDQogICAgICAgIGxldCB0b29scyA9IFtdOw0KICAgICAgICB0b29scyA9IDwlPXNjb3BlJT4uX19Ub29scyB8fCB0b29sczsNCiAgICAgICAgZGVsZXRlIDwlPXNjb3BlJT4uX19Ub29sczsNCg0KICAgICAgICBsZXQgYXJUb29scyA9IDwlPV9GckVNRC5fdG9KUyhbLi4ubmV3IFNldChhckNsYXNzZXMubWFwKF9jID0+IF9jLlRvb2xzKS5mbGF0KCkpXSklPjsNCiAgICAgICAgbGV0IHRvb2xOYW1lcyA9IGFyVG9vbHMubWFwKHQgPT4gdC5uYW1lIHx8ICh0LnR5cGU/dC50eXBlLm5hbWU6dCkpOw0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZih0b29scy5sZW5ndGghPT10b29sTmFtZXMubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICAvLyBjYW5ub3QgdXNlIHJlcXVpcmUgeWV0LCBubyB0b29scyBwcm9wZXJseSBsb2FkZWQgdG8gdXNlIGEgbG9hZGVyIGZ1bmN0aW9uDQogICAgICAgICAgICAgICAgdG9vbHMgPSBhd2FpdCB0aGlzLl9nZXRTdG9yZWRTY3JpcHQoe05hbWU6ICdBUElTRVJWRVI8JT1tTmFtZSU+JywgQWN0aXZlOiB0cnVlLCBFbmFibGVkOiB0cnVlfSkgfHwgdG9vbHM7DQogICAgICAgICAgICB9DQoNCjwlIGlmKF9jTmFtZSgnVG9vbCcpKXslPg0KICAgICAgICAgICAgaWYoIXRvb2xzLmxlbmd0aCkgdG9vbHMgPSAoYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdUb29sJywgdHJ1ZSklPigpLlRISVModG9vbE5hbWVzLm1hcCh0ID0+IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVG9vbCcsIHRydWUpJT4oKS5uYW1lKHQpKSkuZmluZEFsbCgyKSkubWFwKHQgPT4gdC5fdG9KU09OKHtwYXJzZTogMX0pKSB8fCB0b29sczsNCjwlIH0lPg0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9d2FybigpJT5leCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGxldCBmaXhUb29scyA9IHRvb2xzID0+IHsNCiAgICAgICAgICAgIHRvb2xzLmZpbHRlcih0ID0+IHR5cGVvZih0KT09PSdvYmplY3QnICYmIHQpLmZvckVhY2godCA9PiB7DQogICAgICAgICAgICAgICAgPCVfZGVmKCd0LklkJywgJ3RoaXMuX3V1aWQoKScpJT4NCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QubmFtZScsICd0LnR5cGUubmFtZScpJT4NCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QuYWN0aXZlJywgdHJ1ZSklPg0KICAgICAgICAgICAgICAgIDwlX2RlZigndC5lbmFibGVkJywgdHJ1ZSklPg0KICAgICAgICAgICAgICAgIDwlX2RlZigndC50eXBlLmFjdGl2ZScsIHRydWUpJT4NCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QudHlwZS5lbmFibGVkJywgdHJ1ZSklPg0KDQogICAgICAgICAgICAgICAgPCVfZGVmKCd0LnRvb2xfQ29uZmlncycsICdbXScpJT47DQogICAgICAgICAgICAgICAgPCVfZGVmKCd0LnR5cGUudHlwZV9Db25maWdzJywgJ1tdJyklPjsNCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QudHlwZS50eXBlX01hcHBpbmdzJywgJ1tdJyklPjsNCiAgICAgICAgICAgICAgICA8JV9kZWYoJ3QudG9vbF9NYXBwaW5ncycsICdbXScpJT47DQogICAgDQogICAgICAgICAgICAgICAgW10uY29uY2F0KHQudG9vbF9Db25maWdzLCB0LnR5cGUudHlwZV9Db25maWdzLCB0LnR5cGUudHlwZV9NYXBwaW5ncywgdC50b29sX01hcHBpbmdzKS5mb3JFYWNoKGMgPT4gew0KICAgICAgICAgICAgICAgICAgICA8JV9kZWYoJ2MuYWN0aXZlJywgdHJ1ZSklPg0KICAgICAgICAgICAgICAgICAgICA8JV9kZWYoJ2MuZW5hYmxlZCcsIHRydWUpJT4NCiAgICAgICAgICAgICAgICAgICAgPCVfZGVmKCdjLklkJywgJ3RoaXMuX3V1aWQoKScpJT4NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0pOw0KICAgIA0KICAgICAgICAgICAgdG9vbHMuZmlsdGVyKHQgPT4gdHlwZW9mKHQpPT09J29iamVjdCcgJiYgdCkuZm9yRWFjaCh0ID0+IFsndG9vbF9Db25maWdzJywgJ3R5cGUudHlwZV9Db25maWdzJ10uZm9yRWFjaChzQ29uZmlnID0+IHsNCiAgICAgICAgICAgICAgICAgICAgRG90T2JqZWN0LnNldChzQ29uZmlnLCBEb3RPYmplY3QucGljayhzQ29uZmlnLCB0KS5maWx0ZXIoYyA9PiB0eXBlb2YoYy52YWx1ZSkhPT0ib2JqZWN0IikuY29uY2F0KERvdE9iamVjdC5waWNrKHNDb25maWcsIHQpLmZpbHRlcihjID0+IHR5cGVvZihjLnZhbHVlKT09PSJvYmplY3QiICYmIGMudmFsdWUpLm1hcChjID0+IE9iamVjdC5rZXlzKGMudmFsdWUpLm1hcChuY29kZSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgX2MgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYy5uYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjLnZhbHVlW25jb2RlXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgICAgICBpZihuY29kZSE9ImRlZmF1bHQiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy5ub2RlID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBuY29kZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSwgPCUvLyBvdGhlcndpc2UgaXQgc3RhcnRzIGdldHRpbmcgZXZlbnRzJT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIk5vZGVKUyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jOw0KICAgICAgICAgICAgICAgICAgICB9KS5mbGF0KCkpLmZsYXQoKSksIHQpOw0KICAgICAgICAgICAgICAgICAgICBEb3RPYmplY3QucGljayhzQ29uZmlnLCB0KS5mb3JFYWNoKGMgPT4gYy52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KGMudmFsdWUpKTsNCiAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfTsNCg0KDQogICAgICAgIGZpeFRvb2xzKHRvb2xzKTsNCiAgICAgICAgdG9vbHMgPSB0b29scy5maWx0ZXIodCA9PiB0LmFjdGl2ZSk7DQogICAgICAgIHRvb2xzID0gdG9vbHMuZmlsdGVyKHQgPT4gdG9vbE5hbWVzLmZpbmQoX3QgPT4gKHR5cGVvZihfdCk9PT0nc3RyaW5nJz9fdDpfdC5uYW1lKT09dC5uYW1lKSk7DQoNCiAgICAgICAgPCU9bG9nKCklPmBUb29scyBhcmUgJHt0b29scy5sZW5ndGh9YCk7DQoNCiAgICAgICAgPCU9c2NvcGUlPi5Ub29scyA9IHRvb2xzOw0KDQogICAgICAgIDwlPXNjb3BlJT4uVG9vbHMuZmlsdGVyKHQgPT4gIXQuYXhpb3MgJiYgPCU9SlNPTi5zdHJpbmdpZnkoX3Jlc3RUb29scyklPi5pbmRleE9mKHQudHlwZS5uYW1lKT49MCkuZm9yRWFjaCh0ID0+IHsNCiAgICAgICAgICAgIHQuYXhpb3MgPSB0eXBlb2YoYXhpb3MuY3JlYXRlKT09PSdmdW5jdGlvbic/YXhpb3MuY3JlYXRlKCk6YXhpb3M7DQogICAgICAgICAgICB0LmF4aW9zLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShyZXF1ZXN0ID0+IHRoaXMuX3JlcXVlc3RJbnRlcmNlcHRvcihyZXF1ZXN0LCB0KSwgZXJyb3IgPT4ge30pOw0KICAgICAgICAgICAgdC5heGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHJlc3BvbnNlID0+IHJlc3BvbnNlLCBlcnJvciA9PiB0aGlzLl9yZXNwb25zZUludGVyY2VwdG9yKGVycm9yLCB0KSk7DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICAgICAgLy8gY29ubmVjdCB0byB0aGUgbG9hZGVkIHRvb2xzISEhDQogICAgICAgIGxldCB0b29sID0gdGhpcy5Ub29sOw0KICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHQgb2YgPCU9c2NvcGUlPi5Ub29scyl7DQo8JSBzci5ncm91cEJ5KGFyQ2xhc3NlcywgJ0VudGl0eU1vZHVsZScpLmZvckVhY2goZW0gPT4ge2VtLnZhbHVlcyA9IGVtLnZhbHVlcy5zb3J0KChhLCBiKSA9PiBiLlJhbmsgLSBhLlJhbmspOyAlPg0KICAgICAgICAgICAgYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVtLnZhbHVlc1tlbS52YWx1ZXMubGVuZ3RoLTFdLCB0cnVlKSU+KHVuZGVmaW5lZCwgdCkuX3N0b3JlRW50aXR5Q2xhc3MoKTsNCjwlIH0pJT4NCiAgICAgICAgfQ0KICAgICAgICB0aGlzLlRvb2wgPSB0b29sOw0KICAgICAgICANCiAgICAgICAgYXJUb29scyA9IGFyVG9vbHMuZmlsdGVyKF90ID0+ICF0b29scy5maW5kKHQgPT4gKHR5cGVvZihfdCk9PT0nc3RyaW5nJz9fdDpfdC5uYW1lKT09dC5uYW1lKSk7DQogICAgICAgIGZpeFRvb2xzKGFyVG9vbHMpOw0KDQo8JSBpZihfY05hbWUoJ1Rvb2wnKSl7JT4NCiAgICAgICAgPCU9c2NvcGUlPi5vVG9vbHMgPSA8JT1zY29wZSU+LlRvb2xzLmNvbmNhdChhclRvb2xzKS5maWx0ZXIodCA9PiB0LmFjdGl2ZSkubWFwKHQgPT4gew0KICAgICAgICAgICAgdC50b29sX01hcHBpbmdzLmZvckVhY2gobSA9PiBkZWxldGUgbS50b29sKTsNCiAgICAgICAgICAgIHQudHlwZS50eXBlX01hcHBpbmdzLmZvckVhY2gobSA9PiBkZWxldGUgbS50eXBlKTsNCiAgICANCiAgICAgICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1Rvb2wnLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudCh0KTsNCiAgICAgICAgfSk7DQogICAgICAgIGlmKGJTdG9yZSl7DQogICAgICAgICAgICA8JT1sb2coKSU+YFNhdmluZyB0b29scy4uLmApOw0KICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCB0IG9mIDwlPXNjb3BlJT4ub1Rvb2xzKXsNCiAgICAgICAgICAgICAgICBhd2FpdCB0LnN0b3JlKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCjwlIH0lPg0KDQogICAgICAgIDwlPWxvZygpJT5gRXhpdGluZ2ApOw0KICAgICAgICByZXR1cm4gdG9vbHM7DQogICAgfQ0KICAgIA0KPCUgfSAvLyBtYWluQ2xhc3MgJT4NCg0KCTwlPW1OYW1lPSdfcGFyYW1ldHJpemUnJT4oc3RyLCBmdW4sIG9wdGlvbnM9e30sIHByZWZpeD0ne3snLCBwb3N0Zml4PSd9fScpIHsNCjwlIGlmKG1haW5DbGFzcygpPT1jKXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZih0eXBlb2Yoc3RyKSE9PSdzdHJpbmcnKSByZXR1cm4gc3RyOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgcmV4ID0gYCR7cHJlZml4fShbXiR7cG9zdGZpeH1dKykke3Bvc3RmaXh9YDsNCiAgICAgICAgICAgIChzdHIubWF0Y2gobmV3IFJlZ0V4cChyZXgsICJnIikpIHx8IFtdKS5mb3JFYWNoKG0gPT4gc3RyID0gc3RyLnJlcGxhY2UobSwgbSA9PiBmdW4obS5yZXBsYWNlKHByZWZpeCwgJycpLnJlcGxhY2UocG9zdGZpeCwgJycpKSkpOw0KDQogICAgICAgICAgICByZXR1cm4gc3RyOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQo8JSB9ZWxzZXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUobWFpbkNsYXNzKCkpJT4oKS48JT1tTmFtZSU+KHN0ciwgZnVuLCBvcHRpb25zLCBwcmVmaXgsIHBvc3RmaXgpOw0KPCUgfSU+DQoJfQ0KDQogICAgPCU9bU5hbWU9J19fc3luY19vbiclPihkKXsNCiAgICAgICAgdGhpcy5fPCU9bU5hbWUlPiA9IHRoaXMuXzwlPW1OYW1lJT4gfHwge307DQogICAgDQogICAgICAgIGlmKGQpeyAvLyBzZXQgdGhlIHZhbHVlDQogICAgICAgICAgICB0aGlzLl88JT1tTmFtZSU+W3RoaXMuVG9vbC5uYW1lXSA9IGQ7DQoNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9faW1wb3J0KHRoaXMsIHsNCiAgICAgICAgICAgICAgICBDeWNsaWM6IHRydWUsDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlKSA9PiB0aGlzLjwlPW5OYW1lKGVhKSU+KCk/dGhpcy48JT1uTmFtZShlYSklPigpLjwlPW1OYW1lJT4oZCk6dW5kZWZpbmVkLA0KPCUgfSklPg0KDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgICAgICAvLzwlPXRhTmFtZSU+OiB0aGlzLjwlPXRhTmFtZSU+KCkuZm9yRWFjaCh0ID0+IHQuPCU9bU5hbWUlPihkKSksDQo8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIsIGQpOw0KDQoNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYodGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ICYmIHRoaXMuPCU9bk5hbWUoZWEpJT4oKSkgdGhpcy48JT1uTmFtZShlYSklPigpLjwlPW1OYW1lJT4oZCk7DQo8JSB9KSU+DQoNCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgLy8gdGhpcy48JT10YU5hbWUlPigpLmZvckVhY2godCA9PiB0LjwlPW1OYW1lJT4oZCkpOw0KPCUgfSklPg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdGhpcy5fPCU9bU5hbWUlPlt0aGlzLlRvb2wubmFtZV07IC8vIGdldCB0aGUgdmFsdWUNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19jbG9uZSclPihiVHlwZUF0dHJpYnV0ZXMpew0KICAgICAgICA8JT13YXJuKCklPiJERVBSRUNBVEVEOiB1c2UgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGMuTmFtZSwgdHJ1ZSklPigpLl9mcm9tRG9jdW1lbnQodGhpcy5fdG9KU09OKCkpIik7DQoNCiAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgIA0KICAgICAgICB0cnl7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fX2V4cG9ydChuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoYy5OYW1lLCB0cnVlKSU+KCksIHsNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouPCU9bk5hbWUoZWEpJT4odjwlaWYoZWEuRW50aXR5VHlwZSl7JT4uPCU9bU5hbWUlPihiVHlwZUF0dHJpYnV0ZXMpPCV9JT4pLA0KPCUgfSk7JT4NCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IGJUeXBlQXR0cmlidXRlcz9vYmouPCU9dGFOYW1lJT4odi5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPihiVHlwZUF0dHJpYnV0ZXMpKSk6bnVsbCwNCjwlIH0pOyU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J19tYXAnJT4oY29kZSwgYlJldmVyc2UsIGNvbnRleHQsIG9iakZyb20sIG9ialRvLCBlYUNvZGUsIGNsYXNzTmFtZSwgdG9vbCwgY29kZVR5cGUsIF90aGlzLCBtb2R1bGVOYW1lKXsNCiAgICAgICAgX3RoaXMgPSBfdGhpcyB8fCB0aGlzOw0KICAgICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAnRW50aXR5QXR0cmlidXRlJzsNCiAgICAgICAgdG9vbCA9IHRvb2wgfHwgX3RoaXMuVG9vbDsNCiAgICAgICAgY29kZVR5cGUgPSBjb2RlVHlwZSB8fCA8JT1fZWFUeXBlcygpJT5bY29kZV07DQogICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAiPCU9bk5hbWUoYyklPiI7DQogICAgICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lIHx8ICI8JT1jLkVudGl0eU1vZHVsZT9jLkVudGl0eU1vZHVsZS5OYW1lOicnJT4iOw0KDQo8JSBpZihtYWluQ2xhc3MoKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoKSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4oY29kZSwgYlJldmVyc2UsIGNvbnRleHQsIG9iakZyb20sIG9ialRvLCBlYUNvZGUsIGNsYXNzTmFtZSwgdG9vbCwgY29kZVR5cGUsIF90aGlzLCBtb2R1bGVOYW1lKTsNCjwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCBfbG9nID0gYCR7bW9kdWxlTmFtZX0uJHtjbGFzc05hbWV9LiR7Y29udGV4dH0ke2JSZXZlcnNlPyc8PSc6Jz0+J30ke2NvZGV9YDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy9pZihBcnJheS5pc0FycmF5KG9iakZyb20pKSByZXR1cm4gb2JqRnJvbS5tYXAobyA9PiB0aGlzLjwlPW1OYW1lJT4oY29kZSwgYlJldmVyc2UsIGNvbnRleHQsIG8sIG9ialRvLCBlYUNvZGUsIGNsYXNzTmFtZSwgdG9vbCwgY29kZVR5cGUsIF90aGlzLCBtb2R1bGVOYW1lKSk7DQogICAgICAgIA0KICAgICAgICAgICAgPCUgLyogdGVtcHRlZCB0byB1c2UganNvbmF0YSBpbiBRdWVyeSBmaWVsZHMsIGRvZXMgbm90IHdvcmsgYmVjYXVzZSBqc29uYXRhLmV2YWx1YXRlIHJldHVybiBhIHByb21pc2UhISEgKi8lPg0KICAgICAgICAgICAgbGV0IHNGaWVsZCA9IGJSZXZlcnNlPyd0YXJnZXQnOidzb3VyY2UnOw0KICAgICAgICAgICAgbGV0IHNTY3JpcHQgPSAoYlJldmVyc2U/J291dCc6J2luJykrJ1NjcmlwdCc7DQogICAgICAgICAgICBsZXQgc0NvbmQgPSAoYlJldmVyc2U/J291dCc6J2luJykrJ0NvbmRpdGlvbic7DQogICAgICAgICAgICBsZXQgc1BhdGggPSAoYlJldmVyc2U/J291dCc6J2luJykrJ1BhdGgnOw0KICAgICAgICAgICAgbGV0IHRGaWVsZCA9IGJSZXZlcnNlPydzb3VyY2UnOid0YXJnZXQnOw0KICAgICAgICAgICAgbGV0IHRTY3JpcHQgPSAoYlJldmVyc2U/J2luJzonb3V0JykrJ1NjcmlwdCc7DQogICAgICAgICAgICBsZXQgdFBhdGggPSAoYlJldmVyc2U/J2luJzonb3V0JykrJ1BhdGgnOw0KICAgICAgICAgICAgbGV0IHRDb25kID0gKGJSZXZlcnNlPydpbic6J291dCcpKydDb25kaXRpb24nOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgbG9nID0gKC4uLnMpID0+IDwlPWxvZygpJT5jbGFzc05hbWUsIF9sb2csIC4uLnMpOw0KICAgICAgICAgICAgbGV0IHdhcm4gPSAoLi4ucykgPT4gPCU9d2FybigpJT5jbGFzc05hbWUsIF9sb2csIC4uLnMpOw0KICAgICAgICAgICAgbGV0IGVycm9yID0gKC4uLnMpID0+IDwlPWVycm9yKCklPmNsYXNzTmFtZSwgX2xvZywgLi4ucyk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBvcHRpb25zID0ge19jbGFzczogY2xhc3NOYW1lLCBfdGhpczogX3RoaXMsIHRvb2w6IHRvb2x9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgX3NjcmlwdCA9IChzLCBtKSA9PiB7DQogICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ydW5TY3JpcHQoYChvU2NvcGUsIG0sIG9iakZyb20sIG9ialRvLCBjb2RlLCBfdGhpcywgY2xhc3NOYW1lLCB0b29sLCBjb2RlVHlwZSwgZWFDb2RlLCBiUmV2ZXJzZSwgY29udGV4dCwgbG9nLCB3YXJuLCBlcnJvcikgPT4gJHtzfWApKDwlPXNjb3BlJT4sIG0sIG9iakZyb20sIG9ialRvLCBjb2RlLCBfdGhpcywgY2xhc3NOYW1lLCB0b29sLCBjb2RlVHlwZSwgZWFDb2RlLCBiUmV2ZXJzZSwgY29udGV4dCwgbG9nLCB3YXJuLCBlcnJvcik7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgd2FybihtLnRlc3RzLmxvZywgZXgpOyANCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgX21hdGNoID0gKHMsIHIpID0+IHsNCiAgICAgICAgICAgICAgICBpZih0eXBlb2Yocyk9PT0ndW5kZWZpbmVkJyB8fCBzPT09bnVsbCB8fCB0eXBlb2Yocy5tYXRjaCkhPT0nZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgbGV0IGFuc3dlciA9IHMubWF0Y2gobmV3IFJlZ0V4cChyLCAnZycpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gcz09ciB8fCAoKGFuc3dlciAmJiBhbnN3ZXIubGVuZ3RoKT90cnVlOmZhbHNlKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBpdGVtcyA9PiBpdGVtcy5tYXAoaXRlbSA9PiBBcnJheS5pc0FycmF5KGl0ZW0pID8gY2xvbmUoaXRlbSkgOiBpdGVtKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IG1zID0gY2xvbmUoIFsuLi4odG9vbC50b29sX01hcHBpbmdzIHx8IFtdKS5jb25jYXQodG9vbC50eXBlLnR5cGVfTWFwcGluZ3MgfHwgW10pXSApOyAvLyBkbyBub3QgdGFtcGVyIHdpdGggdGhlIG1hcHBpbmdzLCBkZWVwIGNsb25lDQogICAgICAgICAgICBtcy5mb3JFYWNoKG0gPT4gT2JqZWN0LmtleXMobSkuZm9yRWFjaChrID0+IG1ba10gPSB0aGlzLl9wYXJhbWV0cml6ZShtW2tdLCBwID0+IHRoaXMuX19jb25maWcocCkgfHwgRG90T2JqZWN0LnBpY2socCwgb3B0aW9ucyksIG9wdGlvbnMpKSk7DQogICAgICAgICAgICBtcy5mb3JFYWNoKG0gPT4gbS50ZXN0cyA9IHsNCiAgICAgICAgICAgICAgICBhY3RpdmU6IDwldmFsdWVPZigibS5hY3RpdmUiKSU+LCAvL19zY3JpcHQobS5hY3RpdmUsIG0pLA0KICAgICAgICAgICAgICAgIGVuYWJsZWQ6IDwldmFsdWVPZigibS5lbmFibGVkIiklPiwgLy9fc2NyaXB0KG0uZW5hYmxlZCwgbSksDQogICAgICAgICAgICAgICAgY29udGV4dDogX21hdGNoKGNvbnRleHQsIG0uY29udGV4dCksDQogICAgICAgICAgICAgICAgY2xhc3M6IF9tYXRjaChjbGFzc05hbWUsIG0uY2xhc3NOYW1lKSwNCiAgICAgICAgICAgICAgICBtb2R1bGU6IF9tYXRjaChtb2R1bGVOYW1lLCBtLm1vZHVsZU5hbWUpLA0KICAgICAgICAgICAgICAgIHNGaWVsZDogdHlwZW9mKGNvZGUpPT09J3VuZGVmaW5lZCcgfHwgX21hdGNoKGNvZGUsIG1bc0ZpZWxkXSksDQogICAgICAgICAgICAgICAgc1NjcmlwdDogdHlwZW9mKGNvZGUpPT09J3VuZGVmaW5lZCcgfHwgdHlwZW9mKG1bc1NjcmlwdF0pIT09J3VuZGVmaW5lZCcsDQogICAgICAgICAgICAgICAgc1BhdGg6IHR5cGVvZihtW3NQYXRoXSkhPT0ndW5kZWZpbmVkJywNCiAgICAgICAgICAgICAgICB0YXJnZXQ6IHR5cGVvZihtW3RGaWVsZF0gfHwgbVt0U2NyaXB0XSB8fCBtW3RQYXRoXSkhPT0ndW5kZWZpbmVkJywNCiAgICAgICAgICAgICAgICB0ZXh0OiBgJHtjb2RlfToke3NGaWVsZH09PT4ke3RGaWVsZH1gLA0KICAgICAgICAgICAgICAgIGxvZzogYCR7X2xvZ31bJHttLmNvbnRleHR9LyR7bS5jbGFzc05hbWV9XWAsDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIG1zID0gbXMuZmlsdGVyKG0gPT4gbS50ZXN0cy5hY3RpdmUgJiYgbS50ZXN0cy5lbmFibGVkICYmIG0udGVzdHMuY29udGV4dCAmJiBtLnRlc3RzLmNsYXNzICYmIG0udGVzdHMubW9kdWxlICYmIChtLnRlc3RzLnNGaWVsZCB8fCBtLnRlc3RzLnNTY3JpcHQgfHwgbS50ZXN0cy5zUGF0aCkgJiYgbS50ZXN0cy50YXJnZXQpLnNvcnQoKGEsIGIpID0+IGEub3JkZXIgLSBiLm9yZGVyKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPCUgLyogd2UgbWlnaHQgbm90IHdvcmsgd2l0aCBhbGwgbXMgZW50cmllcy4gbG9nIGhlcmUgaXMgb25seSBhIHByZXZpZXcgb2Ygd2hhdCBtaWdodCB3b3JrISAqLyAlPg0KICAgICAgICAgICAgLy9pZihtcy5maWx0ZXIobSA9PiBtLmRlYnVnKS5sZW5ndGgpIGxvZyh0aGlzLl9iZWF1dGlmeShtcy5maWx0ZXIobSA9PiBtLmRlYnVnKSwgJ2phdmFzY3JpcHQnKSk7DQoNCiAgICAgICAgICAgIG1zLmZvckVhY2gobSA9PiB7DQogICAgICAgICAgICAgICAgaWYobVt0U2NyaXB0XSl7DQogICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZihtW3RDb25kXSk9PT0ndW5kZWZpbmVkJyB8fCA8JXZhbHVlT2YoIm1bdENvbmRdIiwgJ190aGlzJyklPil7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihtLmRlYnVnKSBsb2cobS50ZXN0cy5sb2cgKyAnOiAnICsgdFNjcmlwdCwgJzwlPW1OYW1lJT4nLCBtW3RTY3JpcHRdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSA8JXZhbHVlT2YoIm1bdFNjcmlwdF0iLCAnX3RoaXMnKSU+DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYobVtzUGF0aF0gJiYgdHlwZW9mKGptZXNwYXRoKSE9PSd1bmRlZmluZWQnKSBjb2RlID0gam1lc3BhdGguc2VhcmNoKG9iakZyb20sIG1bc1BhdGhdKTsNCiAgICAgICAgICAgICAgICBpZihtW3NQYXRoXSAmJiB0eXBlb2YoanNvbnBhdGgpIT09J3VuZGVmaW5lZCcpIGNvZGUgPSBqc29ucGF0aC5xdWVyeShvYmpGcm9tLCBtW3NQYXRoXSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYobVt0RmllbGRdKXsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGRQYXRoID0gJyc7DQogICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZihtW3RGaWVsZF0pPT09J2Z1bmN0aW9uJyl7DQogICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoY29kZSkhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZFBhdGggPSBgJHtjb2RlfS5yZXBsYWNlYDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gY29kZS5yZXBsYWNlKG5ldyBSZWdFeHAobVtzRmllbGRdLCAnZycpLCBtW3RGaWVsZF0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb2RlID0gRG90T2JqZWN0LmNvcHkobVtzRmllbGRdLCBtW3RGaWVsZF0sIG9iakZyb20sIG9ialRvKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoY29kZSkhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoX21hdGNoKGNvZGUsIG1bc0ZpZWxkXSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkUGF0aCA9IGAke2NvZGV9LmNvZGVgOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gbVt0RmllbGRdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRQYXRoID0gYGRvdGNvcHlgOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBEb3RPYmplY3QuY29weShtW3NGaWVsZF0sIG1bdEZpZWxkXSwgb2JqRnJvbSwgb2JqVG8pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZihtLmRlYnVnICYmIGRQYXRoKSBsb2coYCR7bS50ZXN0cy5sb2d9LyR7ZFBhdGh9W2NvZGU9JHtjb2RlfV06ICR7bVtzRmllbGRdfSA9PiAke21bdEZpZWxkXX1gKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYobVt0UGF0aF0gJiYgdHlwZW9mKGptZXNwYXRoKSE9PSd1bmRlZmluZWQnICYmICghbVt0Q29uZF0gfHwgam1lc3BhdGguc2VhcmNoKG9ialRvLCBtW3RDb25kXSkpKSBvYmpUb1ttW3RGaWVsZF1dID0gam1lc3BhdGguc2VhcmNoKG9ialRvLCBtW3RQYXRoXSk7DQogICAgICAgICAgICAgICAgaWYobVt0UGF0aF0gJiYgdHlwZW9mKGpzb25wYXRoKSE9PSd1bmRlZmluZWQnICYmICghbVt0Q29uZF0gfHwganNvbnBhdGgucXVlcnkob2JqVG8sIG1bdENvbmRdKSkpIG9ialRvW21bdEZpZWxkXV0gPSBqc29ucGF0aC5xdWVyeShvYmpUbywgbVt0UGF0aF0pOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIG1zLmZvckVhY2gobSA9PiBkZWxldGUgbS50ZXN0cyk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKHR5cGVvZihjb2RlKT09PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICByZXR1cm4gb2JqVG87DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vaWYoY29udGV4dD09J0VudGl0eUNsYXNzJyAmJiBjbGFzc05hbWU9PSdVc2VyJykgPCU9d2FybigpJT4iR09UIEhFUkUiLCBjb2RlLCBjb250ZXh0LCBvcHRpb25zKTsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0cml6ZShjb2RlLCBwID0+IHRoaXMuX19jb25maWcocCkgfHwgRG90T2JqZWN0LnBpY2socCwgb3B0aW9ucyksIG9wdGlvbnMpOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQo8JSB9JT4NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19uQ29kZSclPihjb2RlLCBvQ29kZSl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCBjb250ZXh0ID0gJ0VudGl0eUF0dHJpYnV0ZSc7DQogICAgICAgICAgICBpZighY29kZSAmJiAhb0NvZGUpew0KICAgICAgICAgICAgICAgIGNvbnRleHQgPSAnRW50aXR5Q2xhc3MnOw0KICAgICAgICAgICAgICAgIGNvZGUgPSAiPCU9bkNvZGUoYyklPiI7DQogICAgICAgICAgICAgICAgb0NvZGUgPSA8JT1fRnJFTUQuX3RvSlMoYy5Db2RlKSU+Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBsZXQgcmV0ID0gY29kZTsNCiAgICAgICAgICAgIGlmKG9Db2RlICYmIHR5cGVvZihvQ29kZSk9PT0nb2JqZWN0Jyl7DQogICAgICAgICAgICAgICAgcmV0ID0gb0NvZGVbdGhpcy5Ub29sLm5hbWVdIHx8IG9Db2RlW3RoaXMuVG9vbC50eXBlLm5hbWVdIHx8IHJldDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcChyZXQsIGZhbHNlLCBjb250ZXh0KSB8fCByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT13YXJuKCklPmV4KTsNCiAgICAgICAgICAgIHJldHVybiBjb2RlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfX2NvbmZpZyclPihuLCBudWxsVmFsdWUsIG9wdGlvbnMpew0KICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsNCiAgICAgICAgb3B0aW9ucy5fdGhpcyA9IG9wdGlvbnMuX3RoaXMgfHwgdGhpczsNCiAgICAgICAgb3B0aW9ucy5fY2xhc3MgPSBvcHRpb25zLl9jbGFzcyB8fCAnPCU9bk5hbWUoYyklPic7DQogICAgICAgIG9wdGlvbnMudG9vbCA9IG9wdGlvbnMudG9vbCB8fCBvcHRpb25zLl90aGlzLlRvb2wgfHwgdGhpcy5Ub29sOw0KICAgICAgICBpZih0eXBlb2Yob3B0aW9ucy50b29sKT09PSdvYmplY3QnICYmIG9wdGlvbnMudG9vbC5jb25zdHJ1Y3Rvci5uYW1lPT0nVG9vbCcpIG9wdGlvbnMudG9vbCA9ICg8JT1zY29wZSU+LlRvb2xzIHx8IFtdKS5maW5kKHQgPT4gdC5uYW1lPT1vcHRpb25zLnRvb2wubmFtZSgpKTsNCiAgICAgICAgDQogICAgICAgIGlmKHR5cGVvZihvcHRpb25zLnRvb2wpPT09J3N0cmluZycpIG9wdGlvbnMudG9vbCA9ICg8JT1zY29wZSU+LlRvb2xzIHx8IFtdKS5maW5kKHQgPT4gdC5uYW1lPT1vcHRpb25zLnRvb2wgfHwgdC50eXBlLm5hbWU9PW9wdGlvbnMudG9vbCk7DQoNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihuLCBudWxsVmFsdWUsIE9iamVjdC5hc3NpZ24oe190aGlzOiB0aGlzLCB0b29sOiB0aGlzLlRvb2wsIF9jbGFzczogJzwlPW5OYW1lKGMpJT4nfSwgb3B0aW9ucyB8fCB7fSkpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYodHlwZW9mKG9wdGlvbnMudG9vbCkhPT0nb2JqZWN0JykgPCU9d2FybigpJT5vcHRpb25zLnRvb2wpOw0KICAgICAgICAgICAgaWYoIW9wdGlvbnMudG9vbCkgPCU9d2FybigpJT4idG9vbCBub3QgZGVmaW5lZCIsIG9wdGlvbnMuX3RoaXMuVG9vbCwgPCU9c2NvcGUlPi5Ub29scywgb3B0aW9ucy5fdGhpcy5Ub29scyk7DQogICAgICAgICAgICAvL29wdGlvbnMubm9DYWNoZSA9IHRydWU7DQogICAgICAgICAgICBpZighb3B0aW9ucy5ub0NhY2hlKSA8JT1zY29wZSU+LjwlPW1OYW1lJT4gPSA8JT1zY29wZSU+LjwlPW1OYW1lJT4gfHwge307DQoNCiAgICAgICAgICAgIGxldCBuSUQgPSA8JT1uc2NvcGUlPi5fbm9kZT88JT1uc2NvcGUlPi5fbm9kZS5jb2RlKCk6J2RlZmF1bHQnOw0KDQogICAgICAgICAgICBpZih0eXBlb2Yob3B0aW9uc1tuXSkhPT0ndW5kZWZpbmVkJykgbnVsbFZhbHVlID0gbnVsbFZhbHVlIHx8IG9wdGlvbnNbbl07DQogICAgICAgICAgICBsZXQgcmV0ID0gbnVsbFZhbHVlOw0KICAgICAgICAgICAgaWYodHlwZW9mKHJldCk9PT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgcmV0ID0gbnVsbDsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAvLyB1c2Ugc2NvcGUgY2FjaGUgKGltcHJvdmVzIHBlcmZvcm1hbmNlPz8/KQ0KICAgICAgICAgICAgICAgIGlmKCFvcHRpb25zLm5vQ2FjaGUgJiYgT2JqZWN0Lmhhc093big8JT1zY29wZSU+LjwlPW1OYW1lJT4sIGAke29wdGlvbnMuX2NsYXNzfS4ke29wdGlvbnMudG9vbC5uYW1lfS4ke25JRH0uJHtufWApKSByZXR1cm4gPCU9c2NvcGUlPi48JT1tTmFtZSU+W2Ake29wdGlvbnMuX2NsYXNzfS4ke29wdGlvbnMudG9vbC5uYW1lfS4ke25JRH0uJHtufWBdOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyB0b29sX0NvbmZpZ3MsIHR5cGVfQ29uZmlnczogYWxsb3cgY2xhc3MtbGV2ZWwgYW5kIG5vZGUtbGV2ZWwgLSBkb25lDQogICAgICAgICAgICBsZXQgdGNvbmYgPSBbXS5jb25jYXQob3B0aW9ucy50b29sLnR5cGUudHlwZV9Db25maWdzIHx8IFtdLCBvcHRpb25zLnRvb2wudG9vbF9Db25maWdzIHx8IFtdKS5maWx0ZXIoYyA9PiBjICYmIGMubmFtZT09biAmJiAoIWMubm9kZSB8fCBjLm5vZGUuY29kZT09bklEKSkuc29ydChjID0+IGMubm9kZT8oYy5ub2RlLmNvZGU9PSdkZWZhdWx0Jz8wOi0xKToxKTsNCiAgICAgICAgICAgIGlmKHRjb25mLmxlbmd0aCl7DQogICAgICAgICAgICAgICAgaWYodGNvbmZbMF0uc2NyaXB0KXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGNvbmZbMF0uc2NyaXB0Ow0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgbGV0IF9zYyA9IHRoaXMuX3BhcmFtZXRyaXplKHRjb25mWzBdLnNjcmlwdCwgcCA9PiB0aGlzLjwlPW1OYW1lJT4ocCwgbnVsbCwgb3B0aW9ucykgfHwgRG90T2JqZWN0LnBpY2socCwgb3B0aW9ucyksIG9wdGlvbnMpOw0KICAgICAgICAgICAgICAgICAgICByZXQgPSA8JXZhbHVlT2YoIl9zYyIpJT47DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIHJldCA9IHRjb25mWzBdLnZhbHVlOw0KICAgICAgICAgICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgICAgICAgICBbMSwyLDNdLmZvckVhY2goYSA9PiByZXQgPSBKU09OLnBhcnNlKHJldCkpOw0KICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goamV4KXt9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYob3B0aW9ucy5uZXdWYWx1ZSl7DQogICAgICAgICAgICAgICAgbGV0IHRjID0gdGNvbmYubGVuZ3RoP3Rjb25mWzBdOnt9Ow0KICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMubm9kZSkgdGMubm9kZSA9IHtjb2RlOiBvcHRpb25zLm5vZGUuY29kZSgpfTsNCiAgICAgICAgICAgICAgICB0Yy52YWx1ZSA9IG9wdGlvbnMubmV3VmFsdWU7DQogICAgICAgICAgICAgICAgdGMubmFtZSA9IG47DQogICAgICAgICAgICAgICAgaWYoIXRjb25mLmxlbmd0aCl7DQogICAgICAgICAgICAgICAgICAgIChvcHRpb25zLnRvb2wudG9vbF9Db25maWdzIHx8IG9wdGlvbnMudG9vbC50eXBlLnR5cGVfQ29uZmlncykucHVzaCh0Yyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMubmV3VmFsdWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIG1vZGVsIENvbmZpZzogQ29uZmlnIGlzIGNsYXNzIGxldmVsLCBub2RlIG5vdCBwb3NzaWJsZSAtIHBlbmRpbmcNCiAgICAgICAgICAgIGxldCBtY29uZiA9IG9wdGlvbnMuX3RoaXMuQ29uZmlnP29wdGlvbnMuX3RoaXMuQ29uZmlnW25dOnVuZGVmaW5lZDsNCiAgICAgICAgICAgIG1jb25mID0gdGhpcy5fcGFyYW1ldHJpemUobWNvbmYsIHAgPT4gdGhpcy48JT1tTmFtZSU+KHAsIG51bGwsIG9wdGlvbnMpIHx8IERvdE9iamVjdC5waWNrKHAsIG9wdGlvbnMpLCBvcHRpb25zKTsNCiAgICAgICAgICAgIG1jb25mID0gPCV2YWx1ZU9mKCJtY29uZiIpJT47DQogICAgICAgICAgICBpZih0eXBlb2YobWNvbmYpIT09InVuZGVmaW5lZCIpIHJldCA9IG1jb25mOw0KDQogICAgICAgICAgICAvLyBjb21tYW5kIGxpbmU6IGFsbG93IGNsYXNzLWxldmVsIGFuZCBub2RlLWxldmVsIC0gcGVuZGluZw0KICAgICAgICAgICAgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyAmJiBnbG9iYWwubWluaW1pc3Qpew0KICAgICAgICAgICAgICAgIHJldCA9IERvdE9iamVjdC5waWNrKG4sIGdsb2JhbC5taW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpKSB8fCByZXQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vIHJlcXVlc3Q6IGFsbG93IGNsYXNzLWxldmVsIGFuZCBub2RlLWxldmVsIC0gcGVuZGluZw0KICAgICAgICAgICAgaWYodGhpcy4kX1JFUVVFU1QpIHJldCA9IHRoaXMuJF9SRVFVRVNUKG4pIHx8IHJldDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8gY29uZmlnIHJlcGxhY2VtZW50DQogICAgICAgICAgICByZXQgPSB0aGlzLl9wYXJhbWV0cml6ZShyZXQsIHAgPT4gdGhpcy48JT1tTmFtZSU+KHAsIG51bGwsIG9wdGlvbnMpIHx8IERvdE9iamVjdC5waWNrKHAsIG9wdGlvbnMpLCBvcHRpb25zKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIW9wdGlvbnMubm9DYWNoZSkgPCU9c2NvcGUlPi48JT1tTmFtZSU+W2Ake29wdGlvbnMuX2NsYXNzfS4ke29wdGlvbnMudG9vbC5uYW1lfS4ke25JRH0uJHtufWBdID0gcmV0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXQgPSA8JXZhbHVlT2YoInJldCIpJT47DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT13YXJuKCklPm4sIG51bGxWYWx1ZSwgb3B0aW9ucy5fY2xhc3MsIG9wdGlvbnMudG9vbC50b29sX0NvbmZpZ3MsIGV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQogICAgfQ0KDQoNCjwlIGMuRW50aXR5TWV0aG9kcy5mb3JFYWNoKG0gPT4geyU+DQogICAgLyoqDQogICAgICogU3VtbWFyeS4gPCU9bS5OYW1lJT4uDQogICAgICoNCiAgICAgKiBEZXNjcmlwdGlvbi4gPCU9bS5SZW1hcmslPi4NCiAgICAgKg0KICAgICAqIEBzaW5jZSAgICAgIHgueC54DQogICAgICogQGRlcHJlY2F0ZWQgeC54LnggVXNlIG5ld19mdW5jdGlvbl9uYW1lKCkgaW5zdGVhZC4NCiAgICAgKiBAYWNjZXNzICAgICBwdWJsaWMNCiAgICAgKg0KICAgICAqIEBjbGFzcw0KICAgICAqIEBhdWdtZW50cyBwYXJlbnQNCiAgICAgKiBAbWl4ZXMgICAgbWl4aW4NCiAgICAgKg0KICAgICAqIEBhbGlhcyAgICByZWFsTmFtZQ0KICAgICAqIEBtZW1iZXJvZiBuYW1lc3BhY2UNCiAgICAgKg0KICAgICAqIEBzZWUgIEZ1bmN0aW9uL2NsYXNzIHJlbGllZCBvbg0KICAgICAqIEBsaW5rIFVSTA0KICAgICAqIEBnbG9iYWwNCiAgICAgKg0KICAgICAqIEBmaXJlcyAgIGV2ZW50TmFtZQ0KICAgICAqIEBmaXJlcyAgIGNsYXNzTmFtZSNldmVudE5hbWUNCiAgICAgKiBAbGlzdGVucyBldmVudDpldmVudE5hbWUNCiAgICAgKiBAbGlzdGVucyBjbGFzc05hbWV+ZXZlbnQ6ZXZlbnROYW1lDQogICAgICogQHBhcmFtIHt0eXBlfSAgIHZhciAgICAgICAgICAgRGVzY3JpcHRpb24uDQogICAgICogQHBhcmFtIHt0eXBlfSAgIFt2YXJdICAgICAgICAgRGVzY3JpcHRpb24gb2Ygb3B0aW9uYWwgdmFyaWFibGUuDQogICAgICogQHBhcmFtIHt0eXBlfSAgIFt2YXI9ZGVmYXVsdF0gRGVzY3JpcHRpb24gb2Ygb3B0aW9uYWwgdmFyaWFibGUgd2l0aCBkZWZhdWx0IHZhcmlhYmxlLg0KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RWYXIgICAgIERlc2NyaXB0aW9uLg0KICAgICAqIEBwYXJhbSB7dHlwZX0gICBvYmplY3RWYXIua2V5IERlc2NyaXB0aW9uIG9mIGEga2V5IGluIHRoZSBvYmplY3RWYXIgcGFyYW1ldGVyLg0KICAgICAqDQogICAgICogQHlpZWxkIHt0eXBlfSBZaWVsZGVkIHZhbHVlIGRlc2NyaXB0aW9uLg0KICAgICAqDQogICAgICogQHJldHVybiB7dHlwZX0gUmV0dXJuIHZhbHVlIGRlc2NyaXB0aW9uLg0KICAgICAqLw0KICAgIDwlIGlmKCFtLklzU3luYyl7JT5hc3luYyA8JX0lPjwlPW1OYW1lPW5Db2RlKG0pJT4oPCU9bS5NZXRob2RQYXJhbWV0ZXJzLm1hcChwID0+IG5Db2RlKHApKS5qb2luKCcsICcpJT4pew0KDQogICAgCWxldCBsb2cgPSAob2JqLCAuLi5tc2cpID0+IHRoaXMubG9nKCI8JT1uTmFtZShjKSU+Iiwgb2JqLCAiPCU9bkNvZGUobSklPiIsIG51bGwsIDAsIC4uLm1zZyk7DQogICAgCWxldCB3YXJuID0gKG9iaiwgLi4ubXNnKSA9PiB0aGlzLmxvZygiPCU9bk5hbWUoYyklPiIsIG9iaiwgIjwlPW5Db2RlKG0pJT4iLCBudWxsLCAxLCAuLi5tc2cpOw0KICAgIAlsZXQgZXJyb3IgPSAob2JqLCAuLi5tc2cpID0+IHRoaXMubG9nKCI8JT1uTmFtZShjKSU+Iiwgb2JqLCAiPCU9bkNvZGUobSklPiIsIG51bGwsIDIsIC4uLm1zZyk7DQogICAgCWxldCBvU2NvcGUgPSA8JT1hbGlhcygpJT47DQogICAgCWxldCBwU2NvcGUgPSA8JT1zY29wZSU+Ow0KICAgICAgICANCiAgICANCjwlIGlmKCFtLklzU3luYyl7JT4NCiAgICA8JSBpZighbS5SZXNwb25zZUF0dHJpYnV0ZSl7ICU+DQogICAgICAgIGxldCBhbnN3ZXIgPSBudWxsOw0KICAgIDwlIH1lbHNlIGlmKG0uUmVzcG9uc2VBdHRyaWJ1dGUuRW50aXR5VHlwZSl7ICU+DQogICAgICAgIGxldCBhbnN3ZXIgPSBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobS5SZXNwb25zZUF0dHJpYnV0ZS5FbnRpdHlUeXBlLCB0cnVlKSU+KCk7DQogICAgPCUgfWVsc2UgaWYobS5SZXNwb25zZUF0dHJpYnV0ZS5Jc0Jvb2wpeyAlPg0KICAgICAgICBsZXQgYW5zd2VyID0gZmFsc2U7DQogICAgPCUgfWVsc2UgaWYobS5Jc0FycmF5KXsgJT4NCiAgICAgICAgbGV0IGFuc3dlciA9IFtdOw0KICAgIDwlIH1lbHNleyAlPg0KICAgICAgICBsZXQgYW5zd2VyID0gbnVsbDsNCiAgICA8JSB9ICU+DQogICAgDQogICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgdGhpcy5fZXhlY3V0ZShudWxsLCA8JT1hbGlhcygpJT4sICI8JT1uQ29kZShtKSU+IiwgPCVtUm91dGluZyhjLCBtKSU+LCBhc3luYyAoKSA9PiB7DQogICAgICAgIA0KPCUgfSU+DQo8JSBtLk1ldGhvZFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5EZWZhdWx0KS5mb3JFYWNoKHAgPT4geyU+DQogICAgICAgIGlmKHR5cGVvZig8JT1uTmFtZShwKSU+KT09PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgIDwlPW5OYW1lKHApJT4gPSA8JXZhbHVlT2YocC5EZWZhdWx0KSU+Ow0KICAgICAgICB9DQo8JSB9KSU+DQoNCiAgICAgICAgdmFyIGVycm9ycyA9IHsNCiAgICAgICAgPCUgIFtdLmNvbmNhdChtLk1ldGhvZFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5SZXF1aXJlZCkubWFwKHAgPT4gKHsNCiAgICAgICAgICAgICAgICBDb2RlOiBgJHtuTmFtZShwKX0tcmVxdWlyZWRgLA0KICAgICAgICAgICAgICAgIEVycm9yOiBgJHtuTmFtZShwKX0gaXMgYSByZXF1aXJlZCBQYXJhbWV0ZXJgLA0KICAgICAgICAgICAgICAgIFNjcmlwdDogYHR5cGVvZigke25OYW1lKHApfSk9PT0ndW5kZWZpbmVkJ2AsDQogICAgICAgICAgICB9KSkpLmNvbmNhdChtLk1ldGhvZFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5FbnRpdHlUeXBlKS5tYXAocCA9PiAoew0KICAgICAgICAgICAgICAgIENvZGU6IGAke25OYW1lKHApfWAsDQogICAgICAgICAgICAgICAgRXJyb3I6IGAke25OYW1lKHApfSBpcyBub3Qgb2YgdHlwZSAke25OYW1lKHAuRW50aXR5VHlwZSl9YCwNCiAgICAgICAgICAgICAgICBTY3JpcHQ6IGAoISR7bk5hbWUocCl9ICYmICR7cC5SZXF1aXJlZD8ndHJ1ZSc6J2ZhbHNlJ30pIHx8ICgke25OYW1lKHApfSAmJiAoJHtuTmFtZShwKX0uY29uc3RydWN0b3IubmFtZSE9JyR7bk5hbWUocC5FbnRpdHlUeXBlKX0nIHx8ICR7bk5hbWUocCl9LkVudGl0eUNsYXNzLk5hbWUhPScke25OYW1lKHAuRW50aXR5VHlwZSl9JykpYCwNCiAgICAgICAgICAgIH0pKSkuY29uY2F0KG0uVmFsaWRhdG9ycyB8fCBbXSkuZmlsdGVyKHYgPT4gIXYuSWdub3JlKS5mb3JFYWNoKHYgPT4geyAlPg0KICAgICAgICAgICAgIjwlPXYuQ29kZSU+IjogKCg8JT1tLk1ldGhvZFBhcmFtZXRlcnMubWFwKHAgPT4gcC5OYW1lKS5qb2luKCcsICcpJT4pID0+IHsNCiAgICAgICAgICAgICAgICB0cnl7DQoNCiAgICAgICAgICAgICAgICA8JSBpZih2LlNjcmlwdC5pbmRleE9mKCdyZXR1cm4gJyk8MCl7JT4NCiAgICAgICAgICAgICAgICAgICAgbGV0IGFuc3dlciA9IA0KICAgICAgICAgICAgICAgIDwlfSU+DQogICAgICAgICAgICAgICAgICAgIDwlPXYuU2NyaXB0JT4NCiAgICAgICAgICAgICAgICAgICAgLy88JT1sb2coKSU+ImFuc3dlciIsICI8JT12LkNvZGUlPiIsIGFuc3dlcik7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBhbnN3ZXI7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4idmFsaWRhdG9yIiwgIjwlPXYuQ29kZSU+IiwgZXgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pKDwlPW0uTWV0aG9kUGFyYW1ldGVycy5tYXAocCA9PiBwLk5hbWUpLmpvaW4oJywgJyklPik/KCc8JT12LkVycm9yJT4nIHx8ICdWYWxpZGF0aW9uIEVycm9yJyk6JycsDQogICAgICAgIDwlIH0pICU+DQogICAgICAgIH07DQogICAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZmlsdGVyKGsgPT4gIWVycm9yc1trXSkuZm9yRWFjaChrID0+IGRlbGV0ZSBlcnJvcnNba10pOw0KICAgICAgICBpZihPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCl7DQogICAgICAgICAgICBPYmplY3Qua2V5cyhlcnJvcnMpLmZpbHRlcihrID0+IGsuc3RhcnRzV2l0aCgnLScpKS5mb3JFYWNoKGsgPT4gew0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT57W2tdOiBlcnJvcnNba119KTsNCiAgICAgICAgICAgICAgICBkZWxldGUgZXJyb3JzW2tdOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBpZihPYmplY3QudmFsdWVzKGVycm9ycykubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICAgICBfX2V4Y2VwdGlvbjogZXJyb3JzLA0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICA8JT1tLlNjcmlwdCU+DQogICAgICAgIA0KPCUgaWYoIW0uSXNTeW5jKXslPg0KICAgICAgICB9LCB7X19iZWZvcmVSdWxlczogWzwlKG0uTWV0aG9kUnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHIuQmVmb3JlKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl0sIF9fYWZ0ZXJSdWxlczogWzwlKG0uTWV0aG9kUnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHIuQWZ0ZXIpLm1hcChyID0+IHslPjwlPV9GckVNRC5fdG9KUyhyKSU+PCUgfSkuam9pbignLCAnKSU+XSwgPCU9bS5NZXRob2RQYXJhbWV0ZXJzLm1hcChwID0+IG5Db2RlKHApICsgIjogIiArIG5Db2RlKHApKS5qb2luKCcsICcpJT59KTsNCiAgICAgICAgDQogICAgICAgIA0KICAgICAgICAvLyB0YWtlIG91dCB0aGUgaW52YWxpZCBub2RlIHJlc3VsdHMNCiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gciAmJiByLnJldCk7DQoNCiAgICAgICAgLy8gaGFzIGFueSBub2RlIGdlbmVyYXRlZCBhIHZhbGlkYXRpb24gZXhjZXB0aW9uPw0KICAgICAgICBsZXQgX19leCA9IHJlc3VsdHMuZmluZChyID0+IHIucmV0Ll9fZXhjZXB0aW9uKTsNCiAgICAgICAgaWYoX19leCkgcmV0dXJuIF9fZXgucmV0Ow0KDQogICAgICAgIDwlPW0uUmVkdWNlJT4NCg0KICAgICAgICA8JSBpZihtLklzQXJyYXkgfHwgbS5SZXNwb25zZUF0dHJpYnV0ZS5Jc0FycmF5KXslPg0KICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAociA9PiByLnJldCkuZmxhdCgpOw0KICAgICAgICA8JSB9ZWxzZSBpZihtLlJlc3BvbnNlQXR0cmlidXRlLkVudGl0eVR5cGUpeyAlPg0KICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGg/cmVzdWx0c1swXS5yZXQ6bnVsbDsNCiAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgIHJldHVybiByZXN1bHRzLmxlbmd0aD9yZXN1bHRzWzBdLnJldDpudWxsOw0KICAgICAgICA8JSB9JT4NCjwlIH0lPg0KICAgIH0NCjwlIH0pOyU+DQoNCjwlIGlmKG1haW5DbGFzcyhfcmVzdFRvb2xzKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX3Jlc3BvbnNlSW50ZXJjZXB0b3InJT4oZXJyb3IsIHQpew0KICAgIDwlIGlmKG1haW5DbGFzcyhfcmVzdFRvb2xzKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoX3Jlc3RUb29scykpJT4oKS48JT1tTmFtZSU+KGVycm9yLCB0KTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICB0ID0gdCB8fCB0aGlzLlRvb2w7DQogICAgICAgICAgICBjb25zdCBvcmlnaW5hbFJlcXVlc3QgPSBlcnJvci5jb25maWc7DQogICAgICAgICAgICBpZiAodGhpcy5fX2NvbmZpZygib2F1dGguYWNjZXNzX3Rva2VuIiwgbnVsbCwge3Rvb2w6IHR9KSAmJiBlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSAmJiAhb3JpZ2luYWxSZXF1ZXN0Ll9yZXRyeSAmJiBvcmlnaW5hbFJlcXVlc3QuaGVhZGVycy5BdXRob3JpemF0aW9uLmluZGV4T2YodGhpcy5fX2NvbmZpZygib2F1dGguYWNjZXNzX3Rva2VuIiwgbnVsbCwge3Rvb2w6IHR9KSk+MCkgew0KICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVxdWVzdC5fcmV0cnkgPSB0cnVlOw0KICAgICAgICAgICAgICAgIC8vIGF3YWl0IChnZXQgdGhlIHRva2VuIG9yIHJlZnJlc2ggaXQpDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb3JpZ2luYWxSZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IHRoaXMuX19jb25maWcoIm9hdXRoLmFjY2Vzc190eXBlIiwgIkJlYXJlciIsIHt0b29sOiB0fSkgKyAiICIgKyB0aGlzLl9fY29uZmlnKCJvYXV0aC5hY2Nlc3NfdG9rZW4iLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgICAgIHJldHVybiB0LmF4aW9zKG9yaWdpbmFsUmVxdWVzdCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgICAgIDwlPWxvZygpJT5jb25maWcpOw0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgIDwlIH0lPg0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdfcmVxdWVzdEludGVyY2VwdG9yJyU+KGNvbmZpZywgdCl7DQogICAgPCUgaWYobWFpbkNsYXNzKF9yZXN0VG9vbHMpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcyhfcmVzdFRvb2xzKSklPigpLjwlPW1OYW1lJT4oY29uZmlnLCB0KTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICB0ID0gdCB8fCB0aGlzLlRvb2w7DQogICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge2hlYWRlcnM6IHt9fTsNCiAgICAgICAgICAgIGNvbmZpZy5tZXRhID0gY29uZmlnLm1ldGEgfHwge307DQogICAgICAgICAgICBjb25maWcubWV0YS5jb3VudGVyID0gNDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IHRva2VuVXJpID0gdGhpcy5fX2NvbmZpZygib2F1dGgudG9rZW4udXJpIiwgbnVsbCwge3Rvb2w6IHR9KTsNCiAgICAgICAgICAgIGxldCByZWZyZXNoVXJpID0gdGhpcy5fX2NvbmZpZygib2F1dGgucmVmcmVzaC51cmkiLCBudWxsLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgbGV0IGF1dGhVcmkgPSB0aGlzLl9fY29uZmlnKCJvYXV0aC5hdXRob3JpemUudXJpIiwgbnVsbCwge3Rvb2w6IHR9KTsNCiAgICAgICAgICAgIGxldCBhdXRoVHlwZSA9IHRoaXMuX19jb25maWcoIm9hdXRoLmF1dGhfdHlwZSIsICJCZWFyZXIiLCB7dG9vbDogdH0pOw0KICAgICAgICAgICAgbGV0IHRva2VuID0gdGhpcy5fX2NvbmZpZygib2F1dGguYWNjZXNzX3Rva2VuLiIrY29uZmlnLm1ldGhvZCwgdGhpcy5fX2NvbmZpZygib2F1dGguYWNjZXNzX3Rva2VuIiwgbnVsbCwge3Rvb2w6IHQsIG5vZGU6IDwlPW5zY29wZSU+Ll9ub2RlfSksIHt0b29sOiB0LCBub2RlOiA8JT1uc2NvcGUlPi5fbm9kZX0pOw0KICAgICAgICAgICAgaWYoIWNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gJiYgW3Rva2VuVXJpLCByZWZyZXNoVXJpLCBhdXRoVXJpXS5pbmRleE9mKGNvbmZpZy51cmwpPDApew0KICAgICAgICAgICAgICAgIGlmKCF0b2tlbil7DQogICAgICAgICAgICAgICAgICAgIGxldCBhdXRoQ29kZSA9IHRoaXMuX19jb25maWcoJ29hdXRoLmF1dGhvcml6ZS5jb2RlJywgbnVsbCwge3Rvb2w6IHR9KTsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGF1dGhNZXRob2QgPSB0aGlzLl9fY29uZmlnKCdvYXV0aC5hdXRob3JpemUubWV0aG9kJywgbnVsbCwge3Rvb2w6IHR9KTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKCF0b2tlblVyaSAmJiAhYXV0aENvZGUgJiYgIWF1dGhNZXRob2QgJiYgdGhpcy5fX2NvbmZpZygndXNlcm5hbWUnLCBudWxsLCB7dG9vbDogdH0pKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhUeXBlID0gJ0Jhc2ljJzsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5fYnRvYSh0aGlzLl9fY29uZmlnKCd1c2VybmFtZScsIG51bGwsIHt0b29sOiB0fSkgKyAiOiIgKyB0aGlzLl9fY29uZmlnKCdwYXNzd29yZCcsIG51bGwsIHt0b29sOiB0fSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGF1dGhUeXBlICsgIiAiICsgdG9rZW47IC8vPw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIA0KPCVpZihfY05hbWUoJ05vZGUnKSl7JT4NCiAgICAgICAgICAgICAgICAgICAgaWYoPCU9bnNjb3BlJT4uX25vZGUgJiYgIWF1dGhDb2RlICYmIGF1dGhNZXRob2Q9PSJnZXQiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBvciBsb2FkIGEgbmV3IG9hdXRoIHN0YXRlDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fY29uZmlnKCJvYXV0aC5hdXRob3JpemUuc3RhdGUiLCBudWxsLCB7dG9vbDogdCwgbm9kZTogPCU9bnNjb3BlJT4uX25vZGUsIG5ld1ZhbHVlOiB0aGlzLl9idG9hKEpTT04uc3RyaW5naWZ5KHt0b29sOiB0Lm5hbWUsIG5jb2RlOiA8JT1uc2NvcGUlPi5fbm9kZS5jb2RlKCl9KSl9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF1dGhvcml6ZSBhbmQgZ2V0IHRoZSBhdXRoIGNvZGUNCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhVcmkgPSB0aGlzLl9fY29uZmlnKCJvYXV0aC5hdXRob3JpemUudXJpIiwgbnVsbCwge3Rvb2w6IHR9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT5gJHthdXRoVXJpfWApOw0KICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oYXV0aFVyaSk7DQogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldEludGVydmFsKG51bGwsIHRvb2wgPT4gPCU9bnNjb3BlJT4uX25vZGUgJiYgY29uZmlnLm1ldGEuY291bnRlci0tICYmICEoYXV0aENvZGUgPSB0aGlzLl9fY29uZmlnKCdvYXV0aC5hdXRob3JpemUuY29kZScsIG51bGwsIHt0b29sOiB0fSkpLCAwLjEsIHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPmBEb25lIExvb3Bpbmc6ICR7YXV0aENvZGV9YCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZighYXV0aENvZGUpIGF1dGhNZXRob2Q9dW5kZWZpbmVkOw0KICAgICAgICAgICAgICAgICAgICB9DQo8JX0lPg0KDQogICAgICAgICAgICAgICAgICAgIGlmKGF1dGhNZXRob2Qpew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZsb3cgPSAoIWF1dGhDb2RlICYmIGF1dGhNZXRob2Q9PSdwb3N0Jyk/J2F1dGhvcml6ZSc6J3Rva2VuJzsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgdG9rZW4NCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0b2tlblVyaSBtaWdodCBoYXZlIGEgZGVwZW5kZW5jeSBvbiB0aGUgYXV0aG9yaXphdGlvbiBjb2RlDQogICAgICAgICAgICAgICAgICAgICAgICB0b2tlblVyaSA9IHRoaXMuX19jb25maWcoYG9hdXRoLiR7Zmxvd30udXJpYCwgbnVsbCwge3Rvb2w6IHR9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0Y29uZmlnID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdG9rZW5VcmksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiB0aGlzLl9fY29uZmlnKGBvYXV0aC4ke2Zsb3d9Lm1ldGhvZGAsICdwb3N0Jywge3Rvb2w6IHR9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6IHRoaXMuX19jb25maWcoYG9hdXRoLiR7Zmxvd30uY29udGVudF90eXBlYCwgInRleHQvanNvbiIsIHt0b29sOiB0fSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBdXRob3JpemF0aW9uIjogIkJhc2ljICIrdGhpcy5fYnRvYSh0aGlzLl9fY29uZmlnKCJvYXV0aC5sb2dpbiIsIG51bGwsIHt0b29sOiB0fSkgKyAiOiIgKyB0aGlzLl9fY29uZmlnKCJvYXV0aC5wYXNzd29yZCIsIG51bGwsIHt0b29sOiB0fSkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuX19jb25maWcoYG9hdXRoLiR7Zmxvd30uaGVhZGVyc2AsICJ7fSIsIHt0b29sOiB0fSkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuX19jb25maWcoYG9hdXRoLiR7Zmxvd30uYm9keWAsIG51bGwsIHt0b29sOiB0fSksDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyZXMgPSBhd2FpdCB0LmF4aW9zKHRjb25maWcpOw0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPmBUb2tlbiBmZXRjaGVkIC0gJHtmbG93fWAsIHRjb25maWcsIHRyZXMuZGF0YSk7DQogICAgICAgICAgICAgICAgICAgICAgICBbJ2FjY2Vzc190b2tlbicsICd0b2tlbl90eXBlJywgJ2V4cGlyZXNfaW4nLCAncmVmcmVzaF90b2tlbiddLmZvckVhY2godGEgPT4gdGhpcy5fX2NvbmZpZyhgb2F1dGguJHt0YX1gLCBudWxsLCB7dG9vbDogdCwgbm9kZTogPCU9bnNjb3BlJT4uX25vZGUsIG5ld1ZhbHVlOiB0cmVzLmRhdGFbdGhpcy5fX2NvbmZpZyhgb2F1dGgudG9rZW4ucmVzcG9uc2UuJHt0YX1gLCB0YSwge3Rvb2w6IHR9KV19KSk7DQogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuX19jb25maWcoIm9hdXRoLmFjY2Vzc190b2tlbiIsIG51bGwsIHt0b29sOiB0LCBub2RlOiA8JT1uc2NvcGUlPi5fbm9kZX0pOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBhdXRoVHlwZSArICIgIiArIHRva2VuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgICAgICA8JT1sb2coKSU+Y29uZmlnKTsNCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICA8JSB9JT4NCiAgICB9DQogICAgDQogICAgYXN5bmMgPCU9bU5hbWU9J19yZXN0JyU+KHROYW1lLCBwYXJhbXMsIGRhdGEsIG1ldGhvZCwgb3B0aW9ucyl7DQogICAgICAgIC8qIHROYW1lIG5vIGxvbmdlciByZXF1aXJlZCEhICovDQogICAgICAgIHROYW1lID0gdE5hbWUgfHwgPCU9X25Db2RlKCklPjsNCiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge190aGlzOiB0aGlzfTsNCiAgICAgICAgb3B0aW9ucy50TmFtZSA9IG9wdGlvbnMudE5hbWUgfHwgdE5hbWU7DQogICAgICAgIA0KICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307DQogICAgICAgIG1ldGhvZCA9IG1ldGhvZCB8fCAoZGF0YT8icG9zdCI6ImdldCIpOw0KICAgICAgICANCiAgICA8JSBpZihtYWluQ2xhc3MoX3Jlc3RUb29scykhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKF9yZXN0VG9vbHMpKSU+KC8qbnVsbCwgdGhpcy5Ub29sKi8pLjwlPW1OYW1lJT4odE5hbWUsIHBhcmFtcywgZGF0YSwgbWV0aG9kLCBvcHRpb25zKTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZihvcHRpb25zLmZvcm0pew0KICAgICAgICAgICAgICAgIGxldCBmZCA9IG5ldyBGb3JtRGF0YSgpOw0KICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goayA9PiBmZC5hcHBlbmQoaywgZGF0YVtrXSkpOw0KICAgICAgICAgICAgICAgIGRhdGEgPSBmZDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGNvbmZpZyA9IHsNCiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuX19jb25maWcob3B0aW9ucy51cmwgfHwgYHJlc3RhcGkudXJsLiR7bWV0aG9kfWAsIHRoaXMuX19jb25maWcob3B0aW9ucy51cmwgfHwgJ3Jlc3RhcGkudXJsJywgKG9wdGlvbnMucGF0aHx8JycpICsgb3B0aW9ucy5maWxlLCBvcHRpb25zKSwgb3B0aW9ucyksDQogICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsDQogICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsDQogICAgICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih0aGlzLl9fY29uZmlnKCdyZXN0YXBpLmhlYWRlcnMuJyttZXRob2QsIHRoaXMuX19jb25maWcoJ3Jlc3RhcGkuaGVhZGVycycsIHt9LCBvcHRpb25zKSwgb3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyB8fCB7fSksDQogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN0YXR1czogc3RhdHVzID0+IHN0YXR1czw0MDAsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgcmV0ID0gW107DQogICAgICAgICAgICA8JT1sb2coKSU+YFtMSVZFOiR7dGhpcy5fX2NvbmZpZygnbGl2ZScsIHRydWUpfV1gLCBjb25maWcsIG9wdGlvbnMpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCdsaXZlJywgdHJ1ZSkpew0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0aGlzLlRvb2wuYXhpb3MpIT09J3VuZGVmaW5lZCcgfHwgdHlwZW9mKGF4aW9zKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gKGF3YWl0ICgodGhpcy5Ub29sLmF4aW9zIHx8IGF4aW9zKSkoY29uZmlnKSkuZGF0YTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgKGF3YWl0IGZldGNoKGNvbmZpZy51cmwsIGNvbmZpZykpLmpzb24oKTsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iYXhpb3Mgbm90IGRlZmluZWQhLCB1c2luZyBmZXRjaCIsIHJldCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgPCU9bG9nKCklPiJyZXQiLCBKU09OLnN0cmluZ2lmeShyZXQsIG51bGwsIDQpKTsNCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICB9DQo8JSB9IC8vIG1haW5DbGFzcyhfcmVzdFRvb2xzKSAlPg0KDQo8JSBpZihtYWluQ2xhc3MoX3NxbFRvb2xzKSl7JT4NCiAgICA8JT1tTmFtZT0nX3RvU1FMVGFibGUnJT4ob3B0aW9ucz17fSwgc1BhdGg9IiIpew0KICAgICAgICByZXR1cm4gdGhpcy5fX2V4cG9ydCh7SWQ6ICI8JT1zY29wZSU+LjwlPV9jTmFtZShjLCB0cnVlKSU+Iiwgc1BhdGg6IHNQYXRoLCBkZXBzOiB7fSwgc3FsOiBgLyo8JT1jLk5hbWUlPjogU1FMKi9cblxuYCwgZmllbGRzOiBgYH0sIHsNCiAgICAgICAgICAgIC8vX21hcDogdHJ1ZSwNCiAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgX19oZWFkZXI6IG9iaiA9PiBvYmouc3FsICs9IGBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT59JHt0aGlzLl9RKCl9ICgke29iai5maWVsZHN9XG4vKjwlPW5OYW1lKGMpJT46ICR7c1BhdGh9Ki8pO1xuYCwNCiAgICAgICAgICAgIGV4cG9ydGVyOiB2ID0+IHYub2JqLnNxbCArPSAodHlwZW9mKG9wdGlvbnMucmV1c2VkKT09PSd1bmRlZmluZWQnIHx8IG9wdGlvbnMucmV1c2VkPj12LnJldXNlZCk/Jyc6YC8qPCU9bk5hbWUoYyklPjogcmV1c2VkOiAke3YucmV1c2VkfSovXG5cbmAsDQogICAgICAgICAgICBleHBvcnRlcjogdiA9PiB2Lm9iaiA9ICh0eXBlb2Yob3B0aW9ucy5yZXVzZWQpPT09J3VuZGVmaW5lZCcgfHwgb3B0aW9ucy5yZXVzZWQ+PXYucmV1c2VkKT92Lm9iajp7c3FsOiB2Lm9iai5zcWwgKz0gYC8qPCU9bk5hbWUoYyklPjogcmV1c2VkOiAke3YucmV1c2VkfSovXG5cbmAsIElkOiB2Lm9iai5JZH0sDQogICAgICAgICAgICBJZDogKG9iaiwgaWRDb2RlLCB2KSA9PiBvYmouZmllbGRzICs9IGAke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gQ0hBUigyNSkgUFJJTUFSWSBLRVlgLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiAhZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai5maWVsZHMgKz0gYCwke3RoaXMuX1EoKX0kezwlPV9uQ29kZShlYSklPn0ke3RoaXMuX1EoKX0gJHt0aGlzLl9zcWxUeXBlKCI8JT1fRnJFTUQuX2F0dHIoZWEpJT4iLCB0aGlzLl9fY29uZmlnKCd0eXBlJykpfWAsDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgb2JqLmZpZWxkcyArPSBgLCR7dGhpcy5fUSgpfSR7ZWFDb2RlfWlkJHt0aGlzLl9RKCl9ICR7dGhpcy5fc3FsVHlwZSgiPCU9X0ZyRU1ELl9hdHRyKGVhKSU+IiwgdGhpcy5fX2NvbmZpZygndHlwZScpKX1gOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIG9iai5zcWwgPSAodiB8fCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoZWEuRW50aXR5VHlwZSwgdHJ1ZSklPigiPCU9c2NvcGUlPi48JT1fY05hbWUoYywgdHJ1ZSklPiIpKS48JT1tTmFtZSU+KG9wdGlvbnMsIGAke3NQYXRofS4ke2VhQ29kZX1gKS5zcWwgKyAiXG5cbiIgKyBvYmouc3FsOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai5zcWwgPSAodiAmJiB2Lmxlbmd0aCk/dlswXTpuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUodGEuRW50aXR5Q2xhc3MsIHRydWUpJT4oIjwlPXNjb3BlJT4uPCU9X2NOYW1lKGMsIHRydWUpJT4iKS48JT1tTmFtZSU+KG9wdGlvbnMsIGAke3NQYXRofS4ke2VhQ29kZX1bMF1gKS5zcWwgKyAiXG5cbiIgKyBvYmouc3FsLA0KICAgIDwlIH0pJT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iLCBvcHRpb25zLCBzUGF0aCk7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZnJvbVNRTFRhYmxlJyU+KHRhYmxlLCBmaWVsZHMpew0KICAgICAgICAvLyB0YWJsZSBpcyBhIGpzb24gYXJyYXkNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgIGlmKChmaWVsZHMgJiYgZmllbGRzLmluZGV4T2YoIjwlPW5OYW1lKGVhKSU+IikpIHx8ICFmaWVsZHMpew0KICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPih0YWJsZVsiPCU9bkNvZGUoZWEpJT4iXSk7DQogICAgICAgIH0NCjwlIH0pOyAlPg0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J19zcWwnJT4oc3FsLCBfdGhpcyl7DQogICAgICAgIF90aGlzID0gX3RoaXMgfHwgdGhpczsNCiAgICA8JSBpZihtYWluQ2xhc3MoX3NxbFRvb2xzKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKG1haW5DbGFzcyhfc3FsVG9vbHMpKSU+KCkuPCU9bU5hbWUlPihzcWwsIF90aGlzKTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICBpZighdGhpcy5Ub29sLmRiIHx8ICFzcWwgfHwgIXNxbC50cmltKCkpew0KICAgICAgICAgICAgaWYoIXRoaXMuVG9vbC5kYikgPCU9bG9nKCklPnNxbCwgIiA8PT1TS0lQUEVEPT0+Iik7DQogICAgICAgICAgICByZXR1cm4gW107DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGlmKHNxbC5pbmRleE9mKCc7XG4nKT4wKXsNCiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3Qgc3FsUyBvZiBzcWwuc3BsaXQoJztcbicpKXsNCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLjwlPW1OYW1lJT4oc3FsUy50cmltKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBsZXQgcmV0ID0gbnVsbDsNCg0KICAgICAgICBpZigoc3FsLm1hdGNoKC9cKC9nKSB8fCBbXSkubGVuZ3RoIT0oc3FsLm1hdGNoKC9cKS9nKSB8fCBbXSkubGVuZ3RoKXsNCiAgICAgICAgICAgIDwlPWxvZygpJT4iaW5jb3JyZWN0IHNxbCIsIHNxbCk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIC8vPCU9bG9nKCklPmBzcWxgLCBzcWwpOw0KICAgICAgICANCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gew0KICAgICAgICAgICAgICAgIGxldCBfb2sgPSAoX3JldCwgX3NxbCkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZihfc3FsICYmIF9zcWwuaW5kZXhPZignc2VsZWN0JykpIHRoaXMuVG9vbC5fX2RtbFN0YXRlbWVudHMucHVzaChfc3FsKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3JldCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IGRiID0gdGhpcy5Ub29sLmRiOw0KICAgICAgICAgICAgICAgIGxldCB0eXBlID0gdGhpcy5fX2NvbmZpZygndHlwZScpOw0KICAgIA0KICAgICAgICAgICAgICAgIGxldCBmdW4gPSAiIjsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAvLyBRdWVyeSBsaXN0IG9mIHN0YXRlbWVudCBzdGFydGluZyBrZXl3b3JkcyAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IHFMaXN0ID0gWyJzZWxlY3QiLCAiaW5zZXJ0IiwgInVwZGF0ZSIsICJkZWxldGUiXTsNCiAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCdkYXRhYmFzZS50cmFuc2FjdGlvbnMnLCB0cnVlKSl7DQogICAgICAgICAgICAgICAgICAgIHFMaXN0ID0gcUxpc3QuY29uY2F0KFsiYmVnaW4iLCAic3RhcnQiLCAiY29tbWl0Il0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBsZXQgYlF1ZXJ5ID0gcUxpc3QuaW5kZXhPZihzcWwuc3Vic3RyaW5nKDAsIHNxbC5pbmRleE9mKCcgJykpLnRyaW0oKS50b0xvd2VyQ2FzZSgpKT49MDsNCg0KICAgICAgICAgICAgICAgIGlmKGJRdWVyeSl7DQogICAgICAgICAgICAgICAgICAgIC8vIHF1ZXJ5DQogICAgICAgICAgICAgICAgICAgIGlmKFsnbXlzcWwnLCAncG9zdGdyZXMnXS5pbmRleE9mKHR5cGUpPj0wKSBmdW4gPSAncXVlcnknOw0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlPT0nc3FsaXRlJykgZnVuID0gJ2FsbCc7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIC8vIERNTA0KICAgICAgICAgICAgICAgICAgICBpZihbJ215c3FsJywgJ3Bvc3RncmVzJ10uaW5kZXhPZih0eXBlKT49MCkgZnVuID0gJ3F1ZXJ5JzsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZT09J3NxbGl0ZScpIGZ1biA9ICdydW4nOw0KDQogICAgICAgICAgICAgICAgICAgIHRoaXMuVG9vbC5kbWxDYWNoZSA9IHRoaXMuVG9vbC5kbWxDYWNoZSB8fCB7fTsNCiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5Ub29sLmRtbENhY2hlW3RoaXMuaGFzaENvZGUoc3FsKV0pIHJldHVybiBfb2soMCk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuVG9vbC5kbWxDYWNoZVt0aGlzLmhhc2hDb2RlKHNxbCldID0gc3FsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZih0eXBlPT0nc3FsaXRlJyAmJiB0eXBlb2Yod2luZG93KSE9PSd1bmRlZmluZWQnKSBmdW4gPSAiIjsNCiAgICAgICAgICAgICAgICBpZihmdW4gJiYgIWRiW2Z1bl0pIGZ1biA9ICIiOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHNxbCA9IHR5cGVvZihzcWxGb3JtYXR0ZXIpIT09J3VuZGVmaW5lZCc/c3FsRm9ybWF0dGVyLmZvcm1hdChzcWwpOnNxbDsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+YCR7dHlwZX0uJHtmdW59YCwgc3FsKTsNCiAgICAgICAgICAgICAgICBpZig8JT1zY29wZSU+Ll9fc3FsVHJhbnNhY3Rpb24pIDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbi5zcWxzLnB1c2goc3FsKTsNCg0KICAgICAgICAgICAgICAgIGlmIChmdW4pIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IHJldCA9IFtdOw0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlPT0icG9zdGdyZXMiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGRiW2Z1bl0oc3FsKS50aGVuKHJvd3MgPT4gX29rKHJvd3MsIHNxbCkpLmNhdGNoKHJldEV4ID0+IHJlamVjdChyZXRFeCkpOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGRiW2Z1bl0oc3FsLCBbXSwgKGVycm9yLCByb3dzKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3Ipew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2socm93cywgc3FsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZT09J3Nub3dmbGFrZScpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5Ub29sLmRiLmV4ZWN1dGUoew0KICAgICAgICAgICAgICAgICAgICAgICAgc3FsVGV4dDogc3FsLA0KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKGVyciwgc3RtdCwgcm93cykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycil7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2socm93cywgc3FsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZT09J3NxbGl0ZScpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gc3FsaXRlIGluIHRoZSBicm93c2VyDQogICAgICAgICAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBudWxsOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZGIuZXhlYyhzcWwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXJldCB8fCAhcmV0Lmxlbmd0aCkgcmV0dXJuIF9vayhyZXQsIHNxbCk7DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHJldFswXS52YWx1ZXMubWFwKHIgPT4gT2JqZWN0LmZyb21FbnRyaWVzKG5ldyBNYXAocmV0WzBdLmNvbHVtbnMubWFwKChjLCBpKSA9PiBbYywgcltpXV0pKSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gPCU9bG9nKCklPnJldCk7DQogICAgICAgICAgICAgICAgICAgICAgICBfb2socmV0LCBzcWwpOw0KICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGV4KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0eXBlPT0ncXVlc3RkYicpew0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN0KG51bGwsIHtxdWVyeTogc3FsfSkudGhlbihyID0+IF9vayhyLCBzcWwpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmANCkVSUk9SOg0KJHtleH0NCg0KV2hpbGUgU2VuZGluZyBRdWVyeSANCiR7c3FsfQ0KYCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZihyZXQgJiYgcmV0LnJvd3MpIHJldCA9IHJldC5yb3dzOyAgICAgICAgDQogICAgICAgIGlmKEFycmF5LmlzQXJyYXkocmV0KSkgcmV0ID0gcmV0Lm1hcChyID0+IERvdE9iamVjdC5vYmplY3QocikpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIDwlIH0lPg0KICAgIH0NCjwlIH0lPg0KDQo8JSBpZihtYWluQ2xhc3MoWydBaXJUYWJsZSddKSl7JT4NCjwlDQpsZXQgX3RvVHlwZUFUID0gZWEgPT4gew0KICAgIGxldCByZXQgPSB7bmFtZTogbk5hbWUoZWEpLCBkZXNjcmlwdGlvbjogZWEuTmFtZSwgdHlwZTogInNpbmdsZUxpbmVUZXh0In07DQogICAgaWYoZWEuSXNCb29sKXsNCiAgICAgICAgcmV0LnR5cGUgPSAiY2hlY2tib3giOw0KICAgICAgICByZXQub3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNvbG9yOiAiZ3JlZW5CcmlnaHQiLA0KICAgICAgICAgICAgaWNvbjogImNoZWNrIg0KICAgICAgICB9Ow0KICAgIH0NCiAgICBpZihlYS5Jc0RhdGUpew0KICAgICAgICByZXQudHlwZSA9ICJkYXRlVGltZSI7DQogICAgICAgIHJldC5vcHRpb25zID0gew0KICAgICAgICAgICAgZGF0ZUZvcm1hdDogew0KICAgICAgICAgICAgICAgIG5hbWU6ICdpc28nDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdGltZUZvcm1hdDogew0KICAgICAgICAgICAgICAgIG5hbWU6ICcyNGhvdXInLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHRpbWVab25lOiAndXRjJywNCiAgICAgICAgfTsNCiAgICB9DQogICAgDQogICAgcmV0dXJuIHJldDsNCn07DQolPg0KICAgIDwlPW1OYW1lPSdfdG9BVFRhYmxlJyU+KGxldmVsKXsNCiAgICAgICAgbGV0IHJldCA9IFt7DQogICAgICAgICAgICBuYW1lOiAnPCU9bk5hbWUoYyklPicsDQogICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsDQogICAgICAgICAgICBmaWVsZHM6IFsNCiAgICAgICAgICAgICAgICB7bmFtZTogdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpLCBkZXNjcmlwdGlvbjogJ0lEJywgdHlwZTogJ3NpbmdsZUxpbmVUZXh0J30sDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPjwlPV9GckVNRC5fdG9KUyhfdG9UeXBlQVQoZWEpKSU+LDwlIH0pJT5dLA0KICAgICAgICB9XTsNCg0KICAgICAgICByZXQgPSB0aGlzLl9fZXhwb3J0KHJldCwgew0KICAgICAgICAgICAgRnVsbDogdHJ1ZSwNCiAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgIjwlPW5OYW1lKGVhKSU+IjogKG9iaiwgZWFDb2RlLCB2KSA9PiByZXQucHVzaChuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkuPCU9bU5hbWUlPigpKSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHJldC5wdXNoKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuPCU9bU5hbWUlPigpKSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQoNCiAgICAgICAgPCU9bG9nKCklPnJldC5zcWwpOw0KICAgICAgICByZXR1cm4gcmV0LnNxbDsNCg0KICAgICAgICByZXQgPSByZXQuZmlsdGVyKCh0YWcsIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuZmluZEluZGV4KHQgPT4gdC5uYW1lID09IHRhZy5uYW1lKSA9PSBpbmRleCk7DQogICAgICAgIDwlPWxvZygpJT5yZXQsIGxldmVsKTsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b0FURnVuY3Rpb24nJT4oKXsNCiAgICAgICAgbGV0IHRQcmVmID0gYCR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKCklPn0ke3RoaXMuX1EoKX0uYDsNCiAgICAgICAgbGV0IHJldCA9IHRoaXMuX19leHBvcnQoe2Z1bjogIiJ9LCB7DQogICAgICAgICAgICBfZmllbGRzOiAodGhpcy5fX3N5bmNfb24oKSB8fCB0aGlzLklkPT10aGlzLklkKT9bJ0lkJ106dW5kZWZpbmVkLA0KICAgICAgICAgICAgX1RISVM6IG9iaiA9PiBvYmouZnVuICs9IGAgYW5kICR7dFByZWZ9JHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9IGAgKyAodGhpcy5fVEhJU19jb29wIHx8ICJJTiIpICsgIiAoIiArIHRoaXMuX1RISVMubWFwKHQgPT4gdC48JT1tTmFtZSU+KHQuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKSkpLmpvaW4oJyBVTklPTiBBTEwgJykgKyAiKSIsDQogICAgICAgICAgICBJZDogb2JqID0+IG9iai5mdW4gKz0gYCBhbmQgJHt0UHJlZn0ke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX09JyR7dGhpcy5JZH0nYCwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgIGxldCBjb29wID0gdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcDsNCiAgICAgICAgICAgICAgICBzd2l0Y2goY29vcCl7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIiE9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3AgPSAiTk9UIElOIjsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiPSI6DQogICAgICAgICAgICAgICAgICAgICAgICBjb29wID0gIklOIjsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3AgPSAiSU4iOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZih2KXsNCiAgICAgICAgICAgICAgICAgICAgb2JqLmZ1biArPSBgIGFuZCAke3RQcmVmfSR7dGhpcy5fUSgpfSR7ZWFDb2RlfWlkJHt0aGlzLl9RKCl9ICR7Y29vcH0gKCR7di48JT1tTmFtZSU+KHYuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKSl9KWA7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gYCBhbmQgKCR7dFByZWZ9JHt0aGlzLl9RKCl9JHtlYUNvZGV9aWQke3RoaXMuX1EoKX0gJHtjb29wfSAoMCkgT1IgJHt0UHJlZn0ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSBJUyBOVUxMKWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNUZXh0IHx8IGVhLklzSW1hZ2UgfHwgZWEuSXNGaWxlKXslPg0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICBvYmouZnVuICs9IGAgYW5kICR7dFByZWZ9JHt0aGlzLl9RKCl9JHtlYUNvZGV9JHt0aGlzLl9RKCl9IGAgKyA8JWlmKGVhLklzQm9vbCl7JT4iPSI8JX1lbHNleyU+KHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3AgfHwgIkxJS0UiKTwlfSU+ICsgIiAiOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLklzRGF0ZSl7ICU+DQogICAgICAgICAgICAgICAgaWYodiAmJiB2LnRvSVNPU3RyaW5nKXsNCiAgICAgICAgICAgICAgICAgICAgb2JqLmZ1biArPSAiJyIgKyB2LnRvSVNPU3RyaW5nKCkgKyAiJyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1N0cmluZyl7ICU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHYpPT09InN0cmluZyIpew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9ICInIiArICgodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09IkxJS0UiIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKT8iJSI6IiIpICsgdiArICgodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09IkxJS0UiIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKT8iJSI6IiIpICsgIiciOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih2KT09PSJib29sZWFuIil7DQogICAgICAgICAgICAgICAgICAgIG9iai5mdW4gKz0gIiciICsgKHY/IjEiOiIwIikgKyAiJyI7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgICAgICBpZih2ICYmIHYuRW50aXR5Q2xhc3Mpew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9ICIoIiArIHYuPCU9bU5hbWUlPigpICsgIikiOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9ICInIiArIHYgKyAiJyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBvYmouc3FsICs9ICIgYW5kIC8qPCU9dGFOYW1lJT4qLyAiOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSchPScpew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9ICJOT1QgRVhJU1RTIjsNCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLl88JT10YU5hbWUlPl9jb29wPT0nPScpew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9ICJFWElTVFMiOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBvYmouZnVuICs9IGAke3RQcmVmfSR7dGhpcy5fUSgpfSR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpfSR7dGhpcy5fUSgpfSAke3RoaXMuXzwlPXRhTmFtZSU+X2Nvb3AgfHwgIklOIn1gOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBvYmouZnVuICs9ICIgKCIgKyAodiB8fCBbXSkubWFwKHQgPT4gKHQgJiYgdC48JT1tTmFtZSU+KT90LjwlPW1OYW1lJT4oIjwlPW5OYW1lKHRhKSU+LmlkIik6KHQgfHwgJ05VTEwnKSkuam9pbignIFVOSU9OIEFMTC8qTTJNKi8gJykgKyAiKSI7DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2FpcnRhYmxlJyU+KHROYW1lLCBwYXJhbXMsIGRhdGEsIG1ldGhvZCl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnQWlyVGFibGUnXSkhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoWydBaXJUYWJsZSddKSklPigpLjwlPW1OYW1lJT4odE5hbWUsIHBhcmFtcywgZGF0YSwgbWV0aG9kKTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICB0TmFtZSA9IHROYW1lIHx8IDwlPV9uQ29kZSgpJT47DQogICAgICAgICAgICBsZXQgcmV0ID0gKGF3YWl0IGF4aW9zLnJlcXVlc3Qoew0KICAgICAgICAgICAgICAgIHVybDogYCR7dGhpcy5fX2NvbmZpZygnZW5kcG9pbnRVcmwnKX0ke3ROYW1lfWAsDQogICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2Q/bWV0aG9kOihkYXRhPyJwb3N0IjoiZ2V0IiksDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIGZpbHRlckJ5Rm9ybXVsYTogcGFyYW1zLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwNCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7DQogICAgICAgICAgICAgICAgICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0pKS5kYXRhOw0KICAgICAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+SlNPTi5zdHJpbmdpZnkoZXgucmVzcG9uc2UuZGF0YSwgbnVsbCwgNCkpOw0KICAgICAgICB9DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0ZpbGVTeXN0ZW0nXSkpeyU+DQogICAgYXN5bmMgPCU9bU5hbWU9J19maWxlc3lzdGVtJyU+KGZpbGUsIGNvbnRlbnQsIGlkLCBvYmo9dGhpcyl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnRmlsZVN5c3RlbSddKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoWydGaWxlU3lzdGVtJ10pLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihmaWxlLCBjb250ZW50LCBpZCwgb2JqKTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZighZmlsZSkgcmV0dXJuIG51bGw7DQoNCiAgICAgICAgICAgIGxldCByZXQgPSB7fTsNCiAgICAgICAgICAgIGxldCBwYXRoID0gb2JqLl9fY29uZmlnKGBwYXRoLiR7Y29udGVudD8nd3JpdGUnOidyZWFkJ31gLCAodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJz8nLi9kYi8nOidodHRwczovL3t7b3duZXJ9fS5naXRodWIuaW8vJykpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihvYmouX19jb25maWcoJ2xpdmUnLCB0cnVlKSl7DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKGNvbnRlbnQpIT09J3VuZGVmaW5lZCcpew0KICAgICAgICAgICAgICAgICAgICAvLyB3cml0ZQ0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoZ2xvYmFsKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGZzLnByb21pc2VzLm1rZGlyKChwYXRoICsgZmlsZSkucmVwbGFjZSgvKC4qXC8pLiovZywgJyQxJyksIHsgcmVjdXJzaXZlOiB0cnVlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gZ2xvYmFsLmZzLndyaXRlRmlsZVN5bmMocGF0aCArIGZpbGUsIHR5cGVvZihjb250ZW50KT09PSdvYmplY3QnPy8qdGhpcy5fYnRvYSgqL0pTT04uc3RyaW5naWZ5KGNvbnRlbnQsIG51bGwsICdcdCcpLyopKi86Y29udGVudCk7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4iQ2Fubm90IHdyaXRlIHRvIGZpbGUgc3lzdGVtIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgLy8gcmVhZA0KICAgICAgICAgICAgICAgICAgICBpZihwYXRoLnN0YXJ0c1dpdGgoJ2h0dHAnKSAmJiBwYXRoLmluZGV4T2YoJzovLycpPjApew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5fcmVzdCh1bmRlZmluZWQsIG51bGwsIG51bGwsIG51bGwsIHt1cmw6ICdwYXRoLnJlYWQnLCBmaWxlOiBmaWxlICsgJz9yYW5kPScgKyBNYXRoLnJhbmRvbSgpLCBwYXRofSk7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHR5cGVvZihnbG9iYWwpIT09J3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmZzLmV4aXN0c1N5bmMocGF0aCArIGZpbGUpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGdsb2JhbC5mcy5yZWFkRmlsZVN5bmMocGF0aCArIGZpbGUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXQgPSByZXQ/KHJldC5kYXRhIHx8IHJldCk6cmV0Ow0KICAgICAgICAgICAgPCU9bG9nKCklPmBbJHtvYmouX19jb25maWcoJ2xpdmUnLCB0cnVlKT8nJzonTk9UICd9TElWRXwke3R5cGVvZihjb250ZW50KSE9PSd1bmRlZmluZWQnPyd3cml0ZSc6J3JlYWQnfV0ke3BhdGggKyBmaWxlfTogJHsocmV0IHx8ICcnKS5sZW5ndGh9YCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgPCUgfSU+DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ0dpdEh1YiddKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX2dpdGh1YiclPihmaWxlLCBjb250ZW50LCBpZCwgb2JqPXRoaXMpew0KICAgIDwlIGlmKG1haW5DbGFzcyhbJ0dpdEh1YiddKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKG1haW5DbGFzcyhbJ0dpdEh1YiddKSklPihudWxsLCB0aGlzLlRvb2wpLjwlPW1OYW1lJT4oZmlsZSwgY29udGVudCwgaWQsIG9iaik7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYoIWZpbGUpIHJldHVybiBudWxsOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgc2hhMSA9IGFzeW5jIHN0ciA9PiB0eXBlb2YoY3J5cHRvLnN1YnRsZSkhPT0ndW5kZWZpbmVkJz9BcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMScsIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnYmxvYiAnICsgbmV3IEJsb2IoW3N0cl0pLnNpemUgKyAnXHgwMCcgKyBzdHIpKSkpLm1hcCh2ID0+IHYudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpOnN0ci5zdWJzdHJpbmcoMCwgMTApOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+ImZpbGUiLCBmaWxlLCBjb250ZW50PydwdXQnOidnZXQnKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IHJldCA9IGF3YWl0IHRoaXMuX3Jlc3QodW5kZWZpbmVkLCBudWxsLCBjb250ZW50P0pTT04uc3RyaW5naWZ5KHsNCiAgICAJCQltZXNzYWdlOiAiZGVwbG95ZWQgYnkgPCU9bU5hbWUlPigpIiwNCiAgICAJCQlzaGE6IGlkIHx8IGNvbnRlbnRbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXSwNCiAgICAJCQljb250ZW50OiB0aGlzLl9idG9hKHR5cGVvZihjb250ZW50KT09PSdvYmplY3QnP0pTT04uc3RyaW5naWZ5KGNvbnRlbnQsIG51bGwsICdcdCcpOmNvbnRlbnQpLA0KICAgIAkJfSk6bnVsbCwgY29udGVudD8ncHV0JzpudWxsLCB7DQogICAgCQkgICAgZmlsZTogKGZpbGUgKyAoKGNvbnRlbnQgfHwgZmlsZS5lbmRzV2l0aCgnLycpKT8nJzooJz9yYW5kPScrTWF0aC5yYW5kb20oKSkpKSwNCiAgICAJCX0pOw0KICAgIAkJDQogICAgCQlpZighcmV0KSByZXR1cm4gcmV0Ow0KICAgIAkJDQogICAgCQlyZXQgPSBjb250ZW50P3JldC5jb250ZW50OnJldDsNCg0KICAgICAgICAgICAgbGV0IGlkeEZpbGUgPSAnaW5kZXguaHRtJzsNCiAgICAgICAgICAgIC8vIDwlPWxvZygpJT4icmV0IiwgcmV0KTsNCiAgICAJCWlmKEFycmF5LmlzQXJyYXkocmV0KSl7DQogICAgCQkgICAgLy8gaW4gY2FzZSB3ZSBhcmUgbGlzdGluZyB0aGUgY29udGVudHMgb2YgYSBmb2xkZXIgcmVzb3VyY2UNCiAgICAJCSAgICByZXR1cm4gcmV0LmZpbHRlcihyID0+ICh0eXBlb2Yoci50eXBlKT09PSd1bmRlZmluZWQnIHx8IHIudHlwZT09J2ZpbGUnKSAmJiByLm5hbWUhPWlkeEZpbGUpLm1hcChyID0+ICh7W3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKV06IHIuc2hhIHx8IHJbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXSwgbmFtZTogci5uYW1lLnJlcGxhY2UoJy5qc29uJywgJycpfSkpOw0KICAgIAkJfQ0KICAgIAkJDQogICAgCQlsZXQgX3RoaXMgPSB7fTsNCiAgICAJCWlmKHJldC5zaGEpew0KICAgIAkJICAgIHRyeXsNCiAgICAgICAgICAgICAgICAgICAgX3RoaXMgPSByZXQuY29udGVudD9KU09OLnBhcnNlKHRoaXMuX2F0b2IocmV0LmNvbnRlbnQpKTp7fTsNCiAgICAgICAgICAgICAgICB9Y2F0Y2goX2V4KXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT4ibm90IGEgdmFsaWQgSlNPTiBvYmplY3QiLCBmaWxlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgCQkgIA0KICAgIAkJICAgIF90aGlzW29iai5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXSA9IHJldC5zaGE7IC8vPz8NCiAgICAJCX1lbHNlIGlmKHJldFt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyldKXsNCiAgICAJCSAgICAvLzwlPXdhcm4oKSU+J3NoYTEnLCBmaWxlLCBhd2FpdCBzaGExKEpTT04uc3RyaW5naWZ5KHJldCkpKTsNCiAgICAJCSAgICBfdGhpcyA9IHJldDsNCiAgICAJCX0NCiAgICAJCQ0KICAgIAkJPCU9bG9nKCklPmZpbGUsIGNvbnRlbnQ/J3B1dCc6J2dldCcsIF90aGlzKTsNCiAgICAJCQ0KICAgICAgICAgICAgbGV0IGZSb290ID0gZmlsZS5zcGxpdCgnLycpLnNsaWNlKDAsIC0xKS5qb2luKCcvJyk7DQogICAgICAgICAgICBpZihmaWxlLmluZGV4T2YoaWR4RmlsZSk+PTApIHJldHVybiByZXQ7DQogICAgICAgICAgICBpZHhGaWxlID0gZlJvb3QgKyAnLycgKyBpZHhGaWxlOw0KICAgIAkJDQogICAgCQlpZigvKiFvYmouX19zeW5jX29uKCkgJiYgKi9jb250ZW50KXsNCiAgICAJCSAgICAvLyBuZXcgY29udGVudCBzdG9yZWQNCiAgICAJCSAgICBsZXQgaWR4UmV0ID0gYXdhaXQgb2JqLjwlPW1OYW1lJT4oaWR4RmlsZSk7DQogICAgCQkgICAgbGV0IGlkeExpc3QgPSBhd2FpdCBvYmouPCU9bU5hbWUlPihmUm9vdCk7DQogICAgCQkgICAgYXdhaXQgb2JqLjwlPW1OYW1lJT4oaWR4RmlsZSwgaWR4TGlzdCwgaWR4UmV0P2lkeFJldC5zaGE6bnVsbCk7DQogICAgCQkgICAgPCU9bG9nKCklPiJmaWxlIGNvbnRlbnQiLCBmaWxlLCBpZHhGaWxlLCByZXQsIGlkeExpc3QpOw0KICAgIAkJfQ0KICAgIAkJDQogICAgICAgICAgICByZXR1cm4gX3RoaXM7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICB9DQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKFsnU2FsZXNGb3JjZSddKSl7JT4NCiAgICA8JT1tTmFtZT0nX3RvU0ZRdWVyeSclPihmaWVsZHMsIG9ianMsIGJTdHJpbmcpew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7WzwlPV9uQ29kZSgpJT5dOiB7cGFyYW1zOiB7d2hlcmU6IHthbmQ6IFtdLCBvcjogW119fSwgZWRnZXM6IHtub2RlOiB7fX19fSwgew0KICAgICAgICAgICAgLy9PUEVSQVRPUlM6IHRydWUsDQogICAgICAgICAgICBJZDogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmpbPCU9X25Db2RlKCklPl0ucGFyYW1zLndoZXJlLmFuZC5wdXNoKHtJZDoge2VxOiB2fX0pLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgbGV0IG9wID0gJ2VxJzsNCiAgICAgICAgICAgICAgICBsZXQgY29uZCA9IHtbZWFDb2RlXToge1tvcF06IA0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbnE6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcGlOYW1lOiAnSWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFs8JT1fbkNvZGUoZWEuRW50aXR5VHlwZSklPl06IHY/di48JT1tTmFtZSU+KClbPCU9X25Db2RlKGVhLkVudGl0eVR5cGUpJT5dLnBhcmFtcy53aGVyZS5hbmQ6W10sDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzRGF0ZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgKHY/di50b0lTT1N0cmluZygpOm51bGwpDQogICAgICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICAgICAgICAgIHYNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgfX07DQogICAgICAgICAgICAgICAgb2JqWzwlPV9uQ29kZSgpJT5dLnBhcmFtcy53aGVyZS5hbmQucHVzaChjb25kKTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgICAgIA0KICAgICAgICAvL09iamVjdC5rZXlzKHJldCkuZmlsdGVyKGsgPT4gIVN0cmluZyhyZXRba10pLmxlbmd0aCkuZm9yRWFjaChrID0+IGRlbGV0ZSByZXRba10pOw0KICAgICAgICANCiAgICAgICAgaWYoYlN0cmluZyl7DQogICAgICAgICAgICByZXQgPSB7cXVlcnk6IHtbPCU9X25Db2RlKCklPiArICdRdWVyeSddOiB7dWlhcGk6IHtxdWVyeTogcmV0fX19fTsNCiAgICAgICAgICAgIHJldCA9IEpTT04uc3RyaW5naWZ5KHJldCwgbnVsbCwgNCk7DQogICAgICAgIH0NCg0KICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKFsnU2VydmljZU5vdyddKSl7JT4NCiAgICA8JQ0KICAgIGxldCBfaWQgPSBzID0+IC8qcz9zOiovYHRoaXMuX3V1aWQoJHtzfHx1bmRlZmluZWR9KS5yZXBsYWNlKC8tL2csICcnKWA7DQogICAgbGV0IF90aWQgPSBfYyA9PiBfaWQoIiciK3Njb3BlKyIuIisgKF9jIHx8IGMpLk5hbWUgKyAiJyIpOw0KICAgIGxldCBhcHAgPSAoKSA9PiB7JT5hcHBsaWNhdGlvbihuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0FwcGxpY2F0aW9uJywgdHJ1ZSklPigpLmNvZGUodGhpcy5fX2NvbmZpZygnc2NvcGUnLCAnPCU9c2NvcGUlPicpKSk8JX07DQogICAgDQogICAgbGV0IGxhYmVsID0gKHQsIG4sIGMsIHApID0+IHtuPXNyLkVuZ2xpc2hOYW1lKG4pOyAlPi48JT10JT5fRmllbGRfTGFiZWxzKFtuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0ZpZWxkIExhYmVsJywgdHJ1ZSklPig8JT1faWQoKSU+KS5yZW1hcmsoJzwlPW4lPicpLm5hbWUoJzwlPW4lPicpLmNvZGUoPCU9YyU+KS5sYW5ndWFnZSgnZW4nKS5wbHVyYWwoJzwlPShwIHx8IChuICsgJ3MnKSklPicpLjwlYXBwKCklPl0pPCV9OyU+DQoNCiAgICA8JT1tTmFtZT0nX3RvU05UYWJsZSclPigpew0KICAgICAgICAvL3RoaXMuX2RlZmF1bHRzKCk7DQoNCiAgICAgICAgdHJ5ew0KICAgIDwlIGlmKF9jTmFtZSgnQXBwbGljYXRpb24nKSAmJiBfY05hbWUoJ0NvbHVtbicpKXslPg0KICAgICAgICAgICAgbGV0IHJldCA9IHRoaXMuX19leHBvcnQobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdUYWJsZScsIHRydWUpJT4oPCU9X3RpZCgpJT4pLmNvZGUoPCU9X25Db2RlKCklPikuPCVhcHAoKSU+Lm5hbWUoJzwlPWMuTmFtZSU+JykucmVtYXJrKGA8JT1jLlJlbWFyayU+YCkuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSksIHsNCiAgICAgICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLnRhYmxlX0NvbHVtbnMobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdDb2x1bW4nLCB0cnVlKSU+KDwlPV9pZCgiJyIrc2NvcGUrIi4iK2MuTmFtZSsiJytlYUNvZGUiKSU+KS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5uYW1lKCI8JT1zci5FbmdsaXNoTmFtZShlYS5OYW1lKSU+IikuY29kZShlYUNvZGUpLnR5cGUoJzwlPV9GckVNRC5fYXR0cihlYSklPicpLnJlZmVyZW5jZSg8JWlmKGVhLkVudGl0eVR5cGUpeyU+KHYgfHwgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKSkuPCU9bU5hbWUlPigpPCV9ZWxzZXslPm51bGw8JX0lPikvKjwlbGFiZWwoJ2NvbHVtbicsIGVhLk5hbWUsICdlYUNvZGUnLCBlYS5QbHVyYWwpJT4qLyksDQogICAgICAgIDwlIH0pJT4NCiAgICAgICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4ge2xldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLnJlZmVyZW5jZV9Db2x1bW5zKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnQ29sdW1uJywgdHJ1ZSklPigpLmFjdGl2ZShmYWxzZSkuZW5hYmxlZCh0cnVlKS5jb2RlKGVhQ29kZSkudHlwZSgnTGlzdCcpLm5hbWUoIjwlPW5OYW1lKHRhKSU+IDwlPXRhLkVudGl0eUNsYXNzLlBsdXJhbCU+IikucmVmZXJlbmNlKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4oKSkvKjwlbGFiZWwoJ2NvbHVtbicsIHRhLk5hbWUrJyAnK3RhLkVudGl0eUNsYXNzLlBsdXJhbCwgJ2VhQ29kZScsIHRhLkVudGl0eUNsYXNzLlBsdXJhbCklPiovKSwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHJldDsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgPCUgfSU+DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b1NORmxvdyclPihiRHJhZnQsIGJIZWFkZXIpew0KICAgICAgICB0cnl7DQogICAgPCUgaWYoX2NOYW1lKCdBcHBsaWNhdGlvbicpICYmIF9jTmFtZSgnRmxvdycpKXslPg0KICAgICAgICA8JSBsZXQgYk9yZGVyID0gMTsgbGV0IF9maWQgPSBfYyA9PiBfaWQoIiciK3Njb3BlKyIuJyArIChiRHJhZnQ/J2QnOidzJykgKyAnbCIrIChfYyB8fCBjKS5OYW1lICsgIiciKTsNCiAgICAgICAgbGV0IGxvZ2ljID0gKG4sIHQsIG1hcD1bXSkgPT4geyU+DQogICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgTG9naWMnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLm9yZGVyKDwlPWJPcmRlcisrJT4pLmNvZGUodGhpcy5fdXVpZCgpKS5uYW1lKCc8JT1uJT4nKS5yZW1hcmsoJzwlPW4lPicpDQogICAgICAgICAgICAgICAgLmJsb2NrKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBCbG9jaycsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSg8JT1faWQoKSU+KS5uYW1lKCc8JT1uJT4nKQ0KICAgICAgICAgICAgICAgICAgICAuYmxvY2tfRWxlbWVudF9NYXBwaW5ncyhbPCUgbWFwLmZpbHRlcihtID0+IG0pLmZvckVhY2gobSA9PiB7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRWxlbWVudCBNYXBwaW5nJywgdHJ1ZSklPig8JT1faWQoKSU+KS5uYW1lKCI8JT1uJT4gLSAiICsgPCU9bS5jZCU+KS5jb2RlKDwlPW0uY2QlPikudmFsdWUoPCU9bS52JT4pPCVwQ29tcG91bmQobS52LCBtLnRybiklPiwNCiAgICAgICAgICAgICAgICAgICAgPCV9KSU+XSkNCiAgICAgICAgICAgICAgICApLmRlZmluaXRpb24obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdMb2dpYyBEZWZpbml0aW9uJywgdHJ1ZSklPignPCU9dCU+IDwlPW4lPicpLmNvZGUoJzwlPXQlPicpLm5hbWUoJzwlPXQlPicpKS48JWFwcCgpJT4NCiAgICAgICAgPCV9DQogICAgICAgIGxldCBhY3Rpb24gPSAoYUNvZGUsIHBhcmFtcz17fSkgPT4geyAlPg0KICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdBY3Rpb24gSW5zdGFuY2UnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmNvZGUodGhpcy5fdXVpZCgpKS5hY3Rpb24obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdBY3Rpb24gVHlwZScsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSgnPCU9YUNvZGUlPicpKS5vcmRlcig8JT1iT3JkZXIrKyU+KS48JWFwcCgpJT4NCiAgICAgICAgICAgIC5hY3Rpb25fVmFyaWFibGVfVmFsdWVzKFsNCiAgICAgICAgICAgIDwlIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChwID0+IHslPg0KICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVmFyaWFibGUgVmFsdWUnLCB0cnVlKSU+KCkuY29kZSgnPCU9cCU+JykudmFsdWUoPCU9cGFyYW1zW3BdJT4pLmFjdGlvbklucHV0KA0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0FjdGlvbiBJbnB1dCcsIHRydWUpJT4oKS5jb2RlKCc8JT1wJT4nKQ0KICAgICAgICAgICAgICAgICkubWFwcGluZyhuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0VsZW1lbnQgTWFwcGluZycsIHRydWUpJT4oKS5jb2RlKCc8JT1wJT4nKS52YWx1ZSgiIikpLA0KICAgICAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgXSkNCiAgICAgICAgPCV9DQogICAgICAgIGxldCBzdWJmbG93ID0gKGZsb3csIHBhcmFtcz17fSwgYk5vV2FpdCkgPT4geyAlPg0KICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IEluc3RhbmNlJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKHRoaXMuX3V1aWQoKSkuc3ViZmxvdyg8JT1mbG93JT4pLm9yZGVyKDwlPWJPcmRlcisrJT4pLjwlYXBwKCklPg0KICAgICAgICAgICAgPCUgaWYoIWJOb1dhaXQpeyU+DQogICAgICAgICAgICAuaW5zdGFuY2VfRmxvd19JbnN0YW5jZV9JbnB1dHMoW25ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBJbnN0YW5jZSBJbnB1dCcsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSgnd2FpdF9mb3JfY29tcGxldGlvbicpLm5hbWUoJ1dhaXQgZm9yIENvbXBsZXRpb24nKS50eXBlKCdCb29sJyldKQ0KICAgICAgICAgICAgLmluc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlcyhbDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVmFyaWFibGUgVmFsdWUnLCB0cnVlKSU+KCkuY29kZSgnd2FpdF9mb3JfY29tcGxldGlvbicpLnZhbHVlKCcxJykNCiAgICAgICAgICAgICAgICAgICAgLm1hcHBpbmcobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdFbGVtZW50IE1hcHBpbmcnLCB0cnVlKSU+KCkuY29kZSgnd2FpdF9mb3JfY29tcGxldGlvbicpKQ0KICAgICAgICAgICAgXSkNCiAgICAgICAgICAgIDwlfSU+DQogICAgICAgICAgICAuaW5zdGFuY2VfVmFyaWFibGVfVmFsdWVzKFsNCiAgICAgICAgICAgIDwlIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChwID0+IHslPg0KICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVmFyaWFibGUgVmFsdWUnLCB0cnVlKSU+KCkuY29kZSgnPCU9cCU+JykudmFsdWUoPCU9cGFyYW1zW3BdJT4pLmZsb3dJbnB1dCgNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IElucHV0JywgdHJ1ZSklPigpLmNvZGUoJzwlPXAlPicpDQogICAgICAgICAgICAgICAgKS5tYXBwaW5nKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRWxlbWVudCBNYXBwaW5nJywgdHJ1ZSklPigpLmNvZGUoJzwlPXAlPicpLnZhbHVlKDwlPXBhcmFtc1twXSU+KSkNCiAgICAgICAgICAgIDwlIH0pJT4NCiAgICAgICAgICAgIF0pDQogICAgICAgIDwlfQ0KICAgICAgICBsZXQgcENvbXBvdW5kID0gKHYsIHRybikgPT4ge2lmKCF0cm4pIHJldHVybjsgJT4uZWxlbWVudE1hcHBpbmdfUGlsbF9Db21wb3VuZHMoW25ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnUGlsbCBDb21wb3VuZCcsIHRydWUpJT4odGhpcy5fdXVpZCgpKS5jb2RlKCcnKS5uYW1lKDwlPXYlPikub3JkZXIoMCkvKi5yZW1hcmsodGhpcy5fYnRvYShgPCU9SlNPTi5zdHJpbmdpZnkoW10pJT5gKSkqLy48JWFwcCgpJT4NCiAgICAgICAgICAgIC5wYXJlbnRfUGlsbF9Db21wb3VuZHMoWw0KICAgICAgICAgICAgPCUgT2JqZWN0LmtleXModHJuKS5mb3JFYWNoKCh0LCBpKSA9PiB7JT4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdQaWxsIENvbXBvdW5kJywgdHJ1ZSklPih0aGlzLl91dWlkKCkpLmNvZGUoIjwlPXQlPiIpLm9yZGVyKDwlPWkrMSU+KS5uYW1lKDwlPXYlPikucmVtYXJrKHRoaXMuX2J0b2EoYDwlPUpTT04uc3RyaW5naWZ5KHRyblt0XSklPmApKS48JWFwcCgpJT4vKi50cmFuc2Zvcm0obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdUcmFuc2Zvcm0nLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmNvZGUoJzwlPXQlPicpLnRyYW5zZm9ybV9UcmFuc2Zvcm1fQ29tcG9zaXRpb25zKFtuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1RyYW5zZm9ybSBDb21wb3NpdGlvbicsIHRydWUpJT4oKS5jb2RlKCcnKV0pKSovLA0KICAgICAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgXSldKQ0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgDQogICAgICAgICAgICAvKg0KICAgICAgICAgICAgICogT09CIEVuZHBvaW50OiBodHRwczovL2RldjE2MjU3MC5zZXJ2aWNlLW5vdy5jb20vYXBpL25vdy9wcm9jZXNzZmxvdy9mbG93b2JqZWN0L3N0YXJ0L3N1YmZsb3cNCiAgICAgICAgICAgICAqIFBheWxvYWQ6IHsibmFtZSI6InhfNzg2MTFfc2Nob29sX21hbi5Vc2VyX2xvb2t1cCIsImlucHV0cyI6eyJqc29uIjp7Im5hbWUiOiJ0ZXN0IiwiZ2VuZGVyIjp7ImNvZGUiOiJNIiwgIk9QRVJBVE9SUyI6IHsiY29kZSI6ICIhPSJ9fSwidXNlcl9TdHVkZW50cyI6W3sibmFtZSI6IlNUQSIsImdlbmRlciI6eyJjb2RlIjoiTSJ9fV19fX0NCiAgICAgICAgICAgICovDQoNCiAgICAgICAgICAgIGxldCBmbG93ID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93JywgdHJ1ZSklPig8JT1fZmlkKCklPikubmFtZSgnPCU9Yy5OYW1lJT4gTG9va3VwJykuY29kZSg8JT1fbkNvZGUoKSU+ICsgJ19sb29rdXAnKS48JWFwcCgpJT4uYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSk7DQogICAgICAgICAgICBpZihiSGVhZGVyKSByZXR1cm4gZmxvdzsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19leHBvcnQoZmxvdy8qLl9kZWZhdWx0cygpKi8NCiAgICAgICAgICAgICAgICAuZmxvd19GbG93X1NldHRpbmdzKFtuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgU2V0dGluZycsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSgnQUNUSU9OJyldKQ0KICAgICAgICAgICAgICAgIC5mbG93X0Zsb3dfSW5wdXRzKFsNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IElucHV0JywgdHJ1ZSklPig8JT1faWQoKSU+KS5hY3RpdmUodHJ1ZSkuY29kZSgnanNvbicpLm5hbWUoJ0pTT04nKS50eXBlKCdKU09OJyk8JWxhYmVsKCdpbnB1dCcsICdKU09OJywgIidqc29uJyIpJT4NCiAgICAgICAgICAgICAgICBdKS5mbG93X0Zsb3dfT3V0cHV0cyhbDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBPdXRwdXQnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmFjdGl2ZSh0cnVlKS5jb2RlKDwlPV9uQ29kZSgpJT4gKyAnX2xpc3QnKS5uYW1lKCc8JT1uTmFtZShjKSU+IExpc3QnKS50eXBlKCdMaXN0JykucmVmZXJlbmNlKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnVGFibGUnLCB0cnVlKSU+KCI8JT1uTmFtZShjKSU+IikubmFtZSgnPCU9Yy5OYW1lJT4nKS5jb2RlKDwlPV9uQ29kZSgpJT4pLjwlYXBwKCklPikNCiAgICAgICAgICAgICAgICAgICAgPCVsYWJlbCgnb3V0cHV0JywgYy5OYW1lICsgJyBMaXN0JywgX25Db2RlKCkgKyAiKyAnX2xpc3QnIiklPg0KICAgICAgICAgICAgICAgIF0pLmZsb3dfRmxvd19WYXJpYWJsZXMoWw0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgVmFyaWFibGUnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmFjdGl2ZSh0cnVlKS5jb2RlKCdqc29uJykubmFtZSgnSlNPTicpLnR5cGUoJ0pTT04nKTwlbGFiZWwoJ3ZhcmlhYmxlJywgJ0pTT04nLCAnImpzb24iJyklPiwNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IFZhcmlhYmxlJywgdHJ1ZSklPig8JT1faWQoKSU+KS5hY3RpdmUodHJ1ZSkuY29kZSgnZXF1ZXJ5JykubmFtZSgnRVF1ZXJ5JykudHlwZSgnU3RyaW5nJyk8JWxhYmVsKCd2YXJpYWJsZScsICdFUXVlcnknLCAnImVxdWVyeSInKSU+LA0KICAgICAgICAgICAgICAgIF0pLmZsb3dfRmxvd19Mb2dpY3MoWw0KICAgICAgICAgICAgICAgICAgICA8JWxvZ2ljKCdTZXQgJyArIGMuTmFtZSArICcgSlNPTicsICdTZXQgRmxvdyBWYXJpYWJsZXMnLCBbe2NkOiAiJ2pzb24nIiwgdjogIid7e3N1YmZsb3cuanNvbn19JyJ9XSklPiwNCiAgICAgICAgICAgICAgICAgICAgPCUgLy8gLCB0cm46IHtyZXBsYWNlX3N0cmluZzoge3JlZ2V4OiAiLy9nIiwgcmVwbGFjZV9zdHJpbmc6ICIifX0lPg0KICAgICAgICAgICAgICAgIF0pLnNlY3VyaXR5Q29udHJvbChuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ1NlY3VyaXR5IENvbnRyb2wnLCB0cnVlKSU+KDwlPV9pZCgpJT4pLmNvZGUoJ3N5c19odWJfZmxvdycpLm5hbWUoYHN5c19zY29wZS5zY29wZT0ke3RoaXMuX19jb25maWcoJ3Njb3BlJywgJzwlPXNjb3BlJT4nKX1gKS50eXBlKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnU2VjdXJpdHkgVHlwZScsIHRydWUpJT4oKS5jb2RlKCdjbGllbnRfY2FsbGFibGVfZmxvd19vYmplY3QnKSkub3BlcmF0aW9uKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnU2VjdXJpdHkgT3BlcmF0aW9uJywgdHJ1ZSklPigpLmNvZGUoJ2V4ZWN1dGUnKSkuPCVhcHAoKSU+KSwgew0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vZXhwb3J0ZXI6IHYgPT4gdi5vYmogPSB2LnJldXNlZD9uZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cnLCB0cnVlKSU+KHYub2JqLklkKTp2Lm9iaiwgLyppbmZvcm1hdGlvbiBsb3NzKi8NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBOdWxsOiAhYkhlYWRlciwNCiAgICAgICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgIA0KICAgICAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iajwlaWYoMCB8fCAoWyduYW1lJywgJ3JlbWFyaycsICdkYXRlJywgJ29yZGVyJywgJ2FjdGl2ZScsICdlbmFibGVkJ10uaW5kZXhPZihlYS5OYW1lKTwwKSl7JT4uZmxvd19GbG93X1ZhcmlhYmxlcyhbDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBWYXJpYWJsZScsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZShlYUNvZGUpLm5hbWUoJzwlPXNyLkVuZ2xpc2hOYW1lKGVhLk5hbWUpJT4nKS50eXBlKDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+J0pTT04nPCUgfWVsc2V7JT4nPCU9X0ZyRU1ELl9hdHRyKGVhKSU+JzwlfSU+KTwlbGFiZWwoJ3ZhcmlhYmxlJywgZWEuTmFtZSwgImVhQ29kZSIpJT4sDQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBWYXJpYWJsZScsIHRydWUpJT4oPCU9X2lkKCklPikubmFtZSgnPCU9bk5hbWUoYyklPi48JT1lYS5OYW1lJT4uU2V0JykuY29kZShlYUNvZGUgKyAnX3NldCcpLm5hbWUoJzwlPXNyLkVuZ2xpc2hOYW1lKGVhLk5hbWUpJT4gU2V0JykudHlwZSgnQm9vbCcpPCVsYWJlbCgndmFyaWFibGUnLCBlYS5OYW1lICsgJyBTZXQnLCAiZWFDb2RlICsgJ19zZXQnIiklPiwNCiAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IFZhcmlhYmxlJywgdHJ1ZSklPig8JT1faWQoKSU+KS5jb2RlKGVhQ29kZSArICdfb3AnKS5uYW1lKCc8JT1zci5FbmdsaXNoTmFtZShlYS5OYW1lKSU+IE9wZXJhdG9yJykudHlwZSgnU3RyaW5nJyk8JWxhYmVsKCd2YXJpYWJsZScsIGVhLk5hbWUgKyAnIE9wZXJhdG9yJywgImVhQ29kZSArICdfb3AnIiklPiwNCiAgICAgICAgICAgICAgICAgICAgXSkuZmxvd19GbG93X0xvZ2ljcyhbDQogICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ1NldCAnK2VhLk5hbWUsICdTZXQgRmxvdyBWYXJpYWJsZXMnLCBbDQogICAgICAgICAgICAgICAgICAgICAgICBlYS5FbnRpdHlUeXBlP251bGw6e2NkOiAiZWFDb2RlIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuanNvbn19JyIsIHRybjogT2JqZWN0LmFzc2lnbih7fSwge3ZhbHVlX21hcDoge2tleTogIiR7ZWFDb2RlfSIsIGRlZmF1bHQ6ICIifX0sIGVhLl9Jc0RhdGU/e3N0cmluZ190b19kYXRlOiB7ZGF0ZV9mb3JtYXQ6ICJ5eXl5LU1NLWRkXCdUXCdISDptbTpzc1wnWlwnIiwgY3VzdG9tX2Zvcm1hdDogIiJ9fTp7fSl9LA0KICAgICAgICAgICAgICAgICAgICAgICAgLy97Y2Q6ICJlYUNvZGUrJ19zZXQnIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuJytlYUNvZGUrJ319fSciLCB0cm46IHtpc19udWxsOiB7fX19LA0KICAgICAgICAgICAgICAgICAgICAgICAgLy97Y2Q6ICJlYUNvZGUrJ19vcCciLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS5vcGVyYXRvcnN9fSciLCB0cm46IHt2YWx1ZV9tYXA6IHtrZXk6ICIke2VhQ29kZX0ifX19LA0KICAgICAgICAgICAgICAgICAgICBdKSU+LmxvZ2ljX0Zsb3dfSW5wdXRfU2NyaXB0cyhbDQogICAgICAgICAgICAgICAgICAgICAgICA8JWlmKGVhLkVudGl0eVR5cGUpeyU+bmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IElucHV0IFNjcmlwdCcsIHRydWUpJT4oPCU9X2lkKCklPikubmFtZSgnU2V0IDwlPWVhLk5hbWUlPicpLmFjdGl2ZSh0cnVlKS5jb2RlKGVhQ29kZSkucmVtYXJrKGByZXR1cm4gZmRfZGF0YS5mbG93X3Zhci5qc29uLiR7ZWFDb2RlfTtgKSw8JX0lPg0KICAgICAgICAgICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdGbG93IElucHV0IFNjcmlwdCcsIHRydWUpJT4oPCU9X2lkKCklPikubmFtZSgnU2V0IDwlPWVhLk5hbWUlPiBTZXQnKS5hY3RpdmUodHJ1ZSkuY29kZShlYUNvZGUgKyAnX3NldCcpLnJlbWFyayhgcmV0dXJuIHR5cGVvZihmZF9kYXRhLmZsb3dfdmFyLmpzb24uJHtlYUNvZGV9KSFcdTAwM2RcdTAwM2RcdTAwMjd1bmRlZmluZWRcdTAwMjc7YCksDQogICAgICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5wdXQgU2NyaXB0JywgdHJ1ZSklPig8JT1faWQoKSU+KS5uYW1lKCdTZXQgPCU9ZWEuTmFtZSU+IE9wZXJhdG9yJykuYWN0aXZlKHRydWUpLmNvZGUoZWFDb2RlICsgJ19vcCcpLnJlbWFyayhgcmV0dXJuIChmZF9kYXRhLmZsb3dfdmFyLmpzb24uT1BFUkFUT1JTIHx8IHt9KS4ke2VhQ29kZX07YCksDQogICAgICAgICAgICAgICAgICAgIF0pLA0KDQogICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ0lmICcgKyBjLk5hbWUgKyAnICcrZWEuTmFtZSsnIFNldCcsICdJZicsIFt7Y2Q6ICInY29uZGl0aW9uJyIsIHY6ICIne3tmbG93X3ZhcmlhYmxlLicgKyBlYUNvZGUgKyAnX3NldH19PXRydWUnIn1dKSU+DQogICAgICAgICAgICAgICAgICAgIDwlaWYoZWEuRW50aXR5VHlwZSl7JT4ucGFyZW50X0Zsb3dfSW5zdGFuY2VzKDwlc3ViZmxvdygnbmV3ICcrc2NvcGUrJy4nK19jTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSsnKCkuJyttTmFtZSsnKGZhbHNlLCB0cnVlKScsIHtqc29uOiAiJ3t7Zmxvd192YXJpYWJsZS4nK2VhQ29kZSsnfX0nIn0pJT4pPCV9JT4NCiAgICAgICAgICAgICAgICAgICAgLnBhcmVudF9GbG93X0xvZ2ljcyhbDQogICAgICAgICAgICAgICAgICAgICAgICA8JWxvZ2ljKCdBZGQgJytlYS5OYW1lKycgdG8gJyArIGMuTmFtZSArICcgRVF1ZXJ5JywgJ1NldCBGbG93IFZhcmlhYmxlcycsIFt7Y2Q6ICInZXF1ZXJ5JyIsIHY6ICIne3tmbG93X3ZhcmlhYmxlLmVxdWVyeX19XicrZWFDb2RlIn1dKSU+LA0KICAgICAgICAgICAgICAgICAgICAgICAgPCVsb2dpYygnSWYgJyArIGMuTmFtZSArICcgJytlYS5OYW1lKycgT3BlcmF0b3IgaXMgbm90IGVtcHR5JywgJ0lmJywgW3tjZDogIidjb25kaXRpb24nIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuJytlYUNvZGUrJ19vcH19IT0nIn1dKSU+LnBhcmVudF9GbG93X0xvZ2ljcyhbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCVsb2dpYygnQXBwZW5kICcrZWEuTmFtZSsnIE9wZXJhdG9yIHRvICcgKyBjLk5hbWUgKyAnIEVRdWVyeScsICdTZXQgRmxvdyBWYXJpYWJsZXMnLCBbe2NkOiAiJ2VxdWVyeSciLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS5lcXVlcnl9fXt7Zmxvd192YXJpYWJsZS4nK2VhQ29kZSsnX29wfX0nIn1dKSU+DQogICAgICAgICAgICAgICAgICAgICAgICBdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ0Vsc2UgJyArIGMuTmFtZSArICcgJytlYS5OYW1lKycgbm90IFNldCcsICdFbHNlJyklPi5wYXJlbnRfRmxvd19Mb2dpY3MoWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwlbG9naWMoJ0FwcGVuZCA9IHRvICcgKyBjLk5hbWUgKyAnIEVRdWVyeSBmb3IgJytlYS5OYW1lLCAnU2V0IEZsb3cgVmFyaWFibGVzJywgW3tjZDogIidlcXVlcnknIiwgdjogIid7e2Zsb3dfdmFyaWFibGUuZXF1ZXJ5fX09JyJ9XSklPg0KICAgICAgICAgICAgICAgICAgICAgICAgXSksDQogICAgICAgICAgICAgICAgICAgICAgICA8JWlmKGVhLkVudGl0eVR5cGUpeyU+PCVsb2dpYygnRm9yIGVhY2ggJytjLk5hbWUrJyAnK2VhLk5hbWUsICdGb3IgRWFjaCcsIFt7Y2Q6ICInaXRlbXMnIiwgdjogIid7ezw8KiojJGZbaW50ZXJuYWxfbmFtZT1cXCciK2MuTmFtZSsiX2xvb2t1cFxcJyBhbmQgJG5vdCgkZXhpc3RzKGZsb3dfRmxvd19TbmFwc2hvdHMpKV0uc25hcHNob3RfRmxvd19Mb2dpY3MuKioucGFyZW50X0Zsb3dfSW5zdGFuY2VzIyRmaVskbnVtYmVyKG9yZGVyKTw9IitiT3JkZXIrIiBhbmQgc3ViZmxvdy5pbnRlcm5hbF9uYW1lPVxcJyIrZWEuRW50aXR5VHlwZS5OYW1lKyJfbG9va3VwXFwnXS51aV9pZD4+LiIrZWEuRW50aXR5VHlwZS5OYW1lKyJfbGlzdH19JyJ9XSklPi5wYXJlbnRfRmxvd19Mb2dpY3MoWzwlfSU+DQogICAgICAgICAgICAgICAgICAgICAgICA8JWxvZ2ljKCdBcHBlbmQgJytlYS5OYW1lKycgdG8gJyArIGMuTmFtZSArICcgRVF1ZXJ5JywgJ1NldCBGbG93IFZhcmlhYmxlcycsIFt7Y2Q6ICInZXF1ZXJ5JyIsIHY6ICIne3tmbG93X3ZhcmlhYmxlLmVxdWVyeX19e3tmbG93X3ZhcmlhYmxlLicrZWFDb2RlKyd9fScifV0pJT4sDQogICAgICAgICAgICAgICAgICAgICAgICA8JWlmKGVhLkVudGl0eVR5cGUpeyU+XSk8JX0lPiwNCiAgICAgICAgICAgICAgICAgICAgXSksDQogICAgICAgICAgICAgICAgXSk8JX0lPg0KICAgICAgICAgICAgICAgICwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7bGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmo8JWlmKDAgfHwgWydVc2VyJywgJ0dlbmRlcicsICdfU3R1ZGVudCcsICdfVGVhY2hlciddLmluZGV4T2YodGEuRW50aXR5Q2xhc3MuTmFtZSk+PTApeyU+LmZsb3dfRmxvd19Mb2dpY3MoWzwlbG9naWMoJ0lmICcrdGFOYW1lKycgbm90IGVtcHR5JywgJ0lmJyklPi5wYXJlbnRfRmxvd19JbnN0YW5jZXMoPCVzdWJmbG93KCduZXcgJytzY29wZSsnLicrX2NOYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSsnKCkuJyttTmFtZSsnKGJEcmFmdCwgdHJ1ZSknLCB7anNvbjogIid0ZXN0JyJ9KSU+KV0pPCV9JT4sDQogICAgICAgIDwlIH0pJT4NCiAgICAgICAgICAgICAgICBfbG9va3VwOiBvYmogPT4gb2JqLmZsb3dfRmxvd19Mb2dpY3MoWzwlbG9naWMoJ0lmIEVRdWVyeSBub3QgZW1wdHknLCAnSWYnLCBbe2NkOiAiJ2NvbmRpdGlvbiciLCB2OiAiJ3t7Zmxvd192YXJpYWJsZS5lcXVlcnl9fSE9JyJ9XSklPg0KICAgICAgICAgICAgICAgICAgICAucGFyZW50X0FjdGlvbl9JbnN0YW5jZXMoWw0KICAgICAgICAgICAgICAgICAgICAgICAgPCVhY3Rpb24oJ2xvb2tfdXBfcmVjb3JkcycsIHt0YWJsZTogJyI8PCQuc3lzX3Njb3BlLnNjb3BlPj5fIisoJytfbkNvZGUoKSsnKS50b0xvd2VyQ2FzZSgpJ30pJT4sDQogICAgICAgICAgICAgICAgICAgIF0pLmxvZ2ljX0Zsb3dfSW5wdXRfU2NyaXB0cyhbDQogICAgICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgSW5wdXQgU2NyaXB0JywgdHJ1ZSklPigpLm5hbWUoJ1NldCBDb25kaXRpb24nKS5hY3RpdmUodHJ1ZSkuY29kZSgnY29uZGl0aW9ucycpLnJlbWFyayhgcmV0dXJuIGZkX2RhdGEuZmxvd192YXIuZXF1ZXJ5O2ApLA0KICAgICAgICAgICAgICAgICAgICBdKQ0KICAgICAgICAgICAgICAgIF0pLA0KICAgICAgICAgICAgICAgIF9zbmFwc2hvdDogb2JqID0+IGJEcmFmdD9udWxsOm9iai5mbG93X0Zsb3dfU25hcHNob3RzKG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnRmxvdyBTbmFwc2hvdCcsIHRydWUpJT4oPCU9X2ZpZCgpJT4pLnNuYXBzaG90X0Zsb3dfUGxhbnMoWw0KICAgICAgICAgICAgICAgICAgICBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0Zsb3cgUGxhbicsIHRydWUpJT4oPCU9X2lkKCklPikuY29kZSgnPCU9Yy5OYW1lJT5fUGxhbicpLm5hbWUoJzwlPWMuTmFtZSU+IFBsYW4nKQ0KICAgICAgICAgICAgICAgICAgICBdKS5mcm9tRmxvdyh0aGlzLjwlPW1OYW1lJT4odHJ1ZSkpKSwNCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+IiwgYkRyYWZ0LCBiSGVhZGVyKTsNCiAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgcmV0dXJuIFtdOw0KICAgIDwlIH0lPg0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIGFzeW5jIDwlPW1OYW1lPSdfdG9TTlNjcmlwdCclPihvcHRpb25zPXt9KXsNCiAgICAgICAgb3B0aW9ucy5fdGhpcyA9IG9wdGlvbnMuX3RoaXMgfHwgdGhpczsNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihvcHRpb25zKTsNCjwlIH1lbHNleyU+DQogICAgICAgIHRyeXsNCiAgICA8JSBpZihfY05hbWUoJ0FwcGxpY2F0aW9uJykgJiYgX2NOYW1lKCdSb2xsYmFjayBDb250ZXh0JykpeyU+DQogICAgICAgICAgICBsZXQgZXhwID0gb3B0aW9ucy5yYXc/Il90b0pTT04iOiJfdG9Eb2N1bWVudCI7DQogICAgICAgICAgICBsZXQgcm9sbGJhY2sgPSAob3B0aW9ucy5hcHAgJiYgb3B0aW9ucy5yb2xsYmFjayk/YXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKCdSb2xsYmFjayBDb250ZXh0JywgdHJ1ZSklPigpLmNvZGUoJ2xhc3QnKVtleHBdKE9iamVjdC5hc3NpZ24oe2JKU09OOiB0cnVlfSwgb3B0aW9ucykpOiIiOw0KICAgICAgICAgICAgbGV0IGRiID0gb3B0aW9ucy5kYj9hd2FpdCBvcHRpb25zLl90aGlzLl90b1NOVGFibGUoKVtleHBdKE9iamVjdC5hc3NpZ24oe2JKU09OOiB0cnVlfSwgb3B0aW9ucykpOiIiOw0KICAgICAgICAgICAgbGV0IGZsb3cgPSBvcHRpb25zLmZsb3c/YXdhaXQgb3B0aW9ucy5fdGhpcy5fdG9TTkZsb3cob3B0aW9ucy5kcmFmdClbZXhwXShPYmplY3QuYXNzaWduKHtiSlNPTjogdHJ1ZX0sIG9wdGlvbnMpKToiIjsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYob3B0aW9ucy5nemlwKXsNCiAgICAgICAgICAgICAgICBpZihmbG93KSBmbG93ID0gdGhpcy5VdGY4QXJyYXlUb1N0cihhd2FpdCB0aGlzLl9jb21wcmVzcyhmbG93KSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCB0ZXN0ID0gKG9wdGlvbnMudGVzdCAmJiBvcHRpb25zLmZsb3cgJiYgIW9wdGlvbnMuZHJhZnQpP2Bcbi8qZ3MuY2FjaGVGbHVzaCgpOyAqL2dzLmluZm8oc25fZmQuRmxvd0FQSS5nZXRSdW5uZXIoKS5zdWJmbG93KCcke3RoaXMuX19jb25maWcoJ3Njb3BlJywgJzwlPXNjb3BlJT4nKX0uVXNlcl9sb29rdXAnKS5pbkZvcmVncm91bmQoKS53aXRoSW5wdXRzKHtqc29uOiB7Y29kZToidGVzdCIsZGF0ZTonMjAyNC0wNS0wM1QxODo0NDowMy4xNzdaJyxnZW5kZXI6e2NvZGU6Ik0iLCBPUEVSQVRPUlM6IHtjb2RlOiAiIT0ifX0sdXNlcl9TdHVkZW50czpbe2NvZGU6IlNUQSIsZ2VuZGVyOntjb2RlOiJNIn19XSwgT1BFUkFUT1JTOiB7ZGF0ZTogJzwnfX19KS5ydW4oKS5nZXRPdXRwdXRzKClbIlVzZXJfbGlzdCJdKTtcbmA6Jyc7DQogICAgICAgICAgICBsZXQgYXBwID0gb3B0aW9ucy5hcHA/KG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSgnQXBwbGljYXRpb24nLCB0cnVlKSU+KCkuX3RvU05TYXZlKG9wdGlvbnMpICsgYFxuIHZhciBjb25maWcgPSB7QXBwbGljYXRpb246IHtyZWFkT25seTogdHJ1ZX0sIFRhYmxlOiB7aWRLZXk6ICduYW1lJywgTG9nU2V0OiAwfSwgQ29sdW1uOiB7TG9nU2V0OiAwfSwgRWxlbWVudF9NYXBwaW5nOiB7TG9nU2V0OiAwfSwgQWN0aW9uX0lucHV0OiB7cmVhZE9ubHk6IHRydWV9LCBBY3Rpb25fVHlwZToge3JlYWRPbmx5OiB0cnVlLCBpZEtleTogJ21hc3Rlcl9zbmFwc2hvdCd9LCBBY3Rpb25fSW5zdGFuY2U6IHtMb2dTZXQ6IDB9LCBTZWN1cml0eV9UeXBlOiB7cmVhZE9ubHk6IHRydWUsIGlkS2V5OiAnbmFtZSd9LCBTZWN1cml0eV9PcGVyYXRpb246IHtyZWFkT25seTogdHJ1ZSwgaWRLZXk6ICduYW1lJ30sIExvZ2ljX0RlZmluaXRpb246IHtyZWFkT25seTogdHJ1ZX0sIEZsb3c6IHtMb2dTZXQ6IDB9LCBUcmFuc2Zvcm06IHtyZWFkT25seTogdHJ1ZX0sIFRyYW5zZm9ybV9Db21wb3NpdGlvbjoge3JlYWRPbmx5OiB0cnVlfSwgUm9sbGJhY2tfQ29udGV4dDoge3JlYWRPbmx5OiB0cnVlfX07IFxuYCArIChvcHRpb25zLnJvbGxiYWNrPygidmFyIGNpZCA9IHNhdmVSb2xsYmFja19Db250ZXh0KCIrcm9sbGJhY2srYCk7IGlmKGNpZCl7dmFyIHJ3ID0gbmV3IEdsaWRlUm9sbGJhY2tXb3JrZXIoKTsgcncuc2V0Um9sbGJhY2tDb250ZXh0SUQoY2lkLnN5c19pZCk7IHJ3LnN0YXJ0KCk7fSBcbmApOiIiKSsgKG9wdGlvbnMuZGI/KCJzYXZlVGFibGUoIitkYisiKTsgXG4iKToiIikgKyAob3B0aW9ucy5mbG93Pygic2F2ZUZsb3coIitmbG93KyIpOyBcbiIpOiIiKSArIHRlc3QpOihyb2xsYmFjayArIGRiICsgZmxvdyk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBzY3JpcHQgPSB0aGlzLl9iZWF1dGlmeShhcHAsICdqYXZhc2NyaXB0Jyk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKCFvcHRpb25zLmRlcGxveSkgcmV0dXJuIHNjcmlwdDsNCiAgICA8JSB9JT4NCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J190b1NOU2F2ZSclPihvcHRpb25zKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgPCUgdmFyIF9mUmVnRXhwID0gL19me1tefV0rfS9nbTsgJT4NCiAgICAgICAgICAgIGxldCBfZiA9ICh2LCBlYUNvZGUpID0+IHsNCiAgICAgICAgICAgICAgICBpZih0eXBlb2Yodik9PT0ic3RyaW5nIil7DQogICAgICAgICAgICAgICAgICAgIGxldCByZXQgPSB2Ow0KICAgICAgICAgICAgICAgICAgICAvL2lmKHYuc3RhcnRzV2l0aCgiZigiKSAmJiB2LmVuZHNXaXRoKCIpIikpIHJldCA9ICcoJyt2LnNsaWNlKDIsLTEpKycpJzsNCiAgICAgICAgICAgICAgICAgICAgaWYodi5zdGFydHNXaXRoKCJzKCIpICYmIHYuZW5kc1dpdGgoIikiKSl7DQogICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBgKGZ1bmN0aW9uIChvYmosICR7ZWFDb2RlfSl7YCt2LnNsaWNlKDIsLTEpK2B9KShvYmosICR7ZWFDb2RlfSlgOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZihyZXQgJiYgcmV0Lm1hdGNoICYmIHJldC5tYXRjaCg8JT1fZlJlZ0V4cCU+KSkgcmV0ID0gYChmdW5jdGlvbiAob2JqLCAke2VhQ29kZX0peyR7cmV0LmluZGV4T2YoInJldHVybiIpPDA/InJldHVybiAiOiIifSAnYCtyZXQucmVwbGFjZSg8JT1fZlJlZ0V4cCU+LCBtID0+IGAnICsgJHttLnNsaWNlKDMsIC0xKX0gKyAnYCkrYCc7fSkob2JqLCAke2VhQ29kZX0pYDsNCiAgICAgICAgICAgICAgICAgICAgaWYocmV0ICYmIHJldC5tYXRjaCAmJiByZXQubWF0Y2goLzw8W14+Pl0rPj4vZ20pKSByZXQgPSAnIiInOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gYChmdW5jdGlvbih2KXsgdHJ5eyByZXR1cm4gKHYgJiYgdi5yZXBsYWNlKT92LnJlcGxhY2UoPCU9X2ZSZWdFeHAlPiwgZnVuY3Rpb24obSl7cmV0dXJuIGV2YWwobS5zbGljZSgzLCAtMSkpO30pOnY7ICB9Y2F0Y2goZXgpe2dzLmluZm8oJ19me0V4Y2VwdGlvbn06ICR7ZWFDb2RlfTogJyArIGV4KTsgcmV0dXJuIHY7fSB9KSgke3JldH0gfHwgJHtlYUNvZGV9KWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBlYUNvZGU7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7SWQ6ICI8JT1zY29wZSU+LjwlPV9jTmFtZShjLCB0cnVlKSU+IiwgdmFyczogYGAsIGNvZGU6IGBgLCBxdWVyeTogYGAsIHNldDogYGAsIGVzZXQ6IGBgLCBkc2V0OiBgYCwgdGFzOiBgYCwgZGVwczoge319LCB7DQogICAgICAgICAgICAgICAgZXhwb3J0ZXI6IHYgPT4gdi5vYmogPSAodHlwZW9mKG9wdGlvbnMucmV1c2VkKT09PSd1bmRlZmluZWQnIHx8IG9wdGlvbnMucmV1c2VkPj12LnJldXNlZCk/di5vYmo6e2NvZGU6IHYub2JqLmNvZGUgKyBgXG5cbi8qKiByZXVzZWQ6IHYub2JqLklkKiovXG5cbmAsIGRlcHM6ICcnLCBJZDogdi5vYmouSWR9LA0KDQogICAgICAgICAgICAgICAgRnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBOdWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgb2JqLklkID0gYGlmKG9iai4ke2lkQ29kZX0gJiYgb2JqLiR7aWRDb2RlfS5yZXBsYWNlKC8tL2csICcnKS5sZW5ndGg9PTMyKXtfdG9TdHJpbmcrPSdfJytvYmouJHtpZENvZGV9LnJlcGxhY2UoLy0vZywgJycpOyBnci5nZXQoJ3N5c19pZCcsIG9iai4ke2lkQ29kZX0ucmVwbGFjZSgvLS9nLCAnJykpO31cbmA7DQogICAgICAgICAgICAgICAgICAgIG9iai5pZFRvU3RyaW5nID0gYF90b1N0cmluZyArPSAob2JqP29iai4ke2lkQ29kZX06KCdncl8nK2dyLnN5c19pZCkpICsgJzogJzsgYDsNCiAgICAgICAgICAgICAgICAgICAgb2JqLm5ld1VVSUQgPSBgaWYoIW9iai4ke2lkQ29kZX0gfHwgb2JqLiR7aWRDb2RlfS5yZXBsYWNlKC8tL2csICcnKS5sZW5ndGghPTMyKXtvYmouJHtpZENvZGV9ID0gZ3Iuc2V0TmV3R3VpZCgpO31lbHNle2dyLnNldE5ld0d1aWRWYWx1ZShvYmouJHtpZENvZGV9LnJlcGxhY2UoLy0vZywgJycpKTt9fVxuYDsNCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlICYmIGVhLkVudGl0eVR5cGUhPWMpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5kZXBzLjwlPW5OYW1lKGVhLkVudGl0eVR5cGUpJT4gPSAodiB8fCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoZWEuRW50aXR5VHlwZSwgdHJ1ZSklPigpKS48JT1tTmFtZSU+KG9wdGlvbnMpOw0KICAgICAgICA8JSB9JT4NCg0KICAgICAgICAgICAgICAgICAgICBvYmoudmFycyArPSBgdmFyICR7ZWFDb2RlfSA9IDwlaWYoZWEuRW50aXR5VHlwZSl7JT4oKChyZWZzLjwlPW5OYW1lKGVhKSU+ID0gKHR5cGVvZihvYmouJHtlYUNvZGV9KSE9PSd1bmRlZmluZWQnPy8qdGhpcy4qL3NhdmU8JT1uTmFtZShlYS5FbnRpdHlUeXBlKSU+KG9iai4ke2VhQ29kZX0sIHs8JT1uTmFtZShjKSU+OiBvYmosIDwlPW5OYW1lKGMvKmVhKi8pJT5SZWZzOiByZWZzLCA8JT1uTmFtZShjKS50b0xvd2VyQ2FzZSgpJT46IGdyfSwgIjwlPW5OYW1lKGMpJT4iLCByZWZzLjwlPW5OYW1lKGVhKSU+IHx8IC8qRVhQOiByZWZzLjwlPW5OYW1lKGVhLkVudGl0eVR5cGUpLnRvTG93ZXJDYXNlKCklPiB8fCAqLygke19mKDwldmFsdWVPZihlYS5EZWZhdWx0KSU+LCBlYUNvZGUpfSkpOnJlZnMuPCU9bk5hbWUoZWEpJT4pKSB8fCB7c3lzX2lkOiAnJ30pWy8qdGhpcy4qL2NvbmZpZy48JT1uTmFtZShlYS5FbnRpdHlUeXBlKSU+LmlkS2V5IHx8ICJzeXNfaWQiXSkudG9TdHJpbmcoKTwlfWVsc2V7JT5vYmouJHtlYUNvZGV9PCV9JT47YDsNCiAgICAgICAgPCUgaWYoZWEuSXNVbmlxdWUpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5xdWVyeSArPSBgX3RvU3RyaW5nKz0nXycrJHtlYUNvZGV9OyBfdG9RdWVyeS4ke2VhQ29kZX0gPSAke19mKHYsIGVhQ29kZSl9OyBgOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLnNldCArPSBgaWYodHlwZW9mKF90b1NldC4ke2VhQ29kZX0gPSAke19mKHYsIGVhQ29kZSl9KSE9PSd1bmRlZmluZWQnPCVpZihlYS5FbnRpdHlUeXBlKXslPiYmIF90b1NldC4ke2VhQ29kZX08JX0lPikgZ3Iuc2V0VmFsdWUoJyR7ZWFDb2RlfScsIF90b1NldC4ke2VhQ29kZX0pO2A7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgPCUgYy5FbnRpdHlGaWVsZHMuZm9yRWFjaChlZiA9PiB7JT4NCiAgICAgICAgICAgICAgICBlZl88JT1uTmFtZShlZiklPjogKG9iaiwgZWZDb2RlLCB2KSA9PiBvYmouZXNldCArPSBgaWYodHlwZW9mKF90b1NldC4ke2VmQ29kZX0gPSAke19mKEpTT04uc3RyaW5naWZ5KHYpLCAnb2JqLicrZWZDb2RlKX0pIT09J3VuZGVmaW5lZCcpIGdyLnNldFZhbHVlKCcke2VmQ29kZX0nLCBfdG9TZXQuJHtlZkNvZGV9KTtgLA0KICAgIDwlIH0pJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7bGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIG9iai50YXMgKz0gYHJlZnMuPCU9dGFOYW1lJT4gPSAoKG9iaj9vYmouJHtlYUNvZGV9OltdKSB8fCBbXSkubWFwKGZ1bmN0aW9uKG8pe2dzLmluZm8oX3RvU3RyaW5nICsgJyA9PiBzYXZlPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MpJT4oJHtlYUNvZGV9W10pJyk7IHJldHVybiAvKnRoaXMuKi9zYXZlPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MpJT4obywgezwlPW5OYW1lKGMpJT46IG9iaiwgPCU9bk5hbWUoYykudG9Mb3dlckNhc2UoKSU+OiBnciwgbWFueVJlZnM6IHJlZnN9LCAiPCU9bk5hbWUoYyklPiIpO30pO2ANCiAgICAgICAgICAgICAgICAgICAgb2JqLmRlcHMuPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MpJT4gPSAodiAmJiB2Lmxlbmd0aCk/dlswXTpuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUodGEuRW50aXR5Q2xhc3MsIHRydWUpJT4oKS48JT1tTmFtZSU+KG9wdGlvbnMpOw0KICAgICAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIXJldC5kc2V0KSByZXQuZHNldCArPSBgXG5pZih0eXBlb2Yob2JqKT09PSJvYmplY3QiKSBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihmdW5jdGlvbihrKXtyZXR1cm4gIWsuc3RhcnRzV2l0aCgnX18nKSAmJiBbJ3N5c19pZCcsICdJZCcsICdPUEVSQVRPUlMnXS5pbmRleE9mKGspPDAgJiYgdHlwZW9mKF90b1NldFtrXSk9PT0ndW5kZWZpbmVkJyAmJiAhQXJyYXkuaXNBcnJheShvYmpba10pO30pLmZvckVhY2goZnVuY3Rpb24oayl7X3RvU2V0W2tdID0gJHtfZigib2JqW2tdIiwgIm51bGwiKX07IGlmKF90b1NldFtrXSAmJiBfdG9TZXRba10uX19jbGFzcyl7X3RvU2V0W2tdID0gX3RvU2V0W2tdW2NvbmZpZ1tfdG9TZXRba10uX19jbGFzc10uaWRGaWVsZCB8fCAnSWQnXTsgfSBnci5zZXRWYWx1ZShrLCBfdG9TZXRba10gKTsgfSlcbmA7DQoNCiAgICAgICAgICAgIHJldC5jb2RlICs9IGAke09iamVjdC52YWx1ZXMocmV0LmRlcHMpLmpvaW4oJ1xuJyl9ZnVuY3Rpb24gc2F2ZTwlPW5OYW1lKGMpJT4ob2JqLCByZWZzLCBzb3VyY2UsIGdyKXtyZWZzID0gcmVmcyB8fCB7fTsgLyp0aGlzLiovY29uZmlnLnNhdmVfJHs8JT1fbkNvZGUoKSU+fSA9IHNhdmU8JT1uTmFtZShjKSU+OyAvKnRoaXMuKi9jb25maWcuPCU9bk5hbWUoYyklPiA9IC8qdGhpcy4qL2NvbmZpZy48JT1uTmFtZShjKSU+IHx8IHt9OyAvKnRoaXMuKi9jb25maWcuX2lkTWFwID0gLyp0aGlzLiovY29uZmlnLl9pZE1hcCB8fCBbXTsgdmFyIF90b1N0cmluZyA9IHNvdXJjZSArICdbJyArIChyZWZzW3NvdXJjZV0uc3lzX2lkKSArICddPT4gc2F2ZTwlPW5OYW1lKGMpJT4oJzsgaWYodHlwZW9mKG9iaik9PT0nc3RyaW5nJyAmJiBvYmoubGVuZ3RoPj0zMil7dmFyIHJldCA9IHt9OyByZXRbLyp0aGlzLiovY29uZmlnLjwlPW5OYW1lKGMpJT4uaWRLZXkgfHwgInN5c19pZCJdPW9iajsgZ3MuaW5mbyhfdG9TdHJpbmcgKyAnKTogb2JqIGlzIHV1aWQsIHJldHVybmluZyB7JytvYmorJ30nKTsgcmV0dXJuIHJldDt9IGlmKCFvYmogJiYgIWdyKXtncy5pbmZvKF90b1N0cmluZyArICcpOiBvYmogaXMgbnVsbCcpOyByZXR1cm4gbnVsbDt9ICR7cmV0LmlkVG9TdHJpbmd9IHZhciBiU2F2ZSA9ICEvKnRoaXMuKi9jb25maWcuPCU9bk5hbWUoYyklPi5yZWFkT25seTsgaWYoIWdyKXsgZ3IgPSBuZXcgR2xpZGVSZWNvcmQoJyR7PCU9X25Db2RlKCklPn0nKTtcbiR7cmV0LklkfVxuJHtyZXQudmFyc31cbmlmKCFnci5pc1ZhbGlkUmVjb3JkKCkpe2dyID0gbmV3IEdsaWRlUmVjb3JkKCckezwlPV9uQ29kZSgpJT59Jyk7IHZhciBfdG9RdWVyeT17fTsgJHtyZXQucXVlcnl9IFxuX3RvU3RyaW5nICs9ICcpOiAnOyBpZihvYmouX19rZXlzICYmIChiU2F2ZSB8fCBjb25maWcuPCU9bk5hbWUoYyklPi5yZWFkT25seSkpe2lmKF90b1F1ZXJ5Ll9fZW5jb2RlZFF1ZXJ5KXtnci5hZGRFbmNvZGVkUXVlcnkoX3RvUXVlcnkuX19lbmNvZGVkUXVlcnkpO31lbHNle29iai5fX2tleXMuZm9yRWFjaChmdW5jdGlvbihrKXtnci5hZGRRdWVyeShrLCBfdG9RdWVyeVtrXSB8fCBvYmpba10pO30pO30gZ3Iuc2V0TGltaXQoMSk7IGlmKCFnci5nZXRFbmNvZGVkUXVlcnkoKSkgZ3IuYWRkUXVlcnkoJ3N5c19pZCcsICctMScpOyBncy5pbmZvKF90b1N0cmluZyArICdFbmNvZGVkIFF1ZXJ5OiAnICsgZ3IuZ2V0RW5jb2RlZFF1ZXJ5KCkpOyBnci5xdWVyeSgpO2lmKCFnci5uZXh0KCkpe2dzLmluZm8oX3RvU3RyaW5nICsgJ25vdCBmb3VuZCcpO31lbHNle2dzLmluZm8oX3RvU3RyaW5nICsgJ2ZvdW5kIFskezwlPV9uQ29kZSgpJT59LycgKyBnci5zeXNfaWQgKyAnXSAtIGlzIHZhbGlkOiAnICsgZ3IuaXNWYWxpZFJlY29yZCgpKTsgb2JqLklkID0gZ3Iuc3lzX2lkLnRvU3RyaW5nKCk7IGlmKG9iai5fX3JldXNlZCl7Lypncy5pbmZvKF90b1N0cmluZyArICc6IF9fcmV1c2VkOiBbJHs8JT1fbkNvZGUoKSU+fS8nICsgZ3Iuc3lzX2lkICsgJ10gLSBpcyB2YWxpZDogJyArIGdyLmlzVmFsaWRSZWNvcmQoKSk7ICovcmV0dXJuIGdyO30gfX19fWVsc2V7YlNhdmU9ZmFsc2U7fSBpZihiU2F2ZSAmJiAhZ3IuaXNWYWxpZFJlY29yZCgpKXtncy5pbmZvKF90b1N0cmluZyArICdpbnNlcnRpbmcuLi4nKTsgZ3IgPSBuZXcgR2xpZGVSZWNvcmQoJyR7PCU9X25Db2RlKCklPn0nKTsgZ3IuaW5pdGlhbGl6ZSgpOyAke3JldC5uZXdVVUlEfSBpZihiU2F2ZSAmJiBvYmope3ZhciBfdG9TZXQgPSB7fTsgLypzZXQqLyR7cmV0LnNldH0gLyplc2V0Ki8ke3JldC5lc2V0fSAgJHtyZXQuZHNldH0gaWYoLyp0aGlzLiovY29uZmlnLjwlPW5OYW1lKGMpJT4uTm9Xb3JrZmxvdykgZ3Iuc2V0V29ya2Zsb3coZmFsc2UpOyBpZigvKnRoaXMuKi9jb25maWcuPCU9bk5hbWUoYyklPi5Mb2dTZXQpIGdzLmluZm8oX3RvU3RyaW5nICsgJ190b1NldDogJyArIEpTT04uc3RyaW5naWZ5KF90b1NldCkpOyB9ZWxzZSBpZighZ3IuaXNWYWxpZFJlY29yZCgpKXtncy5pbmZvKF90b1N0cmluZyArICdbYlNhdmU9JyArIGJTYXZlICsgJ10gLSByZXR1cm5pbmcgbnVsbC4nKTsgcmV0dXJuIG51bGw7fVxuaWYoIWJTYXZlIHx8IGdyLnVwZGF0ZSgpKXsgaWYoZmFsc2UgJiYgYlNhdmUpe2NvbmZpZy5faWRNYXAucHVzaCh7dGFibGU6ICckezwlPV9uQ29kZSgpJT59Jywgc3lzX2lkOiBnci5zeXNfaWQudG9TdHJpbmcoKSwga2V5czogb2JqLl9fa2V5cy5tYXAoZnVuY3Rpb24oayl7cmV0dXJuIHtrOiBrLCB2OiBfdG9RdWVyeVtrXSB8fCBvYmpba119O30pfSk7fSAke3JldC50YXN9XG5ncy5pbmZvKF90b1N0cmluZyArICdbYlNhdmU9JyArIGJTYXZlICsgJ10gLSByZXR1cm5pbmcgJyArIGdyLnN5c19pZCk7IHJldHVybiBncjt9fVxuYDsNCg0KICAgICAgICAgICAgLypyZXR1cm4gT2JqZWN0LnZhbHVlcyhPYmplY3QuYXNzaWduKHt9LCAuLi5yZXQuY29kZS5zcGxpdCgnZnVuY3Rpb24gc2F2ZScpLmZpbHRlcihzID0+IHMpLnNvcnQoKGEsIGIpID0+IGEubGVuZ3RoIC0gYi5sZW5ndGgpLm1hcChzID0+ICh7W3Muc3BsaXQoJyhvYmosIHJlZnMsIHNvdXJjZSwgZ3IpJylbMF1dOiAnZnVuY3Rpb24gc2F2ZScrc30pKSkpLmpvaW4oJ1xuJyk7ICovDQogICAgICAgICAgICByZXR1cm4gcmV0LmNvZGU7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b1NOUXVlcnknJT4oZmllbGRzLCBvYmpzLCBiVVJMKXsNCiAgICAgICAgbGV0IHJldCA9IHRoaXMuX19leHBvcnQoe30sIHsNCiAgICAgICAgICAgIE9QRVJBVE9SUzogdHJ1ZSwNCiAgICAgICAgICAgIC8vX21hcDogdHJ1ZSwNCiAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9ialtpZENvZGVdID0gdiwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gdj92LjwlPW1OYW1lJT4oKTpudWxsOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0RhdGUpeyU+DQogICAgICAgICAgICAgICAgbGV0IGQgPSBgJHt2LmdldEZ1bGxZZWFyKCl9LSR7KCcwJysodi5nZXRNb250aCgpKzEpKS5zbGljZSgtMil9LSR7di5nZXREYXRlKCl9YDsNCiAgICAgICAgICAgICAgICBsZXQgdCA9IGAke3YuZ2V0SG91cnMoKX06JHt2LmdldE1pbnV0ZXMoKX06JHt2LmdldFNlY29uZHMoKX1gOw0KICAgICAgICAgICAgICAgIGlmKCh2LmdldEhvdXJzKCk9PTAgJiYgdi5nZXRNaW51dGVzKCk9PTAgJiYgdi5nZXRTZWNvbmRzKCk9PTApIHx8IHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSc9JyB8fCAhdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCl7DQogICAgICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gYE9OJHtkfUBqYXZhc2NyaXB0OmdzLmRhdGVHZW5lcmF0ZSgnJHtkfScsJ3N0YXJ0JylAamF2YXNjcmlwdDpncy5kYXRlR2VuZXJhdGUoJyR7ZH0nLCdlbmQnKWA7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCE9PSdCRVRXRUVOJyl7DQogICAgICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gYGphdmFzY3JpcHQ6Z3MuZGF0ZUdlbmVyYXRlKCcke2R9JywgJyR7dH0nKWA7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gYGphdmFzY3JpcHQ6Z3MuZGF0ZUdlbmVyYXRlKCcke2R9JywgJyR7dH0nKUBqYXZhc2NyaXB0OmdzLmRhdGVHZW5lcmF0ZSgnJHtkfScsICcke3R9JylgOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNCb29sKXslPg0KICAgICAgICAgICAgICAgIG9iai5PUEVSQVRPUlMuPCU9bk5hbWUoZWEpJT4gPSAnPSc7DQogICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSB2Ow0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0gdjsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pOyAlPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICANCiAgICAgICAgT2JqZWN0LmtleXMocmV0Lk9QRVJBVE9SUyB8fCB7fSkuZmlsdGVyKGsgPT4gdHlwZW9mKHJldFtrXSkhPT0ndW5kZWZpbmVkJyAmJiB0eXBlb2YocmV0W2tdKSE9PSdvYmplY3QnKS5mb3JFYWNoKGsgPT4gcmV0W2tdID0gcmV0Lk9QRVJBVE9SU1trXSArIHJldFtrXSk7DQoNCiAgICAgICAgZGVsZXRlIHJldC5PUEVSQVRPUlM7DQogICAgICAgIE9iamVjdC5rZXlzKHJldCkuZmlsdGVyKGsgPT4gIVN0cmluZyhyZXRba10pLmxlbmd0aCkuZm9yRWFjaChrID0+IGRlbGV0ZSByZXRba10pOw0KDQogICAgICAgIHJldCA9IERvdE9iamVjdC5kb3QocmV0KTsNCg0KICAgICAgICAvLyBhdm9pZCBzZW5kaW5nIHdpdGggbm8gY29tcGFyaXNvbiBvcGVyYXRvcnMNCiAgICAgICAgT2JqZWN0LmtleXMocmV0KS5maWx0ZXIoayA9PiAhWyc+JywgJzwnLCAnQkVUV0VFTicsICdPTicsICchJywgJz0nLCAnU1RBUlRTV0lUSCcsICdMSUtFJ10uc29tZShzID0+IFN0cmluZyhyZXRba10pLnN0YXJ0c1dpdGgocykpKS5mb3JFYWNoKGsgPT4gcmV0W2tdID0gKHRoaXNbYF8ke2t9X2Nvb3BgXSB8fCAnU1RBUlRTV0lUSCcpICsgcmV0W2tdKTsNCiAgICAgICAgDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KDQogICAgICAgIGlmKGJVUkwpIHJldCA9IE9iamVjdC5lbnRyaWVzKHJldCB8fCB7fSkubWFwKHAgPT4gYCR7cFswXX0ke3BbMV19YCkuam9pbigiXiIpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQo8JSB9JT4NCg0KCTwlPW1OYW1lPSdfX2V4cG9ydCclPihvYmosIG9wdGlvbnMsIGZ1biwgLi4uZkFyZ3MpIHsNCgkgICAgdHJ5ew0KICAgIAkgICAgaWYoIW9iaikgcmV0dXJuIHRoaXM7DQogICAgCSAgICANCiAgICAJICAgIGlmKG9wdGlvbnMuT1BFUkFUT1JTKSBvYmouT1BFUkFUT1JTID0gb2JqLk9QRVJBVE9SUyB8fCB7fTsNCiAgICAJICAgIA0KICAgIAkgICAgPCUgLyogSU1QT1JUQU5UOiB0aGlzLklkPT10aGlzLklkIG1ha2VzIHN1cmUgdGhlIElkIGlzIGZpeGVkIGZvciB0aGUgdG9vbCwgbm90IGdldHRpbmcgZ2VuZXJhdGVkIGV2ZXJ5IHRpbWUgd2UgY2FsbCBpdCAqLyAlPg0KICAgIAkgICAgDQogICAgCSAgICBsZXQgZWFDb2RlcyA9IHsNCiAgICAJICAgICAgICBleHBvcnRlcjogIiIsDQogICAgCSAgICAgICAgSWQ6ICIiLA0KICAgIAkgICAgfTsNCiAgICAJICAgIA0KICAgIAkJaWYgKCFvcHRpb25zLlVuaXF1ZSAmJiAob3B0aW9ucy5GdWxsIHx8IHRoaXMuX19zeW5jX29uKCkgfHwgdGhpcy5JZD09dGhpcy5JZCkpIHRoaXMuX19vcHRpb25zKCJJZCIsIG9iaiwgZWFDb2Rlcy5JZCA9IChvcHRpb25zLl9tYXA/dGhpcy5fbkNvZGUoJ0lkJyk6J0lkJyksIHRoaXMuSWQsIHRoaXMsIG9wdGlvbnMsIGZ1bik7DQogICAgCQkNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiAhZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgIGlmKCFvcHRpb25zLlVuaXF1ZSB8fCAob3B0aW9ucy5VbmlxdWUgJiYgPCV2YWx1ZU9mKGVhLklzVW5pcXVlKSU+KSkgdGhpcy5fX29wdGlvbnMoIjwlPW5OYW1lKGVhKSU+Iiwgb2JqLCBlYUNvZGVzLjwlPW5OYW1lKGVhKSU+ID0gKG9wdGlvbnMuX21hcD88JT1fbkNvZGUoZWEpJT46PCVfdkNvZGUoZWEpJT4pLCB0aGlzLjwlPW5OYW1lKGVhKSU+KCksIHRoaXMsIG9wdGlvbnMsIGZ1biwgIjwlPV9jRmllbGQoZWEpJT4iKTsNCjwlIH0pJT4NCg0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUgJiYgZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICBpZiAoIW9wdGlvbnMuVW5pcXVlIHx8IChvcHRpb25zLlVuaXF1ZSAmJiA8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pKSB0aGlzLl9fb3B0aW9ucygiPCU9bk5hbWUoZWEpJT4iLCBvYmosIGVhQ29kZXMuPCU9bk5hbWUoZWEpJT4gPSAob3B0aW9ucy5fbWFwPzwlPV9uQ29kZShlYSklPjo8JV92Q29kZShlYSklPiksIHRoaXMuPCU9bk5hbWUoZWEpJT4oKSwgdGhpcywgb3B0aW9ucywgZnVuLCAiPCU9X2NGaWVsZChlYSklPiIpOw0KPCUgfSklPg0KDQo8JSBjLkVudGl0eUZpZWxkcy5mb3JFYWNoKGVmID0+IHslPg0KICAgICAgICAgICAgaWYgKCFvcHRpb25zLlVuaXF1ZSB8fCAob3B0aW9ucy5VbmlxdWUgJiYgPCV2YWx1ZU9mKGVmLklzVW5pcXVlKSU+KSkgdGhpcy5fX29wdGlvbnMoImVmXzwlPW5OYW1lKGVmKSU+Iiwgb2JqLCBlYUNvZGVzLmVmXzwlPW5OYW1lKGVmKSU+ID0gKG9wdGlvbnMuX21hcD88JT1fbkNvZGUoZWYpJT46PCVfdkNvZGUoZWYpJT4pLCA8JXZhbHVlT2YoZWYuVmFsdWUpJT4sIHRoaXMsIG9wdGlvbnMsIGZ1bik7DQo8JSB9KSU+DQoNCgkJICAgIDwlIHVuUmVjdXJzZSgnb2JqJywgJ2Z1bicsICdmQXJncycsICdpZih0eXBlb2Yob3B0aW9ucy5leHBvcnRlcik9PT0iZnVuY3Rpb24iKSBvcHRpb25zLmV4cG9ydGVyKHYpJyklPg0KDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSAmJiAhZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICBpZiAoIW9wdGlvbnMuVW5pcXVlKSB0aGlzLl9fb3B0aW9ucygiPCU9bk5hbWUoZWEpJT4iLCBvYmosIGVhQ29kZXMuPCU9bk5hbWUoZWEpJT4gPSAob3B0aW9ucy5fbWFwPzwlPV9uQ29kZShlYSklPjo8JV92Q29kZShlYSklPiksIHRoaXMuPCU9bk5hbWUoZWEpJT4oKSwgdGhpcywgb3B0aW9ucywgZnVuLCAiPCU9X2NGaWVsZChlYSklPiIpOw0KPCUgfSklPg0KDQogICAgICAgICAgICBpZiAoIW9wdGlvbnMuVW5pcXVlKSB0aGlzLl9fb3B0aW9ucygiX1RISVMiLCBvYmosIGVhQ29kZXMuX1RISVMgPSAob3B0aW9ucy5fbWFwP3RoaXMuX25Db2RlKCdfVEhJUycpOiJfVEhJUyIpLCB0aGlzLl9USElTLCB0aGlzLCBvcHRpb25zLCBmdW4pOw0KDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7bGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5VbmlxdWUpIHRoaXMuX19vcHRpb25zKCI8JT10YU5hbWUlPiIsIG9iaiwgZWFDb2Rlcy48JT10YU5hbWUlPiA9IChvcHRpb25zLl9tYXA/PCU9X25Db2RlKHRhLCB0cnVlKSU+OiI8JT10YU5hbWUlPiIpLCB0aGlzLjwlPXRhTmFtZSU+KCksIHRoaXMsIG9wdGlvbnMsIGZ1biwgIjwlPV9jRmllbGQodGEpJT4iKTsNCjwlIH0pJT4NCg0KICAgICAgICAgICAgaWYgKCFvcHRpb25zLlVuaXF1ZSkgT2JqZWN0LmtleXMob3B0aW9ucykuZmlsdGVyKGsgPT4gdHlwZW9mKG9wdGlvbnNba10pPT09J2Z1bmN0aW9uJyAmJiAhT2JqZWN0LmtleXMoZWFDb2RlcykuaW5jbHVkZXMoaykpLmZvckVhY2goayA9PiB0aGlzLl9fb3B0aW9ucyhrLCBvYmosIGssIHVuZGVmaW5lZCwgdGhpcywgb3B0aW9ucywgZnVuKSk7DQogICAgICAgIA0KICAgICAgICAgICAgPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bZnVuXSA9IDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+W2Z1bl0gfHwge307DQogICAgICAgICAgICAoPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bZnVuXS5DeWNsaWMgfHwgW10pLmZvckVhY2gobiA9PiBuLl9jW24uZWFGaWVsZF0obi5fY1tuLmVhRmllbGRdKCkuX3RvSGFzaChudWxsLCB7bm9Db2RlOiB0cnVlLCBvbmx5VW5pcXVlOiB0cnVlLCBub0FyZ3M6IHRydWUsIF9tYXA6IG9wdGlvbnMuX21hcH0sIGZ1bikpKTsNCiAgICAgICAgICAgIDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+W2Z1bl0uQ3ljbGljID0gW107IC8vPz8NCiAgICAgICAgICAgIA0KICAgIAkJcmV0dXJuIG9iajsNCiAgICAJfWNhdGNoKGV4KXsNCiAgICAJICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAJfQ0KCX0NCgkNCgk8JT1tTmFtZT0nX19vcHRpb25zJyU+KGZpZWxkLCBvYmosIGVhQ29kZSwgZWFPYmosIF90aGlzPXRoaXMsIG9wdGlvbnM9e30sIGZ1biwgZWFGaWVsZCl7DQo8JSBpZihtYWluQ2xhc3MoKSE9Yyl7JT4NCiAgICAgICAgcmV0dXJuIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShtYWluQ2xhc3MoKSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4oZmllbGQsIG9iaiwgZWFDb2RlLCBlYU9iaiwgX3RoaXMsIG9wdGlvbnMsIGZ1biwgZWFGaWVsZCk7DQo8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZihvcHRpb25zLl9maWVsZHMgJiYgIW9wdGlvbnMuX2ZpZWxkcy5pbmNsdWRlcyhmaWVsZCkpIHJldHVybjsNCiAgICAgICAgICAgIGlmKCFvYmopIHJldHVybjsNCiAgICAgICAgICAgIGlmKHR5cGVvZihvcHRpb25zW2ZpZWxkXSkhPT0iZnVuY3Rpb24iKXsNCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+YCR7ZnVufS5vcHRpb25zLiR7ZmllbGR9IGlzIG5vdCBhIGZ1bmN0aW9uYCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZih0eXBlb2YoZWFPYmopIT09J3VuZGVmaW5lZCcgJiYgIW9wdGlvbnMuTnVsbCl7DQogICAgICAgICAgICAgICAgaWYoZmllbGQhPSdJZCcgJiYgdHlwZW9mKF90aGlzW2ZpZWxkXSk9PT0nZnVuY3Rpb24nICYmICFfdGhpc1snXycrZmllbGQrJ19zZXQnXSkgcmV0dXJuOw0KICAgICAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkoZWFPYmopICYmIHR5cGVvZihlYU9iai5sZW5ndGgpIT09J3VuZGVmaW5lZCcpIGVhT2JqID0gZWFPYmouZmlsdGVyKHYgPT4gdik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKCFvcHRpb25zLk51bGwgJiYgQXJyYXkuaXNBcnJheShlYU9iaikgJiYgIWVhT2JqLmxlbmd0aCkgcmV0dXJuOw0KDQogICAgICAgICAgICBsZXQgX3JldCA9IG9wdGlvbnNbZmllbGRdKG9iaiwgZWFDb2RlLCBlYU9iaiwgX3RoaXMpOw0KICAgICAgICAgICAgaWYob3B0aW9ucy5PUEVSQVRPUlMgJiYgX3RoaXNbJ18nICsgZmllbGQgKyAnX2Nvb3AnXSkgb2JqLk9QRVJBVE9SUyA9IE9iamVjdC5hc3NpZ24ob2JqLk9QRVJBVE9SUyB8fCB7fSwge1tmaWVsZF06IF90aGlzWydfJyArIGZpZWxkICsgJ19jb29wJ119KTsNCg0KICAgICAgICAgICAgaWYoIW9wdGlvbnMuQ3ljbGljICYmIGVhRmllbGQgJiYgb2JqICYmIG9iai5FbnRpdHlDbGFzcyAmJiB0eXBlb2Yob2JqW2ZpZWxkXSk9PT0nZnVuY3Rpb24nKXsNCiAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPltmdW5dID0gPCU9c2NvcGUlPi5fdW5SZWN1cnNlLjwlPW5OYW1lKGMpJT5bZnVuXSB8fCB7fTsNCiAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPltmdW5dLkN5Y2xpYyA9IDwlPXNjb3BlJT4uX3VuUmVjdXJzZS48JT1uTmFtZShjKSU+W2Z1bl0uQ3ljbGljIHx8IFtdOw0KICAgICAgICAgICAgICAgIGxldCBfY3ljbGVzID0gb2JqW2ZpZWxkXSgpOw0KICAgICAgICAgICAgICAgIGlmKCFBcnJheS5pc0FycmF5KF9jeWNsZXMpKSBfY3ljbGVzID0gW19jeWNsZXNdOw0KICAgICAgICAgICAgICAgIF9jeWNsZXMgPSBfY3ljbGVzLmZpbHRlcihfYyA9PiBfYyAmJiB0eXBlb2YoX2NbZWFGaWVsZF0pPT09J2Z1bmN0aW9uJyAmJiBfY1snXycgKyBlYUZpZWxkICsgJ19zZXQnXSAmJiBvYmouX3NhbWVFbnRpdHkoX2NbZWFGaWVsZF0oKSkpLm1hcChfYyA9PiAoew0KICAgICAgICAgICAgICAgICAgICAvKm1hcmsgX2NbZWFGaWVsZF1fc2V0IHRvIG51bGwgaW5zdGVhZCovDQogICAgICAgICAgICAgICAgICAgIF9jLA0KICAgICAgICAgICAgICAgICAgICBlYUZpZWxkLA0KICAgICAgICAgICAgICAgIH0pKTsNCiAgICAgICAgICAgICAgICBpZihfY3ljbGVzLmxlbmd0aCkgPCU9d2FybigpJT5mdW4gKyAiL19jeWNsZXMiLCBfY3ljbGVzKTsNCiAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll91blJlY3Vyc2UuPCU9bk5hbWUoYyklPltmdW5dLkN5Y2xpYy5wdXNoKC4uLl9jeWNsZXMpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZihvcHRpb25zLl9tYXApIF90aGlzLl9tYXAoZmllbGQsIHR5cGVvZihlYU9iaik9PT0ndW5kZWZpbmVkJywgZnVuLCB0eXBlb2YoZWFPYmopPT09J3VuZGVmaW5lZCc/b2JqOmVhT2JqLCB0eXBlb2YoZWFPYmopPT09J3VuZGVmaW5lZCc/X3RoaXM6b2JqLCBlYUNvZGUpOw0KDQogICAgICAgICAgICByZXR1cm4gX3JldDsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmZ1biwgZmllbGQsIGV4KTsNCiAgICAgICAgfQ0KPCUgfSU+DQoJfQ0KCQ0KCTwlPW1OYW1lPSdfX2ltcG9ydCclPihvYmosIG9wdGlvbnMsIGZ1biwgLi4uZkFyZ3MpIHsNCiAgICAgICAgaWYodHlwZW9mKG9iaikhPT0nb2JqZWN0Jyl7DQogICAgICAgICAgICA8JT13YXJuKCklPmAke2Z1bn06IE5vdCBhbiBvYmplY3Q6ICR7dHlwZW9mKG9iail9YCwgb2JqKTsNCiAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9DQoJICAgIA0KICAgICAgICBsZXQgZWFDb2RlcyA9IHt9Ow0KDQoJCWlmICghb3B0aW9ucy5VbmlxdWUpIHRoaXMuX19vcHRpb25zKCJJZCIsIG9iaiwgZWFDb2Rlcy5JZCA9IChvcHRpb25zLl9tYXA/dGhpcy5fbkNvZGUoJ0lkJyk6J0lkJyksIHVuZGVmaW5lZCwgdGhpcywgb3B0aW9ucywgZnVuKTsNCgkJDQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgIWVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIGlmKCFvcHRpb25zLlVuaXF1ZSB8fCAob3B0aW9ucy5VbmlxdWUgJiYgPCV2YWx1ZU9mKGVhLklzVW5pcXVlKSU+KSkgdGhpcy5fX29wdGlvbnMoIjwlPW5OYW1lKGVhKSU+Iiwgb2JqLCBlYUNvZGVzLjwlPW5OYW1lKGVhKSU+ID0gKG9wdGlvbnMuX21hcD88JT1fbkNvZGUoZWEpJT46PCVfdkNvZGUoZWEpJT4pLCB1bmRlZmluZWQsIHRoaXMsIG9wdGlvbnMsIGZ1biwgIjwlPV9jRmllbGQoZWEpJT4iKTsNCjwlIH0pJT4NCg0KPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUgJiYgZWEuSXNVbmlxdWUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgIGlmKCFvcHRpb25zLlVuaXF1ZSB8fCAob3B0aW9ucy5VbmlxdWUgJiYgPCV2YWx1ZU9mKGVhLklzVW5pcXVlKSU+KSkgdGhpcy5fX29wdGlvbnMoIjwlPW5OYW1lKGVhKSU+Iiwgb2JqLCBlYUNvZGVzLjwlPW5OYW1lKGVhKSU+ID0gKG9wdGlvbnMuX21hcD88JT1fbkNvZGUoZWEpJT46PCVfdkNvZGUoZWEpJT4pLCB1bmRlZmluZWQsIHRoaXMsIG9wdGlvbnMsIGZ1biwgIjwlPV9jRmllbGQoZWEpJT4iKTsNCjwlIH0pJT4NCg0KCQk8JSB1blJlY3Vyc2UoJ3RoaXMnLCAnZnVuJywgJ2ZBcmdzJywgJ2lmKHR5cGVvZihvcHRpb25zLmltcG9ydGVyKT09PSJmdW5jdGlvbiIpIG9wdGlvbnMuaW1wb3J0ZXIodiknKSU+DQoNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlICYmICFlYS5Jc1VuaXF1ZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgaWYgKCFvcHRpb25zLlVuaXF1ZSkgIHRoaXMuX19vcHRpb25zKCI8JT1uTmFtZShlYSklPiIsIG9iaiwgZWFDb2Rlcy48JT1uTmFtZShlYSklPiA9IChvcHRpb25zLl9tYXA/PCU9X25Db2RlKGVhKSU+OjwlX3ZDb2RlKGVhKSU+KSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKGVhKSU+Iik7DQo8JSB9KSU+DQoNCgkJaWYgKCFvcHRpb25zLlVuaXF1ZSkgdGhpcy5fX29wdGlvbnMoIl9USElTIiwgb2JqLCBlYUNvZGVzLl9USElTID0gKG9wdGlvbnMuX21hcD90aGlzLl9uQ29kZSgnX1RISVMnKTonX1RISVMnKSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4pOw0KDQo8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7DQogICAgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7DQolPg0KICAgICAgICBpZiAoIW9wdGlvbnMuVW5pcXVlKSB0aGlzLl9fb3B0aW9ucygiPCU9dGFOYW1lJT4iLCBvYmosIGVhQ29kZXMuPCU9dGFOYW1lJT4gPSAob3B0aW9ucy5fbWFwPzwlPV9uQ29kZSh0YSwgdHJ1ZSklPjoiPCU9dGFOYW1lJT4iKSwgdW5kZWZpbmVkLCB0aGlzLCBvcHRpb25zLCBmdW4sICI8JT1fY0ZpZWxkKHRhKSU+Iik7DQo8JSB9KSU+DQoNCiAgICAgICAgaWYgKCFvcHRpb25zLlVuaXF1ZSkgT2JqZWN0LmtleXMob3B0aW9ucykuZmlsdGVyKGsgPT4gdHlwZW9mKG9wdGlvbnNba10pPT09J2Z1bmN0aW9uJyAmJiAhT2JqZWN0LmtleXMoZWFDb2RlcykuaW5jbHVkZXMoaykpLmZvckVhY2goayA9PiB0aGlzLl9fb3B0aW9ucyhrLCBvYmosIGssIHVuZGVmaW5lZCwgdGhpcywgb3B0aW9ucywgZnVuKSk7DQoNCgkJcmV0dXJuIHRoaXM7DQoJfQ0KDQo8JSBpZihtYWluQ2xhc3MoWydOZW80aiddKSl7JT4NCiAgICA8JT1tTmFtZT0nX3RvQ3lUYWJsZSclPigpew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7Y3FsOiBgDQpDUkVBVEUgQ09OU1RSQUlOVCBJRiBOT1QgRVhJU1RTIEZPUiAobzokezwlPV9uQ29kZSgpJT59KSBSRVFVSVJFIG8uJHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9IElTIFVOSVFVRTsNCkNSRUFURSBDT05TVFJBSU5UIElGIE5PVCBFWElTVFMgRk9SIChvOiR7PCU9X25Db2RlKCklPn0pIFJFUVVJUkUgby4ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0gSVMgTk9UIE5VTEw7DQogICAgICAgIGB9LCB7DQogICAgICAgICAgICBGdWxsOiB0cnVlLA0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICAiPCU9bk5hbWUoZWEpJT4iOiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICBvYmouY3FsICs9IHY/di48JT1tTmFtZSU+KCk6Jyc7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzVW5pcXVlKXslPg0KICAgICAgICAgICAgICAgIG9iai5jcWwgKz0gYENSRUFURSBDT05TVFJBSU5UIElGIE5PVCBFWElTVFMgRk9SIChvOiR7PCU9X25Db2RlKCklPn0pIFJFUVVJUkUgby4ke2VhQ29kZX0gSVMgVU5JUVVFOw0KYA0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouY3FsICs9IHYubWFwKF92ID0+IF92LjwlPW1OYW1lJT4oKSkuam9pbignXG4nKSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQoNCiAgICAgICAgPCU9bG9nKCklPnJldC5jcWwpOw0KICAgICAgICByZXR1cm4gcmV0LmNxbDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J190b0N5TWVyZ2UnJT4oZmllbGRzLCBiUmF3KXsNCiAgICAgICAgbGV0IG9iaiA9IHRoaXMuX3RvREJPYmplY3QoZmllbGRzLCB0cnVlKTsNCiAgICAgICAgbGV0IHVrZXlzID0gW107DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLklzVW5pcXVlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICBpZig8JXZhbHVlT2YoZWEuSXNVbmlxdWUpJT4pIHVrZXlzLnB1c2goPCU9X25Db2RlKGVhKSU+KTsNCiAgICA8JSB9KSU+DQogICAgICAgIGxldCBjcWwgPSBgOiR7PCU9X25Db2RlKCklPn0ge2AgKyBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+IHVrZXlzLmluY2x1ZGVzKGspKS5tYXAoayA9PiBrICsgIjogIiArIG9ialtrXSkuam9pbignLCAnKSArIGB9KWA7DQogICAgICAgIA0KICAgICAgICBpZighYlJhdyl7DQogICAgICAgICAgICBsZXQgbWF0Y2ggPSAnXG5NQVRDSCAobycgKyBjcWw7DQogICAgICAgICAgICBjcWwgPSAnTUVSR0UgKG8nICsgY3FsOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgb25TZXQgPSBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+ICF1a2V5cy5pbmNsdWRlcyhrKSkubWFwKGsgPT4gIm8uIiArIGsgKyAiPSIgKyBvYmpba10pLmpvaW4oJywgJykNCiAgICAgICAgICAgIGNxbCArPSAnXG5PTiBDUkVBVEUgU0VUICcgKyBvblNldCArICdcbk9OIE1BVENIIFNFVCAnICsgb25TZXQ7DQogICAgICAgICAgICBjcWwgKz0gJ1xuUkVUVVJOIG87JzsNCg0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYodGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSBjcWwgKz0gbWF0Y2ggKyAnLCAnICsgdGhpcy48JT1uTmFtZShlYSklPigpLjwlPW1OYW1lJT4obnVsbCwgdHJ1ZSkucmVwbGFjZSgnKDonLCAnKDwlPW5OYW1lKGVhKSU+OicpICsgJyBNRVJHRSAobyktWzo8JT1uTmFtZShjKSU+XzwlPW5OYW1lKGVhKSU+XS0+KDwlPW5OYW1lKGVhKSU+KTsnOw0KICAgIDwlIH0pJT4NCiAgICAgICAgfWVsc2V7DQogICAgICAgICAgICBjcWwgPSAnKCcgKyBjcWw7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIDwlPWxvZygpJT5jcWwpOw0KICAgICAgICByZXR1cm4gY3FsOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9DeVF1ZXJ5JyU+KGZpZWxkcywgb2Jqcyl7DQogICAgICAgIGxldCBzcWwgPSAiTUFUQ0ggIjsNCiAgICAgICAgDQogICAgICAgIGxldCB0UHJlZiA9IGAke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT4udG9Mb3dlckNhc2UoKX0ke3RoaXMuX1EoKX1gOw0KDQogICAgICAgIGxldCBoZWFkZXIgPSB0aGlzLl90b1NlbGVjdEhlYWRlcihmaWVsZHMpOw0KDQogICAgICAgIHNxbCArPSBgICgke3RQcmVmfToke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT59JHt0aGlzLl9RKCl9KWA7DQogICAgICAgIA0KICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXIuam9pbnMpLmZvckVhY2goayA9PiBzcWwgKz0gYCBPUFRJT05BTCBNQVRDSCAoJHt0aGlzLl9RKCl9JHtrfSR7dGhpcy5fUSgpfToke3RoaXMuX1EoKX0ke2hlYWRlci5qb2luc1trXS50YWJsZX0ke3RoaXMuX1EoKX0pIE9QVElPTkFMIE1BVENIICgke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT4udG9Mb3dlckNhc2UoKX0ke3RoaXMuX1EoKX0pLVs6JHt0aGlzLl9RKCl9JHtoZWFkZXIuam9pbnNba10udGFibGV9XyR7a30ke3RoaXMuX1EoKX1dLT4oJHt0aGlzLl9RKCl9JHtrfSR7dGhpcy5fUSgpfSlgKTsNCiAgICAgICAgDQoNCiAgICAgICAgLy9zcWwgKz0gT2JqZWN0LnZhbHVlcyhoZWFkZXIuZmllbGRzKS5tYXAoZiA9PiBgJHt0UHJlZn0uJHtmfWApLmpvaW4oJywgJyk7DQogICAgICAgIC8vT2JqZWN0LmtleXMoaGVhZGVyLmpvaW5zKS5mb3JFYWNoKGsgPT4gc3FsICs9ICIsICIgKyBPYmplY3QudmFsdWVzKGhlYWRlci5qb2luc1trXS5maWVsZHMpLm1hcChmID0+IGAke3RoaXMuX1EoKX0ke2hlYWRlci5qb2luc1trXS50YWJsZX1fJHtrfSR7dGhpcy5fUSgpfS4ke2Z9IGFzICR7dGhpcy5fUSgpfSR7a30uJHtmLnJlcGxhY2UodGhpcy5fUSgpLCAnJyl9YCkuam9pbignLCAnKSk7DQogICAgICAgIA0KICAgICAgICBpZih0aGlzLl9fZmllbGRBZ2dyZWdhdGVzKXsNCiAgICAgICAgICAgIC8vIHtmaWVsZDogZnVuY3Rpb259DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5Jc1RleHQgJiYgIWVhLklzSW1hZ2UgJiYgIWVhLklzRmlsZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICBpZih0aGlzLl9fZmllbGRBZ2dyZWdhdGVzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7c3FsPT0oJ3NlbGVjdCAnKT8nJzonLCd9ICR7dGhpcy5fX2ZpZWxkQWdncmVnYXRlcy48JT1uTmFtZShlYSklPn0oJHt0aGlzLl9RKCl9JHs8JT1fbkNvZGUoZWEpJT59JHt0aGlzLl9RKCl9KWA7DQogICAgPCUgfSklPg0KICAgICAgICB9DQoNCiAgICAgICAgc3FsICs9IGAgd2hlcmUgMT0xYDsNCg0KICAgICAgICBzcWwgPSB0aGlzLl9fZXhwb3J0KHtzcWw6IHNxbH0sIHsNCiAgICAgICAgICAgIF9maWVsZHM6ICh0aGlzLl9fc3luY19vbigpIHx8IHRoaXMuSWQ9PXRoaXMuSWQpP1snSWQnXTp1bmRlZmluZWQsDQogICAgICAgICAgICBOdWxsOiB0cnVlLA0KICAgICAgICAgICAgX1RISVM6IG9iaiA9PiB7DQogICAgICAgICAgICAgICAgaWYoIXRoaXMuX1RISVMgfHwgIXRoaXMuX1RISVMubGVuZ3RoKSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgIGFuZCAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gYCArICh0aGlzLl9USElTX2Nvb3AgfHwgIklOIikgKyAiICgiICsgdGhpcy5fVEhJUy5tYXAodCA9PiB0LjwlPW1OYW1lJT4odC5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpKSkuam9pbignIFVOSU9OIEFMTCAnKSArICIpIjsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBJZDogb2JqID0+IG9iai5zcWwgKz0gYCBhbmQgJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9PScke3RoaXMuSWR9J2AsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgbGV0IGNvb3AgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICAgICAgICAgIHN3aXRjaChjb29wKXsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiIT0iOg0KICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJOT1QgIjsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiPSI6DQogICAgICAgICAgICAgICAgICAgICAgICBjb29wID0gIiI7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIiI6DQogICAgICAgICAgICAgICAgICAgICAgICBjb29wID0gIiI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKHYpew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICR7Y29vcH0gRVhJU1RTIHske3YuPCU9bU5hbWUlPigpfX1gOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICgke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSAke2Nvb3B9ICgwKSBPUiAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSBJUyBOVUxMKWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNUZXh0IHx8IGVhLklzSW1hZ2UgfHwgZWEuSXNGaWxlKXslPg0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICR7dFByZWZ9LiR7dGhpcy5fUSgpfSR7ZWFDb2RlfSR7dGhpcy5fUSgpfSBgICsgPCVpZihlYS5Jc0Jvb2wpeyU+Ij0iPCV9ZWxzZXslPih0aGlzLl88JT1uTmFtZShlYSklPl9jb29wIHx8ICJDT05UQUlOUyIpPCV9JT4gKyAiICI7DQogICAgICAgIDwlIH0lPg0KICAgICAgICANCiAgICAgICAgPCUgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICBpZih2ICYmIHYudG9JU09TdHJpbmcpew0KICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCd0eXBlJyk9PSdzcWxpdGUnKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gInN0cmZ0aW1lKCclcycsICciICsgdi50b0lTT1N0cmluZygpICsgIicpIjsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICInIiArIHYudG9JU09TdHJpbmcoKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1N0cmluZyl7ICU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHYpPT09InN0cmluZyIpew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICInIiArICgodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09IkxJS0UiIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKT8iJSI6IiIpICsgdiArICgodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcD09IkxJS0UiIHx8ICF0aGlzLl88JT1uTmFtZShlYSklPl9jb29wKT8iJSI6IiIpICsgIiciOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih2KT09PSJib29sZWFuIil7DQogICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiciICsgKHY/IjEiOiIwIikgKyAiJyI7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgICAgICBpZih2ICYmIHYuRW50aXR5Q2xhc3Mpew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICIoIiArIHYuPCU9bU5hbWUlPigpICsgIikiOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICInIiArIHYgKyAiJyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9dGFOYW1lJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IHNxdWVyaWVzID0gKHYgfHwgW10pLmZpbHRlcih0ID0+IHQpLm1hcCh0ID0+IHQuPCU9bU5hbWUlPigiPCU9bk5hbWUodGEpJT4uaWQiKSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgbGV0IGpPUCA9ICdVTklPTiBBTEwnOw0KICAgICAgICAgICAgICAgIGxldCBpbk9QID0gJ0lOJzsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBvYmouc3FsICs9IGBgOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSchPScgfHwgdGhpcy5fPCU9dGFOYW1lJT5fY29vcD09J05PVCBJTicpew0KICAgICAgICAgICAgICAgICAgICBpbk9QID0gJ05PVCBJTic7DQogICAgICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5fPCU9dGFOYW1lJT5fY29vcD09Jz0nIHx8IHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSdJTicpew0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSc9PScpew0KICAgICAgICAgICAgICAgICAgICBqT1AgPSAnSU5URVJTRUNUJzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgYW5kIC8qPCU9dGFOYW1lJT4qLyAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnLCAnSWQnKX0ke3RoaXMuX1EoKX0gJHtpbk9QfSAoYCArIHNxdWVyaWVzLmpvaW4oYCAke2pPUH0vKk0yTSovIGApICsgJyknOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+IiwgZmllbGRzKS5zcWw7DQoNCiAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzKXsNCiAgICAgICAgICAgIGlmKE9iamVjdC5rZXlzKHRoaXMuX19maWVsZEdyb3VwcykubGVuZ3RoKSBzcWwgKz0gIiBncm91cCBieSAiOw0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiAhZWEuSXNUZXh0ICYmICFlYS5Jc0ltYWdlICYmICFlYS5Jc0ZpbGUpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKGVhKSU+PCU9KGVhLkVudGl0eVR5cGU/JysiaWQiJzonJyklPn0ke3RoaXMuX1EoKX0gJHt0aGlzLl9fZmllbGRHcm91cHMuPCU9bk5hbWUoZWEpJT59YDsNCiAgICA8JSB9KSU+DQogICAgICAgIH0NCg0KICAgICAgICBpZihzcWwuZW5kc1dpdGgoIndoZXJlIDE9MSIpKXsNCiAgICAgICAgICAgIC8vIHNxbCA9IHNxbC5yZXBsYWNlKCJ3aGVyZSAxPTEiLCAid2hlcmUgMT0wIik7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgc3FsID0gc3FsLnJlcGxhY2UoIndoZXJlIDE9MSBhbmQgIiwgIndoZXJlICIpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBzcWwgKz0gJyByZXR1cm4gJyArIFt0UHJlZl0uY29uY2F0KE9iamVjdC5rZXlzKGhlYWRlci5qb2lucykubWFwKGsgPT4gYCR7dGhpcy5fUSgpfSR7a30ke3RoaXMuX1EoKX1gKSkuam9pbignLCAnKTsNCiAgICAgICAgDQogICAgICAgIDwlPWxvZygpJT5zcWwpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHNxbDsNCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX25lbzRqJyU+KGNxbCl7DQogICAgPCUgaWYobWFpbkNsYXNzKFsnTmVvNGonXSk9PWMpeyU+DQogICAgICAgIGxldCBzZXNzaW9uID0gbnVsbDsNCiAgICAgICAgbGV0IHJldCA9IFtdOw0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZighdGhpcy5Ub29sLmRiIHx8ICFjcWwgfHwgIWNxbC50cmltKCkpew0KICAgICAgICAgICAgICAgIGlmKCF0aGlzLlRvb2wuZGIpIDwlPWxvZygpJT5jcWwsICIgPD09U0tJUFBFRD09PiIpOw0KICAgICAgICAgICAgICAgIHJldHVybiBbXTsNCiAgICAgICAgICAgIH0NCiAgICANCiAgICAgICAgICAgIGlmKGNxbC5pbmRleE9mKCc7XG4nKT4wKXsNCiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHNxbFMgb2YgY3FsLnNwbGl0KCc7XG4nKSl7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuPCU9bU5hbWUlPihzcWxTLnRyaW0oKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGJTdG9yZSA9IFsiTUVSR0UiLCAiQ1JFQVRFIiwgIlVQREFURSJdLmZpbHRlcihuID0+IGNxbC5pbmRleE9mKG4pPj0wKS5maW5kKG4gPT4gbik7DQogICAgICAgICAgICBsZXQgYkRNTCA9IFsiQ09OU1RSQUlOVCJdLmZpbHRlcihuID0+IGNxbC5pbmRleE9mKG4pPj0wKS5maW5kKG4gPT4gbik7DQoNCiAgICAgICAgICAgIGlmKGJETUwpew0KICAgICAgICAgICAgICAgIHRoaXMuVG9vbC5kbWxDYWNoZSA9IHRoaXMuVG9vbC5kbWxDYWNoZSB8fCB7fTsNCiAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wuZG1sQ2FjaGVbdGhpcy5oYXNoQ29kZShjcWwpXSkgcmV0dXJuOw0KICAgICAgICAgICAgICAgIHRoaXMuVG9vbC5kbWxDYWNoZVt0aGlzLmhhc2hDb2RlKGNxbCldID0gY3FsOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzZXNzaW9uID0gdGhpcy5Ub29sLmRiLnNlc3Npb24oeyBkYXRhYmFzZTogdGhpcy5fX2NvbmZpZygnZGF0YWJhc2UnKSB9KTsNCiAgICAgICAgICAgIGxldCBmdW4gPSAnUmVhZCc7DQogICAgICAgICAgICBpZihiU3RvcmUgfHwgYkRNTCkgZnVuID0gJ1dyaXRlJzsNCiAgICAgICAgICAgIGlmKGZ1bj09J1dyaXRlJykgdGhpcy5Ub29sLl9fZG1sU3RhdGVtZW50cy5wdXNoKGNxbCk7DQogICAgICAgICAgICA8JT1sb2coKSU+Y3FsKTsNCiAgICAgICAgICAgIC8vcmV0ID0gKGF3YWl0IHNlc3Npb25bJ2V4ZWN1dGUnK2Z1bl0odHggPT4gdHgucnVuKGNxbCkpKS5yZWNvcmRzOw0KICAgICAgICAgICAgLy88JT1sb2coKSU+cmV0KTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgICAgICBpZihzZXNzaW9uKSBhd2FpdCBzZXNzaW9uLmNsb3NlKCk7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgPCUgfWVsc2V7JT4NCiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKG1haW5DbGFzcyhbJ05lbzRqJ10pKSU+KCkuPCU9bU5hbWUlPihjcWwpOw0KICAgIDwlIH0lPg0KICAgIH0NCjwlIH0lPg0KDQo8JSBpZihtYWluQ2xhc3MoWydSeERCJywgJ01vbmdvREInXSkpeyU+DQogICAgPCU9bU5hbWU9J190b0pTT05TY2hlbWEnJT4oKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IHR5cGUgPSB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUnLCAndHlwZScpOw0KICAgICAgICAgICAgbGV0IHNjaGVtYSA9IHsNCiAgICAgICAgICAgICAgICAkaWQ6ICc8JT1jLklkJT4nLA0KICAgICAgICAgICAgICAgICRzY2hlbWE6ICJodHRwczovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC8yMDIwLTEyL3NjaGVtYSIsDQogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICc8JT1jLlJlbWFyayU+JywNCiAgICAgICAgICAgICAgICB0aXRsZTogPCU9X25Db2RlKCklPiwNCiAgICAgICAgICAgICAgICBbdHlwZV06ICdvYmplY3QnLA0KICAgICAgICAgICAgICAgIHZlcnNpb246IDAsDQogICAgICAgICAgICAgICAgcHJvcGVydGllczogew0KICAgICAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICAgICAgICAgIFs8JT1fbkNvZGUoZWEpJT5dOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIjwlPWVhLlJlbWFyayU+IiwNCiAgICAgICAgICAgIDwlIGlmKGVhLklzQXJyYXkpeyU+DQogICAgICAgICAgICAgICAgICAgICAgICBbdHlwZV06IHRoaXMuX19jb25maWcoJ2pzb24udHlwZS5hcnJheScsICdhcnJheScpLA0KICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHsNCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgICRyZWY6ICc8JT1lYS5FbnRpdHlDbGFzcy5JZCU+JywNCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdOiB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUuc3RyaW5nJywgJ3N0cmluZycpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNUZXh0KXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdOiB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUudGV4dCcsICdzdHJpbmcnKSwNCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQm9vbCl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXTogdGhpcy5fX2NvbmZpZygnanNvbi50eXBlLmJvb2wnLCAnYm9vbGVhbicpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNJbnQpeyU+DQogICAgICAgICAgICAgICAgICAgICAgICBbdHlwZV06IHRoaXMuX19jb25maWcoJ2pzb24udHlwZS5pbnQnLCAnaW50ZWdlcicpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNGbG9hdCl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXTogdGhpcy5fX2NvbmZpZygnanNvbi50eXBlLmZsb2F0JywgJ251bWJlcicpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNJbWFnZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIFt0eXBlXTogdGhpcy5fX2NvbmZpZygnanNvbi50eXBlLmltYWdlJywgJ29iamVjdCcpLA0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNGaWxlKXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdOiB0aGlzLl9fY29uZmlnKCdqc29uLnR5cGUuZmlsZScsICdvYmplY3QnKSwNCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgPCUgaWYoZWEuSXNBcnJheSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFs8JWMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5SZXF1aXJlZCkubWFwKGVhID0+IHslPjwlPV9uQ29kZShlYSklPjwlfSkuam9pbignLCcpJT5dLA0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgPCU9bG9nKCklPnNjaGVtYSk7DQogICAgICAgICAgICByZXR1cm4gc2NoZW1hOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhbJ01vbmdvREInLCAnUnhEQicsICdaYW5nb0RCJ10pKXslPg0KICAgIDwlPW1OYW1lPSdfdG9TZWxlY3RNZGInJT4oKXsNCiAgICAgICAgcmV0dXJuIHRoaXMuX19leHBvcnQoe30sIHsNCiAgICAgICAgICAgIF9USElTOiBvYmogPT4gb2JqLl9pZCA9IHskaW46IHRoaXMuX1RISVMubWFwKHQgPT4gdC48JT1tTmFtZSU+KCkpfSwNCiAgICAgICAgICAgIElkOiBvYmogPT4gb2JqLl9pZCA9IHRoaXMuSWQsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5Jc1RleHQgJiYgIWVhLklzSW1hZ2UgJiYgIWVhLklzRmlsZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgaWYoIXYuPCU9bU5hbWUlPikgcmV0dXJuOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHt9Ow0KICAgICAgICAgICAgICAgIGxldCBvcCA9ICIkZSI7DQogICAgICAgICAgICAgICAgc3dpdGNoKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3Apew0KICAgICAgICAgICAgICAgICAgICBjYXNlICI9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBjYXNlICI+IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRndCI7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiPCI6DQogICAgICAgICAgICAgICAgICAgICAgICBvcCA9ICIkbHQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIj49IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRndGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIjw9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRsdGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgIiE9IjoNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gIiRuZSI7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiSU4iOg0KICAgICAgICAgICAgICAgICAgICAgICAgb3AgPSAiJGluIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSBpZihlYS5Jc0RhdGUpeyAlPg0KICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdW29wXSA9IHYuPCU9bU5hbWUlPigpLnRvSVNPU3RyaW5nKCk7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSB2LjwlPW1OYW1lJT4oKTsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHY7DQogICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmpbZWFDb2RlXSA9IHskaW46IHYubWFwKHQgPT4gdC48JT1tTmFtZSU+KCkpfSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgfQ0KPCUgfSU+DQoNCjwlIGlmKG1haW5DbGFzcyhfc3FsVG9vbHMpKXslPg0KICAgIDwlPW1OYW1lPSdfdG9EQk9iamVjdCclPihmaWVsZHMsIGJOb1JlZil7DQogICAgICAgIGlmKCF0aGlzLklkKXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPiJJbnZhbGlkIElEIiwgdGhpcy5FbnRpdHlDbGFzcy5OYW1lLCB0aGlzLlRvb2wpOw0KICAgICAgICB9DQogICAgICAgIGxldCByZXQgPSB7DQogICAgICAgICAgICBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXTogIiciICsgdGhpcy5JZCArICInIg0KICAgICAgICB9Ow0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgIGlmKCgoZmllbGRzICYmIGZpZWxkcy5pbmRleE9mKCI8JT1lYS5OYW1lJT4iKSkgfHwgIWZpZWxkcykgJiYgdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0ICYmICghYk5vUmVmIHx8IDwlPWVhLkVudGl0eVR5cGU/J2ZhbHNlJzondHJ1ZSclPikpew0KICAgICAgICAgICAgbGV0IGZWYWx1ZSA9IG51bGw7DQogICAgICAgICAgICBsZXQgdiA9IHRoaXMuPCU9bk5hbWUoZWEpJT4oKTsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgIGlmKHYgJiYgKHYuX19zeW5jX29uKCkgfHwgdi5JZD09di5JZCkpew0KICAgICAgICAgICAgICAgIGZWYWx1ZSA9ICInIiArIHYuSWQgKyAiJyI7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBmVmFsdWUgPSAiTlVMTCI7DQogICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQm9vbCl7JT4NCiAgICAgICAgICAgIGZWYWx1ZSA9IHY/MTowOw0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J05lbzRqJykgZlZhbHVlID0gZlZhbHVlPydUcnVlJzonRmFsc2UnOw0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J1NxbERCJykgZlZhbHVlID0gIiciICsgZlZhbHVlICsgIiciOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0ludCB8fCBlYS5Jc0xvbmcgfHwgZWEuSXNGbG9hdCl7JT4NCiAgICAgICAgICAgIGZWYWx1ZSA9IHYgfHwgJzAnOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0RhdGUpeyU+DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgZlZhbHVlID0gIiciICsgKHY/di50b0lTT1N0cmluZygpOiIxOTcwLTEtMSIpICsgIiciOw0KICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J215c3FsJyl7DQogICAgICAgICAgICAgICAgICAgIGZWYWx1ZSA9IGBTVFJfVE9fREFURSgke2ZWYWx1ZX0sICclWS0lbS0lZFQlVC4lZlonKWA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICBmVmFsdWUgPSAiJyIgKyB2ICsgIiciOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J05lbzRqJykgZlZhbHVlID0gJ2RhdGV0aW1lKCcgKyBmVmFsdWUgKyAnKSc7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzT2JqZWN0KXslPg0KICAgICAgICAgICAgZlZhbHVlID0gIiciICsgSlNPTi5zdHJpbmdpZnkodiwgbnVsbCwgJ1x0JykgKyAiJyI7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXslPg0KICAgICAgICAgICAgZlZhbHVlID0gdj09PW51bGw/Ik5VTEwiOigiJyIgKyAoKGZhbHNlICYmIHYgJiYgdi5yZXBsYWNlKT92LnJlcGxhY2UoL1xcbi9nLCAiXFxcXG4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwnL2csICJcXFxcJyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCIvZywgJ1xcXFwiJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJi9nLCAiXFxcXCYiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csICJcXFxcciIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHQvZywgIlxcXFx0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcYi9nLCAiXFxcXGIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICJcXFxcZiIpICA6dikgKyAiJyIpOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1RleHQpeyU+DQogICAgICAgICAgICBpZih2PT09bnVsbCl7DQogICAgICAgICAgICAgICAgZlZhbHVlID0gIk5VTEwiOw0KICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09J1NxbERCJyl7DQogICAgICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygndHlwZScpPT0nbXlzcWwnKXsNCiAgICAgICAgICAgICAgICAgICAgZlZhbHVlID0gYEZST01fQkFTRTY0KCcke3RoaXMuX2J0b2Eodil9JylgOw0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J3NxbGl0ZScpew0KICAgICAgICAgICAgICAgICAgICBmVmFsdWUgPSBgY2FzdCh1bmhleCgnJHt2LnNwbGl0KCIiKS5tYXAoeCA9PiAoMjU2ICsgeC5jaGFyQ29kZUF0KCkpLnRvU3RyaW5nKDE2KS5zdWJzdHIoLTIpKS5qb2luKCIiKX0nKSBhcyB2YXJjaGFyKWA7DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGZWYWx1ZSA9IHY7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgZlZhbHVlID0gIiciICsgdiArICInIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICBmVmFsdWUgPSAiJyIgKyB2ICsgIiciOw0KICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldFs8JT1fbkNvZGUoZWEpJT4gKyAiPCU9KGVhLkVudGl0eVR5cGU/J2lkJzonJyklPiJdID0gZlZhbHVlOw0KICAgICAgICB9DQogICAgPCUgfSk7ICU+DQogICAgDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCjwlIH0lPg0KDQo8JSBpZihtYWluQ2xhc3MoWydCSVNlcnZlciddKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nZ2V0JyU+KG5hbWUpIHsNCiAgICAgICAgaWYgKCF0aGlzLklkKSByZXR1cm4gbnVsbDsNCiAgICAgICAgdmFyIHQgPSBudWxsOw0KICAgICAgICAkLmVhY2gobmFtZS5zcGxpdCgnLicpLCAoXywgZikgPT4gew0KICAgICAgICAgICAgdCA9IHsNCiAgICAgICAgICAgICAgICBFbnRpdHlPYmplY3Q6IHQgPyB7DQogICAgICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgVmFsdWVFbnRpdGllczogW3RdDQogICAgICAgICAgICAgICAgfSA6IHsNCiAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBJZDogdGhpcy5JZA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgRW50aXR5QXR0cmlidXRlOiB7DQogICAgICAgICAgICAgICAgICAgIE5hbWU6IGYsDQogICAgICAgICAgICAgICAgICAgIE9QRVJBVE9SUzogew0KICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogIj0iDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuICQud2hlbih0aGlzLnNyKCkuXygiRW50ZXJwcmlzZU1hbmFnZXIuZW1zRW50aXR5VmFsdWVGaW5kIiwgbnVsbCwgdCkpLnRoZW4oZXYgPT4gew0KICAgICAgICAgICAgPCU9bG9nKCklPmV2KTsNCiAgICAgICAgICAgIGlmIChldiA9PT0gbnVsbCkgcmV0dXJuIG51bGw7DQogICAgICAgICAgICBpZiAoZXYuRW50aXR5QXR0cmlidXRlLklzU3RyaW5nKSByZXR1cm4gZXYuU3RyaW5nVmFsdWU7DQogICAgICAgICAgICBpZiAoZXYuRW50aXR5QXR0cmlidXRlLklzRmxvYXQpIHJldHVybiBldi5GbG9hdFZhbHVlOw0KICAgICAgICAgICAgaWYgKGV2LkVudGl0eUF0dHJpYnV0ZS5Jc0ludCkgcmV0dXJuIGV2LkludFZhbHVlOw0KICAgICAgICAgICAgaWYgKGV2LkVudGl0eUF0dHJpYnV0ZS5Jc0xvbmcpIHJldHVybiBldi5Mb25nVmFsdWU7DQogICAgICAgICAgICBpZiAoZXYuRW50aXR5QXR0cmlidXRlLklzVGV4dCkgcmV0dXJuIGV2LlRleHRWYWx1ZTsNCiAgICAgICAgICAgIGlmIChldi5FbnRpdHlBdHRyaWJ1dGUuSXNCb29sKSByZXR1cm4gZXYuQm9vbFZhbHVlOw0KDQogICAgICAgICAgICBpZiAoIWV2Lk9iamVjdFZhbHVlKSByZXR1cm4gbnVsbDsNCg0KICAgICAgICAgICAgcmV0dXJuIG5ldyA8JT1zY29wZSU+WyQuZ3JlcCg8JT1zY29wZSU+LkVudGl0eUNsYXNzZXMsIGMgPT4gYy5JZCA9PSBldi5FbnRpdHlBdHRyaWJ1dGUuRW50aXR5VHlwZWlkKVswXS5OYW1lLnJlcGxhY2UoLyAvZywgJ18nKV0oZXYuT2JqZWN0VmFsdWUuSWQpOw0KICAgICAgICB9KTsNCiAgICB9DQo8JSB9JT4NCg0KPCUgaWYobWFpbkNsYXNzKF9zcWxUb29scykpeyU+DQogICAgPCU9bU5hbWU9J19RJyU+KCl7DQogICAgICAgIGxldCBfbyA9ICciJzsNCiAgICAgICAgbGV0IF9xID0gX287DQoNCiAgICAgICAgaWYoWydTYWxlc0ZvcmNlJ10uaW5kZXhPZih0aGlzLlRvb2wudHlwZS5uYW1lKT09MCl7DQogICAgICAgICAgICBfbyA9IF9xID0gIiI7DQogICAgICAgIH1lbHNlIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J215c3FsJyB8fCB0aGlzLlRvb2wudHlwZS5uYW1lPT0nTmVvNGonKXsNCiAgICAgICAgICAgIF9vID0gX3EgPSAnYCc7DQogICAgICAgIH1lbHNlIGlmKFsnU2FsZXNGb3JjZSddLmluZGV4T2YodGhpcy5Ub29sLnR5cGUubmFtZSk9PTApew0KICAgICAgICAgICAgX28gPSBfcSA9IGAnYDsNCiAgICAgICAgfWVsc2UgaWYodGhpcy5fX2NvbmZpZygndHlwZScpPT0nc3Fsc2VydmVyJyl7DQogICAgICAgICAgICBfbyA9ICdbJzsNCiAgICAgICAgICAgIF9xID0gJ10nOw0KICAgICAgICB9ZWxzZSBpZih0aGlzLl9fY29uZmlnKCdhcGlLZXknKT09J2FpcnRhYmxlJyl7DQogICAgICAgICAgICBfbyA9ICd7JzsNCiAgICAgICAgICAgIF9xID0gJ30nOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBfbz9fcTpfbzsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19maWVsZEdyb3VwcyclPihmZ3MgPSB7fSl7DQogICAgICAgIHRoaXMuX19maWVsZEdyb3VwcyA9IGZnczsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZmllbGRBZ2dyZWdhdGVzJyU+KGZhcyA9IHt9KXsNCiAgICAgICAgdGhpcy5fX2ZpZWxkQWdncmVnYXRlcyA9IGZhczsNCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9GaWVsZHNTUUwnJT4oZmllbGRzKXsNCiAgICAgICAgDQogICAgICAgIGZpZWxkcyA9IGZpZWxkcyB8fCBbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpLCA8JT1jLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLm1hcChlYSA9PiBfbkNvZGUoZWEpICsgKGVhLkVudGl0eVR5cGU/JysiLmlkIic6JycpKS5qb2luKCcsJyklPl07DQogICAgICAgIGZpZWxkcyA9IEFycmF5LmlzQXJyYXkoZmllbGRzKT9maWVsZHM6W2ZpZWxkc107DQoNCiAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzKXsNCiAgICAgICAgICAgIC8vIHtmaWVsZDogb3JkZXJ9DQogICAgICAgICAgICBmaWVsZHMgPSBbXTsNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgIWVhLklzVGV4dCAmJiAhZWEuSXNJbWFnZSAmJiAhZWEuSXNGaWxlKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgIGlmKHRoaXMuX19maWVsZEdyb3Vwcy48JT1uTmFtZShlYSklPikgZmllbGRzLnB1c2goYCR7PCU9X25Db2RlKGVhKSU+PCU9KGVhLkVudGl0eVR5cGU/JysiaWQiJzonJyklPn1gKTsNCiAgICA8JSB9KSU+DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGZpZWxkczsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19mcm9tREJPYmplY3QnJT4ocj17fSl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9faW1wb3J0KHIsIHsNCiAgICAgICAgICAgICAgICBJZDogb2JqID0+IHRoaXMuSWQgPSBvYmpbdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpXSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihvYmpbZWFDb2RlXSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9TZWxlY3RIZWFkZXInJT4oZmllbGRzKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IHJldCA9IHsNCiAgICAgICAgICAgICAgICB0YWJsZTogPCU9X25Db2RlKCklPiwNCiAgICAgICAgICAgICAgICBmaWVsZHM6IERvdE9iamVjdC5vYmplY3QoT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuX3RvRmllbGRzU1FMKGZpZWxkcykubWFwKGYgPT4gdGhpcy5fUSgpICsgZi5yZXBsYWNlKC9cLi9nLCAnJykgKyB0aGlzLl9RKCkpLm1hcChmID0+IFtmLCBmXSkpKSwNCiAgICAgICAgICAgICAgICBqb2luczoge30sDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihmaWVsZHMpIHJldHVybiByZXQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldC5qb2lucyA9IHRoaXMuX19leHBvcnQoe30sIHsNCiAgICAgICAgICAgICAgICBOdWxsOiB0cnVlLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9ialtlYUNvZGVdID0gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KCksDQogICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3RvU2VsZWN0U1FMJyU+KGZpZWxkcyl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCBzcWwgPSAic2VsZWN0ICI7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCB0UHJlZiA9IGAke3RoaXMuX1EoKX0kezwlPV9uQ29kZSgpJT59JHt0aGlzLl9RKCl9YDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IGhlYWRlciA9IHRoaXMuX3RvU2VsZWN0SGVhZGVyKGZpZWxkcyk7DQoNCiAgICAgICAgICAgIHNxbCArPSBPYmplY3QudmFsdWVzKGhlYWRlci5maWVsZHMpLm1hcChmID0+IGAke3RQcmVmfS4ke2Z9YCkuam9pbignLCAnKTsNCiAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRlci5qb2lucykuZm9yRWFjaChrID0+IHNxbCArPSAiLCAiICsgT2JqZWN0LnZhbHVlcyhoZWFkZXIuam9pbnNba10uZmllbGRzKS5tYXAoZiA9PiBgJHt0aGlzLl9RKCl9JHtoZWFkZXIuam9pbnNba10udGFibGV9XyR7a30ke3RoaXMuX1EoKX0uJHtmfSBhcyAke3RoaXMuX1EoKX0ke2t9LiR7Zi5yZXBsYWNlKHRoaXMuX1EoKSwgJycpfWApLmpvaW4oJywgJykpOw0KICAgIA0KICAgICAgICAgICAgaWYodGhpcy5fX2ZpZWxkQWdncmVnYXRlcyl7DQogICAgICAgICAgICAgICAgLy8ge2ZpZWxkOiBmdW5jdGlvbn0NCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgIWVhLklzVGV4dCAmJiAhZWEuSXNJbWFnZSAmJiAhZWEuSXNGaWxlKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICAgICBpZih0aGlzLl9fZmllbGRBZ2dyZWdhdGVzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7c3FsPT0oJ3NlbGVjdCAnKT8nJzonLCd9ICR7dGhpcy5fX2ZpZWxkQWdncmVnYXRlcy48JT1uTmFtZShlYSklPn0oJHt0aGlzLl9RKCl9JHs8JT1fbkNvZGUoZWEpJT59JHt0aGlzLl9RKCl9KWA7DQogICAgPCUgfSklPg0KICAgICAgICAgICAgfQ0KICAgIA0KICAgICAgICAgICAgc3FsICs9IGAgZnJvbSAke3RQcmVmfSBgOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBPYmplY3Qua2V5cyhoZWFkZXIuam9pbnMpLmZvckVhY2goayA9PiBzcWwgKz0gYGxlZnQgam9pbiAke3RoaXMuX1EoKX0ke2hlYWRlci5qb2luc1trXS50YWJsZX0ke3RoaXMuX1EoKX0gYXMgJHt0aGlzLl9RKCl9JHtoZWFkZXIuam9pbnNba10udGFibGV9XyR7a30ke3RoaXMuX1EoKX0gb24gJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHtrfWlkJHt0aGlzLl9RKCl9PSR7dGhpcy5fUSgpfSR7aGVhZGVyLmpvaW5zW2tdLnRhYmxlfV8ke2t9JHt0aGlzLl9RKCl9LiR7dGhpcy5fUSgpfSR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpfSR7dGhpcy5fUSgpfSBgKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgc3FsICs9IGAgd2hlcmUgMT0xYDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgc3FsID0gdGhpcy5fX2V4cG9ydCh7c3FsOiBzcWx9LCB7DQogICAgICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBfZmllbGRzOiAodGhpcy5fX3N5bmNfb24oKSB8fCB0aGlzLklkPT10aGlzLklkKT9bJ0lkJ106dW5kZWZpbmVkLA0KICAgICAgICAgICAgICAgIGV4cG9ydGVyOiB2ID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodi5yZXVzZWQ+Mil7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyA8JT13YXJuKCklPiJSZXVzZWQ6ICIsIHYpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdi5vYmouc3FsID0gYC8qUkVTVUVEOiAke3YucmV1c2VkfSovYDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgX1RISVM6IG9iaiA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLl9USElTIHx8ICF0aGlzLl9USElTLmxlbmd0aCkgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgIC8qYW5kICovJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9IGAgKyAodGhpcy5fVEhJU19jb29wIHx8ICJJTiIpICsgIiAoIiArIHRoaXMuX1RISVMubWFwKHQgPT4gdC48JT1tTmFtZSU+KHQuX19jb25maWcoJ2lkRmllbGQnKXx8J0lkJykudGhpcykuam9pbignIFVOSU9OIEFMTCAnKSArICIpIjsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9iai5zcWwgKz0gKHRoaXMuSWQ9PXRoaXMuSWQpP2AgYW5kICR7dFByZWZ9LiR7dGhpcy5fUSgpfSR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpfSR7dGhpcy5fUSgpfT0nJHt0aGlzLklkfSdgOicnLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgDQogICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgbGV0IGNvb3AgPSB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wOw0KICAgICAgICAgICAgICAgICAgICBzd2l0Y2goY29vcCl7DQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICIhPSI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJOT1QgSU4iOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiPSI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcCA9ICJJTiI7DQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICIiOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3AgPSAiSU4iOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZih2KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gYCBhbmQgJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHtlYUNvZGV9aWQke3RoaXMuX1EoKX0gJHtjb29wfSAoJHt2LjwlPW1OYW1lJT4odi5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpKX0pYDsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9IGAgYW5kICgke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSAke2Nvb3B9ICgwKSBPUiAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX1pZCR7dGhpcy5fUSgpfSBJUyBOVUxMKWA7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc1RleHQgfHwgZWEuSXNJbWFnZSB8fCBlYS5Jc0ZpbGUpeyU+DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSBgIGFuZCAke3RQcmVmfS4ke3RoaXMuX1EoKX0ke2VhQ29kZX0ke3RoaXMuX1EoKX0gYCArIDwlaWYoZWEuSXNCb29sKXslPiI9IjwlfWVsc2V7JT4odGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCB8fCAiTElLRSIpPCV9JT4gKyAiICI7DQogICAgICAgIDwlIH0lPg0KICAgICAgICANCiAgICAgICAgPCUgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICAgICAgaWYodiAmJiB2LnRvSVNPU3RyaW5nKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ3R5cGUnKT09J3NxbGl0ZScpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gInN0cmZ0aW1lKCclcycsICciICsgdi50b0lTT1N0cmluZygpICsgIicpIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiciICsgdi50b0lTT1N0cmluZygpICsgIiciOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzU3RyaW5nKXsgJT4NCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKHYpPT09InN0cmluZyIpew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSAiJyIgKyAoKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSJMSUtFIiB8fCAhdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk/IiUiOiIiKSArIHYgKyAoKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSJMSUtFIiB8fCAhdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk/IiUiOiIiKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyAlPg0KICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2Yodik9PT0iYm9vbGVhbiIpew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNxbCArPSAiJyIgKyAodj8iMSI6IjAiKSArICInIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICAgICAgICAgIGlmKHYgJiYgdi5FbnRpdHlDbGFzcyl7DQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc3FsICs9ICIoIiArIHYuPCU9bU5hbWUlPigpICsgIikiOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gIiciICsgdiArICInIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5fPCU9dGFOYW1lJT5fc2V0KSByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBsZXQgak9QID0gJ1VOSU9OIEFMTCc7DQogICAgICAgICAgICAgICAgICAgIGxldCBpbk9QID0gJ0lOJzsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSchPScgfHwgdGhpcy5fPCU9dGFOYW1lJT5fY29vcD09J05PVCBJTicpew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5PUCA9ICdOT1QgSU4nOw0KICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLl88JT10YU5hbWUlPl9jb29wPT0nPScgfHwgdGhpcy5fPCU9dGFOYW1lJT5fY29vcD09J0lOJyl7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3A9PSc9PScpew0KICAgICAgICAgICAgICAgICAgICAgICAgak9QID0gJ0lOVEVSU0VDVCc7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIG9iai5zcWwgKz0gYGFuZCAvKjwlPXRhTmFtZSU+Ki8gJHt0UHJlZn0uJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9ICR7aW5PUH0gKGAgKyAodiB8fCBbXSkuZmlsdGVyKHQgPT4gdCkubWFwKHQgPT4gdC48JT1tTmFtZSU+KCI8JT1uTmFtZSh0YSklPi5pZCIpKS5qb2luKGAgJHtqT1B9LypNMk0qLyBgKSArICcpJzsNCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+IiwgZmllbGRzKS5zcWw7DQoNCiAgICAgICAgICAgIGlmKHRoaXMuX19maWVsZEdyb3Vwcyl7DQogICAgICAgICAgICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5fX2ZpZWxkR3JvdXBzKS5sZW5ndGgpIHNxbCArPSAiIGdyb3VwIGJ5ICI7DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmICFlYS5Jc1RleHQgJiYgIWVhLklzSW1hZ2UgJiYgIWVhLklzRmlsZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgaWYodGhpcy5fX2ZpZWxkR3JvdXBzLjwlPW5OYW1lKGVhKSU+KSBzcWwgKz0gYCR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKGVhKSU+PCU9KGVhLkVudGl0eVR5cGU/JysiaWQiJzonJyklPn0ke3RoaXMuX1EoKX0gJHt0aGlzLl9fZmllbGRHcm91cHMuPCU9bk5hbWUoZWEpJT59YDsNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmKCFzcWwuZW5kc1dpdGgoIndoZXJlIDE9MSIpKXsNCiAgICAgICAgICAgICAgICBzcWwgPSBzcWwucmVwbGFjZSgid2hlcmUgMT0xIGFuZCAiLCAid2hlcmUgIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHNxbCA9IHR5cGVvZihzcWxGb3JtYXR0ZXIpIT09J3VuZGVmaW5lZCc/c3FsRm9ybWF0dGVyLmZvcm1hdChzcWwpOnNxbDsNCiAgICAgICAgICAgIDwlPWxvZygpJT5zcWwpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXR1cm4gc3FsOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdG9QYXRocyclPigpew0KICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7fSwgew0KICAgICAgICAgICAgX1RISVM6IG9iaiA9PiB7fSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouPCU9bk5hbWUoZWEpJT4gPSB2LjwlPW1OYW1lJT4oKSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IG9iai48JT10YU5hbWUlPiA9IHYubWFwKF92ID0+IF92LjwlPW1OYW1lJT4oKSksDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICAvLyByZXR1cm4gcmV0Ow0KICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocmV0KS5tYXAoayA9PiAoe1trXTogcmV0W2tdfSkpOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9VcGRhdGVTUUwnJT4oZmllbGRzKXsNCiAgICAgICAgbGV0IHJldEZpZWxkcyA9IHRoaXMuX3RvRmllbGRzU1FMKGZpZWxkcykubWFwKGYgPT4gdGhpcy5fUSgpICsgZi5yZXBsYWNlKC9cLi9nLCAnJykgKyB0aGlzLl9RKCkpLmpvaW4oJywgJyk7DQogICAgICAgIGxldCBzcWwgPSBgdXBkYXRlICR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKCklPn0ke3RoaXMuX1EoKX0gc2V0IGAgKyBPYmplY3QuZW50cmllcyh0aGlzLl90b0RCT2JqZWN0KGZpZWxkcykpLm1hcCh2ID0+IHRoaXMuX1EoKSArIHZbMF0gKyB0aGlzLl9RKCkgKyAiPSIgKyB2WzFdKSArIGAgd2hlcmUgJHt0aGlzLl9RKCl9JHt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJyl9JHt0aGlzLl9RKCl9PScke3RoaXMuSWR9J2A7IC8vYCByZXR1cm5pbmcgJHtyZXRGaWVsZHN9YDsNCiAgICAgICAgPCU9bG9nKCklPnNxbCk7DQogICAgICAgIHJldHVybiBzcWw7DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J190b0luc2VydFNRTCclPihmaWVsZHMpew0KICAgICAgICBsZXQgb2JqID0gdGhpcy5fdG9EQk9iamVjdChmaWVsZHMpOw0KICAgICAgICBsZXQgc3FsID0gYGluc2VydCBpbnRvICR7dGhpcy5fUSgpfSR7PCU9X25Db2RlKCklPn0ke3RoaXMuX1EoKX0gKGAgKyBPYmplY3Qua2V5cyhvYmopLm1hcChrID0+IHRoaXMuX1EoKSArIGsgKyB0aGlzLl9RKCkpICsgIikgdmFsdWVzICgiICsgT2JqZWN0LnZhbHVlcyhvYmopICsgYClgOw0KICAgICAgICA8JT1sb2coKSU+c3FsKTsNCiAgICAgICAgcmV0dXJuIHNxbDsNCiAgICB9DQo8JSB9ICU+DQogICAgDQogICAgPCU9bU5hbWU9J19jb3B5RnJvbSclPihvYmopew0KICAgICAgICBpZighb2JqKSByZXR1cm4gbnVsbDsNCiAgICAgICAgcmV0dXJuIHRoaXMuX3JldmVydChvYmopOw0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3RvT2JqVHJlZSclPihiQ3ljbGljKXsNCiAgICAgICAgPCU9d2FybigpJT4iZGVwcmVjYXRlZCIpOw0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgDQogICAgICAgIHRoaXMuX2RlZmF1bHRzKCk7DQoNCiAgICAgICAgcmV0dXJuIHRoaXMuX19leHBvcnQobmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGMuTmFtZSwgdHJ1ZSklPignPCU9Yy5OYW1lJT4nKSwgew0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgIEN5Y2xpYzogYkN5Y2xpYywNCiAgICAgICAgICAgIC8vZXhwb3J0ZXI6IHYgPT4gPCU9d2FybigpJT52LnJldXNlZCksDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLjwlPW5OYW1lKGVhKSU+KDwlaWYoZWEuRW50aXR5VHlwZSl7JT5uZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoZWEuRW50aXR5VHlwZSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4oYkN5Y2xpYyk8JX1lbHNleyU+djwlfSU+KSwNCiAgICA8JSB9KTslPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLjwlPXRhTmFtZSU+KG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4oYkN5Y2xpYykpLA0KICAgIDwlIH0pOyU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfdW5DeWNsZSclPihzb3VyY2U9dGhpcyl7DQogICAgICAgIHJldHVybiB0aGlzLl9fZXhwb3J0KHRoaXMsIHsNCiAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouPCU9bk5hbWUoZWEpJT4oc291cmNlPT1vYmouPCU9bk5hbWUoZWEpJT4oKT9udWxsOnVuZGVmaW5lZCksDQogICAgPCUgfSk7JT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHRydWUsDQogICAgPCUgfSk7JT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCiAgICB9DQogICAgDQogICAgYXN5bmMgPCU9bU5hbWU9J19zdG9yZUVudGl0eUNsYXNzJyU+KGRlcHRoKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYodHlwZW9mKGRlcHRoKT09PSJ1bmRlZmluZWQiKSBkZXB0aCA9IE1hdGgubWF4KHRoaXMuX19jb25maWcoImNyZWF0ZSIpLCA8JT1jLlJhbmslPik7DQogICAgICAgICAgICBpZighZGVwdGgpIHJldHVybjsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgdGhpcy5Ub29sLjwlPW1OYW1lJT4gPSB0aGlzLlRvb2wuPCU9bU5hbWUlPiB8fCB7fTsNCiAgICAgICAgICAgIGlmKHRoaXMuVG9vbC48JT1tTmFtZSU+LjwlPW5OYW1lKGMpJT4pIHJldHVybjsNCiAgICAgICAgICAgIHRoaXMuVG9vbC48JT1tTmFtZSU+LjwlPW5OYW1lKGMpJT4gPSB0cnVlOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+YHN0b3JpbmcgJyR7dGhpcy5Ub29sLnR5cGUubmFtZX0nIG1vZGVsIHdpdGggZGVwdGggJHtkZXB0aH1gKTsNCiAgICAgICAgICAgIA0KPCUgY2xzVG9vbHMoYykuZm9yRWFjaCh0ID0+IHslPg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5EU0Nvbm5lY3QoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgIDwlIGlmKHQ9PSJOZW80aiIpeyU+DQogICAgICAgICAgICAgICAgbGV0IGNxbCA9IHRoaXMuX3RvQ3lUYWJsZShkZXB0aCk7DQogICAgICAgICAgICAgICAgPCU9bG9nKCklPmNxbCk7DQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbmVvNGooY3FsKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iQWlyVGFibGUiKXslPg0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2FpcnRhYmxlKCdtZXRhL2Jhc2VzJywgbnVsbCwge25hbWU6ICc8JT1zY29wZSU+Jywgd29ya3NwYWNlSWQ6IHRoaXMuVG9vbC5kYi53b3Jrc3BhY2VJZCwgdGFibGVzOiB0aGlzLl90b0FUVGFibGUoZGVwdGgpfSk7DQogICAgPCUgfWVsc2UgaWYoX3NxbFRvb2xzLmluZGV4T2YodCk+PTApeyU+DQogICAgICAgICAgICAgICAgbGV0IHNxbCA9IHRoaXMuX3RvU1FMVGFibGUoe3JldXNlZDogZGVwdGh9KS5zcWw7IDwlLypkZXB0aDogY2hhbGxlbmdlIC0gdG9vIGxvdyBkb2VzIG5vdCBjb3ZlciBhbGwgdGFibGVzLCB0b28gaGlnaCAobWF4IGRlcHRoKSByZXN1bHRzIGluIG91dC1vZi1tZW1vcnkgb24gYnJvd3NlciovJT4NCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+c3FsKTsNCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zcWwoc3FsKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iU2VydmljZU5vdyIpeyU+DQogICAgICAgICAgICAgICAgLy88JT1sb2coKSU+dGhpcy5fdG9TTlRhYmxlKCkpOw0KICAgIDwlIH1lbHNlIGlmKHQ9PSJFTVMiKXslPg0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3RvRU1TQ2xhc3MoZGVwdGgpLnN0b3JlKCk7DQogICAgPCUgfWVsc2UgaWYodD09IkJJU2VydmVyIil7JT4NCiAgICAgICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgaWYgdGhlIG1vZHVsZSBpcyBub3QgbG9hZGVkIGZyb20gDQogICAgICAgICAgICAgICAgKGF3YWl0IHRoaXMuc3IoKS5fKCJFbnRlcnByaXNlTWFuYWdlci5lbXNFbnRpdHlBdHRyaWJ1dGVGaW5kYWxsIiwgbnVsbCwgew0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eUNsYXNzOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBDb21wYW55OiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvZGU6IHRoaXMuX19jb25maWcoJ2NvbXBhbnknLCAnPCU9c2NvcGUlPicpLA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIH0pKS5mb3JFYWNoKGVhID0+IC8qIHRyeWUgX2VhVHlwZXMgKi88JT1zY29wZSU+LkVudGl0eUF0dHJpYnV0ZXMuZm9yRWFjaChzZWEgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZihzZWEuSWQhPT1lYS5JZCAmJiBzZWEuTmFtZT09ZWEuTmFtZSAmJiAoc2VhLkVudGl0eUNsYXNzLklkPT1lYS5FbnRpdHlDbGFzcy5JZCB8fCBzZWEuRW50aXR5Q2xhc3MuTmFtZT09ZWEuRW50aXR5Q2xhc3MuTmFtZSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgc2VhLklkID09IGVhLklkOw0KICAgICAgICAgICAgICAgICAgICAgICAgc2VhLkVudGl0eUNsYXNzLklkID0gZWEuRW50aXR5Q2xhc3MuSWQ7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT1zY29wZSU+LkVudGl0eUNsYXNzZXMuZmluZChjID0+IGMuTmFtZT09c2VhLkVudGl0eUNsYXNzLk5hbWUpLkVudGl0eUF0dHJpYnV0ZXMuZmluZChzY2VhID0+IHNjZWEuTmFtZT09ZWEuTmFtZSkuSWQgPSBlYS5JZDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iTW9uZ29EQiIgfHwgdD09IlphbmdvREIiKXslPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuVG9vbC5kYikgYXdhaXQgdGhpcy5Ub29sLmRiLmNyZWF0ZUNvbGxlY3Rpb24oPCU9X25Db2RlKCklPiwge3ZhbGlkYXRvcjogeyRqc29uU2NoZW1hOiB0aGlzLl90b0pTT05TY2hlbWEoKX19KTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iUnhEQiIpeyU+DQogICAgICAgICAgICAgICAgaWYodGhpcy5Ub29sLmRiKSBhd2FpdCB0aGlzLlRvb2wuZGIuYWRkQ29sbGVjdGlvbnMoe1s8JT1fbkNvZGUoKSU+XToge3NjaGVtYTogdGhpcy5fdG9KU09OU2NoZW1hKCl9fSk7DQogICAgPCUgfSU+DQogICAgICAgICAgICB9DQo8JSB9KSU+DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J19sb2cnJT4ob2JqPXRoaXMpew0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KG9iaik7DQo8JSB9ZWxzZXslPg0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KG9iaikpIHJldHVybiBvYmoubWFwKG8gPT4gdGhpcy5fbG9nKG8pKTsNCiAgICAgICAgICAgIGlmKG9iai5FbnRpdHlDbGFzcykgb2JqID0gb2JqLl90b0pTT04oe2JNYXA6IHRydWV9KTsNCiAgICAgICAgICAgIDwlPWxvZygpJT5vYmopOw0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCjwlIH0lPg0KICAgIH0NCg0KICAgIGFzeW5jIDwlPW1OYW1lPSdEU0Nvbm5lY3QnJT4odG9vbD10aGlzLlRvb2wpew0KPCUgaWYobWFpbkNsYXNzKCkhPWMpeyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUobWFpbkNsYXNzKCksIHRydWUpJT4oKS48JT1tTmFtZSU+KHRvb2wpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYoIXRvb2wpew0KICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPiJUb29sIGlzIG51bGwiLCB0aGlzLlRvb2xzLmxlbmd0aCwgPCU9c2NvcGUlPi5Ub29scy5sZW5ndGgpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH1lbHNlIGlmKCF0b29sLnR5cGUpew0KICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPiJUb29sLnR5cGUgaXMgbnVsbCIsIHRvb2wsIHRoaXMuVG9vbHMubGVuZ3RoLCA8JT1zY29wZSU+LlRvb2xzLmxlbmd0aCk7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfWVsc2UgaWYodHlwZW9mKHRvb2wuZGIpIT09InVuZGVmaW5lZCIpew0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iVG9vbCBhbHJlYWR5IGNvbm5lY3RlZCEiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9ZWxzZSBpZig8JT1uc2NvcGUlPi5fbm9kZSAmJiAvKjwlPW5zY29wZSU+Ll9ub2RlLl9wYXJlbnRfc2V0ICYmICovPCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCkuX3NhbWVFbnRpdHkoPCU9bnNjb3BlJT4uX25vZGUucGFyZW50KCkpKXsNCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+Ik5vZGUgaGFzIGEgdmFsaWQgcGFyZW50LCBubyBsb2NhbCBTUUwgcG9zc2libGUiKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHRvb2wuX19kbWxTdGF0ZW1lbnRzID0gdG9vbC5fX2RtbFN0YXRlbWVudHMgfHwgW107DQo8JSBjbHNUb29scyhjKS5mb3JFYWNoKHQgPT4geyU+DQogICAgICAgICAgICA8JT1sb2coKSU+Ils8JT10JT5dOiBDb25uZWN0aW5nLi4uIik7DQoNCiAgICAgICAgICAgIGlmKHRvb2wudHlwZS5uYW1lPT0iPCU9dCU+Iil7DQogICAgPCUgaWYodD09IkVNUyIpeyU+DQogICAgPCUgfWVsc2UgaWYodD09Ik1vbmdvREIiKXslPg0KICAgICAgICAgICAgICAgIC8vPCU9bG9nKCklPnRoaXMuX19jb25maWcoJ3VyaScsIG51bGwsIHt0b29sOiB0b29sfSksIHRoaXMuX19jb25maWcoJ2NvbmZpZycsIG51bGwsIHt0b29sOiB0b29sfSkpOw0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZihtb25nb2RiKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgdG9vbC5kYiA9IChhd2FpdCBuZXcgbW9uZ29kYi5Nb25nb0NsaWVudCh0aGlzLl9fY29uZmlnKCd1cmknLCBudWxsLCB7dG9vbDogdG9vbH0pLCB0aGlzLl9fY29uZmlnKCdjb25maWcnLCBudWxsLCB7dG9vbDogdG9vbH0pKS5jb25uZWN0KCkpLmRiKHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJywgIjwlPXNjb3BlJT4iLCB7dG9vbDogdG9vbH0pKTsNCiAgICAgICAgICAgICAgICB9DQogICAgPCUgfWVsc2UgaWYodD09J1J4REInKXslPg0KICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBhd2FpdCBSeERCLmNyZWF0ZVJ4RGF0YWJhc2Uoe25hbWU6IHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJywgIjwlPXNjb3BlJT4iLCB7dG9vbDogdG9vbH0pLCBzdG9yYWdlOiBudWxsfSk7DQogICAgPCUgfWVsc2UgaWYodD09J1phbmdvREInKXslPg0KICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBuZXcgemFuZ28uRGIodGhpcy5fX2NvbmZpZygnZGF0YWJhc2UnLCAiPCU9c2NvcGUlPiIsIHt0b29sOiB0b29sfSksIHsNCiAgICAgICAgPCUgYXJDbGFzc2VzLmZvckVhY2goZWMgPT4geyU+DQogICAgICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVjKSU+OiBbIjwlPWVjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLm1hcChlYSA9PiBuTmFtZShlYSkpLmpvaW4oJ1wiLCBcIicpJT4iXSwNCiAgICAgICAgPCUgfSkgJT4NCiAgICAgICAgICAgICAgICB9KTsNCiAgICA8JSB9ZWxzZSBpZih0PT0nS2Fma2EnKXslPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZihrYWZrYWpzKSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgdG9vbC5kYiA9IG5ldyBrYWZrYWpzLkthZmthKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLl9fY29uZmlnKCdjbGllbnRJZCcsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICBicm9rZXJzOiBbdGhpcy5fX2NvbmZpZygnYnJva2VycycsIG51bGwsIHt0b29sOiB0b29sfSldLA0KICAgICAgICAgICAgICAgICAgICAgICAgc3NsOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgc2FzbDogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLl9fY29uZmlnKCdjbGllbnRJZCcsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuX19jb25maWcoJ3Nhc2xfcGFzc3dvcmQnLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbTogdGhpcy5fX2NvbmZpZygnc2FzbF9tZWNoYW5pc21zJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uVGltZW91dDogMzAwMCwNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIHRvb2wucHJvZHVjZXIgPSB0b29sLmRiLnByb2R1Y2VyKCk7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IHRvb2wucHJvZHVjZXIuY29ubmVjdCgpOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgdG9vbC5jb25zdW1lciA9IHRvb2wuZGIuY29uc3VtZXIoe2dyb3VwSWQ6IHRoaXMuX19jb25maWcoJ2NsaWVudElkJywgbnVsbCwge3Rvb2w6IHRvb2x9KX0pOw0KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0b29sLmNvbnN1bWVyLmNvbm5lY3QoKTsNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdG9vbC5jb25zdW1lci5zdWJzY3JpYmUoew0KICAgICAgICAgICAgICAgICAgICAgICAgdG9waWM6ICc8JT1zY29wZSU+LmNhbGwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUJlZ2lubmluZzogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICA8JSBpZihfY05hbWUoJ0V2ZW50JykpeyU+DQogICAgICAgICAgICAgICAgICAgIHRvb2wuY29uc3VtZXIucnVuKHtlYWNoTWVzc2FnZTogYXN5bmMgKHsgdG9waWMsIHBhcnRpdGlvbiwgbWVzc2FnZSB9KSA9PiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoJ0V2ZW50JywgdHJ1ZSklPigpLl9mcm9tRG9jdW1lbnQobWVzc2FnZS52YWx1ZS50b1N0cmluZygpKS5wcm9jZXNzKCl9KTsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlfWVsc2UgaWYodD09J01lbW9yeScpeyU+DQogICAgICAgICAgICAgICAgdG9vbC5kYiA9IHsNCiAgICAgICAgPCUgYXJDbGFzc2VzLmZvckVhY2goZWMgPT4geyU+DQogICAgICAgICAgICAgICAgICAgICc8JT1uTmFtZShlYyklPic6IFtdLA0KICAgICAgICA8JSB9KTsgJT4NCiAgICAgICAgICAgICAgICB9Ow0KICAgIDwlfWVsc2UgaWYodD09IkV4Y2VsIil7JT4NCiAgICAgICAgICAgICAgICBpZih0eXBlb2Yod2luZG93KSE9PSd1bmRlZmluZWQnKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9c2NvcGUlPi5kYiA9IDwlPXNjb3BlJT4ueGxzeERhdGE/WExTWC5yZWFkKDwlPXNjb3BlJT4ueGxzeERhdGEpOlhMU1gudXRpbHMuYm9va19uZXcoKTsNCiAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgPCU9c2NvcGUlPi5kYiA9IFhMU1gucmVhZChhd2FpdCBmcy5wcm9taXNlcy5yZWFkRmlsZSh0aGlzLl9fY29uZmlnKCdmaWxlbmFtZScsIG51bGwsIHt0b29sOiB0b29sfSkpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgPCV9ZWxzZSBpZih0PT0iU25vd0ZsYWtlIil7JT4NCiAgICAgICAgICAgICAgICBpZih0eXBlb2YoZ2xvYmFsKSE9PSd1bmRlZmluZWQnICYmIGdsb2JhbC5zbm93Zmxha2Upew0KICAgICAgICAgICAgICAgICAgICB0b29sLmRiID0gZ2xvYmFsLnNub3dmbGFrZS5jcmVhdGVDb25uZWN0aW9uKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQ6IHRoaXMuX19jb25maWcoImFjY291bnQiLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMuX19jb25maWcoInVzZXJuYW1lIiwgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLl9fY29uZmlnKCJwYXNzd29yZCIsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbjogdGhpcy5fX2NvbmZpZygic2NvcGUiLCBudWxsLCB7dG9vbDogdG9vbH0pIHx8ICI8JT1zY29wZSU+IiwNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdG9vbC5kYi5jb25uZWN0KChlcnIsIGNvbm4pPT57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycil7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPidVbmFibGUgdG8gY29ubmVjdDogJyArIGVyci5tZXNzYWdlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqKGVycik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbC5kYi5jb25uZWN0aW9uX0lEID0gY29ubi5nZXRJZCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlfWVsc2UgaWYodD09Ik5lbzRqIil7JT4NCiAgICAgICAgICAgICAgICB0b29sLmRiID0gbmVvNGouZHJpdmVyKA0KICAgICAgICAgICAgICAgICAgICB0aGlzLl9fY29uZmlnKCd1cmwnLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICBuZW80ai5hdXRoLmJhc2ljKHRoaXMuX19jb25maWcoJ3VzZXJuYW1lJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwgdGhpcy5fX2NvbmZpZygncGFzc3dvcmQnLCBudWxsLCB7dG9vbDogdG9vbH0pKQ0KICAgICAgICAgICAgICAgICk7DQogICAgPCV9ZWxzZSBpZih0PT0iQWlyVGFibGUiKXslPg0KICAgICAgICAgICAgICAgIHRvb2wuZGIgPSB7DQogICAgICAgICAgICAgICAgICAgIGJhc2VJZDogJycsDQogICAgICAgICAgICAgICAgICAgIHdvcmtzcGFjZUlkOiB0aGlzLl9fY29uZmlnKCd3b3Jrc3BhY2VJZCcsIG51bGwsIHt0b29sOiB0b29sfSksDQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICcnLA0KICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsDQogICAgICAgICAgICAgICAgICAgIHVzZXJJZDogKGF3YWl0IHRoaXMuX2FpcnRhYmxlKCdtZXRhL3dob2FtaScpKS5pZCwNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgbGV0IGJhc2VzID0gKGF3YWl0IHRoaXMuX2FpcnRhYmxlKCdtZXRhL2Jhc2VzJykpLmJhc2VzOw0KICAgICAgICAgICAgICAgIGlmKGJhc2VzLmxlbmd0aCl7DQogICAgICAgICAgICAgICAgICAgIHRvb2wuZGIuYmFzZUlkID0gYmFzZXMuZmlsdGVyKGIgPT4gYi5uYW1lPT0nPCU9c2NvcGUlPicpLmlkOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZighdGhpcy5Ub29sLmRiLmJhc2VJZCkgdG9vbC5kYi5iYXNlSWQgPSAnYXBwJyArIHRoaXMuX3V1aWQoKS5zcGxpdCgnLScpLnNsaWNlKC0xKVswXTsNCiAgICA8JX1lbHNlIGlmKHQ9PSJTcWxEQiIpeyU+DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKGdsb2JhbCkhPT0ndW5kZWZpbmVkJyAmJiBnbG9iYWxbdGhpcy5fX2NvbmZpZygndHlwZScsIG51bGwsIHt0b29sOiB0b29sfSldKXsNCiAgICAgICAgICAgICAgICAgICAgaWYoZ2xvYmFsW3RoaXMuX19jb25maWcoJ3R5cGUnLCBudWxsLCB7dG9vbDogdG9vbH0pXS5EYXRhYmFzZSl7DQogICAgICAgICAgICAgICAgICAgICAgICB0b29sLmRiID0gbmV3IGdsb2JhbFt0aGlzLl9fY29uZmlnKCd0eXBlJywgbnVsbCwgdG9vbCldLkRhdGFiYXNlKHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJywgbnVsbCwge3Rvb2w6IHRvb2x9KSB8fCAiLi88JT1zY29wZSU+LmRiIik7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKGdsb2JhbFt0aGlzLl9fY29uZmlnKCd0eXBlJywgbnVsbCwge3Rvb2w6IHRvb2x9KV0uY3JlYXRlQ29ubmVjdGlvbil7DQogICAgICAgICAgICAgICAgICAgICAgICB0b29sLmRiID0gZ2xvYmFsW3RoaXMuX19jb25maWcoJ3R5cGUnLCBudWxsLCB7dG9vbDogdG9vbH0pXS5jcmVhdGVDb25uZWN0aW9uKHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiB0aGlzLl9fY29uZmlnKCdzZXJ2ZXInLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI6IHRoaXMuX19jb25maWcoJ3VzZXJuYW1lJywgbnVsbCwge3Rvb2w6IHRvb2x9KSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5fX2NvbmZpZygncGFzc3dvcmQnLCBudWxsLCB7dG9vbDogdG9vbH0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlOiB0aGlzLl9fY29uZmlnKCdkYXRhYmFzZScsIG51bGwsIHt0b29sOiB0b29sfSkgfHwgIjwlPXNjb3BlJT4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKGdsb2JhbFt0aGlzLl9fY29uZmlnKCd0eXBlJywgbnVsbCwge3Rvb2w6IHRvb2x9KV0uQ2xpZW50KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBuZXcgZ2xvYmFsW3RoaXMuX19jb25maWcoJ3R5cGUnLCBudWxsLCB7dG9vbDogdG9vbH0pXS5DbGllbnQoe2Nvbm5lY3Rpb25TdHJpbmc6IHRoaXMuX19jb25maWcoJ2Nvbm5zdHInLCBudWxsLCB7dG9vbDogdG9vbH0pfSk7DQogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0b29sLmRiLmNvbm5lY3QoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH1lbHNlIGlmKHR5cGVvZihnbG9iYWwpPT09J3VuZGVmaW5lZCcgJiYgdGhpcy5fX2NvbmZpZygndHlwZScsIG51bGwsIHt0b29sOiB0b29sfSk9PT0nc3FsaXRlJyl7DQogICAgICAgICAgICAgICAgICAgIC8vIHNxbGl0ZSBpbiBicm93c2VyDQogICAgICAgICAgICAgICAgICAgIHRvb2wuZGIgPSBuZXcgU1FMLkRhdGFiYXNlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgIDwlfWVsc2UgaWYodD09IlNlcnZpY2VOb3ciKXslPg0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0b29sLnN5c19zY29wZSk9PT0idW5kZWZpbmVkIil7DQogICAgICAgICAgICAgICAgICAgIC8vIHRvb2wuc3lzX3Njb3BlID0gKGF3YWl0IHRoaXMuX3Jlc3QoInN5c19hcHAiLCB7c3lzX3Njb3BlOiB0aGlzLl9fY29uZmlnKCJzY29wZSIsIG51bGwsIHt0b29sOiB0b29sfSkgfHwgImdsb2JhbCJ9KSlbMF0uc3lzX2lkOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZih0eXBlb2YodG9vbC5zeXNfcHJvcGVydGllcyk9PT0idW5kZWZpbmVkIil7DQogICAgICAgICAgICAgICAgICAgIC8vIGxvYWRpbmcgc29tZSBwbGF0Zm9ybSBzdHVmZg0KICAgICAgICAgICAgICAgICAgICB0b29sLnN5c19wcm9wZXJ0aWVzID0ge307DQogICAgICAgICAgICAgICAgICAgIGxldCBjb25kaXRpb24gPSBPYmplY3Qua2V5cyh0b29sLnN5c19wcm9wZXJ0aWVzKS5maWx0ZXIoayA9PiAhdG9vbC5zeXNfcHJvcGVydGllc1trXSkuam9pbignLCcpOw0KICAgICAgICAgICAgICAgICAgICBpZihjb25kaXRpb24pew0KICAgICAgICAgICAgICAgICAgICAgICAgKGF3YWl0IHRoaXMuX3Jlc3QoInN5c19wcm9wZXJ0aWVzIiwge25hbWU6ICJJTiIrY29uZGl0aW9ufSkpLmZvckVhY2gociA9PiB0b29sLnN5c19wcm9wZXJ0aWVzW3IubmFtZV0gPSByLnZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICA8JX0lPg0KICAgICAgICAgICAgfQ0KPCUgfSklPg0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0aGlzOw0KPCUgfSU+DQogICAgfQ0KICAgIC8qIEVuZDogVXRpbCBmdW5jdGlvbnMgKi8NCiAgICANCiAgICA8JT1tTmFtZT0nX21hdGNoZXMnJT4ocXVlcnksIG9wdGlvbnMpew0KICAgICAgICB0cnl7DQogICAgICAgICAgICBpZighb3B0aW9ucykgb3B0aW9ucyA9IHt9Ow0KICAgICAgICAgICAgaWYoIXF1ZXJ5IHx8ICFxdWVyeS5FbnRpdHlDbGFzcyB8fCBxdWVyeS5FbnRpdHlDbGFzcy5OYW1lIT0iPCU9bk5hbWUoYyklPiIpIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYodHlwZW9mKG1pY3JvZGlmZikhPT0ndW5kZWZpbmVkJyl7DQogICAgICAgICAgICAgICAgbGV0IHRIYXNoID0gdGhpcy5fdG9IYXNoKG51bGwsIHtub0NvZGU6IHRydWUsIG9ubHlVbmlxdWU6IG9wdGlvbnMub25seVVuaXF1ZX0sICc8JT1tTmFtZSU+JykuX3RoaXM7DQogICAgICAgICAgICAgICAgbGV0IHFIYXNoID0gcXVlcnkuX3RvSGFzaChudWxsLCB7bm9Db2RlOiB0cnVlLCBvbmx5VW5pcXVlOiBvcHRpb25zLm9ubHlVbmlxdWV9LCAnPCU9bU5hbWUlPicpLl90aGlzOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBkaWZmID0gbWljcm9kaWZmKHFIYXNoLCB0SGFzaCkuZmlsdGVyKGQgPT4gZC50eXBlIT0nQ1JFQVRFJyAmJiBbJ09QRVJBVE9SUycsICdJZCddLmluZGV4T2YoZC5wYXRoWzBdKTwwKTsNCiAgICAgICAgICAgICAgICAvLzwlPWxvZygpJT4nW3QvcV0nLCB0SGFzaCwgcUhhc2gsIGRpZmYpOw0KICAgICAgICAgICAgICAgIGxldCByZXQgPSBkaWZmLmZpbHRlcihkID0+IGQudHlwZT09J0NIQU5HRScpLnJlZHVjZSgodiwgZCkgPT4gew0KICAgICAgICAgICAgICAgICAgICBsZXQgY29vcCA9IHF1ZXJ5WydfJyArIGQucGF0aFswXSArICdfY29vcCddIHx8ICh0eXBlb2YoZC52YWx1ZSk9PT0nc3RyaW5nJz8nTElLRSc6Jz0nKTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGxldCBvbGRWYWx1ZSA9IHR5cGVvZihkLm9sZFZhbHVlKT09PSdzdHJpbmcnP2Qub2xkVmFsdWUuc3BsaXQoJy8nKS5zbGljZSgtMSlbMF06ZC5vbGRWYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIDwlPWxvZygpJT5kLnBhdGhbMF0sIGQub2xkVmFsdWUsIGQudmFsdWUsIGNvb3AsIG9sZFZhbHVlLCBkKTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIHN3aXRjaChjb29wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0xJS0UnOiByZXR1cm4gdiAmJiAob2xkVmFsdWU9PT1udWxsIHx8IGQudmFsdWUuaW5kZXhPZihvbGRWYWx1ZSk+PTApOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnPSc6IHJldHVybiB2ICYmIChvbGRWYWx1ZT09PW51bGwgfHwgIWQudmFsdWUgfHwgZC52YWx1ZT09b2xkVmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnIT0nOiByZXR1cm4gdiAmJiBkLnZhbHVlIT1vbGRWYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJz49JzogcmV0dXJuIHYgJiYgZC52YWx1ZT49b2xkVmFsdWU7DQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc8PSc6IHJldHVybiB2ICYmIGQudmFsdWU8PW9sZFZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnPic6IHJldHVybiB2ICYmIGQudmFsdWU+b2xkVmFsdWU7DQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc8JzogcmV0dXJuIHYgJiYgZC52YWx1ZTxvbGRWYWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sIHRydWUpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4nW3QvcV0nLCByZXQsIGRpZmYpOw0KICAgICAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBvTWF0Y2ggPSB0aGlzLl9fZXhwb3J0KHt9LCB7DQogICAgICAgICAgICAgICAgLy9GdWxsOiB0cnVlLA0KICAgICAgICAgICAgICAgIC8vTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBJZDogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouX2lkID0gdGhpcy5JZD09cXVlcnkuSWQsDQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9bk5hbWUoZWEpJT4gPSB2P3YuPCU9bU5hbWUlPihxdWVyeT9xdWVyeS48JT1uTmFtZShlYSklPigpOm51bGwpOnRydWU7DQogICAgICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9bk5hbWUoZWEpJT4gPSB2PT1xdWVyeS48JT1uTmFtZShlYSklPigpOw0KICAgICAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIGlmKA0KICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCAmJiAhcXVlcnkuXzwlPW5OYW1lKGVhKSU+X3NldCkgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlDQogICAgICAgICAgICAgICAgICAgICkgb2JqLjwlPW5OYW1lKGVhKSU+ID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGlmKA0KICAgICAgICAgICAgICAgICAgICAgICAgKCF0aGlzLl88JT1uTmFtZShlYSklPl9zZXQgJiYgcXVlcnkuXzwlPW5OYW1lKGVhKSU+X3NldCkgfHwNCiAgICAgICAgICAgIDwlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgICAgICAgICAodGhpcy48JT1uTmFtZShlYSklPigpICYmICF0aGlzLjwlPW5OYW1lKGVhKSU+KCkuPCU9bU5hbWUlPihxdWVyeS48JT1uTmFtZShlYSklPigpKSkgfHwNCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UNCiAgICAgICAgICAgICAgICAgICAgKSBvYmouPCU9bk5hbWUoZWEpJT4gPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KTsgJT4NCiAgICAgICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9dGFOYW1lJT4gPSB2Lm1hcChfdiA9PiBxdWVyeS48JT10YU5hbWUlPigpLmFueShxID0+IF92LjwlPW1OYW1lJT4ocSkpKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+b01hdGNoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9NYXRjaCkuZXZlcnkoayA9PiBvTWF0Y2hba10pOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J19tYXRjaGluZyclPihxdWVyeSl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCByZXQgPSBbXTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSB0aGlzLl9fZXhwb3J0KHt9LCB7DQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPiJGb3IgPCU9bk5hbWUoZWEpJT4iKTsNCiAgICAgICAgICAgICAgICAgICAgb2JqLjwlPW5OYW1lKGVhKSU+ID0gdj9bdi48JT1tTmFtZSU+KHF1ZXJ5KT92Om51bGxdLmNvbmNhdCh2LjwlPW1OYW1lJT4ocXVlcnkpKS5maWx0ZXIobSA9PiBtKTpbXTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgb2JqLjwlPXRhTmFtZSU+ID0gdi5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPihxdWVyeSkpLmZsYXQoKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KDQogICAgICAgICAgICA8JT1sb2coKSU+Im1hdGNoZXMiLCBtYXRjaGVzKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0ID0gWy4uLm5ldyBTZXQoT2JqZWN0LmtleXMobWF0Y2hlcykubWFwKGsgPT4gbWF0Y2hlc1trXSkuZmxhdCgpKV0uZmlsdGVyKG0gPT4gbSE9cXVlcnkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICA8JT1sb2coKSU+InJldCIsIHJldCk7DQogICAgICAgICAgICByZXR1cm4gcmV0Ow0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfZGVSZWZlcmVuY2UnJT4ocm9vdCl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGlmKCFyb290KSByb290PXRoaXM7DQoNCiAgICAgICAgICAgIGlmKHJvb3QhPXRoaXMgJiYgdGhpcy5TZXRfT24pIHsNCiAgICAgICAgICAgICAgICBsZXQgbXlNYXRjaGVzID0gcm9vdC5fbWF0Y2hpbmcodGhpcyk7DQogICAgICAgICAgICAgICAgaWYoIW15TWF0Y2hlcy5sZW5ndGgpIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iUXVlcnkiLCBteU1hdGNoZXMubGVndGgpOw0KICAgICAgICAgICAgICAgIHJldHVybiBteU1hdGNoZXNbMF07DQogICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICB0aGlzLl9fZXhwb3J0KHt9LCB7DQogICAgICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodil7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gdi48JT1tTmFtZSU+KHJvb3QpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocmV0IT12KSB0aGlzLjwlPW5OYW1lKGVhKSU+KHJldCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICA8JSB9KTsgJT4NCiAgICAgICAgDQogICAgICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdi5maWx0ZXIodGEgPT4gdGEpLmZvckVhY2goKHRhLCBpKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0ID0gdGEuPCU9bU5hbWUlPihyb290KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJldCE9dGEpIHRoaXMuPCU9dGFOYW1lJT4oKVtpXSA9IHJldDsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgPCUgfSklPg0KICAgICAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19mcm9tRG9jdW1lbnQnJT4ob2JqLCBiVG9vbCl7DQogICAgICAgIGlmKCFvYmopIHJldHVybiB0aGlzOw0KICAgICAgICBpZihvYmouPCU9bU5hbWUlPikgcmV0dXJuIG9iajsNCiAgICAgICAgDQogICAgICAgIGlmKHR5cGVvZihvYmopPT09J3N0cmluZycpew0KICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgIGlmKG9iai5tYXRjaCgvXlswLTlhLWZdezh9WzAtOWEtZl17NH1bMC05YS1mXXs0fVswLTlhLWZdezR9WzAtOWEtZl17MTJ9JC9nKSl7DQogICAgICAgICAgICAgICAgICAgIG9iaiA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLl9fY29uZmlnKCdpZEZpZWxkJywgJ0lkJywge3Rvb2w6IG9iai5fX3Rvb2x9KV06IG9iag0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZnJvbVN0cmluZyhvYmopOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgPCU9d2FybigpJT4iSW52YWxpZCBzdHJpbmcgKG5hbWUsIEpTT04gb3IgVVVJRCkiLCBvYmopOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9ZWxzZSBpZihBcnJheS5pc0FycmF5KG9iaikpew0KICAgICAgICAgICAgcmV0dXJuIG9iai5tYXAobyA9PiB0aGlzLjwlPW1OYW1lJT4obywgYlRvb2wpKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYob2JqLl9fdG9vbCkgdGhpcy5Ub29sID0gb2JqLl9fdG9vbDsNCiAgICAgICAgDQogICAgICAgIGlmKCFPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrID0+IHR5cGVvZihvYmpba10pIT09J3VuZGVmaW5lZCcgJiYgb2JqW2tdIT09bnVsbCkubGVuZ3RoKXsNCiAgICAgICAgICAgIDwlPWxvZygpJT4iRW1wdHkgb2JqZWN0IG9yIG9iamVjdCBvZiBudWxscyIsIG9iaik7DQogICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfQ0KDQogICAgICAgIDwlPWxvZygpJT5vYmopOw0KICAgICAgICByZXR1cm4gdGhpcy5fX2ltcG9ydChvYmosIHsNCiAgICAgICAgICAgIF9tYXA6IGJUb29sLA0KICAgICAgICAgICAgaW1wb3J0ZXI6IHYgPT4gdi5vYmogPSAodi5vYmomJnYub2JqLlNldF9Db3VudDx0aGlzLlNldF9Db3VudCk/dGhpczp2Lm9iaiwNCiAgICAgICAgICAgIF9USElTOiBvYmogPT4gdGhpcy5USElTKG9iai5USElTLCBvYmouT1BFUkFUT1JTP29iai5PUEVSQVRPUlMuVEhJUzp1bmRlZmluZWQpLA0KICAgICAgICAgICAgSWQ6IChvYmosIGlkQ29kZSkgPT4gew0KICAgICAgICAgICAgICAgIGlmKGlkQ29kZT09J0lkJykgaWRDb2RlID0gdGhpcy5fX2NvbmZpZygnaWRGaWVsZCcsICdJZCcpOw0KICAgICAgICAgICAgICAgIGlmKG9ialtpZENvZGVdKSB0aGlzLklkID0gb2JqW2lkQ29kZV07DQogICAgICAgICAgICB9LA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlKSA9PiB7DQogICAgICAgICAgICAgICAgaWYob2JqLk9QRVJBVE9SUyAmJiBvYmouT1BFUkFUT1JTW2VhQ29kZV0pew0KICAgICAgICAgICAgICAgICAgICB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wID0gb2JqLk9QRVJBVE9SU1tlYUNvZGVdOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgcmVmID0gb2JqW2VhQ29kZV07DQogICAgICAgICAgICAgICAgaWYodHlwZW9mKHJlZik9PT0ndW5kZWZpbmVkJykgcmV0dXJuOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7ICU+DQogICAgICAgICAgICAgICAgPCUgaWYoIWVhLklzQXJyYXkpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSJSZXN0REJJTyIpIHJlZiA9IHJlZlswXTsNCiAgICAgICAgICAgICAgICBpZighcmVmKSByZXR1cm47DQogICAgICAgICAgICAgICAgPCUgfSAlPg0KDQogICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPigodGhpcy48JT1uTmFtZShlYSklPigpIHx8IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShlYS5FbnRpdHlUeXBlLCB0cnVlKSU+KCkpLjwlPW1OYW1lJT4ocmVmLCBiVG9vbCkpOw0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEYXRlKXsgJT4NCiAgICAgICAgICAgICAgICBpZih0aGlzLlRvb2wudHlwZS5uYW1lPT0iU3FsREIiKXsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKG1vbWVudCkhPT0idW5kZWZpbmVkIiAmJiB0eXBlb2YodGhpcy5Ub29sLnN5c19wcm9wZXJ0aWVzKSE9PSJ1bmRlZmluZWQiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IG1vbWVudC5wYXJzZVpvbmUocmVmLCB0aGlzLlRvb2wuc3lzX3Byb3BlcnRpZXNbImdsaWRlLnN5cy5kYXRlX2Zvcm1hdCJdICsgIiAiICsgdGhpcy5Ub29sLnN5c19wcm9wZXJ0aWVzWyJnbGlkZS5zeXMudGltZV9mb3JtYXQiXSwgdGhpcy5Ub29sLnN5c19wcm9wZXJ0aWVzWyJnbGlkZS5zeXMuZGVmYXVsdC50eiJdKS50b0RhdGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBuZXcgRGF0ZShyZWYpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZihyZWYpPT09J3N0cmluZycpew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVmLmluZGV4T2YoJ1QnKT4wKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBEYXRlLnBhcnNlKHJlZik7DQogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYgPSBEYXRlLnBhcnNlKHJlZiArICIgR01UIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmVmID0gbmV3IERhdGUocmVmKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihyZWYpOw0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNUZXh0KXslPg0KICAgICAgICAgICAgICAgIHRoaXMuPCU9bk5hbWUoZWEpJT4oKDwlPV9iNjR0ZXN0KCdyZWYnKSU+KT90aGlzLl9hdG9iKHJlZik6KHJlZiB8fCAnJykpOw0KICAgICAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICAgICAgdGhpcy48JT1uTmFtZShlYSklPihyZWYpOw0KICAgICAgICAgICAgPCUgfSAlPg0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUpID0+IG9ialtlYUNvZGVdP3RoaXMuPCU9dGFOYW1lJT4ob2JqW2VhQ29kZV0ubWFwKF92ID0+IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihfdiwgYlRvb2wpKSwgb2JqLk9QRVJBVE9SUz9vYmouT1BFUkFUT1JTW2VhQ29kZV06dW5kZWZpbmVkLCB0cnVlKTp1bmRlZmluZWQsDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgIH0NCiAgICANCjwlIGlmKF9jTmFtZSgnRXZlbnQnKSl7JT4NCiAgICA8JT1tTmFtZT0nX3RvUHJvdG8nJT4ob3B0aW9ucz17fSwgc1BhdGgpew0KICAgICAgICB0cnl7DQogICAgICAgICAgICBsZXQgcmV0ID0gdGhpcy5fX2V4cG9ydCh7SWQ6IDwlPV9uQ29kZSgpJT4sIHByb3RvOiBgXG5cbm1lc3NhZ2UgJHs8JT1fbkNvZGUoKSU+fSB7YCwgaW5kZXg6IDF9LCB7DQogICAgICAgICAgICAgICAgX21hcDogb3B0aW9ucy5iTWFwLA0KICAgICAgICAgICAgICAgIEZ1bGw6IHRydWUsDQogICAgICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICAgICAgICAgICAgICBleHBvcnRlcjogdiA9PiB2Lm9iaj0odi5yZXVzZWQ+MSk/e3Byb3RvOiBgXG5cbi8vIHJldXNlZFske3YucmV1c2VkfV06ICR7PCU9X25Db2RlKCklPn1cblxuYH06di5vYmosDQogICAgICAgICAgICAgICAgX1RISVM6IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLnByb3RvICs9IGBcblx0cmVwZWF0ZWQgJHs8JT1fbkNvZGUoKSU+fSAke2VhQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9iai5wcm90byArPSBgXG5cdHN0cmluZyAke2lkQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gYFxuXHRgICsgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KG9wdGlvbnMsIGAke3NQYXRofS4ke2VhQ29kZX1gKTsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSBgXG5cdGA7DQogICAgICAgIDwlIGlmKGVhLlJlcXVpcmVkKXslPg0KICAgICAgICAgICAgICAgICAgICBpZig8JXZhbHVlT2YoZWEuUmVxdWlyZWQpJT4pIG9iai5wcm90byArPSAncmVxdWlyZWQgJzsNCiAgICAgICAgPCUgfSU+DQogICAgICAgIDwlIGlmKGVhLklzQXJyYXkpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSAncmVwZWF0ZWQgJzsNCiAgICAgICAgPCUgfSU+DQogICAgICAgIDwlIGlmKGVhLklzU3RyaW5nIHx8IGVhLklzVGV4dCl7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqLnByb3RvICs9ICJzdHJpbmciOw0KICAgICAgICA8JSB9ZWxzZSBpZihlYS5Jc0Jvb2wpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSAiYm9vbCI7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzSW50KXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gImludDMyIjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNMb25nKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gImludDY0IjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNGbG90KXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gImZsb2F0IjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEb3VibGUpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSAiZG91YmxlIjsNCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEYXRlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmoucHJvdG8gKz0gInN0cmluZyI7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLkVudGl0eVR5cGUpeyU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSA8JT1fbkNvZGUoZWEuRW50aXR5VHlwZSklPjsNCiAgICAgICAgPCUgfSU+DQogICAgICAgICAgICAgICAgICAgIG9iai5wcm90byArPSBgICR7ZWFDb2RlfSA9ICR7b2JqLmluZGV4Kyt9O2A7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4ge2xldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLnByb3RvICs9IGBcblx0YCArIG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW1OYW1lJT4ob3B0aW9ucywgYCR7c1BhdGh9LiR7ZWFDb2RlfVtdYCkgKyBgXG5cdHJlcGVhdGVkICR7PCU9X25Db2RlKHRhLkVudGl0eUNsYXNzKSU+fSAke2VhQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgIDwlIH0pJT4NCiAgICA8JSBjLkVudGl0eUZpZWxkcy5mb3JFYWNoKGVmID0+IHslPg0KICAgICAgICAgICAgICAgIGVmXzwlPW5OYW1lKGVmKSU+OiAob2JqLCBlZkNvZGUsIHYpID0+IG9iai5wcm90byArPSBgXG5cdHN0cmluZyAke2VmQ29kZX0gPSAke29iai5pbmRleCsrfTtgLA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgICAgICBfX2Nsb3NlOiBvYmogPT4gb2JqLnByb3RvICs9ICdcbn1cblxuJywNCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+Iiwgb3B0aW9ucywgc1BhdGgpLnByb3RvOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihyZXQgJiYgIXNQYXRoKXsNCiAgICAgICAgICAgICAgICByZXQgPSBgcGFja2FnZSA8JT1zY29wZSU+O1xuXG5zeW50YXggPSAicHJvdG8zIjtcblxuYCArIHJldDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQo8JX0lPg0KDQogICAgPCU9bU5hbWU9J19mcm9tU3RyaW5nJyU+KHN0ciwgc1BhdGg9IiIpew0KICAgICAgICBpZih0eXBlb2Yoc3RyKSE9PSdzdHJpbmcnKXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+InN0ciBub3QgYSBzdHJpbmciLCBzdHIsIHNQYXRoKTsNCiAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgaWYoIXNQYXRoKXsNCiAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZnJvbURvY3VtZW50KEpTT04ucGFyc2UodGhpcy5fYXRvYihzdHIpKSk7DQogICAgICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgICAgIC8vIG5vdCBhIGJhc2U2NCBKU09OLCBwcm9jZWVkDQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zyb21Eb2N1bWVudChKU09OLnBhcnNlKHN0cikpOw0KICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAvLyBub3QgYSBKU09OLCBwcm9jZWVkDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICB0cnl7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fX2ltcG9ydCh7bmFtZTogc3RyfSwgew0KICAgICAgICAgICAgICAgIFVuaXF1ZTogdHJ1ZSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgIWVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IHYgPSBvYmoubmFtZS5zcGxpdCgnX18nKVswXTsNCiAgICAgICAgICAgICAgICAgICAgb2JqLm5hbWUgPSBvYmoubmFtZS5zcGxpdCgnX18nKS5zbGljZSgxKS5qb2luKCdfXycpOw0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+ZWFDb2RlLCB2LCBvYmoubmFtZSwgc1BhdGgpOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLjwlPW5OYW1lKGVhKSU+KHYsICc9Jyk7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLkVudGl0eVR5cGUpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgICAgIDwlPW5OYW1lKGVhKSU+OiAob2JqLCBlYUNvZGUpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPmVhQ29kZSwgb2JqLm5hbWUuc2xpY2UoMSwgLTEpLCBzUGF0aCk7DQogICAgICAgICAgICAgICAgICAgIGlmKG9iai5uYW1lPT0nbnVsbCcgfHwgIW9iai5uYW1lKSByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIHRoaXMuPCU9bk5hbWUoZWEpJT4obmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KG9iai5uYW1lLnNsaWNlKDEsIC0xKSwgYCR7c1BhdGh9LiR7ZWFDb2RlfWApKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIH0sICI8JT1tTmFtZSU+Iiwgc3RyLCBzUGF0aCk7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3RvU3RyaW5nJyU+KHNQYXRoPSIiKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IGZOYW1lID0gdGhpcy5fX2V4cG9ydChbXSwgew0KICAgICAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgICAgICAgICAgVW5pcXVlOiB0cnVlLA0KCTwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmoucHVzaCh2P3Y8JWlmKGVhLkVudGl0eVR5cGUpeyU+LjwlPW1OYW1lJT4oYCR7c1BhdGh9LiR7ZWFDb2RlfWApPCV9JT46J251bGwnKSwNCgk8JSB9KSU+DQoJICAgICAgICB9LCAiPCU9bU5hbWUlPiIpLmpvaW4oJ19fJyk7DQoJICAgICAgICANCgkgICAgICAgIGlmKHNQYXRoKXsNCiAgICAgICAgICAgICAgICBmTmFtZSA9ICdbJyArIGZOYW1lICsgJ10nOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXR1cm4gZk5hbWU7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQoNCiAgICA8JT1tTmFtZT0nZ2V0IF9Ub1N0cmluZyclPigpeyA8JSAvKkJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBCSVNlcnZlciAqLyAlPg0KICAgICAgICByZXR1cm4gdGhpcy5fdG9TdHJpbmcoKTsNCiAgICB9DQogICAgDQogICAgYXN5bmMgPCU9bU5hbWU9J190b1RhYnVsYXInJT4oKXsNCiAgICAgICAgcmV0dXJuIHsNCgkJCW5hbWU6ICI8JT1jLk5hbWUlPiIsDQoJCQljb2x1bW5zOiBbDQoJPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KCSAgICAgICAgICAgIHsNCgkJCQkgICAgbmFtZTogIjwlPW5OYW1lKGVhKSU+IiwNCgkJCQkgICAgLy9maWx0ZXJCdXR0b246IHRydWUNCgkJCSAgICB9LA0KICAgIDwlIH0pJT5dLA0KICAgICAgICAgICAgcm93czogKGF3YWl0IHRoaXMuZmluZEFsbCgpKS5tYXAociA9PiByLl90b0pTT04oe3BhcnNlOiB0cnVlLCB0b1N0cmluZzogdHJ1ZX0pKS5tYXAociA9PiAoWw0KCTwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCgkgICAgci48JT1uTmFtZShlYSklPiwNCiAgICA8JSB9KSU+XSkpLA0KICAgICAgICB9Ow0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9KU09OJyU+KG9wdGlvbnM9e30sIHNQYXRoKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgc1BhdGggPSBzUGF0aCB8fCAiIjsNCiAgICAgICAgICAgIGxldCByZXQgPSB7fTsNCiAgICAgICAgICAgIHJldC5fX2tleXMgPSBbXTsgLy8hIQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZighb3B0aW9ucy5iTWFwKXsNCiAgICAgICAgICAgICAgICByZXQuX19nZW5lcmF0ZWQgPSAnIicgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyAnIic7DQogICAgICAgICAgICAgICAgaWYodGhpcy5Ub29sLm5hbWUpew0KICAgICAgICAgICAgICAgICAgICByZXQuX190b29sID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5Ub29sLm5hbWUsDQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5Ub29sLnR5cGUubmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgcmV0Ll9fY2xhc3MgPSAnIjwlPW5OYW1lKGMpJT4iJzsNCiAgICAgICAgICAgICAgICAgICAgcmV0Ll9fdHlwZSA9ICciJys8JT1fbkNvZGUoKSU+KyciJzsNCiAgICAgICAgICAgICAgICAgICAgLy9yZXQuX19wYXRoID0gJyInK3NQYXRoKyciJzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYoPCU9bnNjb3BlJT4uX25vZGUpew0KICAgICAgICAgICAgICAgICAgICByZXQuX19ub2RlID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogPCU9bnNjb3BlJT4uX25vZGUuY29kZSgpDQogICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgdGhpcy5fZGVmYXVsdHMoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IHRyTWFwID0gKG9iaiwgZWFDb2RlLCB2LCBzUGF0aCkgPT4gKHYgJiYgdHlwZW9mKHYpPT09J3N0cmluZycgJiYgdi5yZXBsYWNlKT92LnJlcGxhY2UoLzw8W14+Pl0rPj4vZ20sIG0gPT4gew0KICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX190ck1hcCA9IDwlPXNjb3BlJT4uX190ck1hcCB8fCBbXTsNCg0KICAgICAgICAgICAgICAgIGxldCB0cmlkID0gdGhpcy5fdXVpZCgpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBwUGF0aCA9ICcuJysoc1BhdGguc3BsaXQoJy4nKS5zbGljZSgxLCAtMSkuam9pbignLicpKTsNCiAgICAgICAgICAgICAgICBpZihwUGF0aD09Ii4iKSBwUGF0aCA9ICIiOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCB0ciA9IG0ucmVwbGFjZSgnPDwnLCAnJykucmVwbGFjZSgnPj4nLCAnJykucmVwbGFjZSgve3tucn19L2dtLCAnJG5vdCgkZXhpc3RzKF9fcmV1c2VkKSknKS5yZXBsYWNlKC97e3ZmfX0vZywgb2JqW2VhQ29kZV0pOw0KICAgICAgICAgICAgICAgIGlmKHRyLnN0YXJ0c1dpdGgoJ3MoJykgJiYgdHIuZW5kc1dpdGgoJyknKSl7DQogICAgICAgICAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgve3tfX319L2dtLCAnb0pTT04nK3NQYXRoKS5yZXBsYWNlKC97e3BwYXRofX0vZ20sICdvSlNPTicrcFBhdGgpOw0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICB0ciA9IHRyLnJlcGxhY2UoL3t7X199fS9nbSwgYCoqW0lkPSR7b2JqLklkfV1bMF1gKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAvLyA8JT13YXJuKCklPmVhQ29kZSwgdHJpZCwgdHIpOw0KDQogICAgICAgICAgICAgICAgdHIgPSB0aGlzLl9idG9hKHRyKTsNCiAgICAgICAgICAgICAgICBsZXQgbWFwID0gPCU9c2NvcGUlPi5fX3RyTWFwLmZpbmQobyA9PiBvLnRyYW5zZm9ybT09dHIpOw0KICAgICAgICAgICAgICAgIHJldHVybiAobWFwP21hcC5pZDo8JT1zY29wZSU+Ll9fdHJNYXBbPCU9c2NvcGUlPi5fX3RyTWFwLnB1c2goe2lkOiB0cmlkLCB0cmFuc2Zvcm06IHRyfSktMV0uaWQpOw0KICAgICAgICAgICAgfSk6djsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0ID0gdGhpcy5fX2V4cG9ydChyZXQsIHsNCiAgICAgICAgICAgICAgICBfbWFwOiBvcHRpb25zLmJNYXAsDQogICAgICAgICAgICAgICAgRnVsbDogb3B0aW9ucy5iRnVsbCwNCiAgICAgICAgICAgICAgICBOdWxsOiBvcHRpb25zLmJOdWxsLA0KICAgICAgICAgICAgICAgIGV4cG9ydGVyOiB2ID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKG9wdGlvbnMucmV1c2VkKT09PSd1bmRlZmluZWQnIHx8IG9wdGlvbnMucmV1c2VkPj12LnJldXNlZCkgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgaWYodiAmJiB2Lm9iaiAmJiB0eXBlb2Yodi5vYmouX3JldHVybik9PT0nc3RyaW5nJyAmJiB2Lm9iai5fcmV0dXJuLmluZGV4T2YoJ19fcmV1c2VkOiAxJyk+MCkgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgbGV0IG9IYXNoID0gb3B0aW9ucy5iSGFzaD9bdGhpcy5fdG9IYXNoKG51bGwsIHtub0NvZGU6IHRydWUsIG9ubHlVbmlxdWU6IHRydWUsIG5vQXJnczogdHJ1ZSwgX21hcDogb3B0aW9ucy5iTWFwLCBub1R5cGVzOiBmYWxzZX0sICI8JT1tTmFtZSU+IildOk9iamVjdC5rZXlzKHJldCkuZmlsdGVyKGsgPT4gaz09J0lkJyB8fCBrLmluZGV4T2YoJ19fJyk9PTApLm1hcChrID0+IHt0cnl7cmV0dXJuIHsgW2tdOiBKU09OLnBhcnNlKHJldFtrXSkgfTsgfWNhdGNoKGV4KXtyZXR1cm4ge1trXTogcmV0W2tdfTsgfSB9KTsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGVSZXQgPSBPYmplY3QuYXNzaWduKC4uLm9IYXNoLCB7X19yZXVzZWQ6IHYucmV1c2VkfSApOw0KICAgICAgICAgICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KGVSZXQuX19rZXlzKSkgZVJldC5fX2tleXMuZm9yRWFjaChlayA9PiB7dHJ5eyBlUmV0W2VrXSA9IEpTT04ucGFyc2UocmV0W2VrXSk7fWNhdGNoKGV4KXtlUmV0W2VrXSA9IHJldFtla107IH0gfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdi5vYmogPSB7X3JldHVybjogSlNPTi5zdHJpbmdpZnkoZVJldCl9Ow0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgX1RISVM6IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmJNYXApIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgb2JqLlRISVMgPSB0aGlzLl9USElTLm1hcCh0ID0+IHQuPCU9bU5hbWUlPihvcHRpb25zLCBgJHtzUGF0aH0uJHtlYUNvZGV9YCkpOw0KICAgICAgICAgICAgICAgICAgICBvYmouT1BFUkFUT1JTID0gb2JqLk9QRVJBVE9SUyB8fCB7fTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9ialtpZENvZGVdID0gYCIke3Z9ImAsDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgIDwlIGlmKGVhLklzVW5pcXVlKXslPg0KICAgICAgICAgICAgICAgICAgICBpZihvYmouX19rZXlzKSBvYmouX19rZXlzLnB1c2goZWFDb2RlKTsNCiAgICAgICAgPCUgfSU+DQogICAgICAgIA0KICAgICAgICA8JSBpZihlYS5Jc1RleHQpeyU+DQogICAgICAgICAgICAgICAgICAgIGlmKCE8JT1fYjY0dGVzdCgndicpJT4peyAvLyBpcyBub3QgYmFzZTY0Pw0KICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuX2J0b2Eodik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNEYXRlKXslPg0KICAgICAgICAgICAgICAgICAgICB2ID0gdiYmdi50b0lTT1N0cmluZz92LnRvSVNPU3RyaW5nKCk6djsNCiAgICAgICAgPCUgfSU+DQogICAgICAgIA0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgICAgICBvYmpbZWFDb2RlXSA9IHY/KG9wdGlvbnMudG9TdHJpbmc/KCciJyArIHYuX3RvU3RyaW5nKCkrJyInKTp2LjwlPW1OYW1lJT4ob3B0aW9ucywgYCR7c1BhdGh9LiR7ZWFDb2RlfWApKTonbnVsbCc7DQogICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQm9vbCB8fCBlYS5Jc0ludCB8fCBlYS5Jc0xvbmcgfHwgZWEuSXNGbG9hdCB8fCBlYS5Jc0RvdWJsZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSB0ck1hcChvYmosIGVhQ29kZSwgdiwgc1BhdGgpIHx8ICdudWxsJzsNCiAgICAgICAgPCUgfWVsc2V7JT4NCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0gPSAnIicgKyB0ck1hcChvYmosIGVhQ29kZSwgdiwgc1BhdGgpICsgJyInOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5maWx0ZXIodGEgPT4gIXRhLkVudGl0eU1ldGhvZCkuZm9yRWFjaCh0YSA9PiB7bGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmpbZWFDb2RlXSA9ICdbJyArICh2IHx8IFtdKS5tYXAoKF92LCBfaSkgPT4gX3YuPCU9bU5hbWUlPihvcHRpb25zLCBgJHtzUGF0aH0uJHtlYUNvZGV9WyR7X2l9XWApKS5maWx0ZXIoX3YgPT4gX3YpLmpvaW4oKSArICddJywNCiAgICA8JSB9KSU+DQogICAgPCUgYy5FbnRpdHlGaWVsZHMuZm9yRWFjaChlZiA9PiB7JT4NCiAgICAgICAgICAgICAgICBlZl88JT1uTmFtZShlZiklPjogKG9iaiwgZWZDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkodikpew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2VmQ29kZV0gPSBKU09OLnN0cmluZ2lmeSh2KTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICB2ID0gdHJNYXAob2JqLCBlZkNvZGUsIHYsIHNQYXRoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZih2KT09PSd1bmRlZmluZWQnKSByZXR1cm47DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgPCUgaWYoZWYuSXNUZXh0KXslPg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoITwlPV9iNjR0ZXN0KCd2JyklPil7IC8vIGlzIG5vdCBiYXNlNjQ/DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuX2J0b2Eodik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNlIGlmKGVmLklzRGF0ZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB2JiZ2LnRvSVNPU3RyaW5nP3YudG9JU09TdHJpbmcoKTp2Ow0KICAgICAgICA8JSB9JT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2VmQ29kZV0gPSB2Ow0KICAgICAgICA8JSBpZighZWYuSXNCb29sICYmICFlZi5Jc0ludCAmJiAhZWYuSXNMb25nICYmICFlZi5Jc0Zsb2F0ICYmICFlZi5Jc0RvdWJsZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtlZkNvZGVdID0gJyInICsgb2JqW2VmQ29kZV0gKyAnIic7DQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQoNCiAgICAgICAgICAgICAgICBfX3RyTWFwOiBvYmogPT4gew0KICAgICAgICAgICAgICAgICAgICBpZighc1BhdGgpew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLl9fdHJNYXAgPSA8JT1zY29wZSU+Ll9fdHJNYXAgfHwgW107DQogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgPCU9c2NvcGUlPi5fX3RyTWFwOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwNCg0KICAgICAgICAgICAgICAgIF9yZXR1cm46IG9iaiA9PiB7DQogICAgICAgICAgICAgICAgICAgIGlmKG9iaikgb2JqLl9yZXR1cm4gPSAoT2JqZWN0LmtleXMob2JqfHx7fSkubGVuZ3RoKT8oJ3snICsgT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoayA9PiB0eXBlb2Yob2JqW2tdKT09PSJzdHJpbmciKS5tYXAoayA9PiBgIiR7a30iOiAke29ialtrXX1gKS5jb25jYXQoT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoayA9PiB0eXBlb2Yob2JqW2tdKSE9PSJzdHJpbmciKS5tYXAoayA9PiBgIiR7a30iOiAke0pTT04uc3RyaW5naWZ5KG9ialtrXSl9YCkpLmpvaW4oKSArICd9Jyk6J251bGwnOw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIsIG9wdGlvbnMsIHNQYXRoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0ID0gcmV0P3JldC5fcmV0dXJuOnJldDsNCiAgICAgICAgICAgIHJldCA9IHR5cGVvZihyZXQpPT09J3VuZGVmaW5lZCc/bnVsbDpyZXQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKCFzUGF0aCAmJiByZXQpew0KICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuX2JlYXV0aWZ5KHJldCwgJ2phdmFzY3JpcHQnKTsNCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgICAgICAgICBpZihvcHRpb25zLnBhcnNlKSByZXR1cm4gSlNPTi5wYXJzZShyZXQpOw0KICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuZ3ppcCkgcmV0dXJuIHRoaXMuVXRmOEFycmF5VG9TdHIodGhpcy5fY29tcHJlc3MocmV0KSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX3RvRG9jdW1lbnQnJT4ob3B0aW9ucz17fSl7DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGxldCBqc29uID0gdGhpcy5fdG9KU09OKG9wdGlvbnMpOw0KICAgICAgICAgICAgbGV0IG9KU09OID0gSlNPTi5wYXJzZShqc29uKTsNCiAgICAgICAgICAgIGxldCB0ck1hcCA9IG9KU09OLl9fdHJNYXAgfHwgW107DQogICAgICAgICAgICBkZWxldGUgb0pTT04uX190ck1hcDsNCiAgICAgICAgICAgIGpzb24gPSBKU09OLnN0cmluZ2lmeShvSlNPTik7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBsb2cgPSAoLi4ucykgPT4gPCU9bG9nKCklPi4uLnMpOw0KICAgICAgICAgICAgbGV0IHdhcm4gPSAoLi4ucykgPT4gPCU9d2FybigpJT4uLi5zKTsNCiAgICAgICAgICAgIGxldCBlcnJvciA9ICguLi5zKSA9PiA8JT1lcnJvcigpJT4uLi5zKTsNCg0KICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCB0IG9mIHRyTWFwKXsNCiAgICAgICAgICAgICAgICBpZighbmV3IFJlZ0V4cCh0LmlkKS50ZXN0KGpzb24pKSBjb250aW51ZTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgdHJuID0gdGhpcy5fYXRvYih0LnRyYW5zZm9ybSk7DQogICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICBvSlNPTiA9IEpTT04ucGFyc2UoanNvbik7DQogICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSB1bmRlZmluZWQ7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZih0cm4uc3RhcnRzV2l0aCgicygiKSAmJiB0cm4uZW5kc1dpdGgoIikiKSl7DQogICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCB0aGlzLnJ1blNjcmlwdChgKG9KU09OLCBvU2NvcGUsIGxvZywgd2FybiwgZXJyb3IpID0+ICR7dHJuLnN1YnN0cmluZygyLCB0cm4ubGVuZ3RoLTEpfWApKG9KU09OLCA8JT1zY29wZSU+LCBsb2csIHdhcm4sIGVycm9yKTsNCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAvL3JlcyA9IGF3YWl0IGpzb25hdGEodHJuKS5ldmFsdWF0ZShvSlNPTik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIC8vPCU9d2FybigpJT50LmlkLCByZXMsIHRybik7DQogICAgICAgICAgICAgICAgICAgIGpzb24gPSBqc29uLnJlcGxhY2UobmV3IFJlZ0V4cCh0LmlkLCAiZyIpLCAoIUFycmF5LmlzQXJyYXkocmVzKSAmJiB0eXBlb2YocmVzKSE9PSdvYmplY3QnKT9yZXM6dGhpcy5fYnRvYShKU09OLnN0cmluZ2lmeShyZXMpKSk7DQogICAgICAgICAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgICAgICAgICAgPCU9d2FybigpJT50LmlkLCB0cm4sIGV4KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIGpzb24gPSBqc29uLnJlcGxhY2UoLyJfX3RyTWFwIjpcc1xbXHtbXj4+XStcfVxdL2dtLCAnIl9fdHJNYXAiOiAiIicpOw0KDQogICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5iSlNPTj90aGlzLl9iZWF1dGlmeShqc29uLCAnamF2YXNjcmlwdCcpOkpTT04ucGFyc2UoanNvbik7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCjwlDQpfY2xvbmVGdW5jdGlvbiA9IChvLCBmLCBzY29wZSwgYykgPT4gew0KDQogICAgbGV0IG9iaiA9IG51bGw7DQogICAgaWYobz09J3NyJyAmJiB0eXBlb2Yoc3IpIT09J3VuZGVmaW5lZCcpIG9iaiA9IHNyOw0KICAgIGlmKG89PSdfRnJFTUQnICYmIHR5cGVvZihfRnJFTUQpIT09J3VuZGVmaW5lZCcpIG9iaiA9IF9GckVNRDsNCiAgICANCiAgICBsZXQgY29kZSA9IG9ialtmXSA/IG9ialtmXS50b1N0cmluZygpIDogYCAgICR7Zn0oKXsNCiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGluIF9jbG9uZUZ1bmN0aW9uKCR7b30sICR7Zn0pOiBJbnZhbGlkIEZ1bmN0aW9uIE5hbWUnKTsNCiAgICB9YDsNCiAgICBsZXQgcyA9IGNvZGUucmVwbGFjZSgnKScsICcpID0+ICcpOw0KICAgIGlmIChzLmluZGV4T2YoJ2Z1bmN0aW9uJykgPT0gMCB8fCBzLmluZGV4T2YoJ2FzeW5jIGZ1bmN0aW9uJykgPT0gMCkgew0KICAgIAlzID0gcy5yZXBsYWNlKCdmdW5jdGlvbicsICcgJyk7DQogICAgfSBlbHNlIHsNCiAgICAJcyA9IHMucmVwbGFjZShmLCAnJyk7DQogICAgfQ0KDQogICAgaWYgKGMuSXNNYWluICYmICFvYmpbZl0pIHsNCiAgICAJY29uc29sZS5sb2coJ0Vycm9yIGluIF9jbG9uZUZ1bmN0aW9uKCk6IEludmFsaWQgRnVuY3Rpb24gTmFtZSAnICsgZik7DQogICAgfQ0KDQogICAgcmV0dXJuIGANCiAgICAke2Z9KC4uLnBhcmFtcyl7DQogICAgICAgIGlmKHR5cGVvZih3aW5kb3cpIT09InVuZGVmaW5lZCIgJiYgdHlwZW9mKHdpbmRvdy4ke299KSE9PSJ1bmRlZmluZWQiKXsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuJHtvfS4ke2Z9KC4uLnBhcmFtcyk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgYCArIChjLklzTWFpbiA/IGByZXR1cm4gKCR7c30pKC4uLnBhcmFtcyk7YCA6IGByZXR1cm4gbmV3ICR7c2NvcGV9LiR7bk5hbWUobWFpbkNsYXNzKCkpfSgpLiR7Zn0oLi4ucGFyYW1zKTtgKSArIGANCiAgICAgICAgfQ0KCX0NCiAgICBgOw0KfTsNCg0KDQpbew0KICAgIHdPYmo6ICdzcicsDQogICAgZnVuY3Rpb25zOiBbJ2hhc2hDb2RlJywgJ0VxdWFscycsICdzZXJ2ZXJEYXRlJywgJ19fc2NvcGUnLCAnYWRkTVNlY29uZHMnLCAnaXBBZGRyZXNzJ10uY29uY2F0KG1haW5DbGFzcyhbJ0JJU2VydmVyJ10pP1snXycsICdidWlsZFVSTCcsICckX1JFUVVFU1QnLCAncGFyYW0nLCAnX3RvWE1MJywgJ2Nvb3AnLCAnT1InLCAnbXlSZXBsYWNlJywgJ3NlbmRYTUwnLCAncHJvY2Vzc1Jlc3BvbnNlJywgJ3Byb2Nlc3NSZXN1bHQnLCAncnVuU1JTY3JpcHQnLCAnZ3JvdXBCeScsICdTaG93RGVidWcnLCAnY2FjaGVSZXN1bHQnLCAndG9IZXgnLCAnU2hvd0Vycm9yJ106W10pLA0KfSwgew0KICAgIHdPYmo6ICdfRnJFTUQnLA0KICAgIGZ1bmN0aW9uczogWydfYXR0cicsICdydW5TY3JpcHQnLCAnX3VuaXF1ZScsICdzcicsICdfYXRvYicsICdfZ2V0U3RvcmVkU2NyaXB0JywgJ19idG9hJywgJ19fdGltZScsICdfd2FpdCcsICdfc3FsVHlwZScsICdfdXVpZCcsICdyZXF1aXJlJywgJ19pbmNsdWRlJywgJ19iZWF1dGlmeScsICdfaW5qZWN0JywgJ19jb21wcmVzcycsICdfZGVjb21wcmVzcycsICdVdGY4QXJyYXlUb1N0cicsICdyYW5kVVJMJywgJ3BhdGhUb05hbWUnXSwNCn1dLmZvckVhY2goY2MgPT4geyAlPg0KLyogU1RBUlQ6IDwlPWNjLndPYmolPiBmdW5jdGlvbiBjb3BpZXMgKi8NCjwlIGNjLmZ1bmN0aW9ucy5mb3JFYWNoKGYgPT4geyU+DQoNCi8qIENMT05FOjpTVEFSVDogPCU9Y2Mud09iaiU+LjwlPWYlPigpICovPCU9X2Nsb25lRnVuY3Rpb24oY2Mud09iaiwgZiwgc2NvcGUsIGMpICU+LyogQ0xPTkU6OkVORCAgOiA8JT1jYy53T2JqJT4uPCU9ZiU+KCkgKi8NCjwlIH0pJT4NCi8qIEVORDogPCU9Y2Mud09iaiU+IGZ1bmN0aW9uIGNvcGllcyAqLw0KPCUgfSk7ICU+DQogICAgDQogICAgPCU9bU5hbWU9J2kxOG4nJT4oZXYsIHYpew0KICAgICAgICBpZih0eXBlb2Yod2luZG93KT09PSJ1bmRlZmluZWQiIHx8IHR5cGVvZih3aW5kb3cuaTE4bl9zdG9yZSk9PT0idW5kZWZpbmVkIikgcmV0dXJuIHY7DQogICAgICAgIA0KICAgICAgICBpZighZXYuRW50aXR5QXR0cmlidXRlLklzVGV4dCAmJiAhZXYuRW50aXR5QXR0cmlidXRlLklzU3RyaW5nKXsNCiAgICAgICAgICAgIHJldHVybiB2Ow0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaTE4bl9zdG9yZVt0aGlzLmhhc2hDb2RlKHYpXSA9IHdpbmRvdy5pMThuX3N0b3JlW3RoaXMuaGFzaENvZGUodildIHx8IHY7DQogICAgICAgIH0NCiAgICB9DQoNCjwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgIDwlPW1OYW1lPSdieScgKyBuTmFtZShlYS5FbnRpdHlUeXBlKSU+KGFyKSB7DQogICAgICAgIHZhciByZXQgPSBbXTsNCiAgICAgICAgYXIuZm9yRWFjaChhID0+IHsNCiAgICAgICAgICAgIHJldC5mb3JFYWNoKHIgPT4gew0KICAgICAgICAgICAgICAgIGlmIChhWyJfPCU9bk5hbWUoZWEpJT4iXSAmJiAoYVsiXzwlPW5OYW1lKGVhKSU+Il0uRXF1YWxzP2FbIl88JT1uTmFtZShlYSklPiJdLkVxdWFscyhyKTpzci5FcXVhbHMoYVsiXzwlPW5OYW1lKGVhKSU+Il0sIHIpKSkgew0KICAgICAgICAgICAgICAgICAgICByLl88JT1uTmFtZShlYSklPl88JT1jLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyklPi5wdXNoKGEpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQo8JSB9KSU+DQoNCiAgICA8JT1tTmFtZT0nRW50aXR5VmFsdWUnJT4oYU5hbWUpIHsNCiAgICAgICAgbGV0IHJldCA9IFtdLmNvbmNhdCh0aGlzLkVudGl0eVZhbHVlcywgdGhpcy5WYWx1ZUVudGl0aWVzKS5maW5kKGV2ID0+IGV2LkVudGl0eUF0dHJpYnV0ZSAmJiBldi5FbnRpdHlBdHRyaWJ1dGUuTmFtZSA9PSBhTmFtZSk7DQogICAgICAgIA0KICAgICAgICBpZighcmV0KXsNCiAgICAgICAgICAgIC8vIGFuIGF0dHJpYnV0ZSB0aGF0IGhhcyB5ZXQgbm8ga25vd24gZW50aXR5IHZhbHVlDQogICAgICAgICAgICByZXQgPSB7QWN0aXZlOiB0cnVlLCBPUEVSQVRPUlM6IHt9LCBFbnRpdHlBdHRyaWJ1dGU6IHtOYW1lOiBhTmFtZSwgQWN0aXZlOiB0cnVlLCBFbnRpdHlDbGFzczoge0lkOiB0aGlzLkVudGl0eUNsYXNzLklkfX19Ow0KICAgICAgICAgICAgdGhpcy5FbnRpdHlWYWx1ZXMucHVzaChyZXQpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfX2Fzc2VydFZhbGlkJyU+KGJTeW5jLCBiUmVxdWlyZWQpew0KPCUgaWYoIWMuVG9vbHMubGVuZ3RoKXslPg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCjwlIH1lbHNleyU+DQogICAgICAgIGxldCBlcnJvciA9IHt9Ow0KDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kICYmIGVhLlJlcXVpcmVkKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICBpZihiUmVxdWlyZWQgJiYgPCV2YWx1ZU9mKGVhLlJlcXVpcmVkKSU+KXsNCiAgICAgICAgICAgIGVycm9yLjwlPW5OYW1lKGVhKSU+ID0ge307DQogICAgICAgICAgICBpZighdGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KSBlcnJvci48JT1uTmFtZShlYSklPlsiMDEiXSA9ICJOb3QgU2V0IjsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgIGlmKCF0aGlzLjwlPW5OYW1lKGVhKSU+KCkpIGVycm9yLjwlPW5OYW1lKGVhKSU+WyIwMiJdID0gIkVtcHR5IFZhbHVlIjsNCiAgICAgICAgICAgIGlmKHRoaXMuPCU9bk5hbWUoZWEpJT4oKSAmJiBiU3luYyAmJiAhdGhpcy48JT1uTmFtZShlYSklPigpLl9fc3luY19vbigpKSBlcnJvci48JT1uTmFtZShlYSklPlsiMDMiXSA9ICJOb3QgaW4gU3luYyI7DQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgaWYoIU9iamVjdC5rZXlzKGVycm9yLjwlPW5OYW1lKGVhKSU+KS5sZW5ndGgpIGRlbGV0ZSBlcnJvci48JT1uTmFtZShlYSklPjsNCiAgICAgICAgfQ0KICAgIDwlIH0pJT4NCg0KICAgICAgICBpZihPYmplY3Qua2V5cyhlcnJvcikubGVuZ3RoKXsNCiAgICAgICAgICAgIHRoaXMuX19hc3NlcnRFcnJvciA9IGVycm9yOw0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+SlNPTi5zdHJpbmdpZnkoZXJyb3IsbnVsbCw0KSwgdGhpcyk7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgZGVsZXRlIHRoaXMuX19hc3NlcnRFcnJvcjsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQo8JSB9JT4NCiAgICB9DQoNCiAgICA8JT1tTmFtZT0nX3JhbmsnJT4oXzwlPW1OYW1lJT49MCl7DQoJCXRyeSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fX2V4cG9ydCh7XzwlPW1OYW1lJT46IF88JT1tTmFtZSU+fSwgew0KICAgICAgICAgICAgICAgIE51bGw6IHRydWUsDQogICAgICAgICAgICAgICAgZXhwb3J0ZXI6IHYgPT4gdi5yZXVzZWQ/di5vYmouX19yZXVzZWQgPSB2LnJldXNlZDowLA0KICAgICAgICAgICAgICAgIElkOiAob2JqLCBpZENvZGUsIHYpID0+IG9ialtpZENvZGVdID0gIjwlPV9jTmFtZShjLCB0cnVlKSU+IiwNCgk8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouXzwlPW1OYW1lJT4gKz0gKG9ialtlYUNvZGVdID0gKHYgfHwgbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKSkuPCU9bU5hbWUlPihfPCU9bU5hbWUlPisxKSkuXzwlPW1OYW1lJT4sDQoJPCUgfSklPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHtsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgICAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCB0YUNvZGUsIHYpID0+IChvYmpbdGFDb2RlXSA9IFtuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUodGEuRW50aXR5VHlwZSwgdHJ1ZSklPigpXS5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPihfPCU9bU5hbWUlPisxKSkpLmZvckVhY2godiA9PiB2Ll88JT1tTmFtZSU+KSwNCiAgICA8JSB9KSU+DQoJICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KCQl9IGNhdGNoIChleCkgew0KCQkJPCU9ZXJyb3IoKSU+ZXgpOw0KCQl9DQoJfQ0KDQogICAgPCU9bU5hbWU9J19pc1F1ZXJ5JyU+KCl7DQogICAgICAgIGxldCByZXQgPSB0aGlzLl9fZXhwb3J0KC8qX190eXBlKi97SWQ6ICI8JT1uTmFtZShjKSU+IiwgPCU9bU5hbWUlPkNvdW50OiAwfSwgew0KICAgICAgICAgICAgTnVsbDogdHJ1ZSwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgPCU9bk5hbWUoZWEpJT46IChvYmosIGVhQ29kZSwgdikgPT4gew0KICAgICAgICAgICAgICAgIG9ialtlYUNvZGVdID0ge19jb29wOiB0aGlzLl88JT1uTmFtZShlYSklPl9jb29wIHx8IHVuZGVmaW5lZH07DQogICAgICAgICAgICAgICAgb2JqLjwlPW1OYW1lJT5Db3VudCArPSB0eXBlb2Yob2JqW2VhQ29kZV0uX2Nvb3ApPT09InVuZGVmaW5lZCI/MDoxOw0KICAgICAgICAgICAgICAgIGlmKHYgJiYgdi48JT1tTmFtZSU+KXsNCiAgICAgICAgICAgICAgICAgICAgb2JqW2VhQ29kZV0uX29iamVjdCA9IHYuPCU9bU5hbWUlPigpOw0KICAgICAgICAgICAgICAgICAgICBvYmouPCU9bU5hbWUlPkNvdW50ICs9IG9ialtlYUNvZGVdLl9vYmplY3QuPCU9bU5hbWUlPkNvdW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZmlsdGVyKHRhID0+ICF0YS5FbnRpdHlNZXRob2QpLmZvckVhY2godGEgPT4ge2xldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgdGFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgb2JqW3RhQ29kZV0gPSB7X2Nvb3A6IHRoaXMuXzwlPXRhTmFtZSU+X2Nvb3AgfHwgdW5kZWZpbmVkLCBfb2JqZWN0czogKHZ8fFtdKS5tYXAoX3YgPT4gX3YuPCU9bU5hbWUlPigpKX07DQogICAgICAgICAgICAgICAgaWYob2JqW3RhQ29kZV0uX29iamVjdHMubGVuZ3RoKSBvYmpbdGFDb2RlXS48JT1tTmFtZSU+Q291bnQgKz0gb2JqW3RhQ29kZV0uX29iamVjdHMucmVkdWNlKCh2LCBvKSA9PiB2ICs9IG8uPCU9bU5hbWUlPkNvdW50KTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J19uZXcnJT4oY2xOYW1lLCB0b29sKXsNCjwlIGlmKG1haW5DbGFzcygpIT1jKXslPg0KICAgICAgICByZXR1cm4gbmV3IDwlPXNjb3BlJT4uPCU9X2NOYW1lKG1haW5DbGFzcygpLCB0cnVlKSU+KCkuPCU9bU5hbWUlPihjbE5hbWUsIHRvb2wpOw0KPCUgfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgc3dpdGNoKGNsTmFtZSl7DQogICAgPCUgYXJDbGFzc2VzLmZvckVhY2goX2MgPT4geyU+DQogICAgICAgICAgICAgICAgY2FzZSAiPCU9bk5hbWUoX2MpJT4iOg0KICAgICAgICAgICAgICAgIGNhc2UgIjwlPV9jLk5hbWUlPiI6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1fY05hbWUoX2MsIHRydWUpJT4odW5kZWZpbmVkLCB0b29sKTsNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCjwlIH0lPg0KICAgIH0NCiAgICANCiAgICBhc3luYyA8JT1tTmFtZT0nc3RvcmUnJT4oKSB7DQogICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgdGhpcy5fZXhlY3V0ZShudWxsLCA8JT1hbGlhcygpJT4sICI8JT1tTmFtZSU+IiwgPCVtUm91dGluZyhjKSU+LCBhc3luYyAoKSA9PiB7DQogICAgICAgICAgICAvKioqIFNUQVJUIExPQ0FMIDwlPW1OYW1lJT4oKSAqKiovDQogICAgICAgICAgICANCiAgICAgICAgbGV0IGJVcGRhdGUgPSBmYWxzZTsNCiAgICAgICAgbGV0IGJJbnNlcnQgPSBmYWxzZTsNCg0KICAgICAgICBpZih0aGlzLl9fY29uZmlnKCdzdG9yZS5kaXNhYmxlZCcpKXsNCiAgICAgICAgICAgIDwlPXdhcm4oKSU+InN0b3JpbmcgZGlzYWJsZWQiKTsNCiAgICAgICAgfWVsc2UgaWYoZmFsc2UgJiYgdGhpcy5faXNRdWVyeSgpLl9pc1F1ZXJ5Q291bnQpew0KICAgICAgICAgICAgPCU9d2FybigpJT4iQ2Fubm90IHN0b3JlIGEgcXVlcnkhIik7DQogICAgICAgIH1lbHNlIGlmKCF0aGlzLl9fc3luY19vbigpIHx8IDwlPV9GckVNRC5fdG9KUyhfZmlsZVRvb2xzKSU+LmluZGV4T2YodGhpcy5Ub29sLnR5cGUubmFtZSk+PTApew0KICAgICAgICAgICAgbGV0IF90aGlzID0gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUoYywgdHJ1ZSklPigpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBsZXQgYkZpbmQgPSBmYWxzZTsNCiAgICAgICAgICAgIGlmKHRoaXMuSWQ9PXRoaXMuSWQpew0KICAgICAgICAgICAgICAgIGJGaW5kID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICBfdGhpcy5JZCA9IHRoaXMuSWQ7DQogICAgICAgICAgICB9DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+IGVhLklzVW5pcXVlKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgaWYoPCV2YWx1ZU9mKGVhLklzVW5pcXVlKSU+KXsNCiAgICAgICAgICAgICAgICBiRmluZCA9IHRydWU7DQogICAgICAgICAgICAgICAgX3RoaXMuPCU9bk5hbWUoZWEpJT4odGhpcy48JT1uTmFtZShlYSklPigpLCAnPScpOw0KICAgICAgICAgICAgfQ0KPCUgfSk7ICU+DQoNCiAgICAgICAgICAgIGlmKGJGaW5kKXsNCiAgICAgICAgICAgICAgICBfdGhpcyA9IGF3YWl0IF90aGlzLmZpbmQoKTsNCiAgICAgICAgICAgIH1lbHNlIF90aGlzID0gbnVsbDsNCiAgICAgICAgICAgIGlmKF90aGlzKXsNCiAgICAgICAgICAgICAgICB0aGlzLklkID0gX3RoaXMuSWQ7DQogICAgICAgICAgICAgICAgdGhpcy5fX3N5bmNfb24oX3RoaXMuX19zeW5jX29uKCkpOw0KICAgICAgICAgICAgICAgIDwlPWxvZygpJT4iX3RoaXMuSWQiLCBfdGhpcy5JZCwgdGhpcy5JZCwgX3RoaXMuVG9vbC5uYW1lLCB0aGlzLlRvb2wubmFtZSk7DQogICAgICAgICAgICAgICAgYlVwZGF0ZSA9IHRydWU7DQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICB0aGlzLklkID0gdGhpcy5JZDsgLy8gdG8gZW5mb3JjZSB0aGUgSWQgYW5kIG5vdCBnZXQgYSBuZXcgb25lIGV2ZXJ5IHRpbWUNCiAgICAgICAgICAgICAgICBiSW5zZXJ0ID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfWVsc2UgaWYoTWF0aC5hYnMoKHRoaXMuU2V0X09uLmdldFRpbWUoKSAtIHRoaXMuX19zeW5jX29uKCkuZ2V0VGltZSgpKSAvIDEwMDApIDwgdGhpcy5fX2NvbmZpZygnc3RvcmUuc2Vuc2l0aXZpdHknLCA1KSl7DQogICAgICAgICAgICA8JT1sb2coKSU+IkFscmVhZHkgc3RvcmVkIiwgTWF0aC5hYnMoKHRoaXMuU2V0X09uLmdldFRpbWUoKSAtIHRoaXMuX19zeW5jX29uKCkuZ2V0VGltZSgpKSAvIDEwMDApICsiPCIrdGhpcy5fX2NvbmZpZygnc3RvcmUuc2Vuc2l0aXZpdHknLCA1KSk7DQogICAgICAgIH1lbHNlew0KICAgICAgICAgICAgYlVwZGF0ZSA9IHRydWU7DQogICAgICAgIH0NCg0KICAgICAgICBpZighYlVwZGF0ZSAmJiAhYkluc2VydCl7DQogICAgICAgICAgICA8JT1sb2coKSU+Ik5vIGRhdGEgY2hhbmdlcyIpOw0KICAgICAgICB9ZWxzZXsNCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iU3FsREIiKXsgJT4NCiAgICAgICAgICAgICAgICBpZih0eXBlb2YoPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uKT09PSJ1bmRlZmluZWQiIHx8IDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbi5lbmQpew0KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zcWwoYCR7dGhpcy5fX2NvbmZpZygndHlwZScpPT0nc3FsaXRlJz8nQkVHSU4nOidTVEFSVCd9IFRSQU5TQUNUSU9OYCk7DQogICAgICAgICAgICAgICAgICAgIDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbiA9IHtPd25lcjogdGhpcywgc3FsczogW10sIHN0YXJ0OiBuZXcgRGF0ZSgpLCBlbmQ6IG51bGx9Ow0KICAgICAgICAgICAgICAgIH0NCiAgICA8JSB9JT4NCiAgICAgICAgICAgIH0NCjwlIH0pJT4NCg0KICAgICAgICAgICAgdGhpcy5fZGVmYXVsdHMoKTsNCg0KICAgICAgICAgICAgaWYodGhpcy5fX2NvbmZpZygiU3luY0VudGl0eUF0dHJpYnV0ZXMiKSl7DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICA8JT1sb2coKSU+IjwlPWVhLk5hbWUlPiIsIHRoaXMuPCU9bk5hbWUoZWEpJT4oKSk7DQogICAgICAgICAgICAgICAgaWYodGhpcy48JT1uTmFtZShlYSklPigpICYmICEoYXdhaXQgdGhpcy48JT1uTmFtZShlYSklPigpLjwlPW1OYW1lJT4oKSkpIHRoaXMuY2xlYXJfPCU9bk5hbWUoZWEpJT4oKTsNCjwlIH0pOyAlPg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZighdGhpcy5fX2Fzc2VydFZhbGlkKHRydWUsIGJJbnNlcnQpKSByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgPCU9bG9nKCklPmA9PT0+IEluc2VydDoke2JJbnNlcnR9LCBVcGRhdGU6JHtiVXBkYXRlfSwgSWQ6WyR7dGhpcy5JZH1dYCwgdGhpcyk7DQogICAgICAgICAgICBpZihiVXBkYXRlKSBhd2FpdCB0aGlzLnVwZGF0ZSgpOw0KICAgICAgICAgICAgaWYoYkluc2VydCkgYXdhaXQgdGhpcy5pbnNlcnQoKTsNCiAgICAgICAgICAgIDwlPWxvZygpJT5gPD09PSBJbnNlcnQ6JHtiSW5zZXJ0fSwgVXBkYXRlOiR7YlVwZGF0ZX0sIElkOlske3RoaXMuSWR9XWApOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnKCJTeW5jVHlwZWRBdHRyaWJ1dGVzIikpew0KPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCB0YSBvZiB0aGlzLjwlPXRhTmFtZSU+KCkpew0KICAgICAgICAgICAgICAgICAgICA8JT1sb2coKSU+IlN5bmNpbmcuLi48JT10YU5hbWUlPiIsIHRhKTsNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGEuPCU9bU5hbWUlPigpOw0KICAgICAgICAgICAgICAgIH0NCjwlIH0pOyAlPg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZihiVXBkYXRlIHx8IGJJbnNlcnQpew0KPCUgY2xzVG9vbHMoYykuZm9yRWFjaCh0ID0+IHslPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iU3FsREIiKXsgJT4NCiAgICAgICAgICAgICAgICAgICAgaWYoPCU9c2NvcGUlPi5fX3NxbFRyYW5zYWN0aW9uICYmICE8JT1zY29wZSU+Ll9fc3FsVHJhbnNhY3Rpb24uZW5kICYmIDwlPXNjb3BlJT4uX19zcWxUcmFuc2FjdGlvbi5Pd25lcj09dGhpcyl7DQogICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zcWwoYENPTU1JVCR7dGhpcy5fX2NvbmZpZygndHlwZScpPT0nc3FsaXRlJz8nIFRSQU5TQUNUSU9OJzonJ31gKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSA8JT1zY29wZSU+Ll91blJlY3Vyc2U7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT1zY29wZSU+Ll9fc3FsVHJhbnNhY3Rpb24uZW5kID0gbmV3IERhdGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgIH0NCjwlIH0pJT4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9LCB7X19iZWZvcmVSdWxlczogWzwlKGMuRW50aXR5UnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHJbbU5hbWVdICYmIHIuQmVmb3JlKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl0sIF9fYWZ0ZXJSdWxlczogWzwlKGMuRW50aXR5UnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHJbbU5hbWVdICYmIHIuQWZ0ZXIpLm1hcChyID0+IHslPjwlPV9GckVNRC5fdG9KUyhyKSU+PCUgfSkuam9pbignLCAnKSU+XX0pOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIChyZXN1bHRzLmZpbmQociA9PiByLnJldCkgfHwge3JldDogbnVsbH0pLnJldDsgLy8gZmlyc3Qgb25lIHRvIGV4ZWN1dGUgY29ycmVjdGx5DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J2luc2VydCclPigpew0KICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IHRoaXMuX2V4ZWN1dGUobnVsbCwgPCU9YWxpYXMoKSU+LCAiPCU9bU5hbWUlPiIsIDwlbVJvdXRpbmcoYyklPiwgYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgLyoqKiBTVEFSVCBMT0NBTCA8JT1tTmFtZSU+KCkgKioqLw0KDQo8JSBjbHNUb29scyhjKS5mb3JFYWNoKHQgPT4geyU+DQogICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iTW9uZ29EQiIgfHwgdD09IlphbmdvREIiKXsgJT4NCiAgICAgICAgICAgIGF3YWl0IHRoaXMuVG9vbC5kYi5nZXRDb2xsZWN0aW9uKDwlPV9uQ29kZShjKSU+KS5pbnNlcnRPbmUodGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZX0pKTsNCiAgICAgICAgICAgIHRoaXMuVG9vbC5fX2RtbFN0YXRlbWVudHMucHVzaChgZGIuZ2V0Q29sbGVjdGlvbignJHs8JT1fbkNvZGUoKSU+fScpLmluc2VydE9uZSgke3RoaXMuX3RvSlNPTih7Yk1hcDogdHJ1ZX0pfSlgKTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiUnhEQiIpIHslPg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5Ub29sLmRiWzwlPV9uQ29kZShjKSU+XS48JT1tTmFtZSU+KHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KSk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIkthZmthIikgeyU+DQogICAgICAgICAgICB0aGlzLl9fdGltZSgnPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+LjwlPW1OYW1lJT4ua2Fma2EnKTsNCiAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLlRvb2wucHJvZHVjZXIuc2VuZCh7DQogICAgICAgICAgICAgICAgdG9waWM6ICc8JT1zY29wZSU+LmNhbGwnLA0KICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbew0KICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMuSWQsDQogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLl90b0RvY3VtZW50KHtiTWFwOiB0cnVlfSkNCiAgICAgICAgICAgICAgICB9XQ0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICA8JT1sb2coKSU+J2NhbGw6ICcgKyB0aGlzLl9fdGltZSgnPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+LjwlPW1OYW1lJT4ua2Fma2EnKSk7DQogICAgICAgICAgICA8JT1sb2coKSU+J3Jlc3BvbnNlOiAnLCByZXQpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJNZW1vcnkiKSB7JT4NCiAgICAgICAgICAgIHRoaXMuVG9vbC5kYi48JT1uTmFtZShjKSU+LnB1c2godGhpcyk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIk5lbzRqIikgeyU+DQogICAgICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy5fbmVvNGoodGhpcy5fdG9DeU1lcmdlKCkpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJTYWxlc0ZvcmNlIikgeyU+DQogICAgICAgICAgICBsZXQgb2JqID0ge307DQogICAgICAgICAgICA8JSAkLmVhY2goYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKSwgKF8sIGVhKSA9PiB7JT4NCiAgICAgICAgICAgIGlmKHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCl7DQogICAgICAgICAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7ICU+DQogICAgICAgICAgICAgICAgb2JqLjwlPW5OYW1lKGVhKSU+ID0gdGhpcy5fPCU9bk5hbWUoZWEpJT4uSWQ7DQogICAgICAgICAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICAgICAgb2JqLjwlPW5OYW1lKGVhKSU+ID0gdGhpcy48JT1uTmFtZShlYSklPigpOw0KICAgICAgICAgICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIDwlIH0pOyAlPg0KICAgIA0KICAgICAgICAgICAgbG9nKCJTZW5kaW5nIHRvIFNGIiwgb2JqKTsNCiAgICANCiAgICAgICAgICAgIGxldCByZXMgPSBhd2FpdCB0aGlzLlRvb2wuZGIuc29iamVjdCgiPCU9bk5hbWUoYyklPiIpLmNyZWF0ZShvYmopOw0KICAgICAgICAgICAgdGhpcy5JZCA9IHJlcy5pZDsNCiAgICA8JSB9IGVsc2UgaWYoX3NxbFRvb2xzLmluZGV4T2YodCk+PTApIHslPg0KICAgICAgICAgICAgbGV0IHJldCA9IGF3YWl0IHRoaXMuX3NxbCh0aGlzLl90b0luc2VydFNRTCgpKTsNCiAgICAgICAgICAgIDwlPWxvZygpJT4icmVzdWx0IiwgcmV0KTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiU2VydmljZU5vdyIpIHslPg0KICAgICAgICAgICAgdGhpcy5fZnJvbURvY3VtZW50KGF3YWl0IHRoaXMuX3Jlc3QobnVsbCwgbnVsbCwgYXdhaXQgdGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZSwgcmV1c2VkOiAxfSkpKTsNCiAgICA8JSB9IGVsc2UgaWYoX2ZpbGVUb29scy5pbmRleE9mKHQpPi0xKXsgJT4NCiAgICAgICAgICAgIGF3YWl0IHRoaXMuXzwlPXQudG9Mb3dlckNhc2UoKSU+KCc8JT1hbGlhcygpLnNwbGl0KCcuJykuc2xpY2UoMSkuam9pbignLycpJT4vPCU9bk5hbWUoYyklPi8nICsgdGhpcy5fdG9TdHJpbmcoKSArICcuanNvbicsIHRoaXMuX3RvSlNPTih7Yk1hcDogdHJ1ZSwgcmV1c2VkOiAxfSksIHRoaXMuSWQpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJFTVMiKSB7JT4NCiAgICAgICAgICAgIHRoaXMuSWQgPSAoYXdhaXQgdGhpcy5fdG9FTVNPYmplY3QoKS5zdG9yZSgpKS5JZDsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiUmVzdERCSU8iKSB7JT4NCiAgICAgICAgICAgIGxldCBvYmogPSB7fTsNCiAgICAgICAgICAgIDwlICQuZWFjaChjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLCAoXywgZWEpID0+IHslPg0KICAgICAgICAgICAgaWYodGhpcy5fPCU9bk5hbWUoZWEpJT5fc2V0KXsNCiAgICAgICAgICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXsgJT4NCiAgICAgICAgICAgICAgICBvYmouPCU9bkNvZGUoZWEpJT4gPSB0aGlzLjwlPW5OYW1lKGVhKSU+KCkuSWQvKl9pZCgpKi87DQogICAgICAgICAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICAgICAgb2JqLjwlPW5Db2RlKGVhKSU+ID0gdGhpcy48JT1uTmFtZShlYSklPigpOw0KICAgICAgICAgICAgICAgIDwlIH0gJT4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIDwlIH0pOyAlPg0KICAgIA0KICAgICAgICAgICAgbGV0IHVybCA9ICJodHRwczovLyIgKyB0aGlzLl9fY29uZmlnKCdkYXRhYmFzZScpICsgIi5yZXN0ZGIuaW8vcmVzdC8iICsgPCU9X25Db2RlKCklPi50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgbG9nKCI8JT10JT4gVVJMIiwgdXJsKTsNCiAgICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KHVybCwgb2JqLCB7DQogICAgICAgICAgICAgICAgaGVhZGVyczogew0KICAgICAgICAgICAgICAgICAgICAiY2FjaGUtY29udHJvbCI6ICJuby1jYWNoZSIsDQogICAgICAgICAgICAgICAgICAgICJ4LWFwaWtleSI6IHRoaXMuX19jb25maWcoJ2FwaWtleScpLA0KICAgICAgICAgICAgICAgICAgICAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL2pzb24iLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgIA0KICAgICAgICAgICAgbG9nKCJyZXN1bHQiLCByZXMuZGF0YSk7DQogICAgICAgICAgICB0aGlzLl9mcm9tRG9jdW1lbnQocmVzLmRhdGEpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJCSVNlcnZlciIpIHslPg0KICAgICAgICAgICAgLy8gd2UgbmVlZCBkZXB0aCAyIHRvIGdldCB0aGUgRW50aXR5VmFsdWVzIGJvdW5kIHRvIHRoZSBvbmVzIHdlIHNlbnQNCiAgICAgICAgICAgIGxldCBpbnNPYmogPSBhd2FpdCB0aGlzLnNyKCkuXygiRW50ZXJwcmlzZU1hbmFnZXIuZW1zRW50aXR5T2JqZWN0SW5zZXJ0IiwgbnVsbCwgdGhpcy50b0VudGl0eU9iamVjdCgpLCBudWxsLCAyKTsNCiAgICAgICAgICAgIGlmKCFpbnNPYmopIHJldHVybiBudWxsOw0KICAgICAgICAgICAgdGhpcy5JZCA9IGluc09iai5JZDsNCiAgICAgICAgICAgIHRoaXMuRW50aXR5VmFsdWVzID0gaW5zT2JqLkVudGl0eVZhbHVlczsNCiAgICAgICAgICAgIHRoaXMuX3JldmVydCgpOw0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgPCUgfSAlPg0KICAgICAgICB9DQo8JSB9KSAlPg0KDQogICAgICAgIHRoaXMuX19zeW5jX29uKG5ldyBEYXRlKCkpOw0KDQogICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9LCB7X19iZWZvcmVSdWxlczogWzwlKGMuRW50aXR5UnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHJbbU5hbWVdICYmIHIuQmVmb3JlKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl0sIF9fYWZ0ZXJSdWxlczogWzwlKGMuRW50aXR5UnVsZXMgfHwgW10pLmZpbHRlcihyID0+IHJbbU5hbWVdICYmIHIuQWZ0ZXIpLm1hcChyID0+IHslPjwlPV9GckVNRC5fdG9KUyhyKSU+PCUgfSkuam9pbignLCAnKSU+XX0pOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuIChyZXN1bHRzLmZpbmQociA9PiByLnJldCkgfHwge3JldDogbnVsbH0pLnJldDsgLy8gZmlyc3Qgb25lIHRvIGV4ZWN1dGUgY29ycmVjdGx5DQogICAgfQ0KICAgIA0KICAgIGFzeW5jIDwlPW1OYW1lPSd1cGRhdGUnJT4oKSB7DQogICAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgdGhpcy5fZXhlY3V0ZShudWxsLCA8JT1hbGlhcygpJT4sICI8JT1tTmFtZSU+IiwgPCVtUm91dGluZyhjKSU+LCBhc3luYyAoKSA9PiB7DQogICAgICAgIC8qKiogU1RBUlQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCg0KICAgICAgICBsZXQgcmV0ID0gbnVsbDsNCjwlIGNsc1Rvb2xzKGMpLmZvckVhY2godCA9PiB7JT4NCiAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KDQogICAgPCUgaWYodCA9PSAiTW9uZ29EQiIpIHslPg0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5Ub29sLmRiLmNvbGxlY3Rpb24oPCU9X25Db2RlKGMpJT4pLnVwZGF0ZU9uZSh7X2lkOiB0aGlzLklkfSwgeyRzZXQ6IHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KX0pOw0KICAgICAgICAgICAgdGhpcy5Ub29sLl9fZG1sU3RhdGVtZW50cy5wdXNoKGBkYi5nZXRDb2xsZWN0aW9uKCckezwlPV9uQ29kZSgpJT59JykudXBkYXRlT25lKHtfaWQ6ICcke3JldC5faWR9J30sIHskc2V0OiAke3RoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KX0pYCk7DQogICAgPCUgfWVsc2UgaWYodCA9PSAiTWVtb3J5IikgeyU+DQogICAgICAgICAgICB0aGlzLlRvb2wuZGIuPCU9bk5hbWUoYyklPlt0aGlzLlRvb2wuZGIuPCU9bk5hbWUoYyklPi5maW5kSW5kZXgobyA9PiBvLklkPT10aGlzLklkKV0gPSB0aGlzOw0KICAgIDwlIH1lbHNlIGlmKHQgPT0gIkthZmthIikgeyU+DQogICAgICAgICAgICB0aGlzLl9fdGltZSgnPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+LjwlPW1OYW1lJT4ua2Fma2EnKTsNCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuVG9vbC5wcm9kdWNlci5zZW5kKHsNCiAgICAgICAgICAgICAgICB0b3BpYzogJzwlPXNjb3BlJT4uY2FsbCcsDQogICAgICAgICAgICAgICAgbWVzc2FnZXM6IFt7DQogICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5JZCwNCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3RvRG9jdW1lbnQoe2JNYXA6IHRydWV9KQ0KICAgICAgICAgICAgICAgIH1dDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwlPWxvZygpJT4nY2FsbDogJyArIHRoaXMuX190aW1lKCc8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4uPCU9bU5hbWUlPi5rYWZrYScpKTsNCiAgICAgICAgICAgIDwlPWxvZygpJT4ncmVzcG9uc2U6ICcsIHJldCk7DQogICAgPCUgfSBlbHNlIGlmKHQgPT0gIk5lbzRqIikgeyU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLl9uZW80aih0aGlzLl90b0N5TWVyZ2UoKSk7DQogICAgPCUgfWVsc2UgaWYoX3NxbFRvb2xzLmluZGV4T2YodCk+PTApIHslPg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5fc3FsKHRoaXMuX3RvVXBkYXRlU1FMKCkpOw0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5fc3FsKHRoaXMuX3RvU2VsZWN0U1FMKCkpOw0KICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShyZXQpKSByZXQgPSByZXRbMF07DQogICAgPCUgfWVsc2UgaWYodCA9PSAiU2VydmljZU5vdyIpIHslPg0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IHRoaXMuX3Jlc3QobnVsbCwgbnVsbCwgYXdhaXQgdGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZSwgcmV1c2VkOiAxfSksICdwdXQnKSkucmVzdWx0Ow0KICAgIDwlIH1lbHNlIGlmKF9maWxlVG9vbHMuaW5kZXhPZih0KT4tMSl7ICU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLl88JT10LnRvTG93ZXJDYXNlKCklPignPCU9YWxpYXMoKS5zcGxpdCgnLicpLnNsaWNlKDEpLmpvaW4oJy8nKSU+LzwlPW5OYW1lKGMpJT4vJyArIHRoaXMuX3RvU3RyaW5nKCkgKyAnLmpzb24nLCB0aGlzLl90b0pTT04oe2JNYXA6IHRydWUsIHJldXNlZDogMX0pLCB0aGlzLklkKTsNCiAgICA8JSB9IGVsc2UgaWYodCA9PSAiRU1TIikgeyU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLl90b0VNU09iamVjdCgpLnN0b3JlKCk7DQogICAgPCUgfWVsc2UgaWYodCA9PSAiUmVzdERCSU8iKSB7JT4NCiAgICAgICAgICAgIDwlPWxvZygpJT4iU2VuZGluZyB1cGRhdGUgdG8gUkVTVERCSU8gdG8gc2F2ZSIpOw0KDQogICAgICAgICAgICBsZXQgdXJsID0gImh0dHBzOi8vIiArIHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJykgKyAiLnJlc3RkYi5pby9yZXN0LyIgKyA8JT1fbkNvZGUoKSU+LnRvTG93ZXJDYXNlKCkgKyAiLyIgKyB0aGlzLklkOw0KICAgICAgICAgICAgLy8gPCU9bG9nKCklPiJVcGRhdGUgdG8gUkVTVERCSU8iLCB1cmwpOw0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IGF4aW9zLnB1dCh1cmwsIG9iaiwgew0KICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgICAgICAgICAgImNhY2hlLWNvbnRyb2wiOiAibm8tY2FjaGUiLA0KICAgICAgICAgICAgICAgICAgICAieC1hcGlrZXkiOiB0aGlzLl9fY29uZmlnKCdhcGlrZXknKSwNCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KSkuZGF0YTsNCiAgICA8JSB9ZWxzZSBpZih0ID09ICJCSVNlcnZlciIpIHslPg0KICAgICAgICAgICAgLy8gd2UgbmVlZCBkZXB0aCAyIHRvIGdldCB0aGUgRW50aXR5VmFsdWVzIGJvdW5kIHRvIHRoZSBvbmVzIHdlIHNlbnQNCiAgICAgICAgICAgIGxldCB1cGRPYmogPSBhd2FpdCB0aGlzLnNyKCkuXygiRW50ZXJwcmlzZU1hbmFnZXIuZW1zRW50aXR5T2JqZWN0VXBkYXRlIiwgbnVsbCwgdGhpcy50b0VudGl0eU9iamVjdCgpLCAyKTsNCiAgICAgICAgICAgIGlmKCF1cGRPYmopIHJldHVybiBudWxsOw0KICAgICAgICAgICAgdGhpcy5fX3N5bmNfb24obmV3IERhdGUoKSk7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5fY29weUZyb20odXBkT2JqKTsNCiAgICA8JSB9ICU+DQogICAgICAgIH0NCjwlIH0pJT4NCg0KICAgICAgICAgICAgPCU9bG9nKCklPiJyZXN1bHQiLCByZXQpOw0KICAgICAgICAgICAgdGhpcy5fX3N5bmNfb24obmV3IERhdGUoKSk7DQogICAgICAgICAgICB0aGlzLl9mcm9tRG9jdW1lbnQocmV0LCB0cnVlKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgICAgICAgICAgLyoqKiBFTkQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCiAgICAgICAgfSwge19fYmVmb3JlUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkJlZm9yZSkubWFwKHIgPT4geyU+PCU9X0ZyRU1ELl90b0pTKHIpJT48JSB9KS5qb2luKCcsICcpJT5dLCBfX2FmdGVyUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkFmdGVyKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl19KTsNCiAgICAgICAgDQogICAgICAgIHJldHVybiAocmVzdWx0cy5maW5kKHIgPT4gci5yZXQpIHx8IHtyZXQ6IG51bGx9KS5yZXQ7IC8vIGZpcnN0IG9uZSB0byBleGVjdXRlIGNvcnJlY3RseQ0KICAgIH0NCiAgICANCiAgICBhc3luYyA8JT1tTmFtZT0nZmluZCclPihkZXB0aCA9IDEsIG9ianMsIGZpZWxkcykgew0KICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuZmluZEFsbChkZXB0aCwgb2JqcywgbnVsbCwgbnVsbCwgZmllbGRzKSlbMF07DQogICAgfQ0KDQogICAgYXN5bmMgPCU9bU5hbWU9J2ZpbmRBbGwnJT4oZGVwdGggPSAxLCBvYmpzPVtdLCBzdGFydCwgZW5kLCBmaWVsZHMpIHsNCiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLl9leGVjdXRlKG51bGwsIDwlPWFsaWFzKCklPiwgIjwlPW1OYW1lJT4iLCA8JW1Sb3V0aW5nKGMpJT4sIGFzeW5jICgpID0+IHsNCiAgICAgICAgICAgICAgICAvKioqIFNUQVJUIExPQ0FMIDwlPW1OYW1lJT4oKSAqKiovDQogICAgICAgIA0KICAgICAgICBsZXQgcmV0ID0gW107IC8vIGEganNvbiBhcnJheQ0KDQo8JSBjbHNUb29scyhjKS5mb3JFYWNoKHQgPT4geyU+DQogICAgICAgIGlmKHRoaXMuVG9vbC50eXBlLm5hbWU9PSI8JT10JT4iKXsNCiAgICA8JSBpZih0PT0iTW9uZ29EQiIpeyAlPg0KICAgICAgICAgICAgaWYodGhpcy5Ub29sLmRiKSByZXQgPSBhd2FpdCB0aGlzLlRvb2wuZGIuY29sbGVjdGlvbig8JT1fbkNvZGUoYyklPikuZmluZCh0aGlzLl90b1NlbGVjdE1vbmdvREIoZmllbGRzLCBvYmpzKSkudG9BcnJheSgpOw0KICAgIDwlIH0gZWxzZSBpZih0ID09ICJSeERCIikgeyU+DQogICAgICAgICAgICBhd2FpdCB0aGlzLlRvb2wuZGJbPCU9X25Db2RlKGMpJT5dLmZpbmQodGhpcy5fdG9TZWxlY3RSeERCKGZpZWxkcywgb2JqcykpLmV4ZWMoKTsNCiAgICA8JSB9ZWxzZSBpZihfc3FsVG9vbHMuaW5kZXhPZih0KT49MCl7ICU+DQogICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLl9zcWwodGhpcy5fdG9TZWxlY3RTUUwoZmllbGRzLCBvYmpzKSk7DQogICAgPCUgfWVsc2UgaWYodD09IkVNUyIpeyAlPg0KICAgICAgICAgICAgbGV0IG8gPSB0aGlzLl90b0VNU09iamVjdCh0cnVlLCB0cnVlKTsNCiAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ2Vtcy5kZWVwLnF1ZXJ5JykpIG8gPSBuZXcgPCU9c2NvcGUlPi5FbnRpdHlPYmplY3QoKS5USElTKFtvXS5jb25jYXQob2Jqcy5tYXAoX28gPT4gX28uX3RvRU1TT2JqZWN0KHRydWUsIHRydWUpKSkpOw0KICAgICAgICAgICAgcmV0ID0gYXdhaXQgdGhpcy5fZnJvbUVNU1ZhbHVlcyhhd2FpdCBuZXcgPCU9c2NvcGUlPi5FbnRpdHlWYWx1ZSgpLmFjdGl2ZSh0cnVlKS5lbnRpdHlPYmplY3QobykuPCU9bU5hbWUlPigpKTsNCiAgICAgICAgICAgIGlmKHRoaXMuX19jb25maWcoJ2Vtcy5kZWVwLnF1ZXJ5JykpIHJldHVybiByZXQ7DQogICAgPCUgfWVsc2UgaWYodD09Ik1lbW9yeSIpeyAlPg0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuVG9vbC5kYls8JT1fbkNvZGUoKSU+XS5maWx0ZXIobyA9PiBvICYmIHRoaXMuX3NhbWVFbnRpdHkobykpOw0KICAgIDwlIH1lbHNlIGlmKHQ9PSJIdWJTcG90Iil7ICU+DQogICAgPCUgfWVsc2UgaWYodD09IlNlcnZpY2VOb3ciKXsgJT4NCiAgICAgICAgICAgIHJldCA9IChhd2FpdCB0aGlzLl9yZXN0KG51bGwsIHtzeXNwYXJtX3F1ZXJ5OiB0aGlzLl90b1NOUXVlcnkoZmllbGRzLCBvYmpzLCB0cnVlKX0pKS5yZXN1bHQ7DQogICAgPCUgfWVsc2UgaWYodD09IlNhbGVzRm9yY2UiKXsgJT4NCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuX3Jlc3QobnVsbCwgbnVsbCwgdGhpcy5fdG9TRlF1ZXJ5KGZpZWxkcywgb2JqcywgdHJ1ZSksIG51bGwsIHt1cmw6ICdyZXN0LnVybC5ncWwnfSk7DQogICAgPCUgfWVsc2UgaWYoX2ZpbGVUb29scy5pbmRleE9mKHQpPi0xKXsgJT4NCiAgICAgICAgICAgIGxldCBkTmFtZSA9ICc8JT1hbGlhcygpLnNwbGl0KCcuJykuc2xpY2UoMSkuam9pbignLycpJT4vPCU9bk5hbWUoYyklPic7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGxldCBkTGlzdCA9IGF3YWl0IHRoaXMuXzwlPXQudG9Mb3dlckNhc2UoKSU+KGROYW1lKTsNCg0KICAgICAgICAgICAgPCU9bG9nKCklPiJkTmFtZSIsIGROYW1lLCB0aGlzLl90b1N0cmluZygpICsgJy5qc29uJywgImRMaXN0IiwgZExpc3QpOw0KICAgICAgICAgICAgbGV0IGlkeExpc3QgPSAoZExpc3QgfHwgW10pLmZpbHRlcihyID0+IHR5cGVvZihyLm5hbWUpIT09J3VuZGVmaW5lZCcpLm1hcChyID0+IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZShjLCB0cnVlKSU+KCkuX2Zyb21TdHJpbmcoci5uYW1lLnJlcGxhY2UoJy5qc29uJywgJycpKSk7DQogICAgICAgICAgICA8JT1sb2coKSU+ImlkeExpc3QiLCBpZHhMaXN0LCBpZHhMaXN0Lm1hcChyID0+IHIuX3RvU3RyaW5nKCkgKyAnLmpzb24nKSk7DQogICAgICAgICAgICBpZHhMaXN0ID0gaWR4TGlzdC5maWx0ZXIociA9PiByLl9tYXRjaGVzKHRoaXMsIHtvbmx5VW5pcXVlOiB0cnVlfSkpOw0KICAgICAgICAgICAgPCU9bG9nKCklPiJpZHhMaXN0IGZpbHRlcmVkIiwgaWR4TGlzdCk7IA0KDQogICAgICAgICAgICBpZihpZHhMaXN0Lmxlbmd0aD09MSl7DQogICAgICAgICAgICAgICAgcmV0LnB1c2goYXdhaXQgdGhpcy5fPCU9dC50b0xvd2VyQ2FzZSgpJT4oZE5hbWUgKyAnLycgKyAoaWR4TGlzdFswXS5fdG9TdHJpbmcoKS5zcGxpdCgnLycpLnNsaWNlKC0xKS5qb2luKCcvJykgKyAnLmpzb24nKSkpOw0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgcmV0ID0gaWR4TGlzdDsNCiAgICAgICAgICAgIH0NCiAgICA8JSB9ZWxzZSBpZih0PT0iTmVvNGoiKXsgJT4NCiAgICAgICAgICAgIHJldCA9IGF3YWl0IHRoaXMuX25lbzRqKHRoaXMuX3RvQ3lRdWVyeShmaWVsZHMsIG9ianMpKTsNCiAgICA8JSB9ZWxzZSBpZih0PT0iUmVzdERCSU8iKXsgJT4NCiAgICAgICAgICAgIGxldCB0aGlzRG9jID0gdGhpcy5fdG9Eb2N1bWVudCh7Yk1hcDogdHJ1ZX0pOw0KICAgICAgICAgICAgbGV0IGVhQ29kZSA9ICIiOw0KICAgICAgICA8JSAkLmVhY2goYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKSwgKF8sIGVhKSA9PiB7JT4NCiAgICAgICAgICAgIGVhQ29kZSA9IDwlPV9uQ29kZShlYSklPjsNCiAgICAgICAgICAgIGlmKHRoaXMuXzwlPW5OYW1lKGVhKSU+X3NldCl7DQogICAgICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXsgJT4NCiAgICAgICAgICAgIDwlIH1lbHNlIGlmKGVhLklzQXJyYXkpeyAlPg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A9PSIhPSIpew0KICAgICAgICAgICAgICAgICAgICB0aGlzRG9jW2VhQ29kZV0gPSB7IiRuaW4iOiB0aGlzRG9jW2VhQ29kZV19Ow0KICAgICAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgICAgICB0aGlzRG9jW2VhQ29kZV0gPSB7IiRpbiI6IHRoaXNEb2NbZWFDb2RlXX07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgPCUgfWVsc2UgaWYoZWEuSXNTdHJpbmcgfHwgZWEuSXNUZXh0KXsgJT4NCiAgICAgICAgICAgICAgICBpZihbbnVsbCwgJyUnLCAnTElLRSddLmluZGV4T2YodGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk+LTEpew0KICAgICAgICAgICAgICAgICAgICB0aGlzRG9jW2VhQ29kZV0gPSB7IiRyZWdleCI6IHRoaXNEb2NbZWFDb2RlXSB8fCAiLioifTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICA8JSB9ICU+DQogICAgICAgICAgICB9DQogICAgICAgIDwlIH0pOyAlPg0KDQogICAgICAgICAgICBsZXQgdXJsID0gImh0dHBzOi8vIiArIHRoaXMuX19jb25maWcoJ2RhdGFiYXNlJykgKyAiLnJlc3RkYi5pby9yZXN0LyIgKyA8JT1fbkNvZGUoKSU+LnRvTG93ZXJDYXNlKCkgKyAiP3E9IiArIEpTT04uc3RyaW5naWZ5KGNvbmRpdGlvbnMpOw0KICAgICAgICAgICAgcmV0ID0gKGF3YWl0IGF4aW9zLmdldCh1cmwsIHsNCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7DQogICAgICAgICAgICAgICAgICAgICJjYWNoZS1jb250cm9sIjogIm5vLWNhY2hlIiwNCiAgICAgICAgICAgICAgICAgICAgIngtYXBpa2V5IjogdGhpcy5fX2NvbmZpZygnYXBpa2V5JyksDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSkpLmRhdGE7DQogICAgPCUgfWVsc2UgaWYodD09IkJJU2VydmVyIil7ICU+DQogICAgICAgICAgICBsZXQgcSA9IHsNCiAgICAgICAgICAgICAgICBUSElTOiB0aGlzLl9idWlsZFRoaXMoZGVwdGgpLmNvbmNhdCgob2JqcyB8fCBbXSkubWFwKG9iaiA9PiBvYmoudG9FbnRpdHlPYmplY3Q/ew0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eU9iamVjdDogb2JqLnRvRW50aXR5T2JqZWN0KHRydWUpLA0KICAgICAgICAgICAgICAgIH06b2JqKSksDQogICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgIEVudGl0eU9iamVjdDogeyAvLyBhYnNvbHV0ZWx5IHJlcXVpcmVkIGZvciBpbmRleGluZw0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eUNsYXNzOiB0aGlzLl92YWx1ZUNsYXNzKCksDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIDwlPWxvZygpJT5xKTsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hc09iamVjdHMoKGF3YWl0IHRoaXMuc3IoKS5fKCJFbnRlcnByaXNlTWFuYWdlci5lbXNFbnRpdHlWYWx1ZUZpbmRhbGwiLCBudWxsLCBxKSkpOw0KICAgIDwlIH0gJT4NCiAgICAgICAgfQ0KPCUgfSklPg0KDQogICAgICAgIDwlPWxvZygpJT4iQmVmb3JlIF9mcm9tRG9jdW1lbnQoKSIsIGRlcHRoLCByZXQpOw0KICAgICAgICANCiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkocmV0KSkgcmV0ID0gW3JldF07DQogICAgICAgIHJldCA9IHJldC5maWx0ZXIociA9PiByKS5tYXAociA9PiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShjLCB0cnVlKSU+KCkuX2Zyb21Eb2N1bWVudChyLCB0cnVlKSkuZmlsdGVyKHIgPT4gcikubWFwKHIgPT4gci5fX3N5bmNfb24obmV3IERhdGUoKSkpOw0KDQogICAgICAgIGlmKGRlcHRoPjEpew0KICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCByIG9mIHJldCl7DQo8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+IGVhLkVudGl0eVR5cGUgJiYgIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7JT4NCiAgICAgICAgICAgICAgICBpZihyLl88JT1uTmFtZShlYSklPl9zZXQpew0KICAgICAgICAgICAgICAgICAgICAvLyA8JT1sb2coKSU+IjwlPW5OYW1lKGVhKSU+Iiwgci48JT1uTmFtZShlYSklPigpLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgICAgICAgICByLjwlPW5OYW1lKGVhKSU+KGF3YWl0IHIuXzwlPW5OYW1lKGVhKSU+LmZpbmQoZGVwdGgtMSkpOw0KICAgICAgICAgICAgICAgIH0NCjwlIH0pJT4NCiAgICANCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTsgJT4NCiAgICA8JSBjbHNUb29scyhjKS5mb3JFYWNoKHQgPT4geyU+DQogICAgICAgICAgICAgICAgaWYodGhpcy5Ub29sLnR5cGUubmFtZT09IjwlPXQlPiIpew0KICAgICAgICA8JSBpZihfZmlsZVRvb2xzLmluZGV4T2YodCk+PTApeyAlPg0KICAgICAgICAgICAgICAgICAgICBsZXQgcl88JT10YU5hbWUlPiA9IFtdOw0KICAgICAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IF90YSBvZiByLjwlPXRhTmFtZSU+KCkpew0KICAgICAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPiI8JT10YU5hbWUlPiIsIF90YSk7DQogICAgICAgICAgICAgICAgICAgICAgICByXzwlPXRhTmFtZSU+LnB1c2goYXdhaXQgX3RhLmZpbmQoZGVwdGgtMSkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHIuY2xlYXJfPCU9dGFOYW1lJT4oKTsNCiAgICAgICAgICAgICAgICAgICAgci48JT10YU5hbWUlPihyXzwlPXRhTmFtZSU+KTsNCiAgICAgICAgPCUgfWVsc2V7ICU+DQogICAgICAgICAgICAgICAgICAgIC8vIDwlPWxvZygpJT4iPCU9dGFOYW1lJT4iLCByLjwlPXRhTmFtZSU+KCkpOw0KICAgICAgICAgICAgICAgICAgICByLjwlPXRhTmFtZSU+KGF3YWl0IG5ldyA8JT1zY29wZSU+LjwlPV9jTmFtZSh0YS5FbnRpdHlDbGFzcywgdHJ1ZSklPigpLjwlPW5OYW1lKHRhKSU+KHIpDQogICAgICAgICAgICA8JSBpZihmYWxzZSAmJiBbJ1NxbERCJ10uaW5kZXhPZih0KT49MCl7IC8vIHNxbCBzdGF0ZW1lbnRzIGRvIG5vdCBpbmNsdWRlIGxlZnQgam9pbnMgd2l0aG91dCBleHBsaWNpdCByZWZlcmVuY2VzICU+DQogICAgICAgICAgICAgICAgICAgICAgICA8JXRhLkVudGl0eUNsYXNzLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QgJiYgZWEuRW50aXR5VHlwZSAmJiBlYSE9dGEpLmZvckVhY2goZWEgPT4geyU+LjwlPW5OYW1lKGVhKSU+KG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKSk8JX0pJT4NCiAgICAgICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgICAgICAgICAgLjwlPW1OYW1lJT4oZGVwdGgtMSkpOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICB9DQogICAgPCUgfSklPg0KPCUgfSklPg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgbGV0IHJlZnMgPSByZXQuZmlsdGVyKHIgPT4gci5FbnRpdHlDbGFzcyk7DQogICAgICAgIGZvciBhd2FpdCAoY29uc3QgbyBvZiAob2JqcyB8fCBbXSkuZmlsdGVyKF9vID0+ICFfby5fX3N5bmNfb24oKSkpew0KICAgICAgICAgICAgaWYoby5fdG9FTVNPYmplY3Qpew0KICAgICAgICAgICAgICAgIHJlZnMucHVzaCguLi4oYXdhaXQgdGhpcy5fZnJvbUVNU1ZhbHVlcyhhd2FpdCBvLl90b0VNU09iamVjdCh0cnVlLCB0cnVlKS48JT1tTmFtZSU+KGRlcHRoKSkpKTsNCiAgICAgICAgICAgIH1lbHNlew0KICAgICAgICAgICAgICAgIHJlZnMucHVzaCguLi4oYXdhaXQgby48JT1tTmFtZSU+KGRlcHRoKSkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJlZnMgPSByZWZzLmZpbHRlcihyID0+IHIpOw0KICAgICAgICANCiAgICAgICAgcmVmcy5mb3JFYWNoKHIgPT4gci5fcmVzb2x2ZShyZWZzKSk7DQoNCiAgICAgICAgPCU9bG9nKCklPiJPdXRwdXQiLCByZXQpOw0KDQogICAgICAgIHJldHVybiByZXQ7DQogICAgICAgICAgICAgICAgLyoqKiBFTkQgTE9DQUwgPCU9bU5hbWUlPigpICoqKi8NCiAgICAgICAgfSwge2RlcHRoLCBvYmpzLCBzdGFydCwgZW5kLCBmaWVsZHMsIF9fYmVmb3JlUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkJlZm9yZSkubWFwKHIgPT4geyU+PCU9X0ZyRU1ELl90b0pTKHIpJT48JSB9KS5qb2luKCcsICcpJT5dLCBfX2FmdGVyUnVsZXM6IFs8JShjLkVudGl0eVJ1bGVzIHx8IFtdKS5maWx0ZXIociA9PiByW21OYW1lXSAmJiByLkFmdGVyKS5tYXAociA9PiB7JT48JT1fRnJFTUQuX3RvSlMociklPjwlIH0pLmpvaW4oJywgJyklPl19KTsNCg0KICAgICAgICByZXR1cm4gKHJlc3VsdHMuZmluZChyID0+IHIucmV0KSB8fCB7cmV0OiBbXX0pLnJldCB8fCBbXTsgLy8gZmlyc3Qgb25lIHRvIGV4ZWN1dGUgY29ycmVjdGx5DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfcmVzb2x2ZSclPihyZWZzKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYoIXJlZnMubGVuZ3RoKSByZXR1cm4gdGhpczsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgdGhpcy5fX2ltcG9ydCh7fSwgew0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCAmJiBlYS5FbnRpdHlUeXBlKS5mb3JFYWNoKGVhID0+IHsgJT4NCiAgICAgICAgICAgICAgICA8JT1uTmFtZShlYSklPjogKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICBpZih0aGlzLjwlPW5OYW1lKGVhKSU+KCkpew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gPCU9bG9nKCklPiI8JT1uTmFtZShlYSklPiIsIHRoaXMuPCU9bk5hbWUoZWEpJT4oKS5JZCwgcmVmcy5tYXAociA9PiAoe2lkOiByLklkLCBjb2RlOiByLmNvZGUoKX0pKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLjwlPW5OYW1lKGVhKSU+KHJlZnMuZmluZChvID0+IG8uSWQ9PXRoaXMuPCU9bk5hbWUoZWEpJT4oKS5JZCkgfHwgdGhpcy48JT1uTmFtZShlYSklPigpLjwlPW1OYW1lJT4ocmVmcykpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICAgICAgPCU9dGFOYW1lJT46ICgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy48JT10YU5hbWUlPigpLmxlbmd0aCkgdGhpcy48JT10YU5hbWUlPih0aGlzLjwlPXRhTmFtZSU+KCkubWFwKHRhID0+IHJlZnMuZmluZChvID0+IG8uSWQ9PXRhLklkKSB8fCB0YS48JT1tTmFtZSU+KHJlZnMpKSwgbnVsbCwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KDQogICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCjwlIGlmKG1haW5DbGFzcyhbJ0VNUyddKSl7JT4NCiAgICBhc3luYyA8JT1tTmFtZT0nX2Zyb21FTVNWYWx1ZXMnJT4oZXZzKXsNCiAgICA8JSBpZihtYWluQ2xhc3MoWydFTVMnXSk9PWMpeyU+DQogICAgICAgIHRyeXsNCiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2ZpbmRSZWZlcmVuY2VzKGV2cywgWy4uLm5ldyBTZXQoZXZzLm1hcCh2ID0+IHYuZW50aXR5QXR0cmlidXRlKCkuSWQpLmZsYXQoKSldLm1hcChpZCA9PiBuZXcgPCU9c2NvcGUlPi5FbnRpdHlBdHRyaWJ1dGUoaWQpKSk7DQogICAgICAgICAgICA8JT1sb2coKSU+ZXZzKTsNCiAgICAgICAgDQogICAgICAgICAgICBsZXQgb2JqcyA9IFtdOw0KICAgICAgICAgICAgdGhpcy5ncm91cEJ5KGV2cywgIl9lbnRpdHlPYmplY3QiKS5mb3JFYWNoKGV2ZyA9PiB7DQogICAgICAgICAgICAgICAgZXZnLmtleS5lbnRpdHlPYmplY3RfRW50aXR5VmFsdWVzKGV2Zy52YWx1ZXMpOw0KICAgICAgICAgICAgICAgIG9ianMucHVzaChldmcua2V5KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBvYmpzLmZvckVhY2gociA9PiByLmVudGl0eUNsYXNzKHIuZW50aXR5T2JqZWN0X0VudGl0eVZhbHVlcygpWzBdLmVudGl0eUF0dHJpYnV0ZSgpLmVudGl0eUNsYXNzKCkpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgbGV0IHJldCA9IFtdOw0KICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCByIG9mIG9ianMpew0KICAgICAgICAgICAgICAgIHJldC5wdXNoKGF3YWl0IG5ldyA8JT1zY29wZSU+W3IuZW50aXR5Q2xhc3MoKS5uYW1lKCldKCkuX2Zyb21FTVNPYmplY3QocikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICA8JX1lbHNleyU+DQogICAgICAgIHJldHVybiBhd2FpdCBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoWydFTVMnXSxjKSklPigpLjwlPW1OYW1lJT4oZXZzKTsNCiAgICA8JX0lPg0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0nX3RvRU1TQ2xhc3MnJT4oZGVwdGgpew0KICAgICAgICAvLyB3aHkgbm90IF9fZXhwb3J0ID8NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgbGV0IHJldCA9IG5ldyA8JT1zY29wZSU+LkVudGl0eUNsYXNzKCc8JT1jLklkJT4nKS5uYW1lKCI8JT1jLk5hbWUlPiIpLmNvZGUoIjwlPW5OYW1lKGMpJT4iKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5kYXRlKG5ldyBEYXRlKCkpLmNvbXBhbnkobmV3IDwlPXNjb3BlJT4uQ29tcGFueSgpLm5hbWUoIjwlPXNjb3BlJT4iKS5jb2RlKCI8JT1zY29wZSU+IikpLmVudGl0eU1vZHVsZShuZXcgPCU9c2NvcGUlPi5FbnRpdHlNb2R1bGUoKS5jb2RlKCI8JT1zY29wZSU+IikubmFtZSgiPCU9c2NvcGUlPiIpKTsNCiAgICAgICAgICAgIGlmKCFkZXB0aCkgcmV0dXJuIHJldDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0LmVudGl0eUNsYXNzX0VudGl0eU1ldGhvZHMoWw0KICAgIDwlIGMuRW50aXR5TWV0aG9kcy5mb3JFYWNoKG0gPT4geyU+DQogICAgICAgICAgICAgICAgbmV3IDwlPXNjb3BlJT4uRW50aXR5TWV0aG9kKCc8JT1tLklkJT4nKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5uYW1lKCI8JT1tLk5hbWUlPiIpLmNvZGUoIjwlPW5OYW1lKG0pJT4iKS5lbnRpdHlNZXRob2RfRW50aXR5QXR0cmlidXRlcyhbDQogICAgICAgIDwlIG0uTWV0aG9kUGFyYW1ldGVycy5mb3JFYWNoKHAgPT4geyU+DQogICAgICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LkVudGl0eUF0dHJpYnV0ZSgnPCU9cC5JZCU+JykuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkubmFtZSgiPCU9cC5OYW1lJT4iKS5jb2RlKCI8JT1uTmFtZShwKSU+IikuaXNBcnJheSg8JT1wLklzQXJyYXk/J3RydWUnOidmYWxzZSclPikucmVtYXJrKCI8JT1jLk5hbWUlPi48JT1tLk5hbWUlPigpIikuZW50aXR5Q2xhc3MobmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUoYywgdHJ1ZSklPigpLjwlPW1OYW1lJT4oKSkNCiAgICAgICAgICAgIDwlIGlmKHAuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICAgICAgLmVudGl0eVR5cGUobmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUocC5FbnRpdHlUeXBlKSU+KCkuPCU9bU5hbWUlPihkZXB0aC0xKSkNCiAgICAgICAgICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICAgICAgICAgIC5pczwlPV9GckVNRC5fYXR0cihwKSU+KHRydWUpDQogICAgICAgICAgICA8JSB9JT4sDQogICAgICAgIDwlIH0pJT4NCiAgICAgICAgICAgICAgICBdKS5yZXNwb25zZUF0dHJpYnV0ZShuZXcgPCU9c2NvcGUlPi5FbnRpdHlBdHRyaWJ1dGUoJzwlPW0uUmVzcG9uc2VBdHRyaWJ1dGUuSWQlPicpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLm5hbWUoIjwlPW0uUmVzcG9uc2VBdHRyaWJ1dGUuTmFtZSU+IikuY29kZSgiPCU9bk5hbWUobS5SZXNwb25zZUF0dHJpYnV0ZSklPiIpLmVudGl0eUNsYXNzKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGMsIHRydWUpJT4oKS48JT1tTmFtZSU+KCkpDQogICAgICAgIDwlIGlmKG0uUmVzcG9uc2VBdHRyaWJ1dGUuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICAuZW50aXR5VHlwZShuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtLlJlc3BvbnNlQXR0cmlidXRlLkVudGl0eVR5cGUpJT4oKS48JT1tTmFtZSU+KGRlcHRoLTEpKQ0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIC5pczwlPV9GckVNRC5fYXR0cihtLlJlc3BvbnNlQXR0cmlidXRlKSU+KHRydWUpDQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgICksDQogICAgPCUgfSklPg0KICAgICAgICAgICAgXSkuZW50aXR5Q2xhc3NfRW50aXR5QXR0cmlidXRlcyhbDQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgICAgIG5ldyA8JT1zY29wZSU+LkVudGl0eUF0dHJpYnV0ZSgnPCU9ZWEuSWQlPicpLmFjdGl2ZSh0cnVlKS5lbmFibGVkKHRydWUpLm5hbWUoIjwlPWVhLk5hbWUlPiIpLmNvZGUoIjwlPW5OYW1lKGVhKSU+IikucmVtYXJrKCc8JT1jLk5hbWUlPi48JT1lYS5OYW1lJT4nKQ0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgIC5lbnRpdHlUeXBlKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKGVhLkVudGl0eVR5cGUsIHRydWUpJT4oKS48JT1tTmFtZSU+KGRlcHRoLTEpKQ0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIC5pczwlPV9GckVNRC5fYXR0cihlYSklPih0cnVlKQ0KICAgICAgICA8JSB9JT4sDQogICAgPCUgfSklPg0KICAgICAgICAgICAgXSk7DQogICAgICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgICAgIHJldHVybiByZXQ7DQogICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICA8JT1lcnJvcigpJT5leCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhc3luYyA8JT1tTmFtZT0nX2Zyb21FTVNPYmplY3QnJT4ob2JqKXsNCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgdGhpcy5JZCA9IG9iai5JZDsNCiAgICAgICAgICAgIGxldCBldiA9IG51bGw7DQogICAgPCUgYy5FbnRpdHlBdHRyaWJ1dGVzLmZpbHRlcihlYSA9PiAhZWEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKGVhID0+IHslPg0KICAgICAgICAgICAgZXYgPSBvYmouZW50aXR5T2JqZWN0X0VudGl0eVZhbHVlcygpLmZpbmQoZXYgPT4gZXYuZW50aXR5QXR0cmlidXRlKCkuY29kZSgpPT08JT1fbkNvZGUoZWEpJT4pOw0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgaWYoZXYpIHRoaXMuPCU9bk5hbWUoZWEpJT4oYXdhaXQgbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUoZWEuRW50aXR5VHlwZSwgdHJ1ZSklPigpLjwlPW1OYW1lJT4oZXYub2JqZWN0VmFsdWUoKSkpOw0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgaWYoZXYpIHRoaXMuPCU9bk5hbWUoZWEpJT4oZXYuPCU9X0ZyRU1ELl9hdHRyKGVhKS50b0xvd2VyQ2FzZSgpJT5WYWx1ZSgpKTsNCiAgICAgICAgPCUgfSU+DQogICAgPCUgfSklPg0KICAgIDwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZvckVhY2godGEgPT4geyBsZXQgdGFOYW1lID0gbk5hbWUodGEpICsgJ18nICsgdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTslPg0KICAgIDwlIH0pJT4NCiAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICB9Y2F0Y2goZXgpew0KICAgICAgICAgICAgPCU9ZXJyb3IoKSU+ZXgpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J190b0VNU09iamVjdCclPihiUXVlcnksIGJUeXBlZEF0dHJpYnV0ZXMpew0KICAgICAgICBsZXQgcmV0ID0gbmV3IDwlPXNjb3BlJT4uRW50aXR5T2JqZWN0KCkuYWN0aXZlKHRydWUpLmVudGl0eUNsYXNzKHRoaXMuX3RvRU1TQ2xhc3MoKSk7DQoNCiAgICAgICAgcmV0ID0gdGhpcy5fX2V4cG9ydChyZXQsIHsNCiAgICAgICAgICAgIEZ1bGw6ICFiUXVlcnksDQogICAgICAgICAgICAvL051bGw6ICFiUXVlcnksDQogICAgICAgICAgICBJZDogKG9iaiwgZWFDb2RlLCB2KSA9PiBvYmouSWQgPSB2LA0KICAgIDwlIGMuRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoZWEgPT4gIWVhLkVudGl0eU1ldGhvZCkuZm9yRWFjaChlYSA9PiB7ICU+DQogICAgICAgICAgICAiPCU9bk5hbWUoZWEpJT4iOiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBsZXQgZXYgPSBuZXcgPCU9c2NvcGUlPi5FbnRpdHlWYWx1ZSgpLmFjdGl2ZSh0cnVlKS5lbnRpdHlBdHRyaWJ1dGUobmV3IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlKCc8JT1lYS5JZCU+JykuYWN0aXZlKHRydWUpLmVuYWJsZWQodHJ1ZSkubmFtZSgiPCU9ZWEuTmFtZSU+IikuY29kZSgiPCU9bk5hbWUoZWEpJT4iKS5lbnRpdHlDbGFzcyh0aGlzLl90b0VNU0NsYXNzKCkpKTsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICBldi5vYmplY3RWYWx1ZSh2P3YuPCU9bU5hbWUlPihiUXVlcnksIGJUeXBlZEF0dHJpYnV0ZXMpOm51bGwsIHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3ApOw0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIGV2LjwlPV9GckVNRC5fYXR0cihlYSkudG9Mb3dlckNhc2UoKSU+VmFsdWUodiwgdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcCk7DQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgIG9iai5lbnRpdHlPYmplY3RfRW50aXR5VmFsdWVzKGV2LCAnPT0nKTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSk7ICU+DQogICAgPCUgYy5UeXBlZEF0dHJpYnV0ZXMuZm9yRWFjaCh0YSA9PiB7IGxldCB0YU5hbWUgPSBuTmFtZSh0YSkgKyAnXycgKyB0YS5FbnRpdHlDbGFzcy5QbHVyYWwucmVwbGFjZSgvIC9nLCAnXycpOyU+DQogICAgICAgICAgICA8JT10YU5hbWUlPjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgaWYodiAmJiBiVHlwZWRBdHRyaWJ1dGVzKSBvYmoub2JqZWN0VmFsdWVfRW50aXR5VmFsdWVzKHYubWFwKF92ID0+IG5ldyA8JT1zY29wZSU+LkVudGl0eVZhbHVlKCkuYWN0aXZlKHRydWUpLmVudGl0eUF0dHJpYnV0ZShuZXcgPCU9c2NvcGUlPi5FbnRpdHlBdHRyaWJ1dGUoJzwlPXRhLklkJT4nKS5hY3RpdmUodHJ1ZSkuZW5hYmxlZCh0cnVlKS5jb2RlKCI8JT1uTmFtZSh0YSklPiIpLm5hbWUoIjwlPXRhLk5hbWUlPiIpLmVudGl0eUNsYXNzKG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuX3RvRU1TQ2xhc3MoKSkpLm9iamVjdFZhbHVlKF92LjwlPW1OYW1lJT4oYlF1ZXJ5LCBiVHlwZWRBdHRyaWJ1dGVzKSkpLCAnPT0nKTsNCiAgICAgICAgICAgIH0sDQogICAgPCUgfSklPg0KICAgICAgICB9LCAiPCU9bU5hbWUlPiIpOw0KDQogICAgICAgIDwlPWxvZygpJT5yZXQpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCjwlIH0gJT4NCg0KPCUgaWYobWFpbkNsYXNzKFsnQklTZXJ2ZXInXSkpeyU+DQogICAgPCU9bU5hbWU9J19hc09iamVjdHMnJT4oZXZzKXsNCiAgICA8JSBpZihtYWluQ2xhc3MoWydCSVNlcnZlciddKSE9Yyl7JT4NCiAgICAgICAgICAgIHJldHVybiBuZXcgPCU9c2NvcGUlPi48JT1uTmFtZShtYWluQ2xhc3MoWydCSVNlcnZlciddLGMpKSU+KCkuPCU9bU5hbWUlPihldnMpOw0KICAgIDwlfWVsc2V7JT4NCiAgICAgICAgdHJ5ew0KICAgICAgICAgICAgaWYodHlwZW9mKGV2cyk9PT0idW5kZWZpbmVkIiB8fCAhZXZzIHx8ICFBcnJheS5pc0FycmF5KGV2cykgfHwgIWV2cy5sZW5ndGgpIHJldHVybiBbXTsNCg0KICAgICAgICAgICAgZXZzLmZvckVhY2goZXYgPT4gew0KICAgICAgICAgICAgICAgIGV2LkVudGl0eUF0dHJpYnV0ZSA9IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlcy5maW5kKGVhID0+IGVhLklkPT1ldi5FbnRpdHlBdHRyaWJ1dGVpZCk7DQogICAgICAgICAgICAgICAgZXYuRW50aXR5T2JqZWN0LkVudGl0eUNsYXNzID0gZXYuRW50aXR5QXR0cmlidXRlLkVudGl0eUNsYXNzOw0KICAgICAgICAgICAgICAgIGlmKGV2Lk9iamVjdFZhbHVlKXsNCiAgICAgICAgICAgICAgICAgICAgZXYuT2JqZWN0VmFsdWUuRW50aXR5Q2xhc3MgPSA8JT1zY29wZSU+LkVudGl0eUNsYXNzZXMuZmluZChlYyA9PiBlYy5JZD09ZXYuT2JqZWN0VmFsdWUuRW50aXR5Q2xhc3MuSWQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgIA0KICAgICAgICAgICAgbGV0IG9iaiA9IFtdOw0KICAgICAgICAgICAgdGhpcy5ncm91cEJ5KGV2cywgIkVudGl0eU9iamVjdCIpLmZvckVhY2goZXZnID0+IHsNCiAgICAgICAgICAgICAgICBsZXQgYyA9IG5ldyA8JT1zY29wZSU+W2V2Zy5rZXkuRW50aXR5Q2xhc3MuTmFtZS5yZXBsYWNlKC8gL2csICdfJyldKCk7DQogICAgICAgICAgICAgICAgYy5FbnRpdHlWYWx1ZXMgPSBldmcudmFsdWVzOw0KICAgICAgICAgICAgICAgIGMuVmFsdWVFbnRpdGllcyA9IFtdOw0KICAgICAgICAgICAgICAgIC8vIGMuRW50aXR5Q2xhc3MgPSBldmcua2V5LkVudGl0eUNsYXNzOw0KICAgICAgICAgICAgICAgIGMuSWQgPSBldmcua2V5LklkOw0KICAgICAgICAgICAgICAgIGV2Zy52YWx1ZXMuZm9yRWFjaCh2ID0+IHYuRW50aXR5T2JqZWN0ID0gYyk7DQogICAgICAgICAgICAgICAgb2JqLnB1c2goYyk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZXZzLmZpbHRlcihldiA9PiBldi5PYmplY3RWYWx1ZSkuZm9yRWFjaChldiA9PiB7DQogICAgICAgICAgICAgICAgdmFyIF9mID0gb2JqLmZpbmQobyA9PiBvLklkID09IGV2Lk9iamVjdFZhbHVlLklkKTsNCiAgICAgICAgICAgICAgICBpZihfZikgX2YuVmFsdWVFbnRpdGllcy5wdXNoKGV2KTsNCiAgICAgICAgICAgICAgICBldi5PYmplY3RWYWx1ZSA9IF9mOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIA0KICAgICAgICAgICAgbGV0IHJldCA9IFtdOw0KICAgICAgICAgICAgb2JqLmZvckVhY2gobyA9PiB7DQogICAgICAgICAgICAgICAgaWYoby5FbnRpdHlDbGFzcyAmJiBvLkVudGl0eUNsYXNzLklkIT10aGlzLkVudGl0eUNsYXNzLklkKSByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICByZXQucHVzaChvKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXR1cm4gcmV0Lm1hcChvID0+IG8uX3JldmVydCgpKTsNCiAgICAgICAgfWNhdGNoKGV4KXsNCiAgICAgICAgICAgIDwlPWVycm9yKCklPmV4KTsNCiAgICAgICAgfQ0KICAgIDwlfSU+DQogICAgfQ0KICAgIA0KICAgIDwlPW1OYW1lPSdfcmV2ZXJ0JyU+KGVvKSB7DQogICAgICAgIGlmIChlbykgew0KICAgICAgICAgICAgLy8gcmV2ZXJ0IGZyb20gc291cmNlIGRhdGENCiAgICAgICAgICAgIGlmKGVvLkVudGl0eUNsYXNzICYmICgodGhpcy5FbnRpdHlDbGFzcy5JZCAmJiBlby5FbnRpdHlDbGFzcy5JZCE9dGhpcy5FbnRpdHlDbGFzcy5JZCkgfHwgKHRoaXMuRW50aXR5Q2xhc3MuTmFtZSAmJiBlby5FbnRpdHlDbGFzcy5OYW1lIT10aGlzLkVudGl0eUNsYXNzLk5hbWUpKSl7DQogICAgICAgICAgICAgICAgPCU9ZXJyb3IoKSU+IkNhbm5vdCByZXZlcnQgIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuRW50aXR5Q2xhc3MpICsgIiBmcm9tICIgKyBlby5FbnRpdHlDbGFzcy5OYW1lLCBlbyk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLklkID0gZW8uSWQ7DQogICAgICAgICAgICB0aGlzLkVudGl0eVZhbHVlcyA9IGVvLkVudGl0eVZhbHVlcyB8fCBbXTsNCiAgICAgICAgICAgIHRoaXMuVmFsdWVFbnRpdGllcyA9IGVvLlZhbHVlRW50aXRpZXMgfHwgW107DQogICAgICAgICAgICByZXR1cm4gdGhpcy48JT1tTmFtZSU+KCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZih0aGlzLl9fc3luY19vbigpICYmIE1hdGguYWJzKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX19zeW5jX29uKCkuZ2V0VGltZSgpKSAvIDEwMDApIDwgNSl7DQogICAgICAgICAgICAgICAgPCU9d2FybigpJT4iT2JqZWN0IGFscmVhZHkgcmV2ZXJ0ZWQiLCB0aGlzLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGhpcy5fX3N5bmNfb24obmV3IERhdGUoKSk7DQogICAgICAgIA0KICAgICAgICAgICAgLy8gdXNlIEVudGl0eVZhbHVlcyBhbmQgVmFsdWVFbnRpdGllcyB0byByZXZlcnQgdGhlIGF0dHJpYnV0ZSB2YWx1ZXMNCiAgICAgICAgICAgIHRoaXMuRW50aXR5VmFsdWVzLmZvckVhY2goZXYgPT4gew0KICAgICAgICAgICAgICAgIGxldCBlYSA9IG51bGw7DQogICAgICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgICAgICBlYSA9IDwlPXNjb3BlJT4uRW50aXR5QXR0cmlidXRlcy5maWx0ZXIoX2VhID0+IF9lYS5FbnRpdHlDbGFzcy5OYW1lPT0nPCU9Yy5OYW1lJT4nKS5maW5kKF9lYSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihldi5FbnRpdHlBdHRyaWJ1dGVpZD09X2VhLklkKSByZXR1cm4gX2VhOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXYuRW50aXR5QXR0cmlidXRlKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihldi5FbnRpdHlBdHRyaWJ1dGUuSWQ9PV9lYS5JZCkgcmV0dXJuIF9lYTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihldi5FbnRpdHlBdHRyaWJ1dGUuTmFtZT09X2VhLk5hbWUpIHJldHVybiBfZWE7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgaWYoIWVhKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIDwlPXdhcm4oKSU+InVuYWJsZSB0byBkZXRlY3QgYXR0cmlidXRlIGZyb20gdmFsdWUiLCBldik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH1jYXRjaChleCl7DQogICAgICAgICAgICAgICAgICAgIDwlPWVycm9yKCklPmV2LCBleCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBsZXQgdiA9IGV2Wyh0aGlzWyJfYXR0ciJdP3RoaXM6X0ZyRU1EKS5fYXR0cihlYSkgKyAiVmFsdWUiXTsNCiAgICAgICAgICAgICAgICBsZXQgcCA9IGVhLk5hbWUucmVwbGFjZSgvIC9nLCAnXycpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmKHR5cGVvZih0aGlzW3BdKSE9PSdmdW5jdGlvbicpew0KICAgICAgICAgICAgICAgICAgICA8JT13YXJuKCklPiJpbnZhbGlkIHR5cGUiLCBlYSwgcCwgdik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYodiAmJiBlYS5FbnRpdHlUeXBlICYmIHR5cGVvZih2KT09PSdvYmplY3QnKXsNCiAgICAgICAgICAgICAgICAgICAgPCU9bG9nKCklPiJyZXZlcnRpbmcgIiArIGVhLk5hbWUsIHYsIG5ldyA8JT1zY29wZSU+W2VhLkVudGl0eVR5cGUuTmFtZS5yZXBsYWNlKC8gL2csICdfJyldKCkuPCU9bU5hbWUlPih2KSk7DQogICAgICAgICAgICAgICAgICAgIGlmKCF2LkVudGl0eVZhbHVlcyl7DQogICAgICAgICAgICAgICAgICAgICAgICA8JT13YXJuKCklPiJlbXB0eSB2YWx1ZXMgZm9yICIgKyBlYS5OYW1lLCB2KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB2ID0gdi48JT1tTmFtZSU+P3YuPCU9bU5hbWUlPigpOm5ldyA8JT1zY29wZSU+W2VhLkVudGl0eVR5cGUuTmFtZS5yZXBsYWNlKC8gL2csICdfJyldKCkuPCU9bU5hbWUlPih2KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpc1twXSh2KTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICB0aGlzLlZhbHVlRW50aXRpZXMuZmlsdGVyKHZlID0+IHZlLkVudGl0eUF0dHJpYnV0ZSkuZm9yRWFjaCh2ZSA9PiB7DQogICAgICAgICAgICAgICAgdmFyIHRhID0gPCU9c2NvcGUlPi5FbnRpdHlBdHRyaWJ1dGVzLmZpbmQoZWEgPT4gZWEuSWQ9PXZlLkVudGl0eUF0dHJpYnV0ZS5JZCk7DQogICAgICAgICAgICAgICAgaWYoIXRhKSByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB2YXIgdGFOYW1lID0gdGEuRW50aXR5Q2xhc3MuUGx1cmFsLnJlcGxhY2UoLyAvZywgJ18nKTsNCg0KICAgICAgICAgICAgICAgIGxldCB2ID0gdmUuRW50aXR5T2JqZWN0Ow0KICAgICAgICAgICAgICAgIGlmKHYpew0KICAgICAgICAgICAgICAgICAgICB2ID0gdi48JT1tTmFtZSU+P3YuPCU9bU5hbWUlPigpOm5ldyA8JT1zY29wZSU+W3RhLkVudGl0eVR5cGUuTmFtZS5yZXBsYWNlKC8gL2csICdfJyldKCkuPCU9bU5hbWUlPih2KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpc1t0YS5OYW1lLnJlcGxhY2UoLyAvZywgIl8iKSArICJfIiArIHRhTmFtZV0odik7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdGhpczsNCiAgICB9DQogICAgDQogICAgPCU9bU5hbWU9J192YWx1ZUNsYXNzJyU+KCl7DQogICAgICAgIGxldCBfY2xhc3MgPSB7QWN0aXZlOiB0cnVlfTsNCiAgICAgICAgaWYodGhpcy5FbnRpdHlDbGFzcy5FbnRpdHlNb2R1bGUpew0KICAgICAgICAgICAgX2NsYXNzLkVudGl0eU1vZHVsZSA9IHRoaXMuRW50aXR5Q2xhc3MuRW50aXR5TW9kdWxlOw0KICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgIF9jbGFzcyA9IHsNCiAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgQ29tcGFueToge0FjdGl2ZTogdHJ1ZSwgRW5hYmxlZDogdHJ1ZSwgRW50aXR5Q2xhc3NlczogW3RoaXMuRW50aXR5Q2xhc3NdfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gX2NsYXNzOw0KICAgIH0NCg0KICAgIDwlPW1OYW1lPSdfdG9YTUwnJT4oKXsNCiAgICAgICAgLy8gYW4gb3ZlcmxvYWQgb2YgdGhlIHNyLl90b1hNTA0KICAgICAgICBsZXQgcmV0ID0ge3htbDogYGB9Ow0KICAgICAgICByZXQgPSB0aGlzLl9fZXhwb3J0KHJldCwgew0KICAgICAgICAgICAgSWQ6IChvYmosIGVhQ29kZSwgdikgPT4gcmV0LnhtbCArPSBgPCR7dGhpcy5fX2NvbmZpZygnaWRGaWVsZCcpfHwnSWQnfT4ke3Z9PC8ke3RoaXMuX19jb25maWcoJ2lkRmllbGQnKXx8J0lkJ30+YCwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgIjwlPW5OYW1lKGVhKSU+IjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgcmV0LnhtbCArPSBgPCR7ZWFDb2RlfT5gOw0KICAgICAgICA8JSBpZihlYS5FbnRpdHlUeXBlKXslPg0KICAgICAgICAgICAgICAgIHJldC54bWwgKz0gdj92LjwlPW1OYW1lJT4oKTpudWxsOw0KICAgICAgICA8JSB9ZWxzZXslPg0KICAgICAgICAgICAgICAgIHJldC54bWwgKz0gYDwhW0NEQVRBWyR7dn1dXT5gOw0KICAgICAgICA8JSB9JT4NCiAgICAgICAgICAgICAgICByZXQueG1sICs9IGA8LyR7ZWFDb2RlfT5gOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICByZXQueG1sICs9IGA8JHtlYUNvZGV9PmAgKyB2Lm1hcChfdiA9PiAnPE9iamVjdD4nICsgX3YuPCU9bU5hbWUlPigpICsgIjwvT2JqZWN0PiIpLmpvaW4oJycpICsgYDwvJHtlYUNvZGV9PmA7DQogICAgICAgICAgICB9LA0KICAgIDwlIH0pJT4NCiAgICAgICAgfSwgIjwlPW1OYW1lJT4iKTsNCg0KICAgICAgICA8JT1sb2coKSU+cmV0KTsNCiAgICAgICAgcmV0dXJuIHJldC54bWw7DQogICAgfQ0KDQogICAgPCU9bU5hbWU9J19idWlsZFRoaXMnJT4oZGVwdGg9MSl7DQogICAgICAgIC8vIGNhbmRpZGF0ZSBmb3IgX19leHBvcnQNCiAgICAgICAgdmFyIHJldCA9IFt7DQogICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICBFbnRpdHlBdHRyaWJ1dGU6IHtBY3RpdmU6IHRydWUsIEVudGl0eUNsYXNzOiB0aGlzLl92YWx1ZUNsYXNzKCl9LA0KICAgICAgICAgICAgRW50aXR5T2JqZWN0OiB0aGlzLnRvRW50aXR5T2JqZWN0KHRydWUpLA0KICAgICAgICB9XTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGVwdGg7IGkrKykgew0KICAgICAgICAgICAgcmV0LnB1c2goew0KICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICBFbnRpdHlPYmplY3Q6IHsNCiAgICAgICAgICAgICAgICAgICAgQWN0aXZlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBWYWx1ZUVudGl0aWVzOiBbcmV0W2kgLSAxXV0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgICANCjwlIGMuVHlwZWRBdHRyaWJ1dGVzLmZpbHRlcih0YSA9PiAhdGEuRW50aXR5TWV0aG9kKS5mb3JFYWNoKHRhID0+IHslPg0KICAgICAgICBpZihkZXB0aD4xKXsNCiAgICAgICAgICAgIGxldCB2ID0gbmV3IDwlPXNjb3BlJT4uPCU9bk5hbWUodGEuRW50aXR5Q2xhc3MsIHRydWUpJT4oKS48JT1uTmFtZSh0YSklPih0aGlzKTsNCiAgICAgICAgICAgIHJldC5wdXNoKHsNCiAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgRW50aXR5T2JqZWN0OiB2P3YudG9FbnRpdHlPYmplY3QodHJ1ZSk6bnVsbCwNCiAgICAgICAgICAgIH0pOw0KICAgIA0KICAgICAgICAgICAgcmV0LnB1c2goew0KICAgICAgICAgICAgICAgIEVudGl0eU9iamVjdDogew0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIFZhbHVlRW50aXRpZXM6IFt7DQogICAgICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBFbnRpdHlPYmplY3Q6IHY/di50b0VudGl0eU9iamVjdCh0cnVlKTpudWxsLA0KICAgICAgICAgICAgICAgICAgICB9XQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQo8JSB9KSU+DQogICAgICAgIA0KICAgICAgICByZXR1cm4gcmV0Ow0KICAgIH0NCiAgICANCiAgICA8JT1tTmFtZT0ndG9FbnRpdHlPYmplY3QnJT4oYlF1ZXJ5LCBiVHlwZWRBdHRyaWJ1dGVzKSB7DQogICAgICAgIGxldCByZXQgPSB7QWN0aXZlOiB0cnVlLCBFbnRpdHlDbGFzczogdGhpcy5fdmFsdWVDbGFzcygpLCBFbnRpdHlWYWx1ZXM6IFtdLCBWYWx1ZUVudGl0aWVzOiBbXX07DQogICAgICAgIGlmKCFiUXVlcnkpIHJldC5EYXRlID0gdGhpcy5zZXJ2ZXJEYXRlKCk7IA0KDQogICAgICAgIHJldCA9IHRoaXMuX19leHBvcnQocmV0LCB7DQogICAgICAgICAgICBGdWxsOiAhYlF1ZXJ5LA0KICAgICAgICAgICAgSWQ6IChvYmosIGVhQ29kZSwgdikgPT4gb2JqLklkID0gdiwNCiAgICA8JSBjLkVudGl0eUF0dHJpYnV0ZXMuZmlsdGVyKGVhID0+ICFlYS5FbnRpdHlNZXRob2QpLmZvckVhY2goZWEgPT4geyAlPg0KICAgICAgICAgICAgIjwlPW5OYW1lKGVhKSU+IjogKG9iaiwgZWFDb2RlLCB2KSA9PiB7DQogICAgICAgICAgICAgICAgbGV0IGV2ID0gew0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eUF0dHJpYnV0ZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IDwlPXNjb3BlJT4uRW50aXR5Q2xhc3Nlcy5maW5kKGMgPT4gYy5JZCA9IHRoaXMuRW50aXR5Q2xhc3MuSWQpLkVudGl0eUF0dHJpYnV0ZXMuZmluZChlYSA9PiBlYS5OYW1lPT0nPCU9ZWEuTmFtZSU+JykuSWQsDQogICAgICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiAiPCU9ZWEuTmFtZSU+IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIEVudGl0eUNsYXNzOiB0aGlzLl92YWx1ZUNsYXNzKCksDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIE9QRVJBVE9SUzoge30sDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgPCUgaWYoZWEuRW50aXR5VHlwZSl7JT4NCiAgICAgICAgICAgICAgICBpZih2KXsNCiAgICAgICAgICAgICAgICAgICAgZXYuT2JqZWN0VmFsdWUgPSB2LjwlPW1OYW1lJT4oYlF1ZXJ5LCBiVHlwZWRBdHRyaWJ1dGVzKTsNCiAgICAgICAgICAgICAgICAgICAgZXYuT1BFUkFUT1JTLk9iamVjdFZhbHVlID0gdGhpcy5fPCU9bk5hbWUoZWEpJT5fY29vcDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIDwlIH1lbHNleyU+DQogICAgICAgICAgICAgICAgZXYuPCU9X0ZyRU1ELl9hdHRyKGVhKSU+VmFsdWUgPSB2Ow0KICAgICAgICAgICAgICAgIGV2Lk9QRVJBVE9SUy48JT1fRnJFTUQuX2F0dHIoZWEpJT5WYWx1ZSA9IHRoaXMuXzwlPW5OYW1lKGVhKSU+X2Nvb3A7DQogICAgICAgIDwlIH0lPg0KICAgICAgICAgICAgICAgIG9iai5WYWx1ZUVudGl0aWVzLnB1c2goZXYpOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KTsgJT4NCiAgICA8JSBjLlR5cGVkQXR0cmlidXRlcy5mb3JFYWNoKHRhID0+IHsgbGV0IHRhTmFtZSA9IG5OYW1lKHRhKSArICdfJyArIHRhLkVudGl0eUNsYXNzLlBsdXJhbC5yZXBsYWNlKC8gL2csICdfJyk7JT4NCiAgICAgICAgICAgIDwlPXRhTmFtZSU+OiAob2JqLCBlYUNvZGUsIHYpID0+IHsNCiAgICAgICAgICAgICAgICBpZih2ICYmIGJUeXBlZEF0dHJpYnV0ZXMpIG9iai5FbnRpdHlWYWx1ZXMucHVzaCh2Lm1hcChfdiA9PiAoew0KICAgICAgICAgICAgICAgICAgICBBY3RpdmU6IHRydWUsDQogICAgICAgICAgICAgICAgICAgIEVudGl0eUF0dHJpYnV0ZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgSWQ6ICc8JT10YS5JZCU+JywNCiAgICAgICAgICAgICAgICAgICAgICAgIEFjdGl2ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWU6ICI8JT10YS5OYW1lJT4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgRW50aXR5Q2xhc3M6IG5ldyA8JT1zY29wZSU+LjwlPW5OYW1lKHRhLkVudGl0eUNsYXNzLCB0cnVlKSU+KCkuX3ZhbHVlQ2xhc3MoKSwNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgT2JqZWN0VmFsdWU6IF92LjwlPW1OYW1lJT4oYlF1ZXJ5LCBiVHlwZWRBdHRyaWJ1dGVzKSwNCiAgICAgICAgICAgICAgICB9KSkpOw0KICAgICAgICAgICAgfSwNCiAgICA8JSB9KSU+DQogICAgICAgIH0sICI8JT1tTmFtZSU+Iik7DQoNCiAgICAgICAgPCU9bG9nKCklPnJldCk7DQogICAgICAgIHJldHVybiByZXQ7DQogICAgfQ0KPCUgfSAlPg0KfQ0K",
	"storedMethod": null,
	"__keys": ["name"],
	"active": true,
	"enabled": true,
	"__trMap": []
}