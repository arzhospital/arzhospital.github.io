{
	"Id": "77b215fa04b7fa28c9ffb43b413f76bd5a8ec3e9",
	"after": null,
	"async": null,
	"before": null,
	"date": "undefined",
	"name": "GY_MONOPOLY",
	"order": null,
	"remark": "dW5kZWZpbmVk",
	"script": "[{
	Name: "Spiel",
	EntityAttributes: [{
		Name: "name",
		IsString: true,
	}, {
		Name: "rundenLimit",
		IsInt: true,
	}, {
		Name: "aktuellerSpieler",
		EntityType: {
			Name: "Spieler"
		}
	}, {
		Name: "spielbrett",
		EntityType: {
			Name: "Spielbrett"
		}
	}],
	EntityMethods: [{
		Name: "wuerfeln",
		Author: "Christina",
		MethodParameters: [],
		Remark: "gibt 0 zurÃÂ¼ck, falls das Rundenlimit erreicht ist oder der aktuelle Spieler kein Geld mehr hat, verringert das rundenLimit, wenn der aktuelle Spieler die Nummer 1 hat, laesst den aktuellen Spieler eine zufÃÂ¤llige Anzahl an Schritten zwischen 1 und 6 gehen, setzt den naechsten Spieler als aktuellen Spieler vom Brett",
		Java: `
		if (this.getRundenLimit() <= 0 || aktuellerSpieler.getGeld() < 0) {
		    return 0;
		}
		if(this.getAktuellerSpieler().getNummer() == 1) {
		    this.setRundenLimit(this.getRundenLimit() - 1);
		}
		
		int schritte = new java.util.Random().nextInt(1,6);
		this.getAktuellerSpieler().gehen(schritte);
		this.setAktuellerSpieler(this.getAktuellerSpieler().getNaechsterSpieler());
		return schritte;
		`,
		ResponseAttribute: {
			IsInt: true,
		}
	}, {
		Name: "Spiel",
		Order: 1,
		Author: "Christina",
		MethodParameters: [{
			Name: "spieler",
			IsArray: true,
			EntityType: {
				Name: "Spieler"
			}
		}],
		Java: `
		this.setRundenLimit(50);
		this.setName("Spiel 1");
		
		Spielbrett sb = new Spielbrett();
		sb.setName("Spielbrett 1");
		
		sb.setStartfeld((GoFeld)new GoFeld().setName("GO").setMiete(-200)); //neues GoFeld erstellen und als Startfeld des Spielbretts setzen
		//fuer jedes Spielfeld das passende naechste Feld erstellen und zuweisen
		sb.getStartfeld().setNaechstesFeld(
            new Strasse().setKaufPreis(60).setMiete(10).setName("Mediterranian Avenue").setFarbe("cyan").setNaechstesFeld(
                new Strasse().setKaufPreis(60).setMiete(10).setName("Baltic Avenue").setFarbe("cyan").setNaechstesFeld(
                    new Kiste().setName("Chest").setMiete(-10).setNaechstesFeld(
                        new Strasse().setKaufPreis(60).setMiete(10).setName("Atlantic Avenue").setFarbe("cyan").setNaechstesFeld(
                            new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                new Strasse().setKaufPreis(100).setMiete(20).setName("Oriental Avenue").setFarbe("grau").setNaechstesFeld(
                                    new Kiste().setName("Chest").setMiete(-15).setNaechstesFeld(
                                        new Strasse().setKaufPreis(100).setMiete(20).setName("Vermont Avenue").setFarbe("grau").setNaechstesFeld(
                                            new Strasse().setKaufPreis(100).setMiete(20).setName("Conneticut Avenue").setFarbe("grau").setNaechstesFeld(
                                                new Gefaengnis().setName("In jail").setNaechstesFeld(
                                                    new Strasse().setKaufPreis(140).setMiete(40).setName("St. Charles Place").setFarbe("magenta").setNaechstesFeld(
                                                        new Strasse().setKaufPreis(140).setMiete(40).setName("States Avenue").setFarbe("magenta").setNaechstesFeld(
                                                            new Kiste().setName("Chest").setMiete(-20).setNaechstesFeld(
                                                                new Strasse().setKaufPreis(140).setMiete(40).setName("Virginia Avenue").setFarbe("magenta").setNaechstesFeld(
                                                                    new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                                                        new Strasse().setKaufPreis(180).setMiete(60).setName("St. James Place").setFarbe("orange").setNaechstesFeld(
                                                                            new Kiste().setName("Chest").setMiete(-25).setNaechstesFeld(
                                                                                new Strasse().setKaufPreis(180).setMiete(60).setName("Tennessee Avenue").setFarbe("orange").setNaechstesFeld(
                                                                                    new Strasse().setKaufPreis(180).setMiete(60).setName("New York Avenue").setFarbe("orange").setNaechstesFeld(
                                                                                        new Parkplatz().setName("Free Parking").setNaechstesFeld(
                                                                                            new Strasse().setKaufPreis(220).setMiete(80).setName("Kentucky Avenue").setFarbe("rot").setNaechstesFeld(
                                                                                                new Strasse().setKaufPreis(220).setMiete(80).setName("Indiana Avenue").setFarbe("rot").setNaechstesFeld(
                                                                                                    new Kiste().setName("Chest").setMiete(-30).setNaechstesFeld(
                                                                                                        new Strasse().setKaufPreis(220).setMiete(80).setName("Illinois Avenue").setFarbe("rot").setNaechstesFeld(
                                                                                                            new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                                                                                                new Strasse().setKaufPreis(260).setMiete(100).setName("Moon Street").setFarbe("gelb").setNaechstesFeld(
                                                                                                                    new Kiste().setName("Chest").setMiete(-35).setNaechstesFeld(
                                                                                                                        new Strasse().setKaufPreis(260).setMiete(100).setName("Ventor Avenue").setFarbe("gelb").setNaechstesFeld(
                                                                                                                            new Strasse().setKaufPreis(260).setMiete(100).setName("Marvin Gardens").setFarbe("gelb").setNaechstesFeld(
                                                                                                                                new Polizei().setName("Go to jail!").setNaechstesFeld(
                                                                                                                                    new Strasse().setKaufPreis(300).setMiete(120).setName("Pacific Avenue").setFarbe("gruen").setNaechstesFeld(
                                                                                                                                        new Strasse().setKaufPreis(300).setMiete(120).setName("North Carolina Avenue").setFarbe("gruen").setNaechstesFeld(
                                                                                                                                            new Kiste().setName("Chest").setMiete(-40).setNaechstesFeld(
                                                                                                                                                new Strasse().setKaufPreis(300).setMiete(120).setName("Pennsylvania Avenue").setFarbe("gruen").setNaechstesFeld(
                                                                                                                                                    new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                                                                                                                                        new Strasse().setKaufPreis(350).setMiete(140).setName("Park Place").setFarbe("hellgelb").setNaechstesFeld(
                                                                                                                                                            new Kiste().setName("Chest").setMiete(-50).setNaechstesFeld(
                                                                                                                                                                new Strasse().setKaufPreis(400).setMiete(140).setName("Boardwalk").setFarbe("hellgelb").setNaechstesFeld(
                                                                                                                                                                    new Strasse().setKaufPreis(450).setMiete(200).setName("LaLaLand").setFarbe("hellgelb").setNaechstesFeld(sb.getStartfeld())
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );
		
		//alle Felder in der richtigen Reihenfolge nummerieren
		sb.getStartfeld().getNaechstesFeld().setNummer(2);
		for(Spielfeld spFeld = sb.getStartfeld().getNaechstesFeld(); spFeld!=sb.getStartfeld(); spFeld = spFeld.getNaechstesFeld()){
		    spFeld.getNaechstesFeld().setNummer(spFeld.getNummer()+1);
		}
		sb.getStartfeld().setNummer(1);
		

		this.setSpielbrett(sb); //dem Spiel das Spielbrett zuweisen
		
        // z.B.: spieler=[SP("Timo", "hellgelb"), SP("Jenny", "rot"), SP("Lina", "gruen")]
        Spieler letzterSpieler = null;
        
        //forEach aus der ArrayList spieler (wird beim Erstellen des Spiels dem Konstruktor als Parameter uebergeben)
		for(Spieler naechsterSpieler : spieler){
		
    		// Timo:  ls=null;  ns=Timo;  this.as=Timo; => ls=Timo
    		// Jenny: ls=Timo;  ns=Jenny; this.as=Timo; Timo.ns=Jenny; => ls=Jenny
    		// Lina:  ls=Jenny; ns=Lina;  this.as=Timo; Jenny.ns=Lina; => ls=Lina

		    naechsterSpieler.setSpielfeld(sb.getStartfeld());
		    
		    if(this.getAktuellerSpieler()==null){
		        naechsterSpieler.setNummer(1);
		        this.setAktuellerSpieler(naechsterSpieler);
		    }
		    
		    if(letzterSpieler!=null){
                naechsterSpieler.setNummer(letzterSpieler.getNummer()+1);
		        letzterSpieler.setNaechsterSpieler(naechsterSpieler);
		    }
		    
		    letzterSpieler = naechsterSpieler;
        }
        
		// Lina.ns=this.as
        letzterSpieler.setNaechsterSpieler(this.getAktuellerSpieler());
		
		
		`,
	}]
}, {
	Name: "Spieler",
	EntityAttributes: [{
		Name: "name",
		IsString: true,
	}, {
		Name: "nummer",
		IsInt: true,
	}, {
		Name: "geld",
		IsInt: true,
	}, {
		Name: "verhaftet",
		IsBool: true,
	}, {
		Name: "farbe",
		IsString: true,
	}, {
		Name: "aktuelleRunde",
		IsInt: true,
	}, {
		Name: "spielfeld",
		EntityType: {
			Name: "Spielfeld"
		}
	}, {
		Name: "naechsterSpieler",
		EntityType: {
			Name: "Spieler"
		}
	}],
	EntityMethods: [{
		Name: "Spieler",
		Order: 1,
		Author: "Franzi",
		MethodParameters: [{
			Name: "name",
			IsString: true,
		}, {
			Name: "farbe",
			IsString: true,
		}],
		Java: `
		this.setName(name).setFarbe(farbe).setGeld(2000);
		`,
	}, {
		Name: "gehen",
		Order: 2,
		Author: "Hanna",
		Remark: "Einen Schritt nach vorne gehen, bis die gewuerfelte Zahl erreicht ist",
		MethodParameters: [{
			Name: "schritte",
			IsInt: true,
		}],
		Java: `
        if (this.getVerhaftet()) {
            this.setVerhaftet(false); //falls ein Spieler verhaftet ist, wird er als nicht verhaftet gesetzt, damit er in der naechsten Runde wieder spielen kann
		} else {
            for (int i = 0; i < schritte; i++){
                this.setSpielfeld(this.getSpielfeld().getNaechstesFeld()); //versetzt den Spieler ein Feld nach vorne, solange die Anzahl der im Parameter ÃÂ¼bergebenen Schritte noch nicht erreicht ist
            }
		}
		this.setAktuelleRunde(this.getAktuelleRunde() + 1);
	    `
	}, {
		Name: "gekaufteFelder",
		Order: 3,
		Author: "Johanna",
		Remark: "gibt eine Liste an allen Feldern zurÃÂ¼ck, die einem Spieler gehÃÂ¶ren",
		MethodParameters: [],
		Java: `
		java.util.ArrayList<Spielfeld> gekaufteListe = new java.util.ArrayList<Spielfeld>();
		if(this.getSpielfeld().getBesitzer()==this){
		    gekaufteListe.add(this.getSpielfeld()); //fuegt das jetzige Spielfeld  zu der ArrayList hinzu, falls es dem Spieler gehoert
		}
		
		for(Spielfeld sp = this.getSpielfeld().getNaechstesFeld(); sp!=this.getSpielfeld(); sp = sp.getNaechstesFeld()){
		    if(sp.getBesitzer()==this){
		        gekaufteListe.add(sp); //fuegt ab dem naechsten Spielfeld alle Spielfelder zu der Liste der gekauften Felder hinzu, die dem Spieler gehÃÂ¶ren
		    }
		}
		
		//sortiert die ArrayList der gekauften Felder nach ihrer Position auf dem Spielfeld
		java.util.Collections.sort(gekaufteListe, new java.util.Comparator<Spielfeld>() {
            @Override
            /* */
            public int compare(Spielfeld z1, Spielfeld z2) {
                if (z1.getNummer() > z2.getNummer())
                    return 1;
                if (z1.getNummer() < z2.getNummer())
                    return -1;
                return 0;
            }
        });
		return gekaufteListe;
	    `,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spielfeld"
			}
		}
	}]
}, {
	Name: "Spielbrett",
	EntityAttributes: [{
		Name: "name",
		IsString: true,
		IsUnique: true,
	}, {
		Name: "brettBreite",
		IsInt: true
	}, {
		Name: "xPosition",
		IsInt: true
	}, {
		Name: "yPosition",
		IsInt: true
	}, {
		Name: "startfeld",
		EntityType: {
			Name: "GoFeld"
		}
	}],
	EntityMethods: [{
		Name: "feldXPosition",
		Author: "Christina",
		Remark: "",
		MethodParameters: [{
			Name: "spielFeld",
			EntityType: {
				Name: "Spielfeld"
			}
		}],
		Java: `
		if(spielFeld.getNummer()<11){
            return xPosition + brettBreite - (spielFeld.getNummer()+1)*brettBreite/13;
		}else if(spielFeld.getNummer()<21){
		    return xPosition;
		}else if(spielFeld.getNummer()<31){
		    return xPosition + (spielFeld.getNummer()-(spielFeld.getNummer()==21?21:20))*brettBreite/13;
		}else if(spielFeld.getNummer()<41){
		    return xPosition + brettBreite - 2*brettBreite/13;
		}else{
		    return 0;
		}
		`,
		ResponseAttribute: {
			IsInt: true
		}
	}, {
		Name: "feldYPosition",
		Author: "Christina",
		MethodParameters: [{
			Name: "spielFeld",
			EntityType: {
				Name: "Spielfeld"
			}
		}],
		Java: `
		if(spielFeld.getNummer()<11){
            return yPosition + brettBreite - 2*(brettBreite/13);
		}else if(spielFeld.getNummer()<21){
		    return yPosition + brettBreite - 2*(brettBreite/13) - (spielFeld.getNummer()-11)*brettBreite/13;
		}else if(spielFeld.getNummer()<31){
		    return yPosition;
		}else if(spielFeld.getNummer()<41){
		    return yPosition + (spielFeld.getNummer()-(spielFeld.getNummer()==31?31:30))*brettBreite/13;
		}else{
		    return 0;
		}
		`,
		ResponseAttribute: {
			IsInt: true
		}
	}]
}, {
	Name: "Spielfeld",
	IsAbstract: true,
	EntityAttributes: [{
		Name: "name",
		IsString: true
	}, {
		Name: "nummer",
		IsInt: true
	}, {
		Name: "miete",
		IsInt: true
	}, {
		Name: "farbe",
		IsString: true,
	}, {
		Name: "naechstesFeld",
		EntityType: {
			Name: "Spielfeld"
		}
	}, {
		Name: "besitzer",
		EntityType: {
			Name: "Spieler"
		}
	}],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Idil",
		MethodParameters: [],
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Eszter",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `return;`,
	}, {
		Name: "nameInEuro",
		Author: "Christina",
		MethodParameters: [],
		Java: `
		if(this.getMiete() != 0) {
		    return this.getName() + " " + (-1)*this.getMiete() + "Euro";
		}
		return this.getName();
	    `,
		ResponseAttribute: {
			IsString: true
		}
	}],
}, {
	Name: "GoFeld",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "GoFeld",
		Author: "Franzi",
		Java: `this.setName("GO");`,
	}, {
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Hanna",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Kiste",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Eszter",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Johanna",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Polizei",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Franzi",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			Author: "Johanna",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setVerhaftet(true);
		    for(Spielfeld sf = this.getNaechstesFeld(); !(sf instanceof Gefaengnis); sf = sf.getNaechstesFeld()){
		        spieler.setSpielfeld(sf.getNaechstesFeld());
		    }
		    
		`
	}],
}, {
	Name: "Parkplatz",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: ``,
	}],
}, {
	Name: "Wasser",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}],
}, {
	Name: "Lampe",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}],
}, {
	Name: "Gefaengnis",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Hanna",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    
		`
	}],
}, {
	Name: "Ereignisfeld",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Idil",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Hanna",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    this.setMiete(10*(new java.util.Random().nextInt(-50,50) / 10));
		    
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Bahnhof",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Strasse",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [{
		Name: "kaufPreis",
		IsInt: true
	}],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			Author: "Christina",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    aktionenListe.forEach(ak -> {
		        switch(ak){
		            case "kaufen":
		                spieler.setGeld(spieler.getGeld() - this.getKaufPreis());
		                this.setBesitzer(spieler);
		                break;
		            case "miete":
		                spieler.setGeld(spieler.getGeld() - this.getMiete());
		                this.getBesitzer().setGeld(this.getBesitzer().getGeld()+this.getMiete());
		                break;
		        }
		    });
		    
		`
	}, {
		Name: "nameInEuro",
		Author: "Eszter",
		MethodParameters: [],
		Java: `
		if(this.getKaufPreis() != 0) {
		    return this.getName() + " " + (-1)*this.getKaufPreis() + "Euro";
		}
		return this.getName();
	    `,
		ResponseAttribute: {
			IsString: true
		}
	}],
}, {
	Name: "Steuern",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}]",
	"Name": "R1lfTU9OT1BPTFk=",
	"Script": "[{
	Name: "Spiel",
	EntityAttributes: [{
		Name: "name",
		IsString: true,
	}, {
		Name: "rundenLimit",
		IsInt: true,
	}, {
		Name: "aktuellerSpieler",
		EntityType: {
			Name: "Spieler"
		}
	}, {
		Name: "spielbrett",
		EntityType: {
			Name: "Spielbrett"
		}
	}],
	EntityMethods: [{
		Name: "wuerfeln",
		Author: "Christina",
		MethodParameters: [],
		Remark: "gibt 0 zurÃÂ¼ck, falls das Rundenlimit erreicht ist oder der aktuelle Spieler kein Geld mehr hat, verringert das rundenLimit, wenn der aktuelle Spieler die Nummer 1 hat, laesst den aktuellen Spieler eine zufÃÂ¤llige Anzahl an Schritten zwischen 1 und 6 gehen, setzt den naechsten Spieler als aktuellen Spieler vom Brett",
		Java: `
		if (this.getRundenLimit() <= 0 || aktuellerSpieler.getGeld() < 0) {
		    return 0;
		}
		if(this.getAktuellerSpieler().getNummer() == 1) {
		    this.setRundenLimit(this.getRundenLimit() - 1);
		}
		
		int schritte = new java.util.Random().nextInt(1,6);
		this.getAktuellerSpieler().gehen(schritte);
		this.setAktuellerSpieler(this.getAktuellerSpieler().getNaechsterSpieler());
		return schritte;
		`,
		ResponseAttribute: {
			IsInt: true,
		}
	}, {
		Name: "Spiel",
		Order: 1,
		Author: "Christina",
		MethodParameters: [{
			Name: "spieler",
			IsArray: true,
			EntityType: {
				Name: "Spieler"
			}
		}],
		Java: `
		this.setRundenLimit(50);
		this.setName("Spiel 1");
		
		Spielbrett sb = new Spielbrett();
		sb.setName("Spielbrett 1");
		
		sb.setStartfeld((GoFeld)new GoFeld().setName("GO").setMiete(-200)); //neues GoFeld erstellen und als Startfeld des Spielbretts setzen
		//fuer jedes Spielfeld das passende naechste Feld erstellen und zuweisen
		sb.getStartfeld().setNaechstesFeld(
            new Strasse().setKaufPreis(60).setMiete(10).setName("Mediterranian Avenue").setFarbe("cyan").setNaechstesFeld(
                new Strasse().setKaufPreis(60).setMiete(10).setName("Baltic Avenue").setFarbe("cyan").setNaechstesFeld(
                    new Kiste().setName("Chest").setMiete(-10).setNaechstesFeld(
                        new Strasse().setKaufPreis(60).setMiete(10).setName("Atlantic Avenue").setFarbe("cyan").setNaechstesFeld(
                            new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                new Strasse().setKaufPreis(100).setMiete(20).setName("Oriental Avenue").setFarbe("grau").setNaechstesFeld(
                                    new Kiste().setName("Chest").setMiete(-15).setNaechstesFeld(
                                        new Strasse().setKaufPreis(100).setMiete(20).setName("Vermont Avenue").setFarbe("grau").setNaechstesFeld(
                                            new Strasse().setKaufPreis(100).setMiete(20).setName("Conneticut Avenue").setFarbe("grau").setNaechstesFeld(
                                                new Gefaengnis().setName("In jail").setNaechstesFeld(
                                                    new Strasse().setKaufPreis(140).setMiete(40).setName("St. Charles Place").setFarbe("magenta").setNaechstesFeld(
                                                        new Strasse().setKaufPreis(140).setMiete(40).setName("States Avenue").setFarbe("magenta").setNaechstesFeld(
                                                            new Kiste().setName("Chest").setMiete(-20).setNaechstesFeld(
                                                                new Strasse().setKaufPreis(140).setMiete(40).setName("Virginia Avenue").setFarbe("magenta").setNaechstesFeld(
                                                                    new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                                                        new Strasse().setKaufPreis(180).setMiete(60).setName("St. James Place").setFarbe("orange").setNaechstesFeld(
                                                                            new Kiste().setName("Chest").setMiete(-25).setNaechstesFeld(
                                                                                new Strasse().setKaufPreis(180).setMiete(60).setName("Tennessee Avenue").setFarbe("orange").setNaechstesFeld(
                                                                                    new Strasse().setKaufPreis(180).setMiete(60).setName("New York Avenue").setFarbe("orange").setNaechstesFeld(
                                                                                        new Parkplatz().setName("Free Parking").setNaechstesFeld(
                                                                                            new Strasse().setKaufPreis(220).setMiete(80).setName("Kentucky Avenue").setFarbe("rot").setNaechstesFeld(
                                                                                                new Strasse().setKaufPreis(220).setMiete(80).setName("Indiana Avenue").setFarbe("rot").setNaechstesFeld(
                                                                                                    new Kiste().setName("Chest").setMiete(-30).setNaechstesFeld(
                                                                                                        new Strasse().setKaufPreis(220).setMiete(80).setName("Illinois Avenue").setFarbe("rot").setNaechstesFeld(
                                                                                                            new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                                                                                                new Strasse().setKaufPreis(260).setMiete(100).setName("Moon Street").setFarbe("gelb").setNaechstesFeld(
                                                                                                                    new Kiste().setName("Chest").setMiete(-35).setNaechstesFeld(
                                                                                                                        new Strasse().setKaufPreis(260).setMiete(100).setName("Ventor Avenue").setFarbe("gelb").setNaechstesFeld(
                                                                                                                            new Strasse().setKaufPreis(260).setMiete(100).setName("Marvin Gardens").setFarbe("gelb").setNaechstesFeld(
                                                                                                                                new Polizei().setName("Go to jail!").setNaechstesFeld(
                                                                                                                                    new Strasse().setKaufPreis(300).setMiete(120).setName("Pacific Avenue").setFarbe("gruen").setNaechstesFeld(
                                                                                                                                        new Strasse().setKaufPreis(300).setMiete(120).setName("North Carolina Avenue").setFarbe("gruen").setNaechstesFeld(
                                                                                                                                            new Kiste().setName("Chest").setMiete(-40).setNaechstesFeld(
                                                                                                                                                new Strasse().setKaufPreis(300).setMiete(120).setName("Pennsylvania Avenue").setFarbe("gruen").setNaechstesFeld(
                                                                                                                                                    new Ereignisfeld().setName("Chance").setNaechstesFeld(
                                                                                                                                                        new Strasse().setKaufPreis(350).setMiete(140).setName("Park Place").setFarbe("hellgelb").setNaechstesFeld(
                                                                                                                                                            new Kiste().setName("Chest").setMiete(-50).setNaechstesFeld(
                                                                                                                                                                new Strasse().setKaufPreis(400).setMiete(140).setName("Boardwalk").setFarbe("hellgelb").setNaechstesFeld(
                                                                                                                                                                    new Strasse().setKaufPreis(450).setMiete(200).setName("LaLaLand").setFarbe("hellgelb").setNaechstesFeld(sb.getStartfeld())
                                                                                                                                                                )
                                                                                                                                                            )
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                    )
                                                                                                                                )
                                                                                                                            )
                                                                                                                        )
                                                                                                                    )
                                                                                                                )
                                                                                                            )
                                                                                                        )
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        )
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );
		
		//alle Felder in der richtigen Reihenfolge nummerieren
		sb.getStartfeld().getNaechstesFeld().setNummer(2);
		for(Spielfeld spFeld = sb.getStartfeld().getNaechstesFeld(); spFeld!=sb.getStartfeld(); spFeld = spFeld.getNaechstesFeld()){
		    spFeld.getNaechstesFeld().setNummer(spFeld.getNummer()+1);
		}
		sb.getStartfeld().setNummer(1);
		

		this.setSpielbrett(sb); //dem Spiel das Spielbrett zuweisen
		
        // z.B.: spieler=[SP("Timo", "hellgelb"), SP("Jenny", "rot"), SP("Lina", "gruen")]
        Spieler letzterSpieler = null;
        
        //forEach aus der ArrayList spieler (wird beim Erstellen des Spiels dem Konstruktor als Parameter uebergeben)
		for(Spieler naechsterSpieler : spieler){
		
    		// Timo:  ls=null;  ns=Timo;  this.as=Timo; => ls=Timo
    		// Jenny: ls=Timo;  ns=Jenny; this.as=Timo; Timo.ns=Jenny; => ls=Jenny
    		// Lina:  ls=Jenny; ns=Lina;  this.as=Timo; Jenny.ns=Lina; => ls=Lina

		    naechsterSpieler.setSpielfeld(sb.getStartfeld());
		    
		    if(this.getAktuellerSpieler()==null){
		        naechsterSpieler.setNummer(1);
		        this.setAktuellerSpieler(naechsterSpieler);
		    }
		    
		    if(letzterSpieler!=null){
                naechsterSpieler.setNummer(letzterSpieler.getNummer()+1);
		        letzterSpieler.setNaechsterSpieler(naechsterSpieler);
		    }
		    
		    letzterSpieler = naechsterSpieler;
        }
        
		// Lina.ns=this.as
        letzterSpieler.setNaechsterSpieler(this.getAktuellerSpieler());
		
		
		`,
	}]
}, {
	Name: "Spieler",
	EntityAttributes: [{
		Name: "name",
		IsString: true,
	}, {
		Name: "nummer",
		IsInt: true,
	}, {
		Name: "geld",
		IsInt: true,
	}, {
		Name: "verhaftet",
		IsBool: true,
	}, {
		Name: "farbe",
		IsString: true,
	}, {
		Name: "aktuelleRunde",
		IsInt: true,
	}, {
		Name: "spielfeld",
		EntityType: {
			Name: "Spielfeld"
		}
	}, {
		Name: "naechsterSpieler",
		EntityType: {
			Name: "Spieler"
		}
	}],
	EntityMethods: [{
		Name: "Spieler",
		Order: 1,
		Author: "Franzi",
		MethodParameters: [{
			Name: "name",
			IsString: true,
		}, {
			Name: "farbe",
			IsString: true,
		}],
		Java: `
		this.setName(name).setFarbe(farbe).setGeld(2000);
		`,
	}, {
		Name: "gehen",
		Order: 2,
		Author: "Hanna",
		Remark: "Einen Schritt nach vorne gehen, bis die gewuerfelte Zahl erreicht ist",
		MethodParameters: [{
			Name: "schritte",
			IsInt: true,
		}],
		Java: `
        if (this.getVerhaftet()) {
            this.setVerhaftet(false); //falls ein Spieler verhaftet ist, wird er als nicht verhaftet gesetzt, damit er in der naechsten Runde wieder spielen kann
		} else {
            for (int i = 0; i < schritte; i++){
                this.setSpielfeld(this.getSpielfeld().getNaechstesFeld()); //versetzt den Spieler ein Feld nach vorne, solange die Anzahl der im Parameter ÃÂ¼bergebenen Schritte noch nicht erreicht ist
            }
		}
		this.setAktuelleRunde(this.getAktuelleRunde() + 1);
	    `
	}, {
		Name: "gekaufteFelder",
		Order: 3,
		Author: "Johanna",
		Remark: "gibt eine Liste an allen Feldern zurÃÂ¼ck, die einem Spieler gehÃÂ¶ren",
		MethodParameters: [],
		Java: `
		java.util.ArrayList<Spielfeld> gekaufteListe = new java.util.ArrayList<Spielfeld>();
		if(this.getSpielfeld().getBesitzer()==this){
		    gekaufteListe.add(this.getSpielfeld()); //fuegt das jetzige Spielfeld  zu der ArrayList hinzu, falls es dem Spieler gehoert
		}
		
		for(Spielfeld sp = this.getSpielfeld().getNaechstesFeld(); sp!=this.getSpielfeld(); sp = sp.getNaechstesFeld()){
		    if(sp.getBesitzer()==this){
		        gekaufteListe.add(sp); //fuegt ab dem naechsten Spielfeld alle Spielfelder zu der Liste der gekauften Felder hinzu, die dem Spieler gehÃÂ¶ren
		    }
		}
		
		//sortiert die ArrayList der gekauften Felder nach ihrer Position auf dem Spielfeld
		java.util.Collections.sort(gekaufteListe, new java.util.Comparator<Spielfeld>() {
            @Override
            /* */
            public int compare(Spielfeld z1, Spielfeld z2) {
                if (z1.getNummer() > z2.getNummer())
                    return 1;
                if (z1.getNummer() < z2.getNummer())
                    return -1;
                return 0;
            }
        });
		return gekaufteListe;
	    `,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spielfeld"
			}
		}
	}]
}, {
	Name: "Spielbrett",
	EntityAttributes: [{
		Name: "name",
		IsString: true,
		IsUnique: true,
	}, {
		Name: "brettBreite",
		IsInt: true
	}, {
		Name: "xPosition",
		IsInt: true
	}, {
		Name: "yPosition",
		IsInt: true
	}, {
		Name: "startfeld",
		EntityType: {
			Name: "GoFeld"
		}
	}],
	EntityMethods: [{
		Name: "feldXPosition",
		Author: "Christina",
		Remark: "",
		MethodParameters: [{
			Name: "spielFeld",
			EntityType: {
				Name: "Spielfeld"
			}
		}],
		Java: `
		if(spielFeld.getNummer()<11){
            return xPosition + brettBreite - (spielFeld.getNummer()+1)*brettBreite/13;
		}else if(spielFeld.getNummer()<21){
		    return xPosition;
		}else if(spielFeld.getNummer()<31){
		    return xPosition + (spielFeld.getNummer()-(spielFeld.getNummer()==21?21:20))*brettBreite/13;
		}else if(spielFeld.getNummer()<41){
		    return xPosition + brettBreite - 2*brettBreite/13;
		}else{
		    return 0;
		}
		`,
		ResponseAttribute: {
			IsInt: true
		}
	}, {
		Name: "feldYPosition",
		Author: "Christina",
		MethodParameters: [{
			Name: "spielFeld",
			EntityType: {
				Name: "Spielfeld"
			}
		}],
		Java: `
		if(spielFeld.getNummer()<11){
            return yPosition + brettBreite - 2*(brettBreite/13);
		}else if(spielFeld.getNummer()<21){
		    return yPosition + brettBreite - 2*(brettBreite/13) - (spielFeld.getNummer()-11)*brettBreite/13;
		}else if(spielFeld.getNummer()<31){
		    return yPosition;
		}else if(spielFeld.getNummer()<41){
		    return yPosition + (spielFeld.getNummer()-(spielFeld.getNummer()==31?31:30))*brettBreite/13;
		}else{
		    return 0;
		}
		`,
		ResponseAttribute: {
			IsInt: true
		}
	}]
}, {
	Name: "Spielfeld",
	IsAbstract: true,
	EntityAttributes: [{
		Name: "name",
		IsString: true
	}, {
		Name: "nummer",
		IsInt: true
	}, {
		Name: "miete",
		IsInt: true
	}, {
		Name: "farbe",
		IsString: true,
	}, {
		Name: "naechstesFeld",
		EntityType: {
			Name: "Spielfeld"
		}
	}, {
		Name: "besitzer",
		EntityType: {
			Name: "Spieler"
		}
	}],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Idil",
		MethodParameters: [],
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Eszter",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `return;`,
	}, {
		Name: "nameInEuro",
		Author: "Christina",
		MethodParameters: [],
		Java: `
		if(this.getMiete() != 0) {
		    return this.getName() + " " + (-1)*this.getMiete() + "Euro";
		}
		return this.getName();
	    `,
		ResponseAttribute: {
			IsString: true
		}
	}],
}, {
	Name: "GoFeld",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "GoFeld",
		Author: "Franzi",
		Java: `this.setName("GO");`,
	}, {
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Hanna",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Kiste",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Eszter",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Johanna",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Polizei",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Franzi",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			Author: "Johanna",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setVerhaftet(true);
		    for(Spielfeld sf = this.getNaechstesFeld(); !(sf instanceof Gefaengnis); sf = sf.getNaechstesFeld()){
		        spieler.setSpielfeld(sf.getNaechstesFeld());
		    }
		    
		`
	}],
}, {
	Name: "Parkplatz",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: ``,
	}],
}, {
	Name: "Wasser",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}],
}, {
	Name: "Lampe",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}],
}, {
	Name: "Gefaengnis",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Hanna",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    
		`
	}],
}, {
	Name: "Ereignisfeld",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		Author: "Idil",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		Author: "Hanna",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    this.setMiete(10*(new java.util.Random().nextInt(-50,50) / 10));
		    
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Bahnhof",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}, {
	Name: "Strasse",
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [{
		Name: "kaufPreis",
		IsInt: true
	}],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			Author: "Christina",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    aktionenListe.forEach(ak -> {
		        switch(ak){
		            case "kaufen":
		                spieler.setGeld(spieler.getGeld() - this.getKaufPreis());
		                this.setBesitzer(spieler);
		                break;
		            case "miete":
		                spieler.setGeld(spieler.getGeld() - this.getMiete());
		                this.getBesitzer().setGeld(this.getBesitzer().getGeld()+this.getMiete());
		                break;
		        }
		    });
		    
		`
	}, {
		Name: "nameInEuro",
		Author: "Eszter",
		MethodParameters: [],
		Java: `
		if(this.getKaufPreis() != 0) {
		    return this.getName() + " " + (-1)*this.getKaufPreis() + "Euro";
		}
		return this.getName();
	    `,
		ResponseAttribute: {
			IsString: true
		}
	}],
}, {
	Name: "Steuern",
	Active: false,
	Extends: {
		Name: "Spielfeld"
	},
	EntityAttributes: [],
	EntityMethods: [{
		Name: "spielerListe",
		MethodParameters: [],
		Java: `
		return new java.util.ArrayList<Spieler>();
		`,
		ResponseAttribute: {
			IsArray: true,
			EntityType: {
				Name: "Spieler",
			}
		}
	}, {
		Name: "aktionAusfuehren",
		MethodParameters: [{
			Name: "spieler",
			EntityType: {
				Name: "Spieler",
			}
		}, {
			Name: "aktionenListe",
			IsArray: true,
			IsString: true,
		}],
		Java: `
		    spieler.setGeld(spieler.getGeld() - this.getMiete());
		`
	}],
}]",
	"storedMethod": null,
	"__keys": ["name"],
	"active": true,
	"enabled": true,
	"__trMap": []
}