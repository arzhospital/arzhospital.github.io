{
	"Id": "01962278f58b723dbdedb36153229969",
	"after": null,
	"async": null,
	"before": null,
	"date": "undefined",
	"name": "Application Designer",
	"order": null,
	"remark": "dW5kZWZpbmVk",
	"script": "[{
	Name: "Application",
	Code: {
		ServiceNow: 'sys_scope',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'scope'
			},
			remark: {
				ServiceNow: 'short_description'
			}
		},
	}, {
		Name: "version",
		IsString: true,
	}],
}, {
	Name: "Rollback Context",
	Code: {
		ServiceNow: 'sys_rollback_context'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: '__encodedQuery',
			},
		},
		Default: {
			code: {
				ServiceNow: `'state=recorded^type=scripts_bg^ORDERBYDESCsys_created_on'`,
			}
		}
	}, {
		Duplicate: "Table.application",
		IsUnique: false,
	}],
}, {
	Name: "Queue",
	Code: {
		ServiceNow: 'ecc_queue'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: [],
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'agent'
			},
			remark: {
				ServiceNow: 'payload'
			},
		},
	}, {
		Name: "state",
		IsString: true,
	}, {
		Name: "processed",
		IsDate: true,
	}, {
		Name: "type",
		Code: {
			ServiceNow: 'queue'
		},
		IsString: true,
	}, {
		Name: "state",
		IsString: true,
	}, {
		Name: "responseTo",
		Code: {
			ServiceNow: "response_to"
		},
		EntityType: {
			Name: "Queue"
		}
	}],
	EntityFields: [{
		Name: "topic",
		Code: {
			ServiceNow: 'topic'
		},
		IsString: true,
		Value: {
			ServiceNow: 'APISERVER'
		}
	}],
	EntityMethods: [{
		Name: "process",
		MethodParameters: [],
		ResponseAttribute: {
			EntityType: {
				Name: "Queue"
			}
		},
		Script: ``,
		SnScript: `
        this._new().code(this.__scope + "_").state("ready", "=").type("input", "=").processed(null)/*.processed(new Date().toJSON().slice(0, 10), '<')*/.responseTo(null).findAll().slice(0,1).forEach(function(e){
            e.state("processing");
            e.processed(new Date());
            e.responseTo(null); // e has empty object as responseTo!!!
            e.store();
            
            var r = e._new().type("output").name(e.name()).code(e.code()).state("processed").processed(new Date()).responseTo(e.state("processed").processed(new Date()));
            try{
                r.remark(e._new(e.code())._invoke(e.name(), e.remark()));
            }catch(ex){
                gs.info("Exception: " + ex);
                e.state("error").remark(ex.toString());
            }
            r.store();
        });
        return;
	    `,
	}]
}, {
	Name: "Script File",
	Code: {
		ServiceNow: 'sys_script_include'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'api_name'
			},
			name: {
				ServiceNow: 'name'
			},
			remark: {
				ServiceNow: 'script'
			},
		},
	}, {
		Name: "application",
		Code: {
			ServiceNow: 'sys_scope'
		},
		EntityType: {
			Name: "Application"
		}
	}]
}, {
	Name: "Fix Script",
	Code: {
		ServiceNow: 'sys_script_fix'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'sys_name'
			},
			remark: {
				ServiceNow: 'script'
			},
		},
	}, {
		Name: "application",
		EntityType: {
			Name: "Application"
		}
	}],
}, {
	Name: "Table",
	Code: {
		ServiceNow: 'sys_db_object'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'label'
			},
			remark: {
				ServiceNow: 'sys_name'
			},
		},
	}, {
		Name: "application",
		IsUnique: true,
		Code: {
			ServiceNow: 'sys_scope'
		},
		EntityType: {
			Name: "Application",
		}
	}],
	EntityFields: [{
		Name: "extends",
		Code: {
			ServiceNow: 'super_class'
		},
		Value: {
			ServiceNow: (_this) => _this._map('class.extends', false, '_toJSON', undefined, undefined, undefined, _this.name()),
		}
	}, {
		Name: "__idField",
		Value: {
			ServiceNow: 'name'
		}
	}]
}, {
	Name: "Column",
	Code: {
		ServiceNow: 'sys_dictionary'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'element'
			},
			name: {
				ServiceNow: 'column_label'
			},
			remark: {
				ServiceNow: 'comments'
			},
		},
		Value: {
			code: {
				ServiceNow: () => this._code ? this._code.toLowerCase() : '',
			},
		},
	}, {
		Name: "type",
		Code: {
			ServiceNow: "internal_type"
		},
		IsString: true,
		Value: {
			ServiceNow: () => {
				let t = ({
					"Bool": "boolean",
					"Date": "glide_date_time",
					"Entity": "reference",
					"String": "string",
					"Text": "string",
					"Int": "integer",
					"Long": "longint",
					"Float": "float",
					"List": "glide_list",
					"JSON": "json"
				})[this._type];
				if (t == "string" && this.name().toLowerCase().indexOf('script') >= 0) t = "script";
				return t;
			},
		},
	}, {
		Name: "mandatory",
		IsBool: true,
	}, {
		Name: "table",
		IsUnique: true,
		Code: {
			ServiceNow: 'name'
		},
		EntityType: {
			Name: "Table",
		},
		Value: {
			ServiceNow: () => this._table ? this._table.code() : '',
		}
	}, {
		Name: "reference",
		EntityType: {
			Name: "Table",
		},
	}],
	EntityFields: [{
		Name: "__keys",
		Code: {
			ServiceNow: '__keys',
		},
		Value: {
			ServiceNow: ['element', 'name'],
		}
	}, {
		Name: "length",
		IsInt: true,
		Code: {
			ServiceNow: "max_length",
		},
		Value: {
			ServiceNow: () => ({
				"String": 255,
				"Text": 4000,
			})[this.type()],
		}
	}, {
		Name: "display",
		IsBool: true,
		Value: {
			ServiceNow: () => this.table() && this.table().table_Columns().find(c => c.type() == 'String') == this,
		}
	}]
}, {
	Name: "Connection",
	EntityAttributes: [{
		Name: "__BASE__",
	}]
}, {
	Name: "Subscription Trigger",
	EntityAttributes: [{
		Name: "__BASE__",
	}, {
		Name: "column",
		EntityType: {
			Name: "Column"
		}
	}, {
		Name: "subscription",
		EntityType: {
			Name: "Save Subscription"
		}
	}],
}, {
	Name: "Save Subscription",
	EntityAttributes: [{
		Name: "__BASE__",
	}, {
		Name: "schema",
		Remark: "Payload construction schema path",
		IsText: true,
	}, {
		Name: "table",
		EntityType: {
			Name: "Table"
		}
	}, {
		Name: "profile",
		EntityType: {
			Name: "Connection"
		}
	}, {
		Duplicate: 'Table.application'
	}]
}, {
	Name: "Flow",
	Code: {
		ServiceNow: 'sys_hub_flow'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'internal_name'
			},
		},
		Default: {
			code: {
				ServiceNow: `s(if(obj.label_cache.indexOf('[')!=0) obj.label_cache=GlideStringUtil.base64Decode(obj.label_cache); return obj.internal_name;)`,
			}
		}
	}, {
		Duplicate: 'Table.application'
	}, {
		Name: "block",
		EntityType: {
			Name: "Flow Block",
		}
	}, {
		Name: "securityControl",
		Code: {
			ServiceNow: 'acls'
		},
		EntityType: {
			Name: "Security Control",
		}
	}],
	EntityFields: [{
		Name: "clientCallable",
		Code: {
			ServiceNow: 'callable_by_client_api',
		},
		Value: {
			ServiceNow: `<<s({{__}}.acls?'true':'false')>>`,
			_ServiceNow: `<<$exists({{__}}.acls)>>`,
		}
	}, {
		Name: "policy",
		Code: {
			ServiceNow: 'sys_policy',
		},
		Value: {
			ServiceNow: `<<s({{__}}.flow_Flow_Snapshots?'protected':'')>>`,
			_ServiceNow: `<<$exists({{__}}.flow_Flow_Snapshots)?'protected':''>>`,
		}
	}, {
		Name: "status",
		Code: {
			ServiceNow: 'status',
		},
		Value: {
			ServiceNow: `<<s({{__}}.flow_Flow_Snapshots?'published':'draft')>>`,
			_ServiceNow: `<<$exists({{__}}.flow_Flow_Snapshots)?'published':'draft'>>`,
		}
	}, {
		Name: "type",
		Code: {
			ServiceNow: 'type',
		},
		Value: {
			ServiceNow: `subflow`,
		}
	}, {
		Name: "lastSnapshot",
		Code: {
			ServiceNow: 'latest_snapshot',
		},
		Value: {
			ServiceNow: `<<s({{__}}.flow_Flow_Snapshots?{{__}}.flow_Flow_Snapshots[0].Id:'')>>`,
			_ServiceNow: `<<{{__}}.flow_Flow_Snapshots[0].Id>>`,
		}
	}, {
		Name: "mainSnapshot",
		Code: {
			ServiceNow: 'master_snapshot',
		},
		Value: {
			ServiceNow: `<<s({{__}}.latest_snapshot)>>`,
			_ServiceNow: `<<{{__}}.flow_Flow_Snapshots[0].Id>>`,
		}
	}, {
		Name: "attributes",
		Code: {
			ServiceNow: 'attributes',
		},
		Value: {
			ServiceNow: `browserActivatedIn=chrome,integrationActivatedIn=standalone,labelCacheCleanUpExecuted=true,timeFromCreateToActivate=397000,viewActivatedIn=naturalLanguage`,
		}
	}, {
		Name: "labelCache",
		Code: {
			ServiceNow: 'label_cache',
		},
		Value: {
			ServiceNow: () => `<<$append($append(**.parent_Flow_Instances[label_cache='{{id}}'].{"name": ui_id&"."&subflow.internal_name, "reference_display": '\${this.EntityClass.Name}', "label": order&' - '&subflow.name&'\\u279b'&subflow.name, "base_type": internal_type, "type": internal_type, "attributes": {"element_mapping_provider": 'com.glide.flow_design.action.data.FlowDesignVariableMapper', "uiType": internal_type, "uiUniqueId": Id}}[$],

$.flow_Flow_Variables.{"name": 'flow_variable.'&element, "reference_display": 'label'
, "label": 'Flow Variables\\u279b'&element, "base_type": internal_type,
"type": internal_type, "attributes": {
    "element_mapping_provider": 'com.glide.flow_design.action.data.FlowDesignVariableMapper',
    "uiType": internal_type, "uiUniqueId": Id
}
})
,
$.flow_Flow_Inputs.{"name": 'subflow.'&element, "reference_display": 'label'
, "label": 'Input\\u279b'&element, "base_type": internal_type,
"type": internal_type, "attributes": {
    "element_mapping_provider": 'com.glide.flow_design.action.data.FlowDesignVariableMapper',
    "uiType": internal_type, "uiUniqueId": Id
}})>>`,
		}
	}],
}, {
	Name: "Flow Input",
	Code: {
		ServiceNow: 'sys_hub_flow_input'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'element'
			},
			name: {
				ServiceNow: 'label'
			},
			remark: {
				ServiceNow: 'attributes'
			},
		},
	}, {
		Duplicate: "Column.type",
	}, {
		Duplicate: "Column.mandatory",
	}, {
		Duplicate: "Column.reference",
	}, {
		Name: "flow",
		IsUnique: true,
		EntityType: {
			Name: "Flow",
		}
	}, {
		Name: "snapshot",
		IsUnique: true,
		EntityType: {
			Name: "Flow Snapshot",
		}
	}],
	EntityFields: [{
		Name: "__keys",
		Code: {
			ServiceNow: '__keys',
		},
		Value: {
			ServiceNow: ['element', 'model_id'],
		}
	}, {
		Duplicate: "Column.length",
	}, {
		Name: "Model Table",
		Code: {
			ServiceNow: 'model_table',
		},
		Value: {
			ServiceNow: `<<s(({sys_hub_flow: 'sys_hub_flow', sys_hub_flow_snapshot: 'sys_hub_flow_snapshot', sys_variable_value: 'sys_hub_flow', sys_hub_sub_flow_instance: 'sys_hub_flow_logic_ext_input', sys_hub_action_instance: 'sys_hub_flow'})[{{ppath}}.__type])>>`,
			_ServiceNow: `<<$exists(**[flow_Flow_Inputs[model_table='{{id}}'] or flow_Flow_Outputs[model_table='{{id}}'] or flow_Flow_Variables[model_table='{{id}}']])?'sys_hub_flow':($exists(**[snapshot_Flow_Inputs[model_table='{{id}}'] or snapshot_Flow_Outputs[model_table='{{id}}'] or snapshot_Flow_Variables[model_table='{{id}}']])?'sys_hub_flow_snapshot':($exists(**[instance_Flow_Instance_Inputs[model_table='{{id}}']])?'sys_hub_flow_logic_ext_input':($exists(**[action_Variable_Values[actionInput[model_table='{{id}}']]] or **[instance_Variable_Values[flowInput[model_table='{{id}}']]])?'sys_hub_flow':'')))>>`,
		},
	}, {
		Name: "Model ID",
		Code: {
			ServiceNow: 'model_id',
		},
		Value: {
			ServiceNow: `<<s(({{ppath}}.__type=='sys_variable_value' && {{__}}.subflow)?{{__}}.subflow.Id:{{ppath}}.Id)>>`,
			/* **[action_Variable_Values[actionInput[model_id='{{id}}']]].action_type.master_snapshot, **[action_Variable_Values[actionInput[model_id='{{id}}']]].action_type.latest_snapshot, */
			_ServiceNow: `<<[**[flow_Flow_Inputs[model_id='{{id}}']].Id, **[flow_Flow_Outputs[model_id='{{id}}']].Id, **[flow_Flow_Variables[model_id='{{id}}']].Id, **[snapshot_Flow_Inputs[model_id='{{id}}']].Id, **[snapshot_Flow_Outputs[model_id='{{id}}']].Id, **[snapshot_Flow_Variables[model_id='{{id}}']].Id, **[instance_Flow_Instance_Inputs[model_id='{{id}}']].Id, **[instance_Variable_Values[flowInput[model_id='{{id}}']]].subflow.Id, **[action_Variable_Values[actionInput[model_id='{{id}}']]].{"Id": "_f{gs.info(_toString + ': FIJSON: ' + JSON.stringify(refs.manyRefs))}"}.Id][0]>>`,
		},
	}, {
		Name: "Attributes",
		Code: {
			ServiceNow: "attributes",
		},
		Value: {
			ServiceNow: `<<s('element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType='+{{__}}.internal_type+',uiUniqueId='+{{__}}.Id)>>`,
			_ServiceNow: `<<'element_mapping_provider=com.glide.flow_design.action.data.FlowDesignVariableMapper,uiType='&{{__}}.internal_type&',uiUniqueId='&{{__}}.Id>>`,
		}
	}],
}, {
	Name: "Flow Output",
	Code: {
		ServiceNow: 'sys_hub_flow_output'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Duplicate: {
			code: "Flow Input.code",
			name: "Flow Input.name",
			remark: "Flow Input.remark",
		},
	}, {
		Duplicate: "Column.type",
	}, {
		Duplicate: "Column.mandatory",
	}, {
		Duplicate: "Column.reference",
	}, {
		Duplicate: "Flow Input.flow",
	}, {
		Duplicate: "Flow Input.snapshot",
	}],
	EntityFields: [{
		Duplicate: "Flow Input.__keys"
	}, {
		Duplicate: "Column.length",
	}, {
		Duplicate: "Flow Input.Model ID"
	}, {
		Duplicate: "Flow Input.Model Table"
	}, {
		Duplicate: "Flow Input.Attributes"
	}]
}, {
	Name: "Flow Variable",
	Code: {
		ServiceNow: 'sys_hub_flow_variable'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Duplicate: {
			code: "Flow Input.code",
			name: "Flow Input.name",
			remark: "Flow Input.remark",
		},
	}, {
		Duplicate: "Column.type",
	}, {
		Duplicate: "Column.mandatory",
	}, {
		Duplicate: "Column.reference",
	}, {
		Duplicate: "Flow Input.flow",
	}, {
		Duplicate: "Flow Input.snapshot",
	}],
	EntityFields: [{
		Duplicate: "Flow Input.__keys"
	}, {
		Duplicate: "Column.length",
	}, {
		Duplicate: "Flow Input.Model ID"
	}, {
		Duplicate: "Flow Input.Model Table"
	}, {
		Duplicate: "Flow Input.Attributes"
	}]
}, {
	Name: "Field Label",
	Code: {
		ServiceNow: 'sys_documentation',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code', 'name'],
		Code: {
			code: {
				ServiceNow: 'element'
			},
			remark: {
				ServiceNow: 'label'
			}
		},
		Value: {
			name: {
				ServiceNow: `<<s({{ppath}}.name || ('var__m_'+{{__}}.model_id))>>`,
			}
		},
	}, {
		Name: "plural",
		IsString: true,
	}, {
		Name: "language",
		IsUnique: true,
		IsString: true,
	}, {
		Duplicate: 'Table.application'
	}, {
		Name: "input",
		EntityType: {
			Name: "Flow Input"
		}
	}, {
		Name: "output",
		EntityType: {
			Name: "Flow Output"
		}
	}, {
		Name: "variable",
		EntityType: {
			Name: "Flow Variable"
		}
	}, {
		Name: "column",
		EntityType: {
			Name: "Column"
		}
	}],
}, {
	Name: "Logic Definition",
	Code: {
		ServiceNow: 'sys_hub_flow_logic_definition'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'sys_name'
			},
		}
	}]
}, {
	Name: "Flow Logic",
	Code: {
		ServiceNow: 'sys_hub_flow_logic'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'ui_id'
			},
			remark: {
				ServiceNow: 'comment'
			},
		},
		Default: {
			code: {
				ServiceNow: `s(obj.__keys=["flow", "sys_scope", "order"]; if(typeof(parent_ui_id)==='undefined'){parent_ui_id=''}else{parent_ui_id=refs.flow_logic.ui_id;}; var fid=(obj.flow || refs.Flow_Snapshot || refs.Flow || refs.manyRefs.Flow).Id || (refs.Flow_Logic?refs.Flow_Logic.flow:''); (obj.parent_Flow_Logics || []).forEach(function(cfl){cfl.flow = flow.sys_id || flow || fid;}); obj.flow = obj.flow || fid; return obj.ui_id;)`,
			},
			remark: {
				ServiceNow: `s(if(obj.comment){obj.flow_variables_assigned=(obj.block?obj.block.block_Element_Mappings:[]).map(function(m){ return m.field; }).concat(obj.logic_Flow_Input_Scripts.map(function(s){return s.input_name;})).join();} return obj.comment;)`,
			}
		}
	}, {
		Name: "parent",
		Code: {
			ServiceNow: 'parent_ui_id',
		},
		EntityType: {
			Name: "Flow Logic",
		}
	}, {
		Duplicate: "Flow Input.flow",
	}, {
		Name: "snapshot",
		IsUnique: true,
		EntityType: {
			Name: "Flow Snapshot",
		},
	}, {
		Name: "definition",
		Code: {
			ServiceNow: 'logic_definition'
		},
		EntityType: {
			Name: "Logic Definition",
		}
	}, {
		Name: "block",
		EntityType: {
			Name: "Flow Block",
		}
	}, {
		Duplicate: 'Table.application'
	}]
}, {
	Name: "Flow Instance",
	Code: {
		ServiceNow: 'sys_hub_sub_flow_instance'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Duplicate: {
			code: 'Flow Logic.code',
			remark: 'Flow Logic.remark',
		},
	}, {
		Duplicate: 'Flow Logic.parent'
	}, {
		Duplicate: 'Table.application'
	}, {
		Name: "subflow",
		EntityType: {
			Name: "Flow"
		}
	}, {
		Name: "snapshot",
		EntityType: {
			Name: "Flow Snapshot"
		}
	}],
}, {
	Name: "Flow Instance Input",
	Code: {
		ServiceNow: 'sys_hub_sub_flow_instance_inputs'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: [],
		Duplicate: {
			code: 'Flow Input.code',
			name: 'Flow Input.name',
			remark: 'Flow Input.remark',
		}
	}, {
		Duplicate: "Column.type",
	}, {
		Duplicate: "Column.mandatory",
	}, {
		Duplicate: "Column.reference",
	}, {
		Name: "instance",
		IsUnique: true,
		EntityType: {
			Name: "Flow Instance"
		}
	}],
	EntityFields: [{
		Duplicate: "Flow Input.__keys"
	}, {
		Duplicate: "Column.length",
	}, {
		Duplicate: "Flow Input.Model ID"
	}, {
		Duplicate: "Flow Input.Model Table"
	}, {
		Duplicate: "Flow Input.Attributes"
	}]
}, {
	Name: "Action Instance",
	Code: {
		ServiceNow: 'sys_hub_action_instance'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Duplicate: {
			code: 'Flow Logic.code',
			remark: 'Flow Logic.remark',
		},
	}, {
		Duplicate: 'Flow Logic.parent'
	}, {
		Duplicate: 'Table.application'
	}, {
		Name: "action",
		Code: {
			ServiceNow: 'action_type'
		},
		EntityType: {
			Name: "Action Type"
		}
	}],
}, {
	Name: "Variable Value",
	Code: {
		ServiceNow: 'sys_variable_value'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'variable'
			},
		},
		Default: {
			code: {
				ServiceNow: `s(obj.__keys=['document_key', 'variable']; if(refs.Flow_Instance){obj.document='sys_hub_sub_flow_instance'; obj.document_key=refs.Flow_Instance.Id; obj.variable=obj.flowInput?obj.flowInput.Id:refs.manyRefs.instance_Flow_Instance_Inputs[0].sys_id;}else if(obj.actionInput){obj.document='sys_hub_action_instance'; obj.document_key=refs.Action_Instance.Id; obj.variable=obj.actionInput.Id;} return obj.variable;)`
			},
		}
	}, {
		Name: "value",
		IsText: true,
	}, {
		Name: "instance",
		EntityType: {
			Name: "Flow Instance",
		}
	}, {
		Name: "action",
		EntityType: {
			Name: "Action Instance",
		}
	}, {
		Name: "actionInput",
		EntityType: {
			Name: "Action Input",
		}
	}, {
		Name: "flowInput",
		EntityType: {
			Name: "Flow Input",
		}
	}, {
		Name: "mapping",
		EntityType: {
			Name: "Element Mapping",
		}
	}],
}, {
	Name: "Flow Block",
	Code: {
		ServiceNow: 'sys_hub_flow_block'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'sys_name'
			},
		},
	}]
}, {
	Name: "Element Mapping",
	Code: {
		ServiceNow: 'sys_element_mapping'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['name', 'code'],
		Code: {
			name: {
				ServiceNow: 'id'
			},
			code: {
				ServiceNow: 'field'
			},
			remark: {
				ServiceNow: 'table',
				_Value: {
					ServiceNow: `<<[$reverse((**[flow_Flow_Inputs or snapshot_Flow_Inputs])@$f.($f.**[logic_definition.name='Set Flow Variables'
and block.block_Element_Mappings[table='{{id}}']])@$fl.{"table": 'var__m_sys_hub_flow_variable_'&$f.Id})[0].table,
$reverse(**[logic_definition.name and block.block_Element_Mappings[table='{{id}}']])@$fl[0].{"table": "var__m_sys_hub_flow_logic_input__f{refs.manyRefs.Flow_LogicRefs.definition.sys_id}"}.table,
$reverse(**.action_Variable_Values[mapping[table='{{id}}']].{"table": "var__m_sys_hub_action_input__f{gs.info(_toString + ': EMJSON: ' + JSON.stringify(refs))}"})[0].table,
'{{vf}}'
][0]>>`,
				}
			},
		},
		_Default: {
			code: {
				ServiceNow: `s(obj.__keys=['id', 'field', 'table']; var fl = refs.manyRefs.Flow_Logic; if(fl.logic_definition.name=='Set Flow Variables'){var fFlow = function(f, depth){if(depth==0) return f; return (f.Flow || f.Flow_Snapshot)?f:fFlow(f.manyRefs, depth-1);}; var _flow = fFlow(refs.manyRefs.Flow_LogicRefs, 2); if(_flow) _flow = _flow.Flow || _flow.Flow_Snapshot; obj.table = 'var__m_sys_hub_flow_variable_' + _flow.Id;}else if(fl.logic_definition.name){obj.table = 'var__m_sys_hub_flow_logic_input_'+fl.logic_definition.Id;}else if(refs.Variable_Value){if(refs.Variable_Value.input){obj.table = 'var__m_sys_hub_flow_input_'+refs.Variable_Value.input.Id;}else if(refs.Variable_ValueRefs.actionInput){obj.table = 'var__m_sys_hub_action_input_'+refs.Variable_ValueRefs.actionInput.model;}else{obj.table = 'var__m_sys_hub_sub_flow_instance_inputs_' + refs.Variable_ValueRefs.manyRefs.instance_Flow_Instance_Inputs[0].sys_id;}} obj.id=id=(fl||refs.Variable_ValueRefs.Flow_Instance||refs.Variable_ValueRefs.Action_Instance).Id; return obj.field;)`,
			},
		},
	}, {
		Name: "value",
		Value: {
			ServiceNow: `<<**[value='{{id}}' and elementMapping_Pill_Compounds][0].{"v": $replace({{vf}}, elementMapping_Pill_Compounds.prescription, '{{fd_transform:'&elementMapping_Pill_Compounds.ui_id&'}}')}.v>>`,
		},
		IsString: true,
	}, {
		Name: "block",
		EntityType: {
			Name: "Flow Block",
		}
	}],
	EntityFields: [{
		Name: "__keys",
		Code: {
			ServiceNow: '__keys'
		},
		Value: {
			ServiceNow: `['id', 'field', 'table']`,
		}
	}]
}, {
	Name: "Flow Input Script",
	Code: {
		ServiceNow: 'sys_hub_input_scripts',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		IsUnique: ['code'],
		Code: {
			code: {
				ServiceNow: 'input_name'
			},
			remark: {
				ServiceNow: 'script'
			}
		},
		Default: {
			code: {
				ServiceNow: `s(if(obj.script.indexOf('{')!=0) obj.script=GlideStringUtil.base64Decode(obj.script); return obj.input_name;)`,
			},
		},
		Value: {
			remark: {
				ServiceNow: `<<{{__}}.{input_name: {"scriptActive": true, "script": {{vf}}}}>>`,
			},
		},
	}, {
		Name: "logic",
		Code: {
			ServiceNow: 'instance'
		},
		IsUnique: true,
		EntityType: {
			Name: "Flow Logic"
		},
		Value: {
			ServiceNow: `<<[**[logic_Flow_Input_Scripts[instance="{{id}}"]].parent_Action_Instances[0].Id, **[logic_Flow_Input_Scripts[instance="{{id}}"] and $not($exists(parent_Action_Instances))].Id ][0]>>`
		}
	}],
	EntityFields: [{
		Name: "referencedTable",
		Code: {
			ServiceNow: "referenced_table"
		},
		Value: {
			ServiceNow: `<<$exists(**[logic_Flow_Input_Scripts[referenced_table="{{id}}"]].parent_Action_Instances)?'sys_hub_action_instance':'sys_hub_flow_logic'>>`
		}
	}]
}, {
	Name: "Action Type",
	Code: {
		ServiceNow: 'sys_hub_action_type_definition',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'internal_name'
			},
			remark: {
				ServiceNow: 'annotation'
			},
		},
	}, {
		Duplicate: 'Table.application'
	}]
}, {
	Name: "Action Input",
	Code: {
		ServiceNow: 'sys_hub_action_input'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Duplicate: {
			code: "Flow Input.code",
			name: "Flow Input.name",
			remark: "Flow Input.remark",
		},
	}, {
		Duplicate: "Column.type",
	}, {
		Duplicate: "Column.mandatory",
	}, {
		Duplicate: "Column.reference",
	}, {
		Duplicate: "Flow Input.flow",
	}, {
		Duplicate: "Flow Input.snapshot",
	}, {
		Name: "action",
		IsUnique: true,
		EntityType: {
			Name: "Action Type"
		}
	}],
	EntityFields: [{
		Duplicate: "Flow Input.__keys"
	}, {
		Duplicate: "Column.length",
	}, {
		Duplicate: "Flow Input.Model ID"
	}, {
		Duplicate: "Flow Input.Model Table"
	}, {
		Duplicate: "Flow Input.Attributes"
	}]
}, {
	Name: "Action Step",
	Code: {
		ServiceNow: 'sys_hub_step_instance'
	},
	EntityAttributes: [{
		Name: "__BASE__",
	}, {
		Name: "action",
		EntityType: {
			Name: "Action Type",
		}
	}]
}, {
	Name: "Action Step Input",
	Code: {
		ServiceNow: 'sys_flow_step_definition_input'
	},
	EntityAttributes: [{
		Name: "__BASE__",
	}, {
		Name: "action",
		EntityType: {
			Name: "Action Type"
		}
	}]
}, {
	Name: "Flow Plan",
	Code: {
		ServiceNow: 'sys_flow_subflow_plan'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'plan_id'
			},
			remark: {
				ServiceNow: 'plan'
			},
		},
		Default: {
			code: {
				ServiceNow: `s(snapshot=refs.Flow_Snapshot.Id; return refs.flow_snapshot.parent_flow.sys_id)`,
			},
			remark: {
				ServiceNow: `s(obj.plan = JSON.stringify({persistor:{"@class": ".ChunkingPlanPersistor", table:"sys_flow_subflow_plan", id: obj.Id, name:"plan", plan_signature: null}}); return obj.plan;)`
			}
		}
	}, {
		Name: "snapshot",
		EntityType: {
			Name: "Flow Snapshot"
		}
	}]
}, {
	Name: "Flow Setting",
	Code: {
		ServiceNow: 'sys_flow_execution_setting'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'reporting'
			},
		},
		_Default: {
			name: {
				ServiceNow: `s(obj.source_type='sys_hub_flow'; return obj.name;)`
			}
		}
	}, {
		Name: "flow",
		IsUnique: true,
		Code: {
			ServiceNow: 'source'
		},
		EntityType: {
			Name: "Flow"
		}
	}],
	EntityFields: [{
		Name: "sourceType",
		Code: {
			ServiceNow: 'source_type'
		},
		Value: {
			ServiceNow: `sys_hub_flow`,
		},
	}]
}, {
	Name: "Flow Snapshot",
	Code: {
		ServiceNow: 'sys_hub_flow_snapshot'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'internal_name'
			},
			remark: {
				ServiceNow: 'label_cache'
			},
		},
		_Default: {
			remark: {
				ServiceNow: `s(if(refs.flow && refs.flow.sys_mod_count==0 && false){refs.flow.description = "updated"; refs.flow.update();} if(refs.Flow.label_cache){['status', 'type', 'label_cache'].forEach(function(k){obj[k] = refs.Flow[k]}); return /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(obj.label_cache)?GlideStringUtil.base64Decode(obj.label_cache):obj.label_cache;)`
			}
		}
	}, {
		Name: "flow",
		Code: {
			ServiceNow: 'parent_flow'
		},
		EntityType: {
			Name: "Flow"
		}
	}, {
		Name: "block",
		EntityType: {
			Name: "Flow Block",
		}
	}, {
		Duplicate: 'Table.application'
	}],
	EntityMethods: [{
		Name: "fromFlow",
		IsSync: true,
		MethodParameters: [{
			Name: "flow",
			EntityType: {
				Name: "Flow"
			}
		}],
		Script: `
		    this.Id = flow.Id;
			return this.name(flow.name()).code(flow.code()).active(flow.active()).enabled(flow.enabled()).remark(flow.remark()).application(flow.application()).snapshot_Flow_Inputs(flow.flow_Flow_Inputs()).snapshot_Flow_Outputs(flow.flow_Flow_Outputs()).snapshot_Flow_Variables(flow.flow_Flow_Variables()).snapshot_Flow_Logics(flow.flow_Flow_Logics());
			`,
		ReturnAttribute: {
			EntityType: {
				Name: "Flow Snapshot"
			}
		}
	}]
}, {
	Name: "Pill Compound",
	Code: {
		ServiceNow: 'sys_hub_pill_compound',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			name: {
				ServiceNow: 'prescription'
			},
			remark: {
				ServiceNow: 'transform_compositions',
			}
		},
		Value: {
			remark: {
				ServiceNow: `<<{{__}}.{"transformType": code, "transformDefinition": code, "parameters": $each($eval($base64decode({{vf}})), function($v, $k) {{$k: $v}})}>>`
			}
		},
		IsUnique: [],
		_Default: {
			remark: {
				ServiceNow: `f{/*var fKey = function(f, depth, keys){var ret = null; if(!f) return ret; keys.forEach(function(k){ret = ret || f[k];}); return (depth==0 || ret)?ret:fKey(f.manyRefs, depth-1, keys);}; attached_to = fKey(fKey(refs, 3, ['Flow_LogicRefs']), 3, ['Flow', 'Flow_Snapshot']).Id; if(typeof(source_ui_id)==='undefined'){source_ui_id=''}else{source_ui_id=refs.pill_compound.ui_id;} var params=[]; transform_compositions=JSON.parse(GlideStringUtil.base64Decode(transform_compositions)); for(var k in transform_compositions) params.push({name: k, value: transform_compositions[k]}); if(refs.Pill_Compound){transform_compositions=[{id: refs.Pill_Compound.parent_Pill_Compounds[0].transform_definition_id.transform_Transform_Compositions[0].Id, parameters: params}];}else{transform_compositions=[]} return */JSON.stringify(transform_compositions)}`,
			},
		}
	}, {
		Name: "parent",
		Code: {
			ServiceNow: 'source_ui_id',
		},
		EntityType: {
			Name: "Pill Compound",
		}
	}, {
		Duplicate: 'Table.application'
	}, {
		Name: "elementMapping",
		EntityType: {
			Name: "Element Mapping",
		},
	}, {
		Name: "transform",
		Code: {
			ServiceNow: 'transform_definition_id'
		},
		EntityType: {
			Name: "Transform"
		}
	}],
	EntityFields: [{
		Name: "__keys",
		Code: {
			ServiceNow: '__keys',
		},
		Value: {
			ServiceNow: ['ui_id', 'attached_to'],
		}
	}, {
		Name: "UId",
		Code: {
			ServiceNow: "ui_id"
		},
		Value: {
			ServiceNow: `<<{{__}}.Id>>`
		}
	}, {
		Name: "attachedTo",
		Code: {
			ServiceNow: "attached_to"
		},
		Value: {
			ServiceNow: `<<**@$f[__type in ['sys_hub_flow', 'sys_hub_flow_snapshot'] and {{nr}}].$f.{{__}}.$f[-1].Id>>`
		}
	}]
}, {
	Name: "Transform",
	Code: {
		ServiceNow: 'sys_transform_definition',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'label'
			},
			remark: {
				ServiceNow: 'description'
			}
		},
	}],
}, {
	Name: "Transform Composition",
	Code: {
		ServiceNow: 'sys_transform_composition',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'sys_name'
			}
		},
	}, {
		Name: "transform",
		Code: {
			ServiceNow: 'transform_definition'
		},
		IsUnique: true,
		EntityType: {
			Name: "Transform"
		}
	}],
}, {
	Name: "Data Definition",
	Code: {
		ServiceNow: 'sys_flow_data_definition',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'sys_name'
			},
		},
	}],
}, {
	Name: "Flow Data",
	Code: {
		ServiceNow: 'sys_flow_data',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'sys_name'
			},
		},
	}, {
		Name: "definition",
		EntityType: {
			Name: "Data Definition"
		}
	}],
}, {
	Name: "Flow Data Variable",
	Code: {
		ServiceNow: 'sys_flow_data_var',
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Duplicate: {
			code: "Flow Input.code",
			name: "Flow Input.name",
			remark: "Flow Input.remark",
		},
	}, {
		Duplicate: "Column.type",
	}, {
		Duplicate: "Column.mandatory",
	}, {
		Duplicate: "Column.reference",
	}, {
		Duplicate: "Flow Input.flow",
	}, {
		Duplicate: "Flow Input.snapshot",
	}],
	EntityFields: [{
		Duplicate: "Flow Input.__keys"
	}, {
		Duplicate: "Column.length",
	}, {
		Duplicate: "Flow Input.Model ID"
	}, {
		Duplicate: "Flow Input.Model Table"
	}, {
		Duplicate: "Flow Input.Attributes"
	}]
}, {
	Name: "Security Control",
	Code: {
		ServiceNow: 'sys_security_acl'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'name'
			},
			name: {
				ServiceNow: 'condition'
			},
			remark: {
				ServiceNow: 'description'
			}
		},
		Default: {
			code: {
				ServiceNow: `s(return obj.name;)`,
			}
		}
	}, {
		Name: "type",
		IsUnique: true,
		EntityType: {
			Name: "Security Type"
		}
	}, {
		Name: "operation",
		IsUnique: true,
		EntityType: {
			Name: "Security Operation"
		}
	}, {
		Duplicate: 'Table.application'
	}],
}, {
	Name: "Security Type",
	Code: {
		ServiceNow: 'sys_security_type'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'sys_name'
			},
			remark: {
				ServiceNow: 'description'
			}
		}
	}, {
		Duplicate: 'Table.application'
	}],
}, {
	Name: "Security Operation",
	Code: {
		ServiceNow: 'sys_security_operation'
	},
	EntityAttributes: [{
		Name: "__BASE__",
		Code: {
			code: {
				ServiceNow: 'sys_name'
			},
			remark: {
				ServiceNow: 'description'
			}
		}
	}, {
		Duplicate: 'Table.application'
	}],
}]",
	"Name": "Application Designer",
	"Script": "",
	"storedMethod": null,
	"__keys": ["name"],
	"active": true,
	"enabled": true,
	"__trMap": []
}