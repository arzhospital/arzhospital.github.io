{
	"Id": "c05e7a537c61edffc1c0a3a05b43c2b9bfd8c5a2",
	"active": "true",
	"enabled": "true",
	"code": "protobuf",
	"date": "2024-10-23T02:18:33.565Z",
	"name": "ProtoBuf",
	"remark": "syntax = "proto3";

package esptest;


/* Linux runner:
wget -qO- "https://arzhospital.github.io/esptest/Node_Type/Proto.json" | jq -r '.remark | @base64d' | python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=.

*/


service User {
    
    rpc store(User_store_Request) returns(User_store_Response);
    
    rpc findAll(User_findAll_Request) returns(User_findAll_Response);
    
    rpc find(User_find_Request) returns(User_find_Response);
    
    rpc init(User_init_Request) returns(User_init_Response);
    
}

    
message User_store_Request {
        
}

message User_store_Response {
    _User undefined = 1;
}
    
message User_findAll_Request {
        
}

message User_findAll_Response {
    repeated _User undefined = 1;
}
    
message User_find_Request {
        
}

message User_find_Response {
    _User undefined = 1;
}
    
message User_init_Request {
        
}

message User_init_Response {
    string retinit = 1;
}
    

message _User {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string username = 9;
    
    string password = 10;
    
}

service Metric {
    
    rpc store(Metric_store_Request) returns(Metric_store_Response);
    
    rpc findAll(Metric_findAll_Request) returns(Metric_findAll_Response);
    
    rpc find(Metric_find_Request) returns(Metric_find_Response);
    
}

    
message Metric_store_Request {
        
}

message Metric_store_Response {
    _Metric undefined = 1;
}
    
message Metric_findAll_Request {
        
}

message Metric_findAll_Response {
    repeated _Metric undefined = 1;
}
    
message Metric_find_Request {
        
}

message Metric_find_Response {
    _Metric undefined = 1;
}
    

message _Metric {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string script = 9;
    
    _Metric_Type type = 10;
    
    _Device_Type deviceType = 11;
    
}

service Metric_Value {
    
    rpc store(Metric_Value_store_Request) returns(Metric_Value_store_Response);
    
    rpc findAll(Metric_Value_findAll_Request) returns(Metric_Value_findAll_Response);
    
    rpc find(Metric_Value_find_Request) returns(Metric_Value_find_Response);
    
}

    
message Metric_Value_store_Request {
        
}

message Metric_Value_store_Response {
    _Metric_Value undefined = 1;
}
    
message Metric_Value_findAll_Request {
        
}

message Metric_Value_findAll_Response {
    repeated _Metric_Value undefined = 1;
}
    
message Metric_Value_find_Request {
        
}

message Metric_Value_find_Response {
    _Metric_Value undefined = 1;
}
    

message _Metric_Value {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string value = 9;
    
    google.protobuf.Timestamp measured = 10;
    
    _Metric metric = 11;
    
    _Device device = 12;
    
}

service Device {
    
    rpc store(Device_store_Request) returns(Device_store_Response);
    
    rpc findAll(Device_findAll_Request) returns(Device_findAll_Response);
    
    rpc find(Device_find_Request) returns(Device_find_Response);
    
}

    
message Device_store_Request {
        
}

message Device_store_Response {
    _Device undefined = 1;
}
    
message Device_findAll_Request {
        
}

message Device_findAll_Response {
    repeated _Device undefined = 1;
}
    
message Device_find_Request {
        
}

message Device_find_Response {
    _Device undefined = 1;
}
    

message _Device {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    _Device_Type type = 9;
    
    _Node controller = 10;
    
}

service Device_Attribute {
    
    rpc store(Device_Attribute_store_Request) returns(Device_Attribute_store_Response);
    
    rpc findAll(Device_Attribute_findAll_Request) returns(Device_Attribute_findAll_Response);
    
    rpc find(Device_Attribute_find_Request) returns(Device_Attribute_find_Response);
    
}

    
message Device_Attribute_store_Request {
        
}

message Device_Attribute_store_Response {
    _Device_Attribute undefined = 1;
}
    
message Device_Attribute_findAll_Request {
        
}

message Device_Attribute_findAll_Response {
    repeated _Device_Attribute undefined = 1;
}
    
message Device_Attribute_find_Request {
        
}

message Device_Attribute_find_Response {
    _Device_Attribute undefined = 1;
}
    

message _Device_Attribute {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string value = 9;
    
    _Device device = 10;
    
    _Type_Attribute attribute = 11;
    
}

service Type_Attribute {
    
    rpc store(Type_Attribute_store_Request) returns(Type_Attribute_store_Response);
    
    rpc findAll(Type_Attribute_findAll_Request) returns(Type_Attribute_findAll_Response);
    
    rpc find(Type_Attribute_find_Request) returns(Type_Attribute_find_Response);
    
}

    
message Type_Attribute_store_Request {
        
}

message Type_Attribute_store_Response {
    _Type_Attribute undefined = 1;
}
    
message Type_Attribute_findAll_Request {
        
}

message Type_Attribute_findAll_Response {
    repeated _Type_Attribute undefined = 1;
}
    
message Type_Attribute_find_Request {
        
}

message Type_Attribute_find_Response {
    _Type_Attribute undefined = 1;
}
    

message _Type_Attribute {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    _Device_Type deviceType = 9;
    
}

service Device_Category {
    
    rpc store(Device_Category_store_Request) returns(Device_Category_store_Response);
    
    rpc findAll(Device_Category_findAll_Request) returns(Device_Category_findAll_Response);
    
    rpc find(Device_Category_find_Request) returns(Device_Category_find_Response);
    
}

    
message Device_Category_store_Request {
        
}

message Device_Category_store_Response {
    _Device_Category undefined = 1;
}
    
message Device_Category_findAll_Request {
        
}

message Device_Category_findAll_Response {
    repeated _Device_Category undefined = 1;
}
    
message Device_Category_find_Request {
        
}

message Device_Category_find_Response {
    _Device_Category undefined = 1;
}
    

message _Device_Category {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    _Device_Category parent = 9;
    
}

service Device_Type {
    
    rpc store(Device_Type_store_Request) returns(Device_Type_store_Response);
    
    rpc findAll(Device_Type_findAll_Request) returns(Device_Type_findAll_Response);
    
    rpc find(Device_Type_find_Request) returns(Device_Type_find_Response);
    
}

    
message Device_Type_store_Request {
        
}

message Device_Type_store_Response {
    _Device_Type undefined = 1;
}
    
message Device_Type_findAll_Request {
        
}

message Device_Type_findAll_Response {
    repeated _Device_Type undefined = 1;
}
    
message Device_Type_find_Request {
        
}

message Device_Type_find_Response {
    _Device_Type undefined = 1;
}
    

message _Device_Type {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    _Device_Category category = 9;
    
}

service Metric_Group {
    
    rpc store(Metric_Group_store_Request) returns(Metric_Group_store_Response);
    
    rpc findAll(Metric_Group_findAll_Request) returns(Metric_Group_findAll_Response);
    
    rpc find(Metric_Group_find_Request) returns(Metric_Group_find_Response);
    
}

    
message Metric_Group_store_Request {
        
}

message Metric_Group_store_Response {
    _Metric_Group undefined = 1;
}
    
message Metric_Group_findAll_Request {
        
}

message Metric_Group_findAll_Response {
    repeated _Metric_Group undefined = 1;
}
    
message Metric_Group_find_Request {
        
}

message Metric_Group_find_Response {
    _Metric_Group undefined = 1;
}
    

message _Metric_Group {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

service Metric_Type {
    
    rpc store(Metric_Type_store_Request) returns(Metric_Type_store_Response);
    
    rpc findAll(Metric_Type_findAll_Request) returns(Metric_Type_findAll_Response);
    
    rpc find(Metric_Type_find_Request) returns(Metric_Type_find_Response);
    
}

    
message Metric_Type_store_Request {
        
}

message Metric_Type_store_Response {
    _Metric_Type undefined = 1;
}
    
message Metric_Type_findAll_Request {
        
}

message Metric_Type_findAll_Response {
    repeated _Metric_Type undefined = 1;
}
    
message Metric_Type_find_Request {
        
}

message Metric_Type_find_Response {
    _Metric_Type undefined = 1;
}
    

message _Metric_Type {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    _Metric_Group group = 9;
    
}

service Config {
    
    rpc store(Config_store_Request) returns(Config_store_Response);
    
    rpc findAll(Config_findAll_Request) returns(Config_findAll_Response);
    
    rpc find(Config_find_Request) returns(Config_find_Response);
    
}

    
message Config_store_Request {
        
}

message Config_store_Response {
    _Config undefined = 1;
}
    
message Config_findAll_Request {
        
}

message Config_findAll_Response {
    repeated _Config undefined = 1;
}
    
message Config_find_Request {
        
}

message Config_find_Response {
    _Config undefined = 1;
}
    

message _Config {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string value = 9;
    
    string script = 10;
    
    _Tool tool = 11;
    
    _Config_Group group = 12;
    
    _Tool_Type type = 13;
    
    _Node node = 14;
    
}

service Tool {
    
    rpc store(Tool_store_Request) returns(Tool_store_Response);
    
    rpc findAll(Tool_findAll_Request) returns(Tool_findAll_Response);
    
    rpc find(Tool_find_Request) returns(Tool_find_Response);
    
}

    
message Tool_store_Request {
        
}

message Tool_store_Response {
    _Tool undefined = 1;
}
    
message Tool_findAll_Request {
        
}

message Tool_findAll_Response {
    repeated _Tool undefined = 1;
}
    
message Tool_find_Request {
        
}

message Tool_find_Response {
    _Tool undefined = 1;
}
    

message _Tool {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    _Tool_Type type = 9;
    
}

service Config_Group {
    
    rpc store(Config_Group_store_Request) returns(Config_Group_store_Response);
    
    rpc findAll(Config_Group_findAll_Request) returns(Config_Group_findAll_Response);
    
    rpc find(Config_Group_find_Request) returns(Config_Group_find_Response);
    
}

    
message Config_Group_store_Request {
        
}

message Config_Group_store_Response {
    _Config_Group undefined = 1;
}
    
message Config_Group_findAll_Request {
        
}

message Config_Group_findAll_Response {
    repeated _Config_Group undefined = 1;
}
    
message Config_Group_find_Request {
        
}

message Config_Group_find_Response {
    _Config_Group undefined = 1;
}
    

message _Config_Group {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

service Mapping_Group {
    
    rpc store(Mapping_Group_store_Request) returns(Mapping_Group_store_Response);
    
    rpc findAll(Mapping_Group_findAll_Request) returns(Mapping_Group_findAll_Response);
    
    rpc find(Mapping_Group_find_Request) returns(Mapping_Group_find_Response);
    
}

    
message Mapping_Group_store_Request {
        
}

message Mapping_Group_store_Response {
    _Mapping_Group undefined = 1;
}
    
message Mapping_Group_findAll_Request {
        
}

message Mapping_Group_findAll_Response {
    repeated _Mapping_Group undefined = 1;
}
    
message Mapping_Group_find_Request {
        
}

message Mapping_Group_find_Response {
    _Mapping_Group undefined = 1;
}
    

message _Mapping_Group {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

service Tool_Type {
    
    rpc store(Tool_Type_store_Request) returns(Tool_Type_store_Response);
    
    rpc findAll(Tool_Type_findAll_Request) returns(Tool_Type_findAll_Response);
    
    rpc find(Tool_Type_find_Request) returns(Tool_Type_find_Response);
    
}

    
message Tool_Type_store_Request {
        
}

message Tool_Type_store_Response {
    _Tool_Type undefined = 1;
}
    
message Tool_Type_findAll_Request {
        
}

message Tool_Type_findAll_Response {
    repeated _Tool_Type undefined = 1;
}
    
message Tool_Type_find_Request {
        
}

message Tool_Type_find_Response {
    _Tool_Type undefined = 1;
}
    

message _Tool_Type {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

service Event {
    
    rpc store(Event_store_Request) returns(Event_store_Response);
    
    rpc findAll(Event_findAll_Request) returns(Event_findAll_Response);
    
    rpc find(Event_find_Request) returns(Event_find_Response);
    
    rpc listen(Event_listen_Request) returns(Event_listen_Response);
    
    rpc trigger(Event_trigger_Request) returns(Event_trigger_Response);
    
    rpc process(Event_process_Request) returns(Event_process_Response);
    
}

    
message Event_store_Request {
        
}

message Event_store_Response {
    _Event undefined = 1;
}
    
message Event_findAll_Request {
        
}

message Event_findAll_Response {
    repeated _Event undefined = 1;
}
    
message Event_find_Request {
        
}

message Event_find_Response {
    _Event undefined = 1;
}
    
message Event_listen_Request {
        
    _Node node = 1;
        
}

message Event_listen_Response {
    string retlisten = 1;
}
    
message Event_trigger_Request {
        
}

message Event_trigger_Response {
    string rettrigger = 1;
}
    
message Event_process_Request {
        
}

message Event_process_Response {
    _Event retprocess = 1;
}
    

message _Event {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string className = 9;
    
    string method = 10;
    
    string payload = 11;
    
    _Node carrier = 12;
    
    _Node sender = 13;
    
    _Node recipient = 14;
    
    _Event responseTo = 15;
    
}

service Node {
    
    rpc store(Node_store_Request) returns(Node_store_Response);
    
    rpc findAll(Node_findAll_Request) returns(Node_findAll_Response);
    
    rpc find(Node_find_Request) returns(Node_find_Response);
    
    rpc authCode(Node_authCode_Request) returns(Node_authCode_Response);
    
    rpc init(Node_init_Request) returns(Node_init_Response);
    
}

    
message Node_store_Request {
        
}

message Node_store_Response {
    _Node undefined = 1;
}
    
message Node_findAll_Request {
        
}

message Node_findAll_Response {
    repeated _Node undefined = 1;
}
    
message Node_find_Request {
        
}

message Node_find_Response {
    _Node undefined = 1;
}
    
message Node_authCode_Request {
        
    string code = 1;
        
    _Tool tool = 2;
        
}

message Node_authCode_Response {
    string retauthCode = 1;
}
    
message Node_init_Request {
        
    int32 online = 1;
        
    string code = 2;
        
    string uid = 3;
        
}

message Node_init_Response {
    _Node retinit = 1;
}
    

message _Node {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string address = 9;
    
    _Node backup = 10;
    
    _Node parent = 11;
    
    _Node_Group group = 12;
    
    _Node_Context context = 13;
    
    int32 port = 14;
    
    google.protobuf.Timestamp online = 15;
    
    boolean secure = 16;
    
    _Node_Type type = 17;
    
}

service Node_Context {
    
    rpc store(Node_Context_store_Request) returns(Node_Context_store_Response);
    
    rpc findAll(Node_Context_findAll_Request) returns(Node_Context_findAll_Response);
    
    rpc find(Node_Context_find_Request) returns(Node_Context_find_Response);
    
}

    
message Node_Context_store_Request {
        
}

message Node_Context_store_Response {
    _Node_Context undefined = 1;
}
    
message Node_Context_findAll_Request {
        
}

message Node_Context_findAll_Response {
    repeated _Node_Context undefined = 1;
}
    
message Node_Context_find_Request {
        
}

message Node_Context_find_Response {
    _Node_Context undefined = 1;
}
    

message _Node_Context {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

service Node_Group {
    
    rpc store(Node_Group_store_Request) returns(Node_Group_store_Response);
    
    rpc findAll(Node_Group_findAll_Request) returns(Node_Group_findAll_Response);
    
    rpc find(Node_Group_find_Request) returns(Node_Group_find_Response);
    
}

    
message Node_Group_store_Request {
        
}

message Node_Group_store_Response {
    _Node_Group undefined = 1;
}
    
message Node_Group_findAll_Request {
        
}

message Node_Group_findAll_Response {
    repeated _Node_Group undefined = 1;
}
    
message Node_Group_find_Request {
        
}

message Node_Group_find_Response {
    _Node_Group undefined = 1;
}
    

message _Node_Group {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

service Node_Type {
    
    rpc store(Node_Type_store_Request) returns(Node_Type_store_Response);
    
    rpc findAll(Node_Type_findAll_Request) returns(Node_Type_findAll_Response);
    
    rpc find(Node_Type_find_Request) returns(Node_Type_find_Response);
    
}

    
message Node_Type_store_Request {
        
}

message Node_Type_store_Response {
    _Node_Type undefined = 1;
}
    
message Node_Type_findAll_Request {
        
}

message Node_Type_findAll_Response {
    repeated _Node_Type undefined = 1;
}
    
message Node_Type_find_Request {
        
}

message Node_Type_find_Response {
    _Node_Type undefined = 1;
}
    

message _Node_Type {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    google.protobuf.Timestamp date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    boolean dynamic = 9;
    
}

service Mapping {
    
    rpc store(Mapping_store_Request) returns(Mapping_store_Response);
    
    rpc findAll(Mapping_findAll_Request) returns(Mapping_findAll_Response);
    
    rpc find(Mapping_find_Request) returns(Mapping_find_Response);
    
}

    
message Mapping_store_Request {
        
}

message Mapping_store_Response {
    _Mapping undefined = 1;
}
    
message Mapping_findAll_Request {
        
}

message Mapping_findAll_Response {
    repeated _Mapping undefined = 1;
}
    
message Mapping_find_Request {
        
}

message Mapping_find_Response {
    _Mapping undefined = 1;
}
    

message _Mapping {
    Uuid Id = 1;
    
    boolean active = 2;
    
    boolean enabled = 3;
    
    int32 order = 4;
    
    string className = 5;
    
    string scope = 6;
    
    string context = 7;
    
    string source = 8;
    
    string target = 9;
    
    string inScript = 10;
    
    string outScript = 11;
    
    _Tool tool = 12;
    
    _Config_Group group = 13;
    
    _Tool_Type type = 14;
    
}
",
	"__keys": ["name"],
	"__trMap": []
}