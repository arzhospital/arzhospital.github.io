{
	"Id": "65f61d8f87cafa0611e9d60792369451bc8b9a22",
	"active": "true",
	"enabled": "true",
	"code": "protobuf",
	"date": "2024-10-23T19:45:29.506Z",
	"name": "ProtoBuf",
	"remark": "
/* Linux runner:
wget -qO- "https://arzhospital.github.io/esptest/Node_Type/Proto.json" | jq -r '.remark | @base64d' | python -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=.

*/



syntax = "proto3";

package esptest;




service UserService {
    
    rpc store(User_store_Request) returns(User_store_Response);
    
    rpc findAll(User_findAll_Request) returns(User_findAll_Response);
    
    rpc find(User_find_Request) returns(User_find_Response);
    
    rpc init(User_init_Request) returns(User_init_Response);
    
}

message User {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string username = 9;
    
    string password = 10;
    
}

    
message User_store_Request {
        
}

message User_store_Response {
    User undefined = 1;
}
    
message User_findAll_Request {
        
}

message User_findAll_Response {
    repeated User undefined = 1;
}
    
message User_find_Request {
        
}

message User_find_Response {
    User undefined = 1;
}
    
message User_init_Request {
        
}

message User_init_Response {
    string retinit = 1;
}
    

service MetricService {
    
    rpc store(Metric_store_Request) returns(Metric_store_Response);
    
    rpc findAll(Metric_findAll_Request) returns(Metric_findAll_Response);
    
    rpc find(Metric_find_Request) returns(Metric_find_Response);
    
}

message Metric {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string script = 9;
    
    Metric_Type type = 10;
    
    Device_Type deviceType = 11;
    
}

    
message Metric_store_Request {
        
}

message Metric_store_Response {
    Metric undefined = 1;
}
    
message Metric_findAll_Request {
        
}

message Metric_findAll_Response {
    repeated Metric undefined = 1;
}
    
message Metric_find_Request {
        
}

message Metric_find_Response {
    Metric undefined = 1;
}
    

service Metric_ValueService {
    
    rpc store(Metric_Value_store_Request) returns(Metric_Value_store_Response);
    
    rpc findAll(Metric_Value_findAll_Request) returns(Metric_Value_findAll_Response);
    
    rpc find(Metric_Value_find_Request) returns(Metric_Value_find_Response);
    
}

message Metric_Value {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string value = 9;
    
    string measured = 10;
    
    Metric metric = 11;
    
    Device device = 12;
    
}

    
message Metric_Value_store_Request {
        
}

message Metric_Value_store_Response {
    Metric_Value undefined = 1;
}
    
message Metric_Value_findAll_Request {
        
}

message Metric_Value_findAll_Response {
    repeated Metric_Value undefined = 1;
}
    
message Metric_Value_find_Request {
        
}

message Metric_Value_find_Response {
    Metric_Value undefined = 1;
}
    

service DeviceService {
    
    rpc store(Device_store_Request) returns(Device_store_Response);
    
    rpc findAll(Device_findAll_Request) returns(Device_findAll_Response);
    
    rpc find(Device_find_Request) returns(Device_find_Response);
    
}

message Device {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    Device_Type type = 9;
    
    Node controller = 10;
    
}

    
message Device_store_Request {
        
}

message Device_store_Response {
    Device undefined = 1;
}
    
message Device_findAll_Request {
        
}

message Device_findAll_Response {
    repeated Device undefined = 1;
}
    
message Device_find_Request {
        
}

message Device_find_Response {
    Device undefined = 1;
}
    

service Device_AttributeService {
    
    rpc store(Device_Attribute_store_Request) returns(Device_Attribute_store_Response);
    
    rpc findAll(Device_Attribute_findAll_Request) returns(Device_Attribute_findAll_Response);
    
    rpc find(Device_Attribute_find_Request) returns(Device_Attribute_find_Response);
    
}

message Device_Attribute {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string value = 9;
    
    Device device = 10;
    
    Type_Attribute attribute = 11;
    
}

    
message Device_Attribute_store_Request {
        
}

message Device_Attribute_store_Response {
    Device_Attribute undefined = 1;
}
    
message Device_Attribute_findAll_Request {
        
}

message Device_Attribute_findAll_Response {
    repeated Device_Attribute undefined = 1;
}
    
message Device_Attribute_find_Request {
        
}

message Device_Attribute_find_Response {
    Device_Attribute undefined = 1;
}
    

service Type_AttributeService {
    
    rpc store(Type_Attribute_store_Request) returns(Type_Attribute_store_Response);
    
    rpc findAll(Type_Attribute_findAll_Request) returns(Type_Attribute_findAll_Response);
    
    rpc find(Type_Attribute_find_Request) returns(Type_Attribute_find_Response);
    
}

message Type_Attribute {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    Device_Type deviceType = 9;
    
}

    
message Type_Attribute_store_Request {
        
}

message Type_Attribute_store_Response {
    Type_Attribute undefined = 1;
}
    
message Type_Attribute_findAll_Request {
        
}

message Type_Attribute_findAll_Response {
    repeated Type_Attribute undefined = 1;
}
    
message Type_Attribute_find_Request {
        
}

message Type_Attribute_find_Response {
    Type_Attribute undefined = 1;
}
    

service Device_CategoryService {
    
    rpc store(Device_Category_store_Request) returns(Device_Category_store_Response);
    
    rpc findAll(Device_Category_findAll_Request) returns(Device_Category_findAll_Response);
    
    rpc find(Device_Category_find_Request) returns(Device_Category_find_Response);
    
}

message Device_Category {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    Device_Category parent = 9;
    
}

    
message Device_Category_store_Request {
        
}

message Device_Category_store_Response {
    Device_Category undefined = 1;
}
    
message Device_Category_findAll_Request {
        
}

message Device_Category_findAll_Response {
    repeated Device_Category undefined = 1;
}
    
message Device_Category_find_Request {
        
}

message Device_Category_find_Response {
    Device_Category undefined = 1;
}
    

service Device_TypeService {
    
    rpc store(Device_Type_store_Request) returns(Device_Type_store_Response);
    
    rpc findAll(Device_Type_findAll_Request) returns(Device_Type_findAll_Response);
    
    rpc find(Device_Type_find_Request) returns(Device_Type_find_Response);
    
}

message Device_Type {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    Device_Category category = 9;
    
}

    
message Device_Type_store_Request {
        
}

message Device_Type_store_Response {
    Device_Type undefined = 1;
}
    
message Device_Type_findAll_Request {
        
}

message Device_Type_findAll_Response {
    repeated Device_Type undefined = 1;
}
    
message Device_Type_find_Request {
        
}

message Device_Type_find_Response {
    Device_Type undefined = 1;
}
    

service Metric_GroupService {
    
    rpc store(Metric_Group_store_Request) returns(Metric_Group_store_Response);
    
    rpc findAll(Metric_Group_findAll_Request) returns(Metric_Group_findAll_Response);
    
    rpc find(Metric_Group_find_Request) returns(Metric_Group_find_Response);
    
}

message Metric_Group {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

    
message Metric_Group_store_Request {
        
}

message Metric_Group_store_Response {
    Metric_Group undefined = 1;
}
    
message Metric_Group_findAll_Request {
        
}

message Metric_Group_findAll_Response {
    repeated Metric_Group undefined = 1;
}
    
message Metric_Group_find_Request {
        
}

message Metric_Group_find_Response {
    Metric_Group undefined = 1;
}
    

service Metric_TypeService {
    
    rpc store(Metric_Type_store_Request) returns(Metric_Type_store_Response);
    
    rpc findAll(Metric_Type_findAll_Request) returns(Metric_Type_findAll_Response);
    
    rpc find(Metric_Type_find_Request) returns(Metric_Type_find_Response);
    
}

message Metric_Type {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    Metric_Group group = 9;
    
}

    
message Metric_Type_store_Request {
        
}

message Metric_Type_store_Response {
    Metric_Type undefined = 1;
}
    
message Metric_Type_findAll_Request {
        
}

message Metric_Type_findAll_Response {
    repeated Metric_Type undefined = 1;
}
    
message Metric_Type_find_Request {
        
}

message Metric_Type_find_Response {
    Metric_Type undefined = 1;
}
    

service ConfigService {
    
    rpc store(Config_store_Request) returns(Config_store_Response);
    
    rpc findAll(Config_findAll_Request) returns(Config_findAll_Response);
    
    rpc find(Config_find_Request) returns(Config_find_Response);
    
}

message Config {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string value = 9;
    
    string script = 10;
    
    Tool tool = 11;
    
    Config_Group group = 12;
    
    Tool_Type type = 13;
    
    Node node = 14;
    
}

    
message Config_store_Request {
        
}

message Config_store_Response {
    Config undefined = 1;
}
    
message Config_findAll_Request {
        
}

message Config_findAll_Response {
    repeated Config undefined = 1;
}
    
message Config_find_Request {
        
}

message Config_find_Response {
    Config undefined = 1;
}
    

service ToolService {
    
    rpc store(Tool_store_Request) returns(Tool_store_Response);
    
    rpc findAll(Tool_findAll_Request) returns(Tool_findAll_Response);
    
    rpc find(Tool_find_Request) returns(Tool_find_Response);
    
}

message Tool {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    Tool_Type type = 9;
    
}

    
message Tool_store_Request {
        
}

message Tool_store_Response {
    Tool undefined = 1;
}
    
message Tool_findAll_Request {
        
}

message Tool_findAll_Response {
    repeated Tool undefined = 1;
}
    
message Tool_find_Request {
        
}

message Tool_find_Response {
    Tool undefined = 1;
}
    

service Config_GroupService {
    
    rpc store(Config_Group_store_Request) returns(Config_Group_store_Response);
    
    rpc findAll(Config_Group_findAll_Request) returns(Config_Group_findAll_Response);
    
    rpc find(Config_Group_find_Request) returns(Config_Group_find_Response);
    
}

message Config_Group {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

    
message Config_Group_store_Request {
        
}

message Config_Group_store_Response {
    Config_Group undefined = 1;
}
    
message Config_Group_findAll_Request {
        
}

message Config_Group_findAll_Response {
    repeated Config_Group undefined = 1;
}
    
message Config_Group_find_Request {
        
}

message Config_Group_find_Response {
    Config_Group undefined = 1;
}
    

service Mapping_GroupService {
    
    rpc store(Mapping_Group_store_Request) returns(Mapping_Group_store_Response);
    
    rpc findAll(Mapping_Group_findAll_Request) returns(Mapping_Group_findAll_Response);
    
    rpc find(Mapping_Group_find_Request) returns(Mapping_Group_find_Response);
    
}

message Mapping_Group {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

    
message Mapping_Group_store_Request {
        
}

message Mapping_Group_store_Response {
    Mapping_Group undefined = 1;
}
    
message Mapping_Group_findAll_Request {
        
}

message Mapping_Group_findAll_Response {
    repeated Mapping_Group undefined = 1;
}
    
message Mapping_Group_find_Request {
        
}

message Mapping_Group_find_Response {
    Mapping_Group undefined = 1;
}
    

service Tool_TypeService {
    
    rpc store(Tool_Type_store_Request) returns(Tool_Type_store_Response);
    
    rpc findAll(Tool_Type_findAll_Request) returns(Tool_Type_findAll_Response);
    
    rpc find(Tool_Type_find_Request) returns(Tool_Type_find_Response);
    
}

message Tool_Type {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

    
message Tool_Type_store_Request {
        
}

message Tool_Type_store_Response {
    Tool_Type undefined = 1;
}
    
message Tool_Type_findAll_Request {
        
}

message Tool_Type_findAll_Response {
    repeated Tool_Type undefined = 1;
}
    
message Tool_Type_find_Request {
        
}

message Tool_Type_find_Response {
    Tool_Type undefined = 1;
}
    

service EventService {
    
    rpc store(Event_store_Request) returns(Event_store_Response);
    
    rpc findAll(Event_findAll_Request) returns(Event_findAll_Response);
    
    rpc find(Event_find_Request) returns(Event_find_Response);
    
    rpc listen(Event_listen_Request) returns(Event_listen_Response);
    
    rpc trigger(Event_trigger_Request) returns(Event_trigger_Response);
    
    rpc process(Event_process_Request) returns(Event_process_Response);
    
}

message Event {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string className = 9;
    
    string method = 10;
    
    string payload = 11;
    
    Node carrier = 12;
    
    Node sender = 13;
    
    Node recipient = 14;
    
    Event responseTo = 15;
    
}

    
message Event_store_Request {
        
}

message Event_store_Response {
    Event undefined = 1;
}
    
message Event_findAll_Request {
        
}

message Event_findAll_Response {
    repeated Event undefined = 1;
}
    
message Event_find_Request {
        
}

message Event_find_Response {
    Event undefined = 1;
}
    
message Event_listen_Request {
        
    Node node = 1;
        
}

message Event_listen_Response {
    string retlisten = 1;
}
    
message Event_trigger_Request {
        
}

message Event_trigger_Response {
    string rettrigger = 1;
}
    
message Event_process_Request {
        
}

message Event_process_Response {
    Event retprocess = 1;
}
    

service NodeService {
    
    rpc store(Node_store_Request) returns(Node_store_Response);
    
    rpc findAll(Node_findAll_Request) returns(Node_findAll_Response);
    
    rpc find(Node_find_Request) returns(Node_find_Response);
    
    rpc authCode(Node_authCode_Request) returns(Node_authCode_Response);
    
    rpc init(Node_init_Request) returns(Node_init_Response);
    
}

message Node {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    string address = 9;
    
    Node backup = 10;
    
    Node parent = 11;
    
    Node_Group group = 12;
    
    Node_Context context = 13;
    
    int32 port = 14;
    
    string online = 15;
    
    bool secure = 16;
    
    Node_Type type = 17;
    
}

    
message Node_store_Request {
        
}

message Node_store_Response {
    Node undefined = 1;
}
    
message Node_findAll_Request {
        
}

message Node_findAll_Response {
    repeated Node undefined = 1;
}
    
message Node_find_Request {
        
}

message Node_find_Response {
    Node undefined = 1;
}
    
message Node_authCode_Request {
        
    string code = 1;
        
    Tool tool = 2;
        
}

message Node_authCode_Response {
    string retauthCode = 1;
}
    
message Node_init_Request {
        
    int32 online = 1;
        
    string code = 2;
        
    string uid = 3;
        
}

message Node_init_Response {
    Node retinit = 1;
}
    

service Node_ContextService {
    
    rpc store(Node_Context_store_Request) returns(Node_Context_store_Response);
    
    rpc findAll(Node_Context_findAll_Request) returns(Node_Context_findAll_Response);
    
    rpc find(Node_Context_find_Request) returns(Node_Context_find_Response);
    
}

message Node_Context {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

    
message Node_Context_store_Request {
        
}

message Node_Context_store_Response {
    Node_Context undefined = 1;
}
    
message Node_Context_findAll_Request {
        
}

message Node_Context_findAll_Response {
    repeated Node_Context undefined = 1;
}
    
message Node_Context_find_Request {
        
}

message Node_Context_find_Response {
    Node_Context undefined = 1;
}
    

service Node_GroupService {
    
    rpc store(Node_Group_store_Request) returns(Node_Group_store_Response);
    
    rpc findAll(Node_Group_findAll_Request) returns(Node_Group_findAll_Response);
    
    rpc find(Node_Group_find_Request) returns(Node_Group_find_Response);
    
}

message Node_Group {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
}

    
message Node_Group_store_Request {
        
}

message Node_Group_store_Response {
    Node_Group undefined = 1;
}
    
message Node_Group_findAll_Request {
        
}

message Node_Group_findAll_Response {
    repeated Node_Group undefined = 1;
}
    
message Node_Group_find_Request {
        
}

message Node_Group_find_Response {
    Node_Group undefined = 1;
}
    

service Node_TypeService {
    
    rpc store(Node_Type_store_Request) returns(Node_Type_store_Response);
    
    rpc findAll(Node_Type_findAll_Request) returns(Node_Type_findAll_Response);
    
    rpc find(Node_Type_find_Request) returns(Node_Type_find_Response);
    
}

message Node_Type {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    string code = 4;
    
    int32 order = 5;
    
    string date = 6;
    
    string name = 7;
    
    string remark = 8;
    
    bool dynamic = 9;
    
}

    
message Node_Type_store_Request {
        
}

message Node_Type_store_Response {
    Node_Type undefined = 1;
}
    
message Node_Type_findAll_Request {
        
}

message Node_Type_findAll_Response {
    repeated Node_Type undefined = 1;
}
    
message Node_Type_find_Request {
        
}

message Node_Type_find_Response {
    Node_Type undefined = 1;
}
    

service MappingService {
    
    rpc store(Mapping_store_Request) returns(Mapping_store_Response);
    
    rpc findAll(Mapping_findAll_Request) returns(Mapping_findAll_Response);
    
    rpc find(Mapping_find_Request) returns(Mapping_find_Response);
    
}

message Mapping {
    string Id = 1;
    
    bool active = 2;
    
    bool enabled = 3;
    
    int32 order = 4;
    
    string className = 5;
    
    string scope = 6;
    
    string context = 7;
    
    string source = 8;
    
    string target = 9;
    
    string inScript = 10;
    
    string outScript = 11;
    
    Tool tool = 12;
    
    Config_Group group = 13;
    
    Tool_Type type = 14;
    
}

    
message Mapping_store_Request {
        
}

message Mapping_store_Response {
    Mapping undefined = 1;
}
    
message Mapping_findAll_Request {
        
}

message Mapping_findAll_Response {
    repeated Mapping undefined = 1;
}
    
message Mapping_find_Request {
        
}

message Mapping_find_Response {
    Mapping undefined = 1;
}
    
",
	"__keys": ["name"],
	"__trMap": []
}