{
	"Id": "46a737f0b2e4c38b9f40b1a8e16fd4852e95f831",
	"active": "true",
	"enabled": "true",
	"code": "snow",
	"date": "2024-10-30T09:03:46.532Z",
	"name": "SNOW",
	"remark": "var esptest = Class.create();
esptest.prototype = {
    initialize :function(){},
    type :'esptest'
};



    
    esptest.User = class {
    
        /************* User.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* User.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* User.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* User.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* User.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* User.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* User.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* User.username GETTERS AND SETTERS **********************/
        username(v){
        
            if(typeof(v)!=='undefined'){
                this._username = v;
                return this;
            }else{
                return this._username;
            }
        }
    
        /************* User.password GETTERS AND SETTERS **********************/
        password(v){
        
            if(typeof(v)!=='undefined'){
                this._password = v;
                return this;
            }else{
                return this._password;
            }
        }
    
    
    


    
        /************* User.store() **********************/
        // 
        store(__event){
            let __toString = 'User.store(): ';
            
        }
    
        /************* User.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'User.findAll(): ';
            
        }
    
        /************* User.find() **********************/
        // 
        find(__event){
            let __toString = 'User.find(): ';
            
        }
    
        /************* User.init() **********************/
        // 
        init(__event){
            let __toString = 'User.init(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric = class {
    
        /************* Metric.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric.script GETTERS AND SETTERS **********************/
        script(v){
        
            if(typeof(v)!=='undefined'){
                this._script = v;
                return this;
            }else{
                return this._script;
            }
        }
    
        /************* Metric.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Metric.deviceType GETTERS AND SETTERS **********************/
        deviceType(v){
        
            if(typeof(v)!=='undefined'){
                this._deviceType = v;
                return this;
            }else{
                return this._deviceType;
            }
        }
    
    
    
        /************* Metric.metric_Metric_Values GETTERS AND SETTERS **********************/
        metric_Metric_Values(v){
        }
    


    
        /************* Metric.store() **********************/
        // 
        store(__event){
            let __toString = 'Metric.store(): ';
            
        }
    
        /************* Metric.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Metric.findAll(): ';
            
        }
    
        /************* Metric.find() **********************/
        // 
        find(__event){
            let __toString = 'Metric.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Value = class {
    
        /************* Metric_Value.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Value.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Value.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Value.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Value.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Value.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Value.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric_Value.value GETTERS AND SETTERS **********************/
        value(v){
        
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Metric_Value.measured GETTERS AND SETTERS **********************/
        measured(v){
        
            if(typeof(v)!=='undefined'){
                this._measured = v;
                return this;
            }else{
                return this._measured;
            }
        }
    
        /************* Metric_Value.metric GETTERS AND SETTERS **********************/
        metric(v){
        
            if(typeof(v)!=='undefined'){
                this._metric = v;
                return this;
            }else{
                return this._metric;
            }
        }
    
        /************* Metric_Value.device GETTERS AND SETTERS **********************/
        device(v){
        
            if(typeof(v)!=='undefined'){
                this._device = v;
                return this;
            }else{
                return this._device;
            }
        }
    
    
    


    
        /************* Metric_Value.store() **********************/
        // 
        store(__event){
            let __toString = 'Metric_Value.store(): ';
            
        }
    
        /************* Metric_Value.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Metric_Value.findAll(): ';
            
        }
    
        /************* Metric_Value.find() **********************/
        // 
        find(__event){
            let __toString = 'Metric_Value.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device = class {
    
        /************* Device.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Device.controller GETTERS AND SETTERS **********************/
        controller(v){
        
            if(typeof(v)!=='undefined'){
                this._controller = v;
                return this;
            }else{
                return this._controller;
            }
        }
    
    
    
        /************* Device.device_Metric_Values GETTERS AND SETTERS **********************/
        device_Metric_Values(v){
        }
    
        /************* Device.device_Device_Attributes GETTERS AND SETTERS **********************/
        device_Device_Attributes(v){
        }
    


    
        /************* Device.store() **********************/
        // 
        store(__event){
            let __toString = 'Device.store(): ';
            
        }
    
        /************* Device.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Device.findAll(): ';
            
        }
    
        /************* Device.find() **********************/
        // 
        find(__event){
            let __toString = 'Device.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Attribute = class {
    
        /************* Device_Attribute.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Attribute.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Attribute.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Attribute.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Attribute.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Attribute.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Attribute.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Attribute.value GETTERS AND SETTERS **********************/
        value(v){
        
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Device_Attribute.device GETTERS AND SETTERS **********************/
        device(v){
        
            if(typeof(v)!=='undefined'){
                this._device = v;
                return this;
            }else{
                return this._device;
            }
        }
    
        /************* Device_Attribute.attribute GETTERS AND SETTERS **********************/
        attribute(v){
        
            if(typeof(v)!=='undefined'){
                this._attribute = v;
                return this;
            }else{
                return this._attribute;
            }
        }
    
    
    


    
        /************* Device_Attribute.store() **********************/
        // 
        store(__event){
            let __toString = 'Device_Attribute.store(): ';
            
        }
    
        /************* Device_Attribute.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Device_Attribute.findAll(): ';
            
        }
    
        /************* Device_Attribute.find() **********************/
        // 
        find(__event){
            let __toString = 'Device_Attribute.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Type_Attribute = class {
    
        /************* Type_Attribute.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Type_Attribute.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Type_Attribute.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Type_Attribute.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Type_Attribute.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Type_Attribute.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Type_Attribute.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Type_Attribute.deviceType GETTERS AND SETTERS **********************/
        deviceType(v){
        
            if(typeof(v)!=='undefined'){
                this._deviceType = v;
                return this;
            }else{
                return this._deviceType;
            }
        }
    
    
    
        /************* Type_Attribute.attribute_Device_Attributes GETTERS AND SETTERS **********************/
        attribute_Device_Attributes(v){
        }
    


    
        /************* Type_Attribute.store() **********************/
        // 
        store(__event){
            let __toString = 'Type_Attribute.store(): ';
            
        }
    
        /************* Type_Attribute.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Type_Attribute.findAll(): ';
            
        }
    
        /************* Type_Attribute.find() **********************/
        // 
        find(__event){
            let __toString = 'Type_Attribute.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Category = class {
    
        /************* Device_Category.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Category.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Category.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Category.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Category.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Category.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Category.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Category.parent GETTERS AND SETTERS **********************/
        parent(v){
        
            if(typeof(v)!=='undefined'){
                this._parent = v;
                return this;
            }else{
                return this._parent;
            }
        }
    
    
    
        /************* Device_Category.parent_Device_Categorys GETTERS AND SETTERS **********************/
        parent_Device_Categorys(v){
        }
    
        /************* Device_Category.category_Device_Types GETTERS AND SETTERS **********************/
        category_Device_Types(v){
        }
    


    
        /************* Device_Category.store() **********************/
        // 
        store(__event){
            let __toString = 'Device_Category.store(): ';
            
        }
    
        /************* Device_Category.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Device_Category.findAll(): ';
            
        }
    
        /************* Device_Category.find() **********************/
        // 
        find(__event){
            let __toString = 'Device_Category.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Type = class {
    
        /************* Device_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Type.category GETTERS AND SETTERS **********************/
        category(v){
        
            if(typeof(v)!=='undefined'){
                this._category = v;
                return this;
            }else{
                return this._category;
            }
        }
    
    
    
        /************* Device_Type.deviceType_Metrics GETTERS AND SETTERS **********************/
        deviceType_Metrics(v){
        }
    
        /************* Device_Type.type_Devices GETTERS AND SETTERS **********************/
        type_Devices(v){
        }
    
        /************* Device_Type.deviceType_Type_Attributes GETTERS AND SETTERS **********************/
        deviceType_Type_Attributes(v){
        }
    


    
        /************* Device_Type.store() **********************/
        // 
        store(__event){
            let __toString = 'Device_Type.store(): ';
            
        }
    
        /************* Device_Type.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Device_Type.findAll(): ';
            
        }
    
        /************* Device_Type.find() **********************/
        // 
        find(__event){
            let __toString = 'Device_Type.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Group = class {
    
        /************* Metric_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Metric_Group.group_Metric_Types GETTERS AND SETTERS **********************/
        group_Metric_Types(v){
        }
    


    
        /************* Metric_Group.store() **********************/
        // 
        store(__event){
            let __toString = 'Metric_Group.store(): ';
            
        }
    
        /************* Metric_Group.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Metric_Group.findAll(): ';
            
        }
    
        /************* Metric_Group.find() **********************/
        // 
        find(__event){
            let __toString = 'Metric_Group.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Type = class {
    
        /************* Metric_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric_Type.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
    
    
        /************* Metric_Type.type_Metrics GETTERS AND SETTERS **********************/
        type_Metrics(v){
        }
    


    
        /************* Metric_Type.store() **********************/
        // 
        store(__event){
            let __toString = 'Metric_Type.store(): ';
            
        }
    
        /************* Metric_Type.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Metric_Type.findAll(): ';
            
        }
    
        /************* Metric_Type.find() **********************/
        // 
        find(__event){
            let __toString = 'Metric_Type.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Config = class {
    
        /************* Config.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Config.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Config.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Config.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Config.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Config.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Config.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Config.value GETTERS AND SETTERS **********************/
        value(v){
        
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Config.script GETTERS AND SETTERS **********************/
        script(v){
        
            if(typeof(v)!=='undefined'){
                this._script = v;
                return this;
            }else{
                return this._script;
            }
        }
    
        /************* Config.tool GETTERS AND SETTERS **********************/
        tool(v){
        
            if(typeof(v)!=='undefined'){
                this._tool = v;
                return this;
            }else{
                return this._tool;
            }
        }
    
        /************* Config.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Config.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Config.node GETTERS AND SETTERS **********************/
        node(v){
        
            if(typeof(v)!=='undefined'){
                this._node = v;
                return this;
            }else{
                return this._node;
            }
        }
    
    
    


    
        /************* Config.store() **********************/
        // 
        store(__event){
            let __toString = 'Config.store(): ';
            
        }
    
        /************* Config.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Config.findAll(): ';
            
        }
    
        /************* Config.find() **********************/
        // 
        find(__event){
            let __toString = 'Config.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Tool = class {
    
        /************* Tool.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Tool.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Tool.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Tool.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Tool.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Tool.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Tool.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Tool.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
        /************* Tool.tool_Configs GETTERS AND SETTERS **********************/
        tool_Configs(v){
        }
    
        /************* Tool.tool_Mappings GETTERS AND SETTERS **********************/
        tool_Mappings(v){
        }
    


    
        /************* Tool.store() **********************/
        // 
        store(__event){
            let __toString = 'Tool.store(): ';
            
        }
    
        /************* Tool.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Tool.findAll(): ';
            
        }
    
        /************* Tool.find() **********************/
        // 
        find(__event){
            let __toString = 'Tool.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Config_Group = class {
    
        /************* Config_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Config_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Config_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Config_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Config_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Config_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Config_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Config_Group.group_Configs GETTERS AND SETTERS **********************/
        group_Configs(v){
        }
    
        /************* Config_Group.group_Mappings GETTERS AND SETTERS **********************/
        group_Mappings(v){
        }
    


    
        /************* Config_Group.store() **********************/
        // 
        store(__event){
            let __toString = 'Config_Group.store(): ';
            
        }
    
        /************* Config_Group.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Config_Group.findAll(): ';
            
        }
    
        /************* Config_Group.find() **********************/
        // 
        find(__event){
            let __toString = 'Config_Group.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Mapping_Group = class {
    
        /************* Mapping_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Mapping_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Mapping_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Mapping_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Mapping_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Mapping_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Mapping_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    


    
        /************* Mapping_Group.store() **********************/
        // 
        store(__event){
            let __toString = 'Mapping_Group.store(): ';
            
        }
    
        /************* Mapping_Group.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Mapping_Group.findAll(): ';
            
        }
    
        /************* Mapping_Group.find() **********************/
        // 
        find(__event){
            let __toString = 'Mapping_Group.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Tool_Type = class {
    
        /************* Tool_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Tool_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Tool_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Tool_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Tool_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Tool_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Tool_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Tool_Type.type_Configs GETTERS AND SETTERS **********************/
        type_Configs(v){
        }
    
        /************* Tool_Type.type_Tools GETTERS AND SETTERS **********************/
        type_Tools(v){
        }
    
        /************* Tool_Type.type_Mappings GETTERS AND SETTERS **********************/
        type_Mappings(v){
        }
    


    
        /************* Tool_Type.store() **********************/
        // 
        store(__event){
            let __toString = 'Tool_Type.store(): ';
            
        }
    
        /************* Tool_Type.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Tool_Type.findAll(): ';
            
        }
    
        /************* Tool_Type.find() **********************/
        // 
        find(__event){
            let __toString = 'Tool_Type.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Event = class {
    
        /************* Event.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Event.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Event.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Event.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Event.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Event.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Event.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Event.className GETTERS AND SETTERS **********************/
        className(v){
        
            if(typeof(v)!=='undefined'){
                this._className = v;
                return this;
            }else{
                return this._className;
            }
        }
    
        /************* Event.method GETTERS AND SETTERS **********************/
        method(v){
        
            if(typeof(v)!=='undefined'){
                this._method = v;
                return this;
            }else{
                return this._method;
            }
        }
    
        /************* Event.payload GETTERS AND SETTERS **********************/
        payload(v){
        
            if(typeof(v)!=='undefined'){
                this._payload = v;
                return this;
            }else{
                return this._payload;
            }
        }
    
        /************* Event.carrier GETTERS AND SETTERS **********************/
        carrier(v){
        
            if(typeof(v)!=='undefined'){
                this._carrier = v;
                return this;
            }else{
                return this._carrier;
            }
        }
    
        /************* Event.sender GETTERS AND SETTERS **********************/
        sender(v){
        
            if(typeof(v)!=='undefined'){
                this._sender = v;
                return this;
            }else{
                return this._sender;
            }
        }
    
        /************* Event.recipient GETTERS AND SETTERS **********************/
        recipient(v){
        
            if(typeof(v)!=='undefined'){
                this._recipient = v;
                return this;
            }else{
                return this._recipient;
            }
        }
    
        /************* Event.responseTo GETTERS AND SETTERS **********************/
        responseTo(v){
        
            if(typeof(v)!=='undefined'){
                this._responseTo = v;
                return this;
            }else{
                return this._responseTo;
            }
        }
    
    
    
        /************* Event.responseTo_Events GETTERS AND SETTERS **********************/
        responseTo_Events(v){
        }
    


    
        /************* Event.store() **********************/
        // 
        store(__event){
            let __toString = 'Event.store(): ';
            
        }
    
        /************* Event.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Event.findAll(): ';
            
        }
    
        /************* Event.find() **********************/
        // 
        find(__event){
            let __toString = 'Event.find(): ';
            
        }
    
        /************* Event.listen() **********************/
        // 
        listen(__event, node){
            let __toString = 'Event.listen(): ';
            
        }
    
        /************* Event.trigger() **********************/
        // 
        trigger(__event){
            let __toString = 'Event.trigger(): ';
            
        }
    
        /************* Event.process() **********************/
        // 
        process(__event){
            let __toString = 'Event.process(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node = class {
    
        /************* Node.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Node.address GETTERS AND SETTERS **********************/
        address(v){
        
            if(typeof(v)!=='undefined'){
                this._address = v;
                return this;
            }else{
                return this._address;
            }
        }
    
        /************* Node.backup GETTERS AND SETTERS **********************/
        backup(v){
        
            if(typeof(v)!=='undefined'){
                this._backup = v;
                return this;
            }else{
                return this._backup;
            }
        }
    
        /************* Node.parent GETTERS AND SETTERS **********************/
        parent(v){
        
            if(typeof(v)!=='undefined'){
                this._parent = v;
                return this;
            }else{
                return this._parent;
            }
        }
    
        /************* Node.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Node.context GETTERS AND SETTERS **********************/
        context(v){
        
            if(typeof(v)!=='undefined'){
                this._context = v;
                return this;
            }else{
                return this._context;
            }
        }
    
        /************* Node.port GETTERS AND SETTERS **********************/
        port(v){
        
            if(typeof(v)!=='undefined'){
                this._port = v;
                return this;
            }else{
                return this._port;
            }
        }
    
        /************* Node.online GETTERS AND SETTERS **********************/
        online(v){
        
            if(typeof(v)!=='undefined'){
                this._online = v;
                return this;
            }else{
                return this._online;
            }
        }
    
        /************* Node.secure GETTERS AND SETTERS **********************/
        secure(v){
        
            if(typeof(v)!=='undefined'){
                this._secure = v;
                return this;
            }else{
                return this._secure;
            }
        }
    
        /************* Node.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
        /************* Node.controller_Devices GETTERS AND SETTERS **********************/
        controller_Devices(v){
        }
    
        /************* Node.node_Configs GETTERS AND SETTERS **********************/
        node_Configs(v){
        }
    
        /************* Node.carrier_Events GETTERS AND SETTERS **********************/
        carrier_Events(v){
        }
    
        /************* Node.sender_Events GETTERS AND SETTERS **********************/
        sender_Events(v){
        }
    
        /************* Node.recipient_Events GETTERS AND SETTERS **********************/
        recipient_Events(v){
        }
    
        /************* Node.backup_Nodes GETTERS AND SETTERS **********************/
        backup_Nodes(v){
        }
    
        /************* Node.parent_Nodes GETTERS AND SETTERS **********************/
        parent_Nodes(v){
        }
    


    
        /************* Node.store() **********************/
        // 
        store(__event){
            let __toString = 'Node.store(): ';
            
        }
    
        /************* Node.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Node.findAll(): ';
            
        }
    
        /************* Node.find() **********************/
        // 
        find(__event){
            let __toString = 'Node.find(): ';
            
        }
    
        /************* Node.authCode() **********************/
        // 
        authCode(__event, code, tool){
            let __toString = 'Node.authCode(): ';
            
        }
    
        /************* Node.init() **********************/
        // 
        init(__event, online, code, uid){
            let __toString = 'Node.init(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Context = class {
    
        /************* Node_Context.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Context.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Context.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Context.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Context.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Context.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Context.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Node_Context.context_Nodes GETTERS AND SETTERS **********************/
        context_Nodes(v){
        }
    


    
        /************* Node_Context.store() **********************/
        // 
        store(__event){
            let __toString = 'Node_Context.store(): ';
            
        }
    
        /************* Node_Context.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Node_Context.findAll(): ';
            
        }
    
        /************* Node_Context.find() **********************/
        // 
        find(__event){
            let __toString = 'Node_Context.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Group = class {
    
        /************* Node_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Node_Group.group_Nodes GETTERS AND SETTERS **********************/
        group_Nodes(v){
        }
    


    
        /************* Node_Group.store() **********************/
        // 
        store(__event){
            let __toString = 'Node_Group.store(): ';
            
        }
    
        /************* Node_Group.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Node_Group.findAll(): ';
            
        }
    
        /************* Node_Group.find() **********************/
        // 
        find(__event){
            let __toString = 'Node_Group.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Type = class {
    
        /************* Node_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Node_Type.dynamic GETTERS AND SETTERS **********************/
        dynamic(v){
        
            if(typeof(v)!=='undefined'){
                this._dynamic = v;
                return this;
            }else{
                return this._dynamic;
            }
        }
    
    
    
        /************* Node_Type.type_Nodes GETTERS AND SETTERS **********************/
        type_Nodes(v){
        }
    


    
        /************* Node_Type.store() **********************/
        // 
        store(__event){
            let __toString = 'Node_Type.store(): ';
            
        }
    
        /************* Node_Type.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Node_Type.findAll(): ';
            
        }
    
        /************* Node_Type.find() **********************/
        // 
        find(__event){
            let __toString = 'Node_Type.find(): ';
            
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Mapping = class {
    
        /************* Mapping.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Mapping.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Mapping.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Mapping.className GETTERS AND SETTERS **********************/
        className(v){
        
            if(typeof(v)!=='undefined'){
                this._className = v;
                return this;
            }else{
                return this._className;
            }
        }
    
        /************* Mapping.scope GETTERS AND SETTERS **********************/
        scope(v){
        
            if(typeof(v)!=='undefined'){
                this._scope = v;
                return this;
            }else{
                return this._scope;
            }
        }
    
        /************* Mapping.context GETTERS AND SETTERS **********************/
        context(v){
        
            if(typeof(v)!=='undefined'){
                this._context = v;
                return this;
            }else{
                return this._context;
            }
        }
    
        /************* Mapping.source GETTERS AND SETTERS **********************/
        source(v){
        
            if(typeof(v)!=='undefined'){
                this._source = v;
                return this;
            }else{
                return this._source;
            }
        }
    
        /************* Mapping.target GETTERS AND SETTERS **********************/
        target(v){
        
            if(typeof(v)!=='undefined'){
                this._target = v;
                return this;
            }else{
                return this._target;
            }
        }
    
        /************* Mapping.inScript GETTERS AND SETTERS **********************/
        inScript(v){
        
            if(typeof(v)!=='undefined'){
                this._inScript = v;
                return this;
            }else{
                return this._inScript;
            }
        }
    
        /************* Mapping.outScript GETTERS AND SETTERS **********************/
        outScript(v){
        
            if(typeof(v)!=='undefined'){
                this._outScript = v;
                return this;
            }else{
                return this._outScript;
            }
        }
    
        /************* Mapping.tool GETTERS AND SETTERS **********************/
        tool(v){
        
            if(typeof(v)!=='undefined'){
                this._tool = v;
                return this;
            }else{
                return this._tool;
            }
        }
    
        /************* Mapping.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Mapping.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    


    
        /************* Mapping.store() **********************/
        // 
        store(__event){
            let __toString = 'Mapping.store(): ';
            
        }
    
        /************* Mapping.findAll() **********************/
        // 
        findAll(__event){
            let __toString = 'Mapping.findAll(): ';
            
        }
    
        /************* Mapping.find() **********************/
        // 
        find(__event){
            let __toString = 'Mapping.find(): ';
            
        }
    
    };


if(typeof(module)!=="undefined") module.exports.esptest = esptest;",
	"__keys": ["name"],
	"__trMap": []
}