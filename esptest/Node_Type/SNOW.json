{
	"Id": "e7e34f3201eb69aa7a827bfb46186e4dcc09c566",
	"active": "true",
	"enabled": "true",
	"code": "snow",
	"date": "2024-11-02T04:41:35.415Z",
	"name": "SNOW",
	"remark": "var esptest = Class.create();
esptest.prototype = {
    initialize :function(){},
    type: 'esptest',
};



    
    esptest.User = class {
    
        /************* User.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* User.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* User.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* User.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* User.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* User.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* User.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* User.username GETTERS AND SETTERS **********************/
        username(v){
            if(typeof(v)!=='undefined'){
                this._username = v;
                return this;
            }else{
                return this._username;
            }
        }
    
        /************* User.password GETTERS AND SETTERS **********************/
        password(v){
            if(typeof(v)!=='undefined'){
                this._password = v;
                return this;
            }else{
                return this._password;
            }
        }
    
    
    
    
        _fromDocument(obj){
            let __toString = 'User._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new User()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.username)!=='undefined'){
                this.username(obj.username);
        
            }
    
            if(typeof(obj.password)!=='undefined'){
                this.password(obj.password);
        
            }
    

    

            return this;
        }

        _toDocument(){
            let __toString = 'User._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._username)!=='undefined'){
                ret.username = this.username();
        
            }
    
            if(typeof(this._password)!=='undefined'){
                ret.password = this.password();
        
            }
    
        
    
            return ret;
        }

        _unique(){
            let __toString = 'User._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            if(typeof(this.username())!=='undefined') ret.username(this.username());
    
            return ret;
        }

    
        /************* User.store() **********************/
        store(__event){
            let __toString = 'User.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].User.store()').method('store').className('User').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = User()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('User');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(_this && typeof(_this.getusername())!=='undefined') bSet = gr.setValue('username', _this.getusername());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* User.findAll() **********************/
        findAll(__event){
            let __toString = 'User.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].User.findAll()').method('findAll').className('User').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = User()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* User.find() **********************/
        find(__event){
            let __toString = 'User.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].User.find()').method('find').className('User').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = User()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* User.init() **********************/
        init(__event){
            let __toString = 'User.init(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].User.init()').method('init').className('User').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric = class {
    
        /************* Metric.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric.script GETTERS AND SETTERS **********************/
        script(v){
            if(typeof(v)!=='undefined'){
                this._script = v;
                return this;
            }else{
                return this._script;
            }
        }
    
        /************* Metric.type GETTERS AND SETTERS **********************/
        type(v){
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Metric.deviceType GETTERS AND SETTERS **********************/
        deviceType(v){
            if(typeof(v)!=='undefined'){
                this._deviceType = v;
                return this;
            }else{
                return this._deviceType;
            }
        }
    
    
    
        /************* Metric.metric_Metric_Values GETTERS AND SETTERS **********************/
        metric_Metric_Values(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Metric._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Metric()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.script)!=='undefined'){
                this.script(obj.script);
        
                this.script(GlideStringUtil.base64Decode(this.script()));
        
            }
    
            if(typeof(obj.type)!=='undefined'){
                this.type(Metric_Type()._fromDocument(obj.type));
        
            }
    
            if(typeof(obj.deviceType)!=='undefined'){
                this.deviceType(Device_Type()._fromDocument(obj.deviceType));
        
            }
    

    
            if(typeof(obj.metric_Metric_Values)!=='undefined') this.metric_Metric_Values(new esptest.com.nammour.diot.Metric_Value()._fromDocument(obj.metric_metric_Metric_Values));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Metric._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._script)!=='undefined'){
                ret.script = this.script();
        
                if(typeof(ret.script())==='object') ret.script = GlideStringUtil.base64Encode(JSON.stringify(ret.script));
        
            }
    
            if(typeof(this._type)!=='undefined'){
                ret.type = this.type()._toDocument();
        
            }
    
            if(typeof(this._deviceType)!=='undefined'){
                ret.deviceType = this.deviceType()._toDocument();
        
            }
    
        
    
            if(typeof(this.metric_Metric_Values())!=='undefined') ret.metric_Metric_Values = self.metric_metric_Metric_Values().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Metric._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Metric.store() **********************/
        store(__event){
            let __toString = 'Metric.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric.store()').method('store').className('Metric').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Metric');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric.findAll()').method('findAll').className('Metric').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric.find() **********************/
        find(__event){
            let __toString = 'Metric.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric.find()').method('find').className('Metric').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Value = class {
    
        /************* Metric_Value.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Value.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Value.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Value.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Value.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Value.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Value.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric_Value.value GETTERS AND SETTERS **********************/
        value(v){
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Metric_Value.measured GETTERS AND SETTERS **********************/
        measured(v){
            if(typeof(v)!=='undefined'){
                this._measured = v;
                return this;
            }else{
                return this._measured;
            }
        }
    
        /************* Metric_Value.metric GETTERS AND SETTERS **********************/
        metric(v){
            if(typeof(v)!=='undefined'){
                this._metric = v;
                return this;
            }else{
                return this._metric;
            }
        }
    
        /************* Metric_Value.device GETTERS AND SETTERS **********************/
        device(v){
            if(typeof(v)!=='undefined'){
                this._device = v;
                return this;
            }else{
                return this._device;
            }
        }
    
    
    
    
        _fromDocument(obj){
            let __toString = 'Metric_Value._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Metric_Value()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.value)!=='undefined'){
                this.value(obj.value);
        
            }
    
            if(typeof(obj.measured)!=='undefined'){
                this.measured(obj.measured);
        
                this.measured(new GlideDateTime(this.measured()));
        
            }
    
            if(typeof(obj.metric)!=='undefined'){
                this.metric(Metric()._fromDocument(obj.metric));
        
            }
    
            if(typeof(obj.device)!=='undefined'){
                this.device(Device()._fromDocument(obj.device));
        
            }
    

    

            return this;
        }

        _toDocument(){
            let __toString = 'Metric_Value._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._value)!=='undefined'){
                ret.value = this.value();
        
            }
    
            if(typeof(this._measured)!=='undefined'){
                ret.measured = this.measured();
        
                if(ret.measured && typeof(ret.measured.getNumericValue)==='function') ret.measured = new Date(ret.measured.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._metric)!=='undefined'){
                ret.metric = this.metric()._toDocument();
        
            }
    
            if(typeof(this._device)!=='undefined'){
                ret.device = this.device()._toDocument();
        
            }
    
        
    
            return ret;
        }

        _unique(){
            let __toString = 'Metric_Value._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.metric())!=='undefined') ret.metric(this.metric()._unique());
    
            if(typeof(this.device())!=='undefined') ret.device(this.device()._unique());
    
            return ret;
        }

    
        /************* Metric_Value.store() **********************/
        store(__event){
            let __toString = 'Metric_Value.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Value.store()').method('store').className('Metric_Value').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Value()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Metric_Value');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getmetric())!=='undefined') bSet = gr.setValue('metric', _this.getmetric());
        
                if(_this && typeof(_this.getdevice())!=='undefined') bSet = gr.setValue('device', _this.getdevice());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric_Value.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric_Value.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Value.findAll()').method('findAll').className('Metric_Value').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Value()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric_Value.find() **********************/
        find(__event){
            let __toString = 'Metric_Value.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Value.find()').method('find').className('Metric_Value').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Value()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device = class {
    
        /************* Device.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device.type GETTERS AND SETTERS **********************/
        type(v){
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Device.controller GETTERS AND SETTERS **********************/
        controller(v){
            if(typeof(v)!=='undefined'){
                this._controller = v;
                return this;
            }else{
                return this._controller;
            }
        }
    
    
    
        /************* Device.device_Metric_Values GETTERS AND SETTERS **********************/
        device_Metric_Values(v){
        }
    
        /************* Device.device_Device_Attributes GETTERS AND SETTERS **********************/
        device_Device_Attributes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Device._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Device()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.type)!=='undefined'){
                this.type(Device_Type()._fromDocument(obj.type));
        
            }
    
            if(typeof(obj.controller)!=='undefined'){
                this.controller(Node()._fromDocument(obj.controller));
        
            }
    

    
            if(typeof(obj.device_Metric_Values)!=='undefined') this.device_Metric_Values(new esptest.com.nammour.diot.Metric_Value()._fromDocument(obj.device_device_Metric_Values));
    
            if(typeof(obj.device_Device_Attributes)!=='undefined') this.device_Device_Attributes(new esptest.com.nammour.diot.Device_Attribute()._fromDocument(obj.device_device_Device_Attributes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Device._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._type)!=='undefined'){
                ret.type = this.type()._toDocument();
        
            }
    
            if(typeof(this._controller)!=='undefined'){
                ret.controller = this.controller()._toDocument();
        
            }
    
        
    
            if(typeof(this.device_Metric_Values())!=='undefined') ret.device_Metric_Values = self.device_device_Metric_Values().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.device_Device_Attributes())!=='undefined') ret.device_Device_Attributes = self.device_device_Device_Attributes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Device._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Device.store() **********************/
        store(__event){
            let __toString = 'Device.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device.store()').method('store').className('Device').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Device');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device.findAll() **********************/
        findAll(__event){
            let __toString = 'Device.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device.findAll()').method('findAll').className('Device').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device.find() **********************/
        find(__event){
            let __toString = 'Device.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device.find()').method('find').className('Device').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Attribute = class {
    
        /************* Device_Attribute.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Attribute.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Attribute.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Attribute.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Attribute.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Attribute.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Attribute.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Attribute.value GETTERS AND SETTERS **********************/
        value(v){
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Device_Attribute.device GETTERS AND SETTERS **********************/
        device(v){
            if(typeof(v)!=='undefined'){
                this._device = v;
                return this;
            }else{
                return this._device;
            }
        }
    
        /************* Device_Attribute.attribute GETTERS AND SETTERS **********************/
        attribute(v){
            if(typeof(v)!=='undefined'){
                this._attribute = v;
                return this;
            }else{
                return this._attribute;
            }
        }
    
    
    
    
        _fromDocument(obj){
            let __toString = 'Device_Attribute._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Device_Attribute()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.value)!=='undefined'){
                this.value(obj.value);
        
            }
    
            if(typeof(obj.device)!=='undefined'){
                this.device(Device()._fromDocument(obj.device));
        
            }
    
            if(typeof(obj.attribute)!=='undefined'){
                this.attribute(Type_Attribute()._fromDocument(obj.attribute));
        
            }
    

    

            return this;
        }

        _toDocument(){
            let __toString = 'Device_Attribute._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._value)!=='undefined'){
                ret.value = this.value();
        
            }
    
            if(typeof(this._device)!=='undefined'){
                ret.device = this.device()._toDocument();
        
            }
    
            if(typeof(this._attribute)!=='undefined'){
                ret.attribute = this.attribute()._toDocument();
        
            }
    
        
    
            return ret;
        }

        _unique(){
            let __toString = 'Device_Attribute._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.device())!=='undefined') ret.device(this.device()._unique());
    
            if(typeof(this.attribute())!=='undefined') ret.attribute(this.attribute()._unique());
    
            return ret;
        }

    
        /************* Device_Attribute.store() **********************/
        store(__event){
            let __toString = 'Device_Attribute.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Attribute.store()').method('store').className('Device_Attribute').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Device_Attribute');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getdevice())!=='undefined') bSet = gr.setValue('device', _this.getdevice());
        
                if(_this && typeof(_this.getattribute())!=='undefined') bSet = gr.setValue('attribute', _this.getattribute());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device_Attribute.findAll() **********************/
        findAll(__event){
            let __toString = 'Device_Attribute.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Attribute.findAll()').method('findAll').className('Device_Attribute').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device_Attribute.find() **********************/
        find(__event){
            let __toString = 'Device_Attribute.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Attribute.find()').method('find').className('Device_Attribute').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Type_Attribute = class {
    
        /************* Type_Attribute.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Type_Attribute.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Type_Attribute.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Type_Attribute.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Type_Attribute.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Type_Attribute.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Type_Attribute.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Type_Attribute.deviceType GETTERS AND SETTERS **********************/
        deviceType(v){
            if(typeof(v)!=='undefined'){
                this._deviceType = v;
                return this;
            }else{
                return this._deviceType;
            }
        }
    
    
    
        /************* Type_Attribute.attribute_Device_Attributes GETTERS AND SETTERS **********************/
        attribute_Device_Attributes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Type_Attribute._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Type_Attribute()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.deviceType)!=='undefined'){
                this.deviceType(Device_Type()._fromDocument(obj.deviceType));
        
            }
    

    
            if(typeof(obj.attribute_Device_Attributes)!=='undefined') this.attribute_Device_Attributes(new esptest.com.nammour.diot.Device_Attribute()._fromDocument(obj.attribute_attribute_Device_Attributes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Type_Attribute._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._deviceType)!=='undefined'){
                ret.deviceType = this.deviceType()._toDocument();
        
            }
    
        
    
            if(typeof(this.attribute_Device_Attributes())!=='undefined') ret.attribute_Device_Attributes = self.attribute_attribute_Device_Attributes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Type_Attribute._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            if(typeof(this.deviceType())!=='undefined') ret.deviceType(this.deviceType()._unique());
    
            return ret;
        }

    
        /************* Type_Attribute.store() **********************/
        store(__event){
            let __toString = 'Type_Attribute.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Type_Attribute.store()').method('store').className('Type_Attribute').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Type_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Type_Attribute');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(_this && typeof(_this.getdeviceType())!=='undefined') bSet = gr.setValue('deviceType', _this.getdeviceType());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Type_Attribute.findAll() **********************/
        findAll(__event){
            let __toString = 'Type_Attribute.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Type_Attribute.findAll()').method('findAll').className('Type_Attribute').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Type_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Type_Attribute.find() **********************/
        find(__event){
            let __toString = 'Type_Attribute.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Type_Attribute.find()').method('find').className('Type_Attribute').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Type_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Category = class {
    
        /************* Device_Category.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Category.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Category.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Category.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Category.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Category.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Category.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Category.parent GETTERS AND SETTERS **********************/
        parent(v){
            if(typeof(v)!=='undefined'){
                this._parent = v;
                return this;
            }else{
                return this._parent;
            }
        }
    
    
    
        /************* Device_Category.parent_Device_Categorys GETTERS AND SETTERS **********************/
        parent_Device_Categorys(v){
        }
    
        /************* Device_Category.category_Device_Types GETTERS AND SETTERS **********************/
        category_Device_Types(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Device_Category._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Device_Category()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.parent)!=='undefined'){
                this.parent(Device_Category()._fromDocument(obj.parent));
        
            }
    

    
            if(typeof(obj.parent_Device_Categorys)!=='undefined') this.parent_Device_Categorys(new esptest.com.nammour.diot.Device_Category()._fromDocument(obj.parent_parent_Device_Categorys));
    
            if(typeof(obj.category_Device_Types)!=='undefined') this.category_Device_Types(new esptest.com.nammour.diot.Device_Type()._fromDocument(obj.category_category_Device_Types));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Device_Category._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._parent)!=='undefined'){
                ret.parent = this.parent()._toDocument();
        
            }
    
        
    
            if(typeof(this.parent_Device_Categorys())!=='undefined') ret.parent_Device_Categorys = self.parent_parent_Device_Categorys().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.category_Device_Types())!=='undefined') ret.category_Device_Types = self.category_category_Device_Types().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Device_Category._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Device_Category.store() **********************/
        store(__event){
            let __toString = 'Device_Category.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Category.store()').method('store').className('Device_Category').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Category()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Device_Category');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device_Category.findAll() **********************/
        findAll(__event){
            let __toString = 'Device_Category.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Category.findAll()').method('findAll').className('Device_Category').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Category()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device_Category.find() **********************/
        find(__event){
            let __toString = 'Device_Category.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Category.find()').method('find').className('Device_Category').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Category()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Type = class {
    
        /************* Device_Type.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Type.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Type.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Type.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Type.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Type.category GETTERS AND SETTERS **********************/
        category(v){
            if(typeof(v)!=='undefined'){
                this._category = v;
                return this;
            }else{
                return this._category;
            }
        }
    
    
    
        /************* Device_Type.deviceType_Metrics GETTERS AND SETTERS **********************/
        deviceType_Metrics(v){
        }
    
        /************* Device_Type.type_Devices GETTERS AND SETTERS **********************/
        type_Devices(v){
        }
    
        /************* Device_Type.deviceType_Type_Attributes GETTERS AND SETTERS **********************/
        deviceType_Type_Attributes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Device_Type._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Device_Type()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.category)!=='undefined'){
                this.category(Device_Category()._fromDocument(obj.category));
        
            }
    

    
            if(typeof(obj.deviceType_Metrics)!=='undefined') this.deviceType_Metrics(new esptest.com.nammour.diot.Metric()._fromDocument(obj.deviceType_deviceType_Metrics));
    
            if(typeof(obj.type_Devices)!=='undefined') this.type_Devices(new esptest.com.nammour.diot.Device()._fromDocument(obj.type_type_Devices));
    
            if(typeof(obj.deviceType_Type_Attributes)!=='undefined') this.deviceType_Type_Attributes(new esptest.com.nammour.diot.Type_Attribute()._fromDocument(obj.deviceType_deviceType_Type_Attributes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Device_Type._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._category)!=='undefined'){
                ret.category = this.category()._toDocument();
        
            }
    
        
    
            if(typeof(this.deviceType_Metrics())!=='undefined') ret.deviceType_Metrics = self.deviceType_deviceType_Metrics().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.type_Devices())!=='undefined') ret.type_Devices = self.type_type_Devices().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.deviceType_Type_Attributes())!=='undefined') ret.deviceType_Type_Attributes = self.deviceType_deviceType_Type_Attributes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Device_Type._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Device_Type.store() **********************/
        store(__event){
            let __toString = 'Device_Type.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Type.store()').method('store').className('Device_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Device_Type');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Device_Type.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Type.findAll()').method('findAll').className('Device_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Device_Type.find() **********************/
        find(__event){
            let __toString = 'Device_Type.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Device_Type.find()').method('find').className('Device_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Group = class {
    
        /************* Metric_Group.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Group.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Group.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Group.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Group.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Metric_Group.group_Metric_Types GETTERS AND SETTERS **********************/
        group_Metric_Types(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Metric_Group._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Metric_Group()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    

    
            if(typeof(obj.group_Metric_Types)!=='undefined') this.group_Metric_Types(new esptest.com.nammour.diot.Metric_Type()._fromDocument(obj.group_group_Metric_Types));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Metric_Group._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
        
    
            if(typeof(this.group_Metric_Types())!=='undefined') ret.group_Metric_Types = self.group_group_Metric_Types().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Metric_Group._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Metric_Group.store() **********************/
        store(__event){
            let __toString = 'Metric_Group.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Group.store()').method('store').className('Metric_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Metric_Group');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric_Group.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Group.findAll()').method('findAll').className('Metric_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric_Group.find() **********************/
        find(__event){
            let __toString = 'Metric_Group.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Group.find()').method('find').className('Metric_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Type = class {
    
        /************* Metric_Type.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Type.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Type.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Type.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Type.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric_Type.group GETTERS AND SETTERS **********************/
        group(v){
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
    
    
        /************* Metric_Type.type_Metrics GETTERS AND SETTERS **********************/
        type_Metrics(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Metric_Type._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Metric_Type()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.group)!=='undefined'){
                this.group(Metric_Group()._fromDocument(obj.group));
        
            }
    

    
            if(typeof(obj.type_Metrics)!=='undefined') this.type_Metrics(new esptest.com.nammour.diot.Metric()._fromDocument(obj.type_type_Metrics));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Metric_Type._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._group)!=='undefined'){
                ret.group = this.group()._toDocument();
        
            }
    
        
    
            if(typeof(this.type_Metrics())!=='undefined') ret.type_Metrics = self.type_type_Metrics().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Metric_Type._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Metric_Type.store() **********************/
        store(__event){
            let __toString = 'Metric_Type.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Type.store()').method('store').className('Metric_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Metric_Type');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric_Type.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Type.findAll()').method('findAll').className('Metric_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Metric_Type.find() **********************/
        find(__event){
            let __toString = 'Metric_Type.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Metric_Type.find()').method('find').className('Metric_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Config = class {
    
        /************* Config.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Config.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Config.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Config.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Config.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Config.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Config.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Config.value GETTERS AND SETTERS **********************/
        value(v){
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Config.script GETTERS AND SETTERS **********************/
        script(v){
            if(typeof(v)!=='undefined'){
                this._script = v;
                return this;
            }else{
                return this._script;
            }
        }
    
        /************* Config.tool GETTERS AND SETTERS **********************/
        tool(v){
            if(typeof(v)!=='undefined'){
                this._tool = v;
                return this;
            }else{
                return this._tool;
            }
        }
    
        /************* Config.group GETTERS AND SETTERS **********************/
        group(v){
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Config.type GETTERS AND SETTERS **********************/
        type(v){
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Config.node GETTERS AND SETTERS **********************/
        node(v){
            if(typeof(v)!=='undefined'){
                this._node = v;
                return this;
            }else{
                return this._node;
            }
        }
    
    
    
    
        _fromDocument(obj){
            let __toString = 'Config._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Config()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.value)!=='undefined'){
                this.value(obj.value);
        
                this.value(GlideStringUtil.base64Decode(this.value()));
        
            }
    
            if(typeof(obj.script)!=='undefined'){
                this.script(obj.script);
        
                this.script(GlideStringUtil.base64Decode(this.script()));
        
            }
    
            if(typeof(obj.tool)!=='undefined'){
                this.tool(Tool()._fromDocument(obj.tool));
        
            }
    
            if(typeof(obj.group)!=='undefined'){
                this.group(Config_Group()._fromDocument(obj.group));
        
            }
    
            if(typeof(obj.type)!=='undefined'){
                this.type(Tool_Type()._fromDocument(obj.type));
        
            }
    
            if(typeof(obj.node)!=='undefined'){
                this.node(Node()._fromDocument(obj.node));
        
            }
    

    

            return this;
        }

        _toDocument(){
            let __toString = 'Config._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._value)!=='undefined'){
                ret.value = this.value();
        
                if(typeof(ret.value())==='object') ret.value = GlideStringUtil.base64Encode(JSON.stringify(ret.value));
        
            }
    
            if(typeof(this._script)!=='undefined'){
                ret.script = this.script();
        
                if(typeof(ret.script())==='object') ret.script = GlideStringUtil.base64Encode(JSON.stringify(ret.script));
        
            }
    
            if(typeof(this._tool)!=='undefined'){
                ret.tool = this.tool()._toDocument();
        
            }
    
            if(typeof(this._group)!=='undefined'){
                ret.group = this.group()._toDocument();
        
            }
    
            if(typeof(this._type)!=='undefined'){
                ret.type = this.type()._toDocument();
        
            }
    
            if(typeof(this._node)!=='undefined'){
                ret.node = this.node()._toDocument();
        
            }
    
        
    
            return ret;
        }

        _unique(){
            let __toString = 'Config._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.name())!=='undefined') ret.name(this.name());
    
            return ret;
        }

    
        /************* Config.store() **********************/
        store(__event){
            let __toString = 'Config.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Config.store()').method('store').className('Config').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Config');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getname())!=='undefined') bSet = gr.setValue('name', _this.getname());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Config.findAll() **********************/
        findAll(__event){
            let __toString = 'Config.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Config.findAll()').method('findAll').className('Config').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Config.find() **********************/
        find(__event){
            let __toString = 'Config.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Config.find()').method('find').className('Config').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Tool = class {
    
        /************* Tool.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Tool.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Tool.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Tool.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Tool.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Tool.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Tool.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Tool.type GETTERS AND SETTERS **********************/
        type(v){
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
        /************* Tool.tool_Configs GETTERS AND SETTERS **********************/
        tool_Configs(v){
        }
    
        /************* Tool.tool_Mappings GETTERS AND SETTERS **********************/
        tool_Mappings(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Tool._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Tool()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.type)!=='undefined'){
                this.type(Tool_Type()._fromDocument(obj.type));
        
            }
    

    
            if(typeof(obj.tool_Configs)!=='undefined') this.tool_Configs(new esptest.com.nammour.dcom.Config()._fromDocument(obj.tool_tool_Configs));
    
            if(typeof(obj.tool_Mappings)!=='undefined') this.tool_Mappings(new esptest.com.nammour.dcom.Mapping()._fromDocument(obj.tool_tool_Mappings));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Tool._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._type)!=='undefined'){
                ret.type = this.type()._toDocument();
        
            }
    
        
    
            if(typeof(this.tool_Configs())!=='undefined') ret.tool_Configs = self.tool_tool_Configs().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.tool_Mappings())!=='undefined') ret.tool_Mappings = self.tool_tool_Mappings().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Tool._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.name())!=='undefined') ret.name(this.name());
    
            return ret;
        }

    
        /************* Tool.store() **********************/
        store(__event){
            let __toString = 'Tool.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Tool.store()').method('store').className('Tool').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Tool');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getname())!=='undefined') bSet = gr.setValue('name', _this.getname());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Tool.findAll() **********************/
        findAll(__event){
            let __toString = 'Tool.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Tool.findAll()').method('findAll').className('Tool').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Tool.find() **********************/
        find(__event){
            let __toString = 'Tool.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Tool.find()').method('find').className('Tool').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Config_Group = class {
    
        /************* Config_Group.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Config_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Config_Group.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Config_Group.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Config_Group.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Config_Group.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Config_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Config_Group.group_Configs GETTERS AND SETTERS **********************/
        group_Configs(v){
        }
    
        /************* Config_Group.group_Mappings GETTERS AND SETTERS **********************/
        group_Mappings(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Config_Group._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Config_Group()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    

    
            if(typeof(obj.group_Configs)!=='undefined') this.group_Configs(new esptest.com.nammour.dcom.Config()._fromDocument(obj.group_group_Configs));
    
            if(typeof(obj.group_Mappings)!=='undefined') this.group_Mappings(new esptest.com.nammour.dcom.Mapping()._fromDocument(obj.group_group_Mappings));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Config_Group._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
        
    
            if(typeof(this.group_Configs())!=='undefined') ret.group_Configs = self.group_group_Configs().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.group_Mappings())!=='undefined') ret.group_Mappings = self.group_group_Mappings().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Config_Group._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Config_Group.store() **********************/
        store(__event){
            let __toString = 'Config_Group.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Config_Group.store()').method('store').className('Config_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Config_Group');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Config_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Config_Group.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Config_Group.findAll()').method('findAll').className('Config_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Config_Group.find() **********************/
        find(__event){
            let __toString = 'Config_Group.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Config_Group.find()').method('find').className('Config_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Mapping_Group = class {
    
        /************* Mapping_Group.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Mapping_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Mapping_Group.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Mapping_Group.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Mapping_Group.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Mapping_Group.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Mapping_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
    
        _fromDocument(obj){
            let __toString = 'Mapping_Group._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Mapping_Group()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    

    

            return this;
        }

        _toDocument(){
            let __toString = 'Mapping_Group._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
        
    
            return ret;
        }

        _unique(){
            let __toString = 'Mapping_Group._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Mapping_Group.store() **********************/
        store(__event){
            let __toString = 'Mapping_Group.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Mapping_Group.store()').method('store').className('Mapping_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Mapping_Group');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Mapping_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Mapping_Group.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Mapping_Group.findAll()').method('findAll').className('Mapping_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Mapping_Group.find() **********************/
        find(__event){
            let __toString = 'Mapping_Group.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Mapping_Group.find()').method('find').className('Mapping_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Tool_Type = class {
    
        /************* Tool_Type.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Tool_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Tool_Type.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Tool_Type.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Tool_Type.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Tool_Type.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Tool_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Tool_Type.type_Configs GETTERS AND SETTERS **********************/
        type_Configs(v){
        }
    
        /************* Tool_Type.type_Tools GETTERS AND SETTERS **********************/
        type_Tools(v){
        }
    
        /************* Tool_Type.type_Mappings GETTERS AND SETTERS **********************/
        type_Mappings(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Tool_Type._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Tool_Type()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    

    
            if(typeof(obj.type_Configs)!=='undefined') this.type_Configs(new esptest.com.nammour.dcom.Config()._fromDocument(obj.type_type_Configs));
    
            if(typeof(obj.type_Tools)!=='undefined') this.type_Tools(new esptest.com.nammour.dcom.Tool()._fromDocument(obj.type_type_Tools));
    
            if(typeof(obj.type_Mappings)!=='undefined') this.type_Mappings(new esptest.com.nammour.dcom.Mapping()._fromDocument(obj.type_type_Mappings));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Tool_Type._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
        
    
            if(typeof(this.type_Configs())!=='undefined') ret.type_Configs = self.type_type_Configs().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.type_Tools())!=='undefined') ret.type_Tools = self.type_type_Tools().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.type_Mappings())!=='undefined') ret.type_Mappings = self.type_type_Mappings().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Tool_Type._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.name())!=='undefined') ret.name(this.name());
    
            return ret;
        }

    
        /************* Tool_Type.store() **********************/
        store(__event){
            let __toString = 'Tool_Type.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Tool_Type.store()').method('store').className('Tool_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Tool_Type');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getname())!=='undefined') bSet = gr.setValue('name', _this.getname());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Tool_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Tool_Type.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Tool_Type.findAll()').method('findAll').className('Tool_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Tool_Type.find() **********************/
        find(__event){
            let __toString = 'Tool_Type.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Tool_Type.find()').method('find').className('Tool_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Event = class {
    
        /************* Event.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Event.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Event.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Event.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Event.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Event.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Event.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Event.className GETTERS AND SETTERS **********************/
        className(v){
            if(typeof(v)!=='undefined'){
                this._className = v;
                return this;
            }else{
                return this._className;
            }
        }
    
        /************* Event.method GETTERS AND SETTERS **********************/
        method(v){
            if(typeof(v)!=='undefined'){
                this._method = v;
                return this;
            }else{
                return this._method;
            }
        }
    
        /************* Event.payload GETTERS AND SETTERS **********************/
        payload(v){
            if(typeof(v)!=='undefined'){
                this._payload = v;
                return this;
            }else{
                return this._payload;
            }
        }
    
        /************* Event.carrier GETTERS AND SETTERS **********************/
        carrier(v){
            if(typeof(v)!=='undefined'){
                this._carrier = v;
                return this;
            }else{
                return this._carrier;
            }
        }
    
        /************* Event.sender GETTERS AND SETTERS **********************/
        sender(v){
            if(typeof(v)!=='undefined'){
                this._sender = v;
                return this;
            }else{
                return this._sender;
            }
        }
    
        /************* Event.recipient GETTERS AND SETTERS **********************/
        recipient(v){
            if(typeof(v)!=='undefined'){
                this._recipient = v;
                return this;
            }else{
                return this._recipient;
            }
        }
    
        /************* Event.responseTo GETTERS AND SETTERS **********************/
        responseTo(v){
            if(typeof(v)!=='undefined'){
                this._responseTo = v;
                return this;
            }else{
                return this._responseTo;
            }
        }
    
    
    
        /************* Event.responseTo_Events GETTERS AND SETTERS **********************/
        responseTo_Events(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Event._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Event()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.className)!=='undefined'){
                this.className(obj.className);
        
            }
    
            if(typeof(obj.method)!=='undefined'){
                this.method(obj.method);
        
            }
    
            if(typeof(obj.payload)!=='undefined'){
                this.payload(obj.payload);
        
                this.payload(GlideStringUtil.base64Decode(this.payload()));
        
            }
    
            if(typeof(obj.carrier)!=='undefined'){
                this.carrier(Node()._fromDocument(obj.carrier));
        
            }
    
            if(typeof(obj.sender)!=='undefined'){
                this.sender(Node()._fromDocument(obj.sender));
        
            }
    
            if(typeof(obj.recipient)!=='undefined'){
                this.recipient(Node()._fromDocument(obj.recipient));
        
            }
    
            if(typeof(obj.responseTo)!=='undefined'){
                this.responseTo(Event()._fromDocument(obj.responseTo));
        
            }
    

    
            if(typeof(obj.responseTo_Events)!=='undefined') this.responseTo_Events(new esptest.com.nammour.dcom.Event()._fromDocument(obj.responseTo_responseTo_Events));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Event._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._className)!=='undefined'){
                ret.className = this.className();
        
            }
    
            if(typeof(this._method)!=='undefined'){
                ret.method = this.method();
        
            }
    
            if(typeof(this._payload)!=='undefined'){
                ret.payload = this.payload();
        
                if(typeof(ret.payload())==='object') ret.payload = GlideStringUtil.base64Encode(JSON.stringify(ret.payload));
        
            }
    
            if(typeof(this._carrier)!=='undefined'){
                ret.carrier = this.carrier()._toDocument();
        
            }
    
            if(typeof(this._sender)!=='undefined'){
                ret.sender = this.sender()._toDocument();
        
            }
    
            if(typeof(this._recipient)!=='undefined'){
                ret.recipient = this.recipient()._toDocument();
        
            }
    
            if(typeof(this._responseTo)!=='undefined'){
                ret.responseTo = this.responseTo()._toDocument();
        
            }
    
        
    
            if(typeof(this.responseTo_Events())!=='undefined') ret.responseTo_Events = self.responseTo_responseTo_Events().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Event._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Event.store() **********************/
        store(__event){
            let __toString = 'Event.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Event.store()').method('store').className('Event').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Event');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Event.findAll() **********************/
        findAll(__event){
            let __toString = 'Event.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Event.findAll()').method('findAll').className('Event').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Event.find() **********************/
        find(__event){
            let __toString = 'Event.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Event.find()').method('find').className('Event').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Event.listen() **********************/
        listen(__event, node){
            let __toString = 'Event.listen(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Event.listen()').method('listen').className('Event').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                if(typeof(evJSON.node)!=='undefined'){
                    node = evJSON.node;
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Event.trigger() **********************/
        trigger(__event){
            let __toString = 'Event.trigger(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Event.trigger()').method('trigger').className('Event').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

		    return this.store();
		
            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
            }

            return answer;
        }
    
        /************* Event.process() **********************/
        process(__event){
            let __toString = 'Event.process(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Event.process()').method('process').className('Event').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node = class {
    
        /************* Node.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Node.address GETTERS AND SETTERS **********************/
        address(v){
            if(typeof(v)!=='undefined'){
                this._address = v;
                return this;
            }else{
                return this._address;
            }
        }
    
        /************* Node.backup GETTERS AND SETTERS **********************/
        backup(v){
            if(typeof(v)!=='undefined'){
                this._backup = v;
                return this;
            }else{
                return this._backup;
            }
        }
    
        /************* Node.parent GETTERS AND SETTERS **********************/
        parent(v){
            if(typeof(v)!=='undefined'){
                this._parent = v;
                return this;
            }else{
                return this._parent;
            }
        }
    
        /************* Node.group GETTERS AND SETTERS **********************/
        group(v){
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Node.context GETTERS AND SETTERS **********************/
        context(v){
            if(typeof(v)!=='undefined'){
                this._context = v;
                return this;
            }else{
                return this._context;
            }
        }
    
        /************* Node.port GETTERS AND SETTERS **********************/
        port(v){
            if(typeof(v)!=='undefined'){
                this._port = v;
                return this;
            }else{
                return this._port;
            }
        }
    
        /************* Node.online GETTERS AND SETTERS **********************/
        online(v){
            if(typeof(v)!=='undefined'){
                this._online = v;
                return this;
            }else{
                return this._online;
            }
        }
    
        /************* Node.secure GETTERS AND SETTERS **********************/
        secure(v){
            if(typeof(v)!=='undefined'){
                this._secure = v;
                return this;
            }else{
                return this._secure;
            }
        }
    
        /************* Node.type GETTERS AND SETTERS **********************/
        type(v){
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
        /************* Node.controller_Devices GETTERS AND SETTERS **********************/
        controller_Devices(v){
        }
    
        /************* Node.node_Configs GETTERS AND SETTERS **********************/
        node_Configs(v){
        }
    
        /************* Node.carrier_Events GETTERS AND SETTERS **********************/
        carrier_Events(v){
        }
    
        /************* Node.sender_Events GETTERS AND SETTERS **********************/
        sender_Events(v){
        }
    
        /************* Node.recipient_Events GETTERS AND SETTERS **********************/
        recipient_Events(v){
        }
    
        /************* Node.backup_Nodes GETTERS AND SETTERS **********************/
        backup_Nodes(v){
        }
    
        /************* Node.parent_Nodes GETTERS AND SETTERS **********************/
        parent_Nodes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Node._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Node()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.address)!=='undefined'){
                this.address(obj.address);
        
            }
    
            if(typeof(obj.backup)!=='undefined'){
                this.backup(Node()._fromDocument(obj.backup));
        
            }
    
            if(typeof(obj.parent)!=='undefined'){
                this.parent(Node()._fromDocument(obj.parent));
        
            }
    
            if(typeof(obj.group)!=='undefined'){
                this.group(Node_Group()._fromDocument(obj.group));
        
            }
    
            if(typeof(obj.context)!=='undefined'){
                this.context(Node_Context()._fromDocument(obj.context));
        
            }
    
            if(typeof(obj.port)!=='undefined'){
                this.port(obj.port);
        
            }
    
            if(typeof(obj.online)!=='undefined'){
                this.online(obj.online);
        
                this.online(new GlideDateTime(this.online()));
        
            }
    
            if(typeof(obj.secure)!=='undefined'){
                this.secure(obj.secure);
        
            }
    
            if(typeof(obj.type)!=='undefined'){
                this.type(Node_Type()._fromDocument(obj.type));
        
            }
    

    
            if(typeof(obj.controller_Devices)!=='undefined') this.controller_Devices(new esptest.com.nammour.diot.Device()._fromDocument(obj.controller_controller_Devices));
    
            if(typeof(obj.node_Configs)!=='undefined') this.node_Configs(new esptest.com.nammour.dcom.Config()._fromDocument(obj.node_node_Configs));
    
            if(typeof(obj.carrier_Events)!=='undefined') this.carrier_Events(new esptest.com.nammour.dcom.Event()._fromDocument(obj.carrier_carrier_Events));
    
            if(typeof(obj.sender_Events)!=='undefined') this.sender_Events(new esptest.com.nammour.dcom.Event()._fromDocument(obj.sender_sender_Events));
    
            if(typeof(obj.recipient_Events)!=='undefined') this.recipient_Events(new esptest.com.nammour.dcom.Event()._fromDocument(obj.recipient_recipient_Events));
    
            if(typeof(obj.backup_Nodes)!=='undefined') this.backup_Nodes(new esptest.com.nammour.dcom.Node()._fromDocument(obj.backup_backup_Nodes));
    
            if(typeof(obj.parent_Nodes)!=='undefined') this.parent_Nodes(new esptest.com.nammour.dcom.Node()._fromDocument(obj.parent_parent_Nodes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Node._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._address)!=='undefined'){
                ret.address = this.address();
        
            }
    
            if(typeof(this._backup)!=='undefined'){
                ret.backup = this.backup()._toDocument();
        
            }
    
            if(typeof(this._parent)!=='undefined'){
                ret.parent = this.parent()._toDocument();
        
            }
    
            if(typeof(this._group)!=='undefined'){
                ret.group = this.group()._toDocument();
        
            }
    
            if(typeof(this._context)!=='undefined'){
                ret.context = this.context()._toDocument();
        
            }
    
            if(typeof(this._port)!=='undefined'){
                ret.port = this.port();
        
            }
    
            if(typeof(this._online)!=='undefined'){
                ret.online = this.online();
        
                if(ret.online && typeof(ret.online.getNumericValue)==='function') ret.online = new Date(ret.online.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._secure)!=='undefined'){
                ret.secure = this.secure();
        
            }
    
            if(typeof(this._type)!=='undefined'){
                ret.type = this.type()._toDocument();
        
            }
    
        
    
            if(typeof(this.controller_Devices())!=='undefined') ret.controller_Devices = self.controller_controller_Devices().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.node_Configs())!=='undefined') ret.node_Configs = self.node_node_Configs().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.carrier_Events())!=='undefined') ret.carrier_Events = self.carrier_carrier_Events().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.sender_Events())!=='undefined') ret.sender_Events = self.sender_sender_Events().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.recipient_Events())!=='undefined') ret.recipient_Events = self.recipient_recipient_Events().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.backup_Nodes())!=='undefined') ret.backup_Nodes = self.backup_backup_Nodes().map(function(ta){return ta._toDocument();});
    
            if(typeof(this.parent_Nodes())!=='undefined') ret.parent_Nodes = self.parent_parent_Nodes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Node._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Node.store() **********************/
        store(__event){
            let __toString = 'Node.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node.store()').method('store').className('Node').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Node');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node.findAll() **********************/
        findAll(__event){
            let __toString = 'Node.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node.findAll()').method('findAll').className('Node').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node.find() **********************/
        find(__event){
            let __toString = 'Node.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node.find()').method('find').className('Node').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node.authCode() **********************/
        authCode(__event, code, tool){
            let __toString = 'Node.authCode(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node.authCode()').method('authCode').className('Node').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                if(typeof(evJSON.code)!=='undefined'){
                    code = evJSON.code;
                }
        
                if(typeof(evJSON.tool)!=='undefined'){
                    tool = evJSON.tool;
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node.init() **********************/
        init(__event, online, code, uid){
            let __toString = 'Node.init(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node.init()').method('init').className('Node').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                if(typeof(evJSON.online)!=='undefined'){
                    online = evJSON.online;
                }
        
                if(typeof(evJSON.code)!=='undefined'){
                    code = evJSON.code;
                }
        
                if(typeof(evJSON.uid)!=='undefined'){
                    uid = evJSON.uid;
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Context = class {
    
        /************* Node_Context.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Context.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Context.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Context.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Context.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Context.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Context.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Node_Context.context_Nodes GETTERS AND SETTERS **********************/
        context_Nodes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Node_Context._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Node_Context()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    

    
            if(typeof(obj.context_Nodes)!=='undefined') this.context_Nodes(new esptest.com.nammour.dcom.Node()._fromDocument(obj.context_context_Nodes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Node_Context._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
        
    
            if(typeof(this.context_Nodes())!=='undefined') ret.context_Nodes = self.context_context_Nodes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Node_Context._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.code())!=='undefined') ret.code(this.code());
    
            return ret;
        }

    
        /************* Node_Context.store() **********************/
        store(__event){
            let __toString = 'Node_Context.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Context.store()').method('store').className('Node_Context').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Context()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Node_Context');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getcode())!=='undefined') bSet = gr.setValue('code', _this.getcode());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node_Context.findAll() **********************/
        findAll(__event){
            let __toString = 'Node_Context.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Context.findAll()').method('findAll').className('Node_Context').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Context()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node_Context.find() **********************/
        find(__event){
            let __toString = 'Node_Context.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Context.find()').method('find').className('Node_Context').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Context()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Group = class {
    
        /************* Node_Group.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Group.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Group.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Group.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Group.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Node_Group.group_Nodes GETTERS AND SETTERS **********************/
        group_Nodes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Node_Group._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Node_Group()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    

    
            if(typeof(obj.group_Nodes)!=='undefined') this.group_Nodes(new esptest.com.nammour.dcom.Node()._fromDocument(obj.group_group_Nodes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Node_Group._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
        
    
            if(typeof(this.group_Nodes())!=='undefined') ret.group_Nodes = self.group_group_Nodes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Node_Group._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.name())!=='undefined') ret.name(this.name());
    
            return ret;
        }

    
        /************* Node_Group.store() **********************/
        store(__event){
            let __toString = 'Node_Group.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Group.store()').method('store').className('Node_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Node_Group');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getname())!=='undefined') bSet = gr.setValue('name', _this.getname());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Node_Group.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Group.findAll()').method('findAll').className('Node_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node_Group.find() **********************/
        find(__event){
            let __toString = 'Node_Group.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Group.find()').method('find').className('Node_Group').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Type = class {
    
        /************* Node_Type.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Type.code GETTERS AND SETTERS **********************/
        code(v){
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Type.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Type.date GETTERS AND SETTERS **********************/
        date(v){
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Type.name GETTERS AND SETTERS **********************/
        name(v){
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Node_Type.dynamic GETTERS AND SETTERS **********************/
        dynamic(v){
            if(typeof(v)!=='undefined'){
                this._dynamic = v;
                return this;
            }else{
                return this._dynamic;
            }
        }
    
    
    
        /************* Node_Type.type_Nodes GETTERS AND SETTERS **********************/
        type_Nodes(v){
        }
    
    
        _fromDocument(obj){
            let __toString = 'Node_Type._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Node_Type()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.code)!=='undefined'){
                this.code(obj.code);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.date)!=='undefined'){
                this.date(obj.date);
        
                this.date(new GlideDateTime(this.date()));
        
            }
    
            if(typeof(obj.name)!=='undefined'){
                this.name(obj.name);
        
            }
    
            if(typeof(obj.remark)!=='undefined'){
                this.remark(obj.remark);
        
                this.remark(GlideStringUtil.base64Decode(this.remark()));
        
            }
    
            if(typeof(obj.dynamic)!=='undefined'){
                this.dynamic(obj.dynamic);
        
            }
    

    
            if(typeof(obj.type_Nodes)!=='undefined') this.type_Nodes(new esptest.com.nammour.dcom.Node()._fromDocument(obj.type_type_Nodes));
    

            return this;
        }

        _toDocument(){
            let __toString = 'Node_Type._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._code)!=='undefined'){
                ret.code = this.code();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._date)!=='undefined'){
                ret.date = this.date();
        
                if(ret.date && typeof(ret.date.getNumericValue)==='function') ret.date = new Date(ret.date.getNumericValue()).toISOString().replace('.000Z', 'Z');
        
            }
    
            if(typeof(this._name)!=='undefined'){
                ret.name = this.name();
        
            }
    
            if(typeof(this._remark)!=='undefined'){
                ret.remark = this.remark();
        
                if(typeof(ret.remark())==='object') ret.remark = GlideStringUtil.base64Encode(JSON.stringify(ret.remark));
        
            }
    
            if(typeof(this._dynamic)!=='undefined'){
                ret.dynamic = this.dynamic();
        
            }
    
        
    
            if(typeof(this.type_Nodes())!=='undefined') ret.type_Nodes = self.type_type_Nodes().map(function(ta){return ta._toDocument();});
    
            return ret;
        }

        _unique(){
            let __toString = 'Node_Type._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            if(typeof(this.name())!=='undefined') ret.name(this.name());
    
            return ret;
        }

    
        /************* Node_Type.store() **********************/
        store(__event){
            let __toString = 'Node_Type.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Type.store()').method('store').className('Node_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Node_Type');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(_this && typeof(_this.getname())!=='undefined') bSet = gr.setValue('name', _this.getname());
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Node_Type.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Type.findAll()').method('findAll').className('Node_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Node_Type.find() **********************/
        find(__event){
            let __toString = 'Node_Type.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Node_Type.find()').method('find').className('Node_Type').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Mapping = class {
    
        /************* Mapping.active GETTERS AND SETTERS **********************/
        active(v){
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Mapping.enabled GETTERS AND SETTERS **********************/
        enabled(v){
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Mapping.order GETTERS AND SETTERS **********************/
        order(v){
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Mapping.className GETTERS AND SETTERS **********************/
        className(v){
            if(typeof(v)!=='undefined'){
                this._className = v;
                return this;
            }else{
                return this._className;
            }
        }
    
        /************* Mapping.scope GETTERS AND SETTERS **********************/
        scope(v){
            if(typeof(v)!=='undefined'){
                this._scope = v;
                return this;
            }else{
                return this._scope;
            }
        }
    
        /************* Mapping.context GETTERS AND SETTERS **********************/
        context(v){
            if(typeof(v)!=='undefined'){
                this._context = v;
                return this;
            }else{
                return this._context;
            }
        }
    
        /************* Mapping.source GETTERS AND SETTERS **********************/
        source(v){
            if(typeof(v)!=='undefined'){
                this._source = v;
                return this;
            }else{
                return this._source;
            }
        }
    
        /************* Mapping.target GETTERS AND SETTERS **********************/
        target(v){
            if(typeof(v)!=='undefined'){
                this._target = v;
                return this;
            }else{
                return this._target;
            }
        }
    
        /************* Mapping.inScript GETTERS AND SETTERS **********************/
        inScript(v){
            if(typeof(v)!=='undefined'){
                this._inScript = v;
                return this;
            }else{
                return this._inScript;
            }
        }
    
        /************* Mapping.outScript GETTERS AND SETTERS **********************/
        outScript(v){
            if(typeof(v)!=='undefined'){
                this._outScript = v;
                return this;
            }else{
                return this._outScript;
            }
        }
    
        /************* Mapping.tool GETTERS AND SETTERS **********************/
        tool(v){
            if(typeof(v)!=='undefined'){
                this._tool = v;
                return this;
            }else{
                return this._tool;
            }
        }
    
        /************* Mapping.group GETTERS AND SETTERS **********************/
        group(v){
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Mapping.type GETTERS AND SETTERS **********************/
        type(v){
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
    
        _fromDocument(obj){
            let __toString = 'Mapping._fromDocument(): ';
            
            if(!obj) return this;

            //if isinstance(obj, bytes): obj = str(obj, "utf-8");

            if(typeof(obj)==='string'){
                if(new RegExp("((([A-Za-z]{3,9}:(?://)?)(?:[-;:&=+$,w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,w]+@)[A-Za-z0-9.-]+)((?:/[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)").test(obj)){
                    let request = new sn_ws.RESTMessageV2();
                    request.setHttpMethod('GET');
                    request.setEndpoint(obj);
                    return this._fromDocument(request.execute().getBody());
                }else{
                    return this._fromDocument(JSON.parse(obj));
                }
            }
        
            if(Array.isArray(obj)) return obj.map(function(o){return new Mapping()._fromDocument(o)});
            
            if(typeof(obj.Id)!=='undefined') this.Id = obj.Id;

    
            if(typeof(obj.active)!=='undefined'){
                this.active(obj.active);
        
            }
    
            if(typeof(obj.enabled)!=='undefined'){
                this.enabled(obj.enabled);
        
            }
    
            if(typeof(obj.order)!=='undefined'){
                this.order(obj.order);
        
            }
    
            if(typeof(obj.className)!=='undefined'){
                this.className(obj.className);
        
            }
    
            if(typeof(obj.scope)!=='undefined'){
                this.scope(obj.scope);
        
            }
    
            if(typeof(obj.context)!=='undefined'){
                this.context(obj.context);
        
            }
    
            if(typeof(obj.source)!=='undefined'){
                this.source(obj.source);
        
            }
    
            if(typeof(obj.target)!=='undefined'){
                this.target(obj.target);
        
            }
    
            if(typeof(obj.inScript)!=='undefined'){
                this.inScript(obj.inScript);
        
                this.inScript(GlideStringUtil.base64Decode(this.inScript()));
        
            }
    
            if(typeof(obj.outScript)!=='undefined'){
                this.outScript(obj.outScript);
        
                this.outScript(GlideStringUtil.base64Decode(this.outScript()));
        
            }
    
            if(typeof(obj.tool)!=='undefined'){
                this.tool(Tool()._fromDocument(obj.tool));
        
            }
    
            if(typeof(obj.group)!=='undefined'){
                this.group(Config_Group()._fromDocument(obj.group));
        
            }
    
            if(typeof(obj.type)!=='undefined'){
                this.type(Tool_Type()._fromDocument(obj.type));
        
            }
    

    

            return this;
        }

        _toDocument(){
            let __toString = 'Mapping._toDocument(): ';
            
            let ret = {};
            if(typeof(this.Id)!=='undefined') ret.Id = this.Id;

    
            if(typeof(this._active)!=='undefined'){
                ret.active = this.active();
        
            }
    
            if(typeof(this._enabled)!=='undefined'){
                ret.enabled = this.enabled();
        
            }
    
            if(typeof(this._order)!=='undefined'){
                ret.order = this.order();
        
            }
    
            if(typeof(this._className)!=='undefined'){
                ret.className = this.className();
        
            }
    
            if(typeof(this._scope)!=='undefined'){
                ret.scope = this.scope();
        
            }
    
            if(typeof(this._context)!=='undefined'){
                ret.context = this.context();
        
            }
    
            if(typeof(this._source)!=='undefined'){
                ret.source = this.source();
        
            }
    
            if(typeof(this._target)!=='undefined'){
                ret.target = this.target();
        
            }
    
            if(typeof(this._inScript)!=='undefined'){
                ret.inScript = this.inScript();
        
                if(typeof(ret.inScript())==='object') ret.inScript = GlideStringUtil.base64Encode(JSON.stringify(ret.inScript));
        
            }
    
            if(typeof(this._outScript)!=='undefined'){
                ret.outScript = this.outScript();
        
                if(typeof(ret.outScript())==='object') ret.outScript = GlideStringUtil.base64Encode(JSON.stringify(ret.outScript));
        
            }
    
            if(typeof(this._tool)!=='undefined'){
                ret.tool = this.tool()._toDocument();
        
            }
    
            if(typeof(this._group)!=='undefined'){
                ret.group = this.group()._toDocument();
        
            }
    
            if(typeof(this._type)!=='undefined'){
                ret.type = this.type()._toDocument();
        
            }
    
        
    
            return ret;
        }

        _unique(){
            let __toString = 'Mapping._unique(): ';
        
            let ret = new undefined();
            if(this.Id) ret.Id = this.Id;
    
            return ret;
        }

    
        /************* Mapping.store() **********************/
        store(__event){
            let __toString = 'Mapping.store(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Mapping.store()').method('store').className('Mapping').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                
                // store locally
                let gr = new GlideRecord('Mapping');

                let _this = this._unique().find();
                if(!_this) gr.setNewGuidValue(this.Id || (this.Id = gr.setNewGuid()));
                if(_this && typeof(_this.Id)!=='undefined') gr.get(_this.Id);

                let bSet = false;
        
                if(bSet){
                    this.Id = gr.update();
                    gs.info(__toString + "this.Id = " + this.Id);
                    if(!answer) answer = this;
                }else{
                    gs.info(__toString + "invalid object");
                }
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Mapping.findAll() **********************/
        findAll(__event){
            let __toString = 'Mapping.findAll(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Mapping.findAll()').method('findAll').className('Mapping').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
        /************* Mapping.find() **********************/
        find(__event){
            let __toString = 'Mapping.find(): ';

            let answer = undefined;

            var node = new esptest.com.nammour.dcom.Node().code(gs.getProperty('instance_name'));
            let __response = new esptest.com.nammour.dcom.Event().code('['+node.code()+'@'+new Date(new GlideDateTime()).toISOString().replace('.000Z', 'Z')+'].Mapping.find()').method('find').className('Mapping').carrier(node).sender(node);

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.recipient(__event.sender()._unique()).responseTo(__event._unique());
        


            }else{
                //__response.recipient(new esptest.com.nammour.dcom.Node().code('parent'));
            }

            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");
                
                

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            
            }

            return answer;
        }
    
    };


if(typeof(module)!=="undefined") module.exports.esptest = esptest;",
	"__keys": ["name"],
	"__trMap": []
}