{
	"Id": "0bf4d7549688ca9b79c3925593749b579625cb8a",
	"active": "true",
	"enabled": "true",
	"code": "snow",
	"date": "2024-10-30T10:27:27.166Z",
	"name": "SNOW",
	"remark": "var esptest = Class.create();
esptest.prototype = {
    initialize :function(){},
    type :'esptest'
};



    
    esptest.User = class {
    
        /************* User.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* User.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* User.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* User.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* User.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* User.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* User.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* User.username GETTERS AND SETTERS **********************/
        username(v){
        
            if(typeof(v)!=='undefined'){
                this._username = v;
                return this;
            }else{
                return this._username;
            }
        }
    
        /************* User.password GETTERS AND SETTERS **********************/
        password(v){
        
            if(typeof(v)!=='undefined'){
                this._password = v;
                return this;
            }else{
                return this._password;
            }
        }
    
    
    


    
        /************* User.store() **********************/
        store(__event){
            let __toString = 'User.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].User.store()').method('store').className('User').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = User()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* User.findAll() **********************/
        findAll(__event){
            let __toString = 'User.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].User.findAll()').method('findAll').className('User').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = User()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* User.find() **********************/
        find(__event){
            let __toString = 'User.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].User.find()').method('find').className('User').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = User()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* User.init() **********************/
        init(__event){
            let __toString = 'User.init(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].User.init()').method('init').className('User').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric = class {
    
        /************* Metric.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric.script GETTERS AND SETTERS **********************/
        script(v){
        
            if(typeof(v)!=='undefined'){
                this._script = v;
                return this;
            }else{
                return this._script;
            }
        }
    
        /************* Metric.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Metric.deviceType GETTERS AND SETTERS **********************/
        deviceType(v){
        
            if(typeof(v)!=='undefined'){
                this._deviceType = v;
                return this;
            }else{
                return this._deviceType;
            }
        }
    
    
    
        /************* Metric.metric_Metric_Values GETTERS AND SETTERS **********************/
        metric_Metric_Values(v){
        }
    


    
        /************* Metric.store() **********************/
        store(__event){
            let __toString = 'Metric.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric.store()').method('store').className('Metric').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric.findAll()').method('findAll').className('Metric').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric.find() **********************/
        find(__event){
            let __toString = 'Metric.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric.find()').method('find').className('Metric').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Value = class {
    
        /************* Metric_Value.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Value.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Value.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Value.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Value.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Value.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Value.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric_Value.value GETTERS AND SETTERS **********************/
        value(v){
        
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Metric_Value.measured GETTERS AND SETTERS **********************/
        measured(v){
        
            if(typeof(v)!=='undefined'){
                this._measured = v;
                return this;
            }else{
                return this._measured;
            }
        }
    
        /************* Metric_Value.metric GETTERS AND SETTERS **********************/
        metric(v){
        
            if(typeof(v)!=='undefined'){
                this._metric = v;
                return this;
            }else{
                return this._metric;
            }
        }
    
        /************* Metric_Value.device GETTERS AND SETTERS **********************/
        device(v){
        
            if(typeof(v)!=='undefined'){
                this._device = v;
                return this;
            }else{
                return this._device;
            }
        }
    
    
    


    
        /************* Metric_Value.store() **********************/
        store(__event){
            let __toString = 'Metric_Value.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Value.store()').method('store').className('Metric_Value').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            if self.measured() is None:
                print(__toString + "reading " + self.metric().code() + "...");
                exec("def " + self.metric().code() + "(self, " + ", ".join([da.attribute().code() for da in self.device().device_Device_Attributes()]) + "):" + re.sub("\n", "\n    ", re.sub("\r", "", "\n"+self.metric().script())) + "\n\nsetattr(Metric, '_"+self.metric().code()+"', " + self.metric().code() + ");");
                mvRet = self._unique().measured('{{now}}');
                try:
                    mvRet.value(eval("str(self.metric()._" + self.metric().code() + '("' + '", "'.join([dta.value() for dta in self.device().device_Device_Attributes()]) + '")).strip()'));
                except Exception as ex:
                    print(__toString + "Exception: " + str(ex));
                    mvRet.value("--exception--");
                
                print(__toString + "my value is " + mvRet.value());
                return mvRet.store();
            else:
                print(__toString + "writing..., probably never needed anyway!");
	    
            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Value()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric_Value.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric_Value.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Value.findAll()').method('findAll').className('Metric_Value').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Value()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric_Value.find() **********************/
        find(__event){
            let __toString = 'Metric_Value.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Value.find()').method('find').className('Metric_Value').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Value()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device = class {
    
        /************* Device.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Device.controller GETTERS AND SETTERS **********************/
        controller(v){
        
            if(typeof(v)!=='undefined'){
                this._controller = v;
                return this;
            }else{
                return this._controller;
            }
        }
    
    
    
        /************* Device.device_Metric_Values GETTERS AND SETTERS **********************/
        device_Metric_Values(v){
        }
    
        /************* Device.device_Device_Attributes GETTERS AND SETTERS **********************/
        device_Device_Attributes(v){
        }
    


    
        /************* Device.store() **********************/
        store(__event){
            let __toString = 'Device.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device.store()').method('store').className('Device').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device.findAll() **********************/
        findAll(__event){
            let __toString = 'Device.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device.findAll()').method('findAll').className('Device').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device.find() **********************/
        find(__event){
            let __toString = 'Device.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device.find()').method('find').className('Device').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Attribute = class {
    
        /************* Device_Attribute.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Attribute.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Attribute.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Attribute.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Attribute.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Attribute.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Attribute.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Attribute.value GETTERS AND SETTERS **********************/
        value(v){
        
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Device_Attribute.device GETTERS AND SETTERS **********************/
        device(v){
        
            if(typeof(v)!=='undefined'){
                this._device = v;
                return this;
            }else{
                return this._device;
            }
        }
    
        /************* Device_Attribute.attribute GETTERS AND SETTERS **********************/
        attribute(v){
        
            if(typeof(v)!=='undefined'){
                this._attribute = v;
                return this;
            }else{
                return this._attribute;
            }
        }
    
    
    


    
        /************* Device_Attribute.store() **********************/
        store(__event){
            let __toString = 'Device_Attribute.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Attribute.store()').method('store').className('Device_Attribute').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device_Attribute.findAll() **********************/
        findAll(__event){
            let __toString = 'Device_Attribute.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Attribute.findAll()').method('findAll').className('Device_Attribute').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device_Attribute.find() **********************/
        find(__event){
            let __toString = 'Device_Attribute.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Attribute.find()').method('find').className('Device_Attribute').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Type_Attribute = class {
    
        /************* Type_Attribute.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Type_Attribute.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Type_Attribute.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Type_Attribute.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Type_Attribute.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Type_Attribute.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Type_Attribute.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Type_Attribute.deviceType GETTERS AND SETTERS **********************/
        deviceType(v){
        
            if(typeof(v)!=='undefined'){
                this._deviceType = v;
                return this;
            }else{
                return this._deviceType;
            }
        }
    
    
    
        /************* Type_Attribute.attribute_Device_Attributes GETTERS AND SETTERS **********************/
        attribute_Device_Attributes(v){
        }
    


    
        /************* Type_Attribute.store() **********************/
        store(__event){
            let __toString = 'Type_Attribute.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Type_Attribute.store()').method('store').className('Type_Attribute').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Type_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Type_Attribute.findAll() **********************/
        findAll(__event){
            let __toString = 'Type_Attribute.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Type_Attribute.findAll()').method('findAll').className('Type_Attribute').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Type_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Type_Attribute.find() **********************/
        find(__event){
            let __toString = 'Type_Attribute.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Type_Attribute.find()').method('find').className('Type_Attribute').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Type_Attribute()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Category = class {
    
        /************* Device_Category.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Category.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Category.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Category.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Category.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Category.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Category.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Category.parent GETTERS AND SETTERS **********************/
        parent(v){
        
            if(typeof(v)!=='undefined'){
                this._parent = v;
                return this;
            }else{
                return this._parent;
            }
        }
    
    
    
        /************* Device_Category.parent_Device_Categorys GETTERS AND SETTERS **********************/
        parent_Device_Categorys(v){
        }
    
        /************* Device_Category.category_Device_Types GETTERS AND SETTERS **********************/
        category_Device_Types(v){
        }
    


    
        /************* Device_Category.store() **********************/
        store(__event){
            let __toString = 'Device_Category.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Category.store()').method('store').className('Device_Category').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Category()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device_Category.findAll() **********************/
        findAll(__event){
            let __toString = 'Device_Category.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Category.findAll()').method('findAll').className('Device_Category').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Category()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device_Category.find() **********************/
        find(__event){
            let __toString = 'Device_Category.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Category.find()').method('find').className('Device_Category').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Category()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Device_Type = class {
    
        /************* Device_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Device_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Device_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Device_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Device_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Device_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Device_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Device_Type.category GETTERS AND SETTERS **********************/
        category(v){
        
            if(typeof(v)!=='undefined'){
                this._category = v;
                return this;
            }else{
                return this._category;
            }
        }
    
    
    
        /************* Device_Type.deviceType_Metrics GETTERS AND SETTERS **********************/
        deviceType_Metrics(v){
        }
    
        /************* Device_Type.type_Devices GETTERS AND SETTERS **********************/
        type_Devices(v){
        }
    
        /************* Device_Type.deviceType_Type_Attributes GETTERS AND SETTERS **********************/
        deviceType_Type_Attributes(v){
        }
    


    
        /************* Device_Type.store() **********************/
        store(__event){
            let __toString = 'Device_Type.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Type.store()').method('store').className('Device_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Device_Type.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Type.findAll()').method('findAll').className('Device_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Device_Type.find() **********************/
        find(__event){
            let __toString = 'Device_Type.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Device_Type.find()').method('find').className('Device_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Device_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Group = class {
    
        /************* Metric_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Metric_Group.group_Metric_Types GETTERS AND SETTERS **********************/
        group_Metric_Types(v){
        }
    


    
        /************* Metric_Group.store() **********************/
        store(__event){
            let __toString = 'Metric_Group.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Group.store()').method('store').className('Metric_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric_Group.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Group.findAll()').method('findAll').className('Metric_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric_Group.find() **********************/
        find(__event){
            let __toString = 'Metric_Group.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Group.find()').method('find').className('Metric_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.diot = esptest.com.nammour.diot || {};
    esptest.com.nammour.diot.Metric_Type = class {
    
        /************* Metric_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Metric_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Metric_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Metric_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Metric_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Metric_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Metric_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Metric_Type.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
    
    
        /************* Metric_Type.type_Metrics GETTERS AND SETTERS **********************/
        type_Metrics(v){
        }
    


    
        /************* Metric_Type.store() **********************/
        store(__event){
            let __toString = 'Metric_Type.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Type.store()').method('store').className('Metric_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Metric_Type.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Type.findAll()').method('findAll').className('Metric_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Metric_Type.find() **********************/
        find(__event){
            let __toString = 'Metric_Type.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Metric_Type.find()').method('find').className('Metric_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Metric_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Config = class {
    
        /************* Config.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Config.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Config.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Config.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Config.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Config.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Config.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Config.value GETTERS AND SETTERS **********************/
        value(v){
        
            if(typeof(v)!=='undefined'){
                this._value = v;
                return this;
            }else{
                return this._value;
            }
        }
    
        /************* Config.script GETTERS AND SETTERS **********************/
        script(v){
        
            if(typeof(v)!=='undefined'){
                this._script = v;
                return this;
            }else{
                return this._script;
            }
        }
    
        /************* Config.tool GETTERS AND SETTERS **********************/
        tool(v){
        
            if(typeof(v)!=='undefined'){
                this._tool = v;
                return this;
            }else{
                return this._tool;
            }
        }
    
        /************* Config.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Config.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
        /************* Config.node GETTERS AND SETTERS **********************/
        node(v){
        
            if(typeof(v)!=='undefined'){
                this._node = v;
                return this;
            }else{
                return this._node;
            }
        }
    
    
    


    
        /************* Config.store() **********************/
        store(__event){
            let __toString = 'Config.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Config.store()').method('store').className('Config').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Config.findAll() **********************/
        findAll(__event){
            let __toString = 'Config.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Config.findAll()').method('findAll').className('Config').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Config.find() **********************/
        find(__event){
            let __toString = 'Config.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Config.find()').method('find').className('Config').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Tool = class {
    
        /************* Tool.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Tool.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Tool.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Tool.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Tool.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Tool.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Tool.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Tool.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
        /************* Tool.tool_Configs GETTERS AND SETTERS **********************/
        tool_Configs(v){
        }
    
        /************* Tool.tool_Mappings GETTERS AND SETTERS **********************/
        tool_Mappings(v){
        }
    


    
        /************* Tool.store() **********************/
        store(__event){
            let __toString = 'Tool.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Tool.store()').method('store').className('Tool').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Tool.findAll() **********************/
        findAll(__event){
            let __toString = 'Tool.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Tool.findAll()').method('findAll').className('Tool').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Tool.find() **********************/
        find(__event){
            let __toString = 'Tool.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Tool.find()').method('find').className('Tool').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Config_Group = class {
    
        /************* Config_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Config_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Config_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Config_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Config_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Config_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Config_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Config_Group.group_Configs GETTERS AND SETTERS **********************/
        group_Configs(v){
        }
    
        /************* Config_Group.group_Mappings GETTERS AND SETTERS **********************/
        group_Mappings(v){
        }
    


    
        /************* Config_Group.store() **********************/
        store(__event){
            let __toString = 'Config_Group.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Config_Group.store()').method('store').className('Config_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Config_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Config_Group.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Config_Group.findAll()').method('findAll').className('Config_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Config_Group.find() **********************/
        find(__event){
            let __toString = 'Config_Group.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Config_Group.find()').method('find').className('Config_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Config_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Mapping_Group = class {
    
        /************* Mapping_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Mapping_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Mapping_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Mapping_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Mapping_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Mapping_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Mapping_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    


    
        /************* Mapping_Group.store() **********************/
        store(__event){
            let __toString = 'Mapping_Group.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Mapping_Group.store()').method('store').className('Mapping_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Mapping_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Mapping_Group.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Mapping_Group.findAll()').method('findAll').className('Mapping_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Mapping_Group.find() **********************/
        find(__event){
            let __toString = 'Mapping_Group.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Mapping_Group.find()').method('find').className('Mapping_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Tool_Type = class {
    
        /************* Tool_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Tool_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Tool_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Tool_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Tool_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Tool_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Tool_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Tool_Type.type_Configs GETTERS AND SETTERS **********************/
        type_Configs(v){
        }
    
        /************* Tool_Type.type_Tools GETTERS AND SETTERS **********************/
        type_Tools(v){
        }
    
        /************* Tool_Type.type_Mappings GETTERS AND SETTERS **********************/
        type_Mappings(v){
        }
    


    
        /************* Tool_Type.store() **********************/
        store(__event){
            let __toString = 'Tool_Type.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Tool_Type.store()').method('store').className('Tool_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Tool_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Tool_Type.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Tool_Type.findAll()').method('findAll').className('Tool_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Tool_Type.find() **********************/
        find(__event){
            let __toString = 'Tool_Type.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Tool_Type.find()').method('find').className('Tool_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Tool_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Event = class {
    
        /************* Event.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Event.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Event.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Event.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Event.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Event.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Event.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Event.className GETTERS AND SETTERS **********************/
        className(v){
        
            if(typeof(v)!=='undefined'){
                this._className = v;
                return this;
            }else{
                return this._className;
            }
        }
    
        /************* Event.method GETTERS AND SETTERS **********************/
        method(v){
        
            if(typeof(v)!=='undefined'){
                this._method = v;
                return this;
            }else{
                return this._method;
            }
        }
    
        /************* Event.payload GETTERS AND SETTERS **********************/
        payload(v){
        
            if(typeof(v)!=='undefined'){
                this._payload = v;
                return this;
            }else{
                return this._payload;
            }
        }
    
        /************* Event.carrier GETTERS AND SETTERS **********************/
        carrier(v){
        
            if(typeof(v)!=='undefined'){
                this._carrier = v;
                return this;
            }else{
                return this._carrier;
            }
        }
    
        /************* Event.sender GETTERS AND SETTERS **********************/
        sender(v){
        
            if(typeof(v)!=='undefined'){
                this._sender = v;
                return this;
            }else{
                return this._sender;
            }
        }
    
        /************* Event.recipient GETTERS AND SETTERS **********************/
        recipient(v){
        
            if(typeof(v)!=='undefined'){
                this._recipient = v;
                return this;
            }else{
                return this._recipient;
            }
        }
    
        /************* Event.responseTo GETTERS AND SETTERS **********************/
        responseTo(v){
        
            if(typeof(v)!=='undefined'){
                this._responseTo = v;
                return this;
            }else{
                return this._responseTo;
            }
        }
    
    
    
        /************* Event.responseTo_Events GETTERS AND SETTERS **********************/
        responseTo_Events(v){
        }
    


    
        /************* Event.store() **********************/
        store(__event){
            let __toString = 'Event.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Event.store()').method('store').className('Event').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Event.findAll() **********************/
        findAll(__event){
            let __toString = 'Event.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Event.findAll()').method('findAll').className('Event').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Event.find() **********************/
        find(__event){
            let __toString = 'Event.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Event.find()').method('find').className('Event').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Event.listen() **********************/
        listen(__event, node){
            let __toString = 'Event.listen(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Event.listen()').method('listen').className('Event').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                if(typeof(evJSON.node)!=='undefined'){
                    node = evJSON.node;
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Event.trigger() **********************/
        trigger(__event){
            let __toString = 'Event.trigger(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Event.trigger()').method('trigger').className('Event').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            return mqtt_client.publish(mqtt_topic, self._toDocument(True));
		
            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            

            return answer;
        }
    
        /************* Event.process() **********************/
        process(__event){
            let __toString = 'Event.process(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Event.process()').method('process').className('Event').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Event()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            if self.sender().code()==node.code():
                print(__toString + "ignoring my events");
                return;
            elif self.recipient().code()!=node.code():
                print(__toString + "not sent to me");
                return;

            return getattr(globals()[self.className()](), self.method())(self);
		
            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node = class {
    
        /************* Node.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Node.address GETTERS AND SETTERS **********************/
        address(v){
        
            if(typeof(v)!=='undefined'){
                this._address = v;
                return this;
            }else{
                return this._address;
            }
        }
    
        /************* Node.backup GETTERS AND SETTERS **********************/
        backup(v){
        
            if(typeof(v)!=='undefined'){
                this._backup = v;
                return this;
            }else{
                return this._backup;
            }
        }
    
        /************* Node.parent GETTERS AND SETTERS **********************/
        parent(v){
        
            if(typeof(v)!=='undefined'){
                this._parent = v;
                return this;
            }else{
                return this._parent;
            }
        }
    
        /************* Node.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Node.context GETTERS AND SETTERS **********************/
        context(v){
        
            if(typeof(v)!=='undefined'){
                this._context = v;
                return this;
            }else{
                return this._context;
            }
        }
    
        /************* Node.port GETTERS AND SETTERS **********************/
        port(v){
        
            if(typeof(v)!=='undefined'){
                this._port = v;
                return this;
            }else{
                return this._port;
            }
        }
    
        /************* Node.online GETTERS AND SETTERS **********************/
        online(v){
        
            if(typeof(v)!=='undefined'){
                this._online = v;
                return this;
            }else{
                return this._online;
            }
        }
    
        /************* Node.secure GETTERS AND SETTERS **********************/
        secure(v){
        
            if(typeof(v)!=='undefined'){
                this._secure = v;
                return this;
            }else{
                return this._secure;
            }
        }
    
        /************* Node.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    
        /************* Node.controller_Devices GETTERS AND SETTERS **********************/
        controller_Devices(v){
        }
    
        /************* Node.node_Configs GETTERS AND SETTERS **********************/
        node_Configs(v){
        }
    
        /************* Node.carrier_Events GETTERS AND SETTERS **********************/
        carrier_Events(v){
        }
    
        /************* Node.sender_Events GETTERS AND SETTERS **********************/
        sender_Events(v){
        }
    
        /************* Node.recipient_Events GETTERS AND SETTERS **********************/
        recipient_Events(v){
        }
    
        /************* Node.backup_Nodes GETTERS AND SETTERS **********************/
        backup_Nodes(v){
        }
    
        /************* Node.parent_Nodes GETTERS AND SETTERS **********************/
        parent_Nodes(v){
        }
    


    
        /************* Node.store() **********************/
        store(__event){
            let __toString = 'Node.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node.store()').method('store').className('Node').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        

		if self.online() is not None:
            # disable online update
            return answer;
            
            time.sleep(30);
            self._unique().online('{{now}}').store();


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node.findAll() **********************/
        findAll(__event){
            let __toString = 'Node.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node.findAll()').method('findAll').className('Node').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node.find() **********************/
        find(__event){
            let __toString = 'Node.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node.find()').method('find').className('Node').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node.authCode() **********************/
        authCode(__event, code, tool){
            let __toString = 'Node.authCode(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node.authCode()').method('authCode').className('Node').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                if(typeof(evJSON.code)!=='undefined'){
                    code = evJSON.code;
                }
        
                if(typeof(evJSON.tool)!=='undefined'){
                    tool = evJSON.tool;
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = evJSON;
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(str(answer));
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node.init() **********************/
        init(__event, online, code, uid){
            let __toString = 'Node.init(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node.init()').method('init').className('Node').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                if(typeof(evJSON.online)!=='undefined'){
                    online = evJSON.online;
                }
        
                if(typeof(evJSON.code)!=='undefined'){
                    code = evJSON.code;
                }
        
                if(typeof(evJSON.uid)!=='undefined'){
                    uid = evJSON.uid;
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Context = class {
    
        /************* Node_Context.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Context.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Context.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Context.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Context.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Context.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Context.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Node_Context.context_Nodes GETTERS AND SETTERS **********************/
        context_Nodes(v){
        }
    


    
        /************* Node_Context.store() **********************/
        store(__event){
            let __toString = 'Node_Context.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Context.store()').method('store').className('Node_Context').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Context()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node_Context.findAll() **********************/
        findAll(__event){
            let __toString = 'Node_Context.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Context.findAll()').method('findAll').className('Node_Context').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Context()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node_Context.find() **********************/
        find(__event){
            let __toString = 'Node_Context.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Context.find()').method('find').className('Node_Context').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Context()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Group = class {
    
        /************* Node_Group.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Group.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Group.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Group.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Group.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Group.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Group.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
    
    
        /************* Node_Group.group_Nodes GETTERS AND SETTERS **********************/
        group_Nodes(v){
        }
    


    
        /************* Node_Group.store() **********************/
        store(__event){
            let __toString = 'Node_Group.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Group.store()').method('store').className('Node_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node_Group.findAll() **********************/
        findAll(__event){
            let __toString = 'Node_Group.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Group.findAll()').method('findAll').className('Node_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node_Group.find() **********************/
        find(__event){
            let __toString = 'Node_Group.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Group.find()').method('find').className('Node_Group').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Group()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Node_Type = class {
    
        /************* Node_Type.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Node_Type.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Node_Type.code GETTERS AND SETTERS **********************/
        code(v){
        
            if(typeof(v)!=='undefined'){
                this._code = v;
                return this;
            }else{
                return this._code;
            }
        }
    
        /************* Node_Type.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Node_Type.date GETTERS AND SETTERS **********************/
        date(v){
        
            if(typeof(v)!=='undefined'){
                this._date = v;
                return this;
            }else{
                return this._date;
            }
        }
    
        /************* Node_Type.name GETTERS AND SETTERS **********************/
        name(v){
        
            if(typeof(v)!=='undefined'){
                this._name = v;
                return this;
            }else{
                return this._name;
            }
        }
    
        /************* Node_Type.remark GETTERS AND SETTERS **********************/
        remark(v){
        
            if(typeof(v)!=='undefined'){
                this._remark = v;
                return this;
            }else{
                return this._remark;
            }
        }
    
        /************* Node_Type.dynamic GETTERS AND SETTERS **********************/
        dynamic(v){
        
            if(typeof(v)!=='undefined'){
                this._dynamic = v;
                return this;
            }else{
                return this._dynamic;
            }
        }
    
    
    
        /************* Node_Type.type_Nodes GETTERS AND SETTERS **********************/
        type_Nodes(v){
        }
    


    
        /************* Node_Type.store() **********************/
        store(__event){
            let __toString = 'Node_Type.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Type.store()').method('store').className('Node_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node_Type.findAll() **********************/
        findAll(__event){
            let __toString = 'Node_Type.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Type.findAll()').method('findAll').className('Node_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Node_Type.find() **********************/
        find(__event){
            let __toString = 'Node_Type.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Node_Type.find()').method('find').className('Node_Type').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        

        lastUpdate = self.date();
        self._fromDocument(base_url);

        if self.date()>lastUpdate:
            print(__toString + "newer version: " + str(self.date()) + ", rebooting...");
            os.execl(sys.executable, sys.executable, *sys.argv);

        time.sleep(30);
        return self.find();
        

            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Node_Type()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };

    esptest.com = esptest.com || {};esptest.com.nammour = esptest.com.nammour || {};esptest.com.nammour.dcom = esptest.com.nammour.dcom || {};
    esptest.com.nammour.dcom.Mapping = class {
    
        /************* Mapping.active GETTERS AND SETTERS **********************/
        active(v){
        
            if(typeof(v)!=='undefined'){
                this._active = v;
                return this;
            }else{
                return this._active;
            }
        }
    
        /************* Mapping.enabled GETTERS AND SETTERS **********************/
        enabled(v){
        
            if(typeof(v)!=='undefined'){
                this._enabled = v;
                return this;
            }else{
                return this._enabled;
            }
        }
    
        /************* Mapping.order GETTERS AND SETTERS **********************/
        order(v){
        
            if(typeof(v)!=='undefined'){
                this._order = v;
                return this;
            }else{
                return this._order;
            }
        }
    
        /************* Mapping.className GETTERS AND SETTERS **********************/
        className(v){
        
            if(typeof(v)!=='undefined'){
                this._className = v;
                return this;
            }else{
                return this._className;
            }
        }
    
        /************* Mapping.scope GETTERS AND SETTERS **********************/
        scope(v){
        
            if(typeof(v)!=='undefined'){
                this._scope = v;
                return this;
            }else{
                return this._scope;
            }
        }
    
        /************* Mapping.context GETTERS AND SETTERS **********************/
        context(v){
        
            if(typeof(v)!=='undefined'){
                this._context = v;
                return this;
            }else{
                return this._context;
            }
        }
    
        /************* Mapping.source GETTERS AND SETTERS **********************/
        source(v){
        
            if(typeof(v)!=='undefined'){
                this._source = v;
                return this;
            }else{
                return this._source;
            }
        }
    
        /************* Mapping.target GETTERS AND SETTERS **********************/
        target(v){
        
            if(typeof(v)!=='undefined'){
                this._target = v;
                return this;
            }else{
                return this._target;
            }
        }
    
        /************* Mapping.inScript GETTERS AND SETTERS **********************/
        inScript(v){
        
            if(typeof(v)!=='undefined'){
                this._inScript = v;
                return this;
            }else{
                return this._inScript;
            }
        }
    
        /************* Mapping.outScript GETTERS AND SETTERS **********************/
        outScript(v){
        
            if(typeof(v)!=='undefined'){
                this._outScript = v;
                return this;
            }else{
                return this._outScript;
            }
        }
    
        /************* Mapping.tool GETTERS AND SETTERS **********************/
        tool(v){
        
            if(typeof(v)!=='undefined'){
                this._tool = v;
                return this;
            }else{
                return this._tool;
            }
        }
    
        /************* Mapping.group GETTERS AND SETTERS **********************/
        group(v){
        
            if(typeof(v)!=='undefined'){
                this._group = v;
                return this;
            }else{
                return this._group;
            }
        }
    
        /************* Mapping.type GETTERS AND SETTERS **********************/
        type(v){
        
            if(typeof(v)!=='undefined'){
                this._type = v;
                return this;
            }else{
                return this._type;
            }
        }
    
    
    


    
        /************* Mapping.store() **********************/
        store(__event){
            let __toString = 'Mapping.store(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Mapping.store()').method('store').className('Mapping').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Mapping.findAll() **********************/
        findAll(__event){
            let __toString = 'Mapping.findAll(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Mapping.findAll()').method('findAll').className('Mapping').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
        /************* Mapping.find() **********************/
        find(__event){
            let __toString = 'Mapping.find(): ';

            let answer = undefined;

            let __response = new Event().code('['+node.code()+'@'+ticks+'].Mapping.find()').method('find').className('Mapping').carrier(node).sender(node).recipient(node.parent());

            let evJSON = null;
            if(__event){
                evJSON = JSON.parse(__event.payload());
                if(typeof(evJSON.__this)!=='undefined'){
                    this._fromDocument(evJSON.__this);
                }
        
                __response.responseTo(__event._unique());
        


            }


            if(__event && !__event.responseTo()){
                gs.info(__toString + " handling event["+__event.code()+"]");

            }
        
            if(__event && __event.responseTo()){
                gs.info(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
                answer = Mapping()._fromDocument(evJSON);
        

            }

            if(!__event){
                gs.info(__toString + "executing locally");

            }




            if(!__event || !__event.responseTo()){
                if(answer){
            
                    __response.payload(answer._toDocument());
            
                }else{
                    __response.payload({__this: self._toDocument()});
                }

            
                __response.trigger();
            

            return answer;
        }
    
    };


if(typeof(module)!=="undefined") module.exports.esptest = esptest;",
	"__keys": ["name"],
	"__trMap": []
}