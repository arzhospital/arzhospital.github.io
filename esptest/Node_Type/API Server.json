{
	"Id": "b7894168f7967a4957be7ac82c14acfe20c4f293",
	"active": "true",
	"enabled": "true",
	"code": "apiserver",
	"date": "2024-10-01T06:21:20.738Z",
	"name": "API Server",
	"remark": "# import urllib.request, json, base64;
# exec(base64.b64decode(json.load(urllib.request.urlopen("https://arzhospital.github.io/esptest/Node_Type/API+Server.json"))["remark"]));

import paho.mqtt.client,json,zlib,time,gc,io;


class User():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, username=None, password=None):
        super().__init__();

        #print('User::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.username(username);
        self.password(password);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # username: Getters and Setters
    _username = None;
    def username(self, *args):
        if args:
            self._username = args[0];
            return self;
        else:
            return self._username;


    
    # password: Getters and Setters
    _password = None;
    def password(self, *args):
        if args:
            self._password = args[0];
            return self;
        else:
            return self._password;


    
    
    def _fromDocument(self, obj):
        __toString = 'User::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = User()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'username' in obj:
            self.username(obj['username']);
        
    
        if 'password' in obj:
            self.password(obj['password']);
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'User::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.username() is not None:
            ret["username"] = self.username();
        
    
        if self.password() is not None:
            ret["password"] = self.password();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'User::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].User.store()').method('store').className('User').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = User()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'User_store' in dir():
            print(__toString + '==> User_store()');
            answer = User_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'User::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].User.findAll()').method('findAll').className('User').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = User()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'User_findAll' in dir():
            print(__toString + '==> User_findAll()');
            answer = User_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'User::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].User.find()').method('find').className('User').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = User()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'User_find' in dir():
            print(__toString + '==> User_find()');
            answer = User_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def init(self, __event=None):
        __toString = 'User::init(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].User.init()').method('init').className('User').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'User_init' in dir():
            print(__toString + '==> User_init()');
            answer = User_init(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Action_Execution():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, device=None, action=None, result=None, completed=None):
        super().__init__();

        #print('Action_Execution::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.device(device);
        self.action(action);
        self.result(result);
        self.completed(completed);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # device: Getters and Setters
    _device = None;
    def device(self, *args):
        if args:
            self._device = args[0];
            return self;
        else:
            return self._device;


    
    # action: Getters and Setters
    _action = None;
    def action(self, *args):
        if args:
            self._action = args[0];
            return self;
        else:
            return self._action;


    
    # result: Getters and Setters
    _result = None;
    def result(self, *args):
        if args:
            self._result = args[0];
            return self;
        else:
            return self._result;


    
    # completed: Getters and Setters
    _completed = None;
    def completed(self, *args):
        if args:
            self._completed = args[0];
            return self;
        else:
            return self._completed;


    
    
    def _fromDocument(self, obj):
        __toString = 'Action_Execution::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Action_Execution()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'device' in obj:
            self.device(Device()._fromDocument(obj['device']));
        
    
        if 'action' in obj:
            self.action(Device_Action()._fromDocument(obj['action']));
        
    
        if 'result' in obj:
            self.result(obj['result']);
        
            self.result( base64.b64decode(self.result()) );
        
    
        if 'completed' in obj:
            self.completed(obj['completed']);
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Action_Execution::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.device() is not None:
            ret["device"] = self.device()._toDocument();
        
    
        if self.action() is not None:
            ret["action"] = self.action()._toDocument();
        
    
        if self.result() is not None:
            ret["result"] = self.result();
        
            if isinstance(ret["result"], dict):
                ret["result"] = json.dumps(ret["result"]).encode('utf-8');

            ret["result"] =  base64.b64encode(ret["result"]).decode('utf-8').strip();
        
    
        if self.completed() is not None:
            ret["completed"] = self.completed();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Action_Execution::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Action_Execution.store()').method('store').className('Action_Execution').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Action_Execution()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Action_Execution_store' in dir():
            print(__toString + '==> Action_Execution_store()');
            answer = Action_Execution_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Action_Execution::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Action_Execution.findAll()').method('findAll').className('Action_Execution').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Action_Execution()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Action_Execution_findAll' in dir():
            print(__toString + '==> Action_Execution_findAll()');
            answer = Action_Execution_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Action_Execution::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Action_Execution.find()').method('find').className('Action_Execution').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Action_Execution()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");

        if __event is not None and __event.responseTo() is not None:
            print(__toString + "completed="+answer.completed());
            # if and answer.result() is None and answer.completed() is None and answer.action().script() is not None
            #print(__toString + answer.action().code() + ' is executing');
	    


        if 'Action_Execution_find' in dir():
            print(__toString + '==> Action_Execution_find()');
            answer = Action_Execution_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Device_Action():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, script=None, type=None):
        super().__init__();

        #print('Device_Action::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.script(script);
        self.type(type);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # script: Getters and Setters
    _script = None;
    def script(self, *args):
        if args:
            self._script = args[0];
            return self;
        else:
            return self._script;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    
    def _fromDocument(self, obj):
        __toString = 'Device_Action::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Device_Action()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'script' in obj:
            self.script(obj['script']);
        
            self.script( base64.b64decode(self.script()) );
        
    
        if 'type' in obj:
            self.type(Device_Type()._fromDocument(obj['type']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Device_Action::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.script() is not None:
            ret["script"] = self.script();
        
            if isinstance(ret["script"], dict):
                ret["script"] = json.dumps(ret["script"]).encode('utf-8');

            ret["script"] =  base64.b64encode(ret["script"]).decode('utf-8').strip();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Device_Action::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Action.store()').method('store').className('Device_Action').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Action()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Action_store' in dir():
            print(__toString + '==> Device_Action_store()');
            answer = Device_Action_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Device_Action::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Action.findAll()').method('findAll').className('Device_Action').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Action()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Action_findAll' in dir():
            print(__toString + '==> Device_Action_findAll()');
            answer = Device_Action_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Device_Action::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Action.find()').method('find').className('Device_Action').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Action()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Action_find' in dir():
            print(__toString + '==> Device_Action_find()');
            answer = Device_Action_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Device():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, type=None, controller=None):
        super().__init__();

        #print('Device::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.type(type);
        self.controller(controller);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    # controller: Getters and Setters
    _controller = None;
    def controller(self, *args):
        if args:
            self._controller = args[0];
            return self;
        else:
            return self._controller;


    
    
    def _fromDocument(self, obj):
        __toString = 'Device::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Device()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'type' in obj:
            self.type(Device_Type()._fromDocument(obj['type']));
        
    
        if 'controller' in obj:
            self.controller(Node()._fromDocument(obj['controller']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Device::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        if self.controller() is not None:
            ret["controller"] = self.controller()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Device::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device.store()').method('store').className('Device').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_store' in dir():
            print(__toString + '==> Device_store()');
            answer = Device_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Device::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device.findAll()').method('findAll').className('Device').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_findAll' in dir():
            print(__toString + '==> Device_findAll()');
            answer = Device_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Device::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device.find()').method('find').className('Device').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_find' in dir():
            print(__toString + '==> Device_find()');
            answer = Device_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Device_Category():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, parent=None):
        super().__init__();

        #print('Device_Category::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.parent(parent);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # parent: Getters and Setters
    _parent = None;
    def parent(self, *args):
        if args:
            self._parent = args[0];
            return self;
        else:
            return self._parent;


    
    
    def _fromDocument(self, obj):
        __toString = 'Device_Category::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Device_Category()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'parent' in obj:
            self.parent(obj['parent']);
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Device_Category::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.parent() is not None:
            ret["parent"] = self.parent();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Device_Category::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Category.store()').method('store').className('Device_Category').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Category()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Category_store' in dir():
            print(__toString + '==> Device_Category_store()');
            answer = Device_Category_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Device_Category::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Category.findAll()').method('findAll').className('Device_Category').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Category()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Category_findAll' in dir():
            print(__toString + '==> Device_Category_findAll()');
            answer = Device_Category_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Device_Category::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Category.find()').method('find').className('Device_Category').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Category()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Category_find' in dir():
            print(__toString + '==> Device_Category_find()');
            answer = Device_Category_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Device_Type():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, category=None):
        super().__init__();

        #print('Device_Type::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.category(category);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # category: Getters and Setters
    _category = None;
    def category(self, *args):
        if args:
            self._category = args[0];
            return self;
        else:
            return self._category;


    
    
    def _fromDocument(self, obj):
        __toString = 'Device_Type::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Device_Type()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'category' in obj:
            self.category(Device_Category()._fromDocument(obj['category']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Device_Type::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.category() is not None:
            ret["category"] = self.category()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Device_Type::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Type.store()').method('store').className('Device_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Type_store' in dir():
            print(__toString + '==> Device_Type_store()');
            answer = Device_Type_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Device_Type::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Type.findAll()').method('findAll').className('Device_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Type_findAll' in dir():
            print(__toString + '==> Device_Type_findAll()');
            answer = Device_Type_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Device_Type::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Device_Type.find()').method('find').className('Device_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Device_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Device_Type_find' in dir():
            print(__toString + '==> Device_Type_find()');
            answer = Device_Type_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Metric_Group():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None):
        super().__init__();

        #print('Metric_Group::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    
    def _fromDocument(self, obj):
        __toString = 'Metric_Group::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Metric_Group()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Metric_Group::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Metric_Group::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Group.store()').method('store').className('Metric_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Group_store' in dir():
            print(__toString + '==> Metric_Group_store()');
            answer = Metric_Group_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Metric_Group::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Group.findAll()').method('findAll').className('Metric_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Group_findAll' in dir():
            print(__toString + '==> Metric_Group_findAll()');
            answer = Metric_Group_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Metric_Group::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Group.find()').method('find').className('Metric_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Group_find' in dir():
            print(__toString + '==> Metric_Group_find()');
            answer = Metric_Group_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Metric_Type():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, group=None):
        super().__init__();

        #print('Metric_Type::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.group(group);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # group: Getters and Setters
    _group = None;
    def group(self, *args):
        if args:
            self._group = args[0];
            return self;
        else:
            return self._group;


    
    
    def _fromDocument(self, obj):
        __toString = 'Metric_Type::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Metric_Type()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'group' in obj:
            self.group(Metric_Group()._fromDocument(obj['group']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Metric_Type::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.group() is not None:
            ret["group"] = self.group()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Metric_Type::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Type.store()').method('store').className('Metric_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Type_store' in dir():
            print(__toString + '==> Metric_Type_store()');
            answer = Metric_Type_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Metric_Type::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Type.findAll()').method('findAll').className('Metric_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Type_findAll' in dir():
            print(__toString + '==> Metric_Type_findAll()');
            answer = Metric_Type_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Metric_Type::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Type.find()').method('find').className('Metric_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Type_find' in dir():
            print(__toString + '==> Metric_Type_find()');
            answer = Metric_Type_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Metric_Value():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, value=None, metric=None, device=None, controller=None, execution=None):
        super().__init__();

        #print('Metric_Value::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.value(value);
        self.metric(metric);
        self.device(device);
        self.controller(controller);
        self.execution(execution);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # value: Getters and Setters
    _value = None;
    def value(self, *args):
        if args:
            self._value = args[0];
            return self;
        else:
            return self._value;


    
    # metric: Getters and Setters
    _metric = None;
    def metric(self, *args):
        if args:
            self._metric = args[0];
            return self;
        else:
            return self._metric;


    
    # device: Getters and Setters
    _device = None;
    def device(self, *args):
        if args:
            self._device = args[0];
            return self;
        else:
            return self._device;


    
    # controller: Getters and Setters
    _controller = None;
    def controller(self, *args):
        if args:
            self._controller = args[0];
            return self;
        else:
            return self._controller;


    
    # execution: Getters and Setters
    _execution = None;
    def execution(self, *args):
        if args:
            self._execution = args[0];
            return self;
        else:
            return self._execution;


    
    
    def _fromDocument(self, obj):
        __toString = 'Metric_Value::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Metric_Value()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'value' in obj:
            self.value(obj['value']);
        
    
        if 'metric' in obj:
            self.metric(Metric()._fromDocument(obj['metric']));
        
    
        if 'device' in obj:
            self.device(Device()._fromDocument(obj['device']));
        
    
        if 'controller' in obj:
            self.controller(Node()._fromDocument(obj['controller']));
        
    
        if 'execution' in obj:
            self.execution(obj['execution']);
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Metric_Value::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.value() is not None:
            ret["value"] = self.value();
        
    
        if self.metric() is not None:
            ret["metric"] = self.metric()._toDocument();
        
    
        if self.device() is not None:
            ret["device"] = self.device()._toDocument();
        
    
        if self.controller() is not None:
            ret["controller"] = self.controller()._toDocument();
        
    
        if self.execution() is not None:
            ret["execution"] = self.execution();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Metric_Value::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Value.store()').method('store').className('Metric_Value').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Value()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Value_store' in dir():
            print(__toString + '==> Metric_Value_store()');
            answer = Metric_Value_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Metric_Value::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Value.findAll()').method('findAll').className('Metric_Value').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Value()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Value_findAll' in dir():
            print(__toString + '==> Metric_Value_findAll()');
            answer = Metric_Value_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Metric_Value::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric_Value.find()').method('find').className('Metric_Value').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric_Value()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_Value_find' in dir():
            print(__toString + '==> Metric_Value_find()');
            answer = Metric_Value_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Metric():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, type=None, deviceType=None):
        super().__init__();

        #print('Metric::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.type(type);
        self.deviceType(deviceType);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    # deviceType: Getters and Setters
    _deviceType = None;
    def deviceType(self, *args):
        if args:
            self._deviceType = args[0];
            return self;
        else:
            return self._deviceType;


    
    
    def _fromDocument(self, obj):
        __toString = 'Metric::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Metric()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'type' in obj:
            self.type(Metric_Type()._fromDocument(obj['type']));
        
    
        if 'deviceType' in obj:
            self.deviceType(Device_Type()._fromDocument(obj['deviceType']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Metric::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        if self.deviceType() is not None:
            ret["deviceType"] = self.deviceType()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Metric::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric.store()').method('store').className('Metric').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_store' in dir():
            print(__toString + '==> Metric_store()');
            answer = Metric_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Metric::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric.findAll()').method('findAll').className('Metric').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_findAll' in dir():
            print(__toString + '==> Metric_findAll()');
            answer = Metric_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Metric::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Metric.find()').method('find').className('Metric').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Metric()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Metric_find' in dir():
            print(__toString + '==> Metric_find()');
            answer = Metric_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Config():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, value=None, script=None, tool=None, group=None, type=None, node=None):
        super().__init__();

        #print('Config::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.value(value);
        self.script(script);
        self.tool(tool);
        self.group(group);
        self.type(type);
        self.node(node);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # value: Getters and Setters
    _value = None;
    def value(self, *args):
        if args:
            self._value = args[0];
            return self;
        else:
            return self._value;


    
    # script: Getters and Setters
    _script = None;
    def script(self, *args):
        if args:
            self._script = args[0];
            return self;
        else:
            return self._script;


    
    # tool: Getters and Setters
    _tool = None;
    def tool(self, *args):
        if args:
            self._tool = args[0];
            return self;
        else:
            return self._tool;


    
    # group: Getters and Setters
    _group = None;
    def group(self, *args):
        if args:
            self._group = args[0];
            return self;
        else:
            return self._group;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    # node: Getters and Setters
    _node = None;
    def node(self, *args):
        if args:
            self._node = args[0];
            return self;
        else:
            return self._node;


    
    
    def _fromDocument(self, obj):
        __toString = 'Config::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Config()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'value' in obj:
            self.value(obj['value']);
        
            self.value( base64.b64decode(self.value()) );
        
    
        if 'script' in obj:
            self.script(obj['script']);
        
            self.script( base64.b64decode(self.script()) );
        
    
        if 'tool' in obj:
            self.tool(Tool()._fromDocument(obj['tool']));
        
    
        if 'group' in obj:
            self.group(Config_Group()._fromDocument(obj['group']));
        
    
        if 'type' in obj:
            self.type(Tool_Type()._fromDocument(obj['type']));
        
    
        if 'node' in obj:
            self.node(Node()._fromDocument(obj['node']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Config::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.value() is not None:
            ret["value"] = self.value();
        
            if isinstance(ret["value"], dict):
                ret["value"] = json.dumps(ret["value"]).encode('utf-8');

            ret["value"] =  base64.b64encode(ret["value"]).decode('utf-8').strip();
        
    
        if self.script() is not None:
            ret["script"] = self.script();
        
            if isinstance(ret["script"], dict):
                ret["script"] = json.dumps(ret["script"]).encode('utf-8');

            ret["script"] =  base64.b64encode(ret["script"]).decode('utf-8').strip();
        
    
        if self.tool() is not None:
            ret["tool"] = self.tool()._toDocument();
        
    
        if self.group() is not None:
            ret["group"] = self.group()._toDocument();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        if self.node() is not None:
            ret["node"] = self.node()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Config::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Config.store()').method('store').className('Config').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Config()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Config_store' in dir():
            print(__toString + '==> Config_store()');
            answer = Config_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Config::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Config.findAll()').method('findAll').className('Config').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Config()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Config_findAll' in dir():
            print(__toString + '==> Config_findAll()');
            answer = Config_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Config::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Config.find()').method('find').className('Config').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Config()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Config_find' in dir():
            print(__toString + '==> Config_find()');
            answer = Config_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Tool():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, type=None):
        super().__init__();

        #print('Tool::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.type(type);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    
    def _fromDocument(self, obj):
        __toString = 'Tool::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Tool()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'type' in obj:
            self.type(Tool_Type()._fromDocument(obj['type']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Tool::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Tool::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Tool.store()').method('store').className('Tool').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Tool()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Tool_store' in dir():
            print(__toString + '==> Tool_store()');
            answer = Tool_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Tool::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Tool.findAll()').method('findAll').className('Tool').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Tool()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Tool_findAll' in dir():
            print(__toString + '==> Tool_findAll()');
            answer = Tool_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Tool::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Tool.find()').method('find').className('Tool').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Tool()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Tool_find' in dir():
            print(__toString + '==> Tool_find()');
            answer = Tool_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Config_Group():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None):
        super().__init__();

        #print('Config_Group::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    
    def _fromDocument(self, obj):
        __toString = 'Config_Group::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Config_Group()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Config_Group::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Config_Group::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Config_Group.store()').method('store').className('Config_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Config_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Config_Group_store' in dir():
            print(__toString + '==> Config_Group_store()');
            answer = Config_Group_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Config_Group::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Config_Group.findAll()').method('findAll').className('Config_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Config_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Config_Group_findAll' in dir():
            print(__toString + '==> Config_Group_findAll()');
            answer = Config_Group_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Config_Group::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Config_Group.find()').method('find').className('Config_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Config_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Config_Group_find' in dir():
            print(__toString + '==> Config_Group_find()');
            answer = Config_Group_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Mapping_Group():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None):
        super().__init__();

        #print('Mapping_Group::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    
    def _fromDocument(self, obj):
        __toString = 'Mapping_Group::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Mapping_Group()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Mapping_Group::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Mapping_Group::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Mapping_Group.store()').method('store').className('Mapping_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Mapping_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Mapping_Group_store' in dir():
            print(__toString + '==> Mapping_Group_store()');
            answer = Mapping_Group_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Mapping_Group::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Mapping_Group.findAll()').method('findAll').className('Mapping_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Mapping_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Mapping_Group_findAll' in dir():
            print(__toString + '==> Mapping_Group_findAll()');
            answer = Mapping_Group_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Mapping_Group::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Mapping_Group.find()').method('find').className('Mapping_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Mapping_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Mapping_Group_find' in dir():
            print(__toString + '==> Mapping_Group_find()');
            answer = Mapping_Group_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Tool_Type():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None):
        super().__init__();

        #print('Tool_Type::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    
    def _fromDocument(self, obj):
        __toString = 'Tool_Type::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Tool_Type()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Tool_Type::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Tool_Type::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Tool_Type.store()').method('store').className('Tool_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Tool_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Tool_Type_store' in dir():
            print(__toString + '==> Tool_Type_store()');
            answer = Tool_Type_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Tool_Type::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Tool_Type.findAll()').method('findAll').className('Tool_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Tool_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Tool_Type_findAll' in dir():
            print(__toString + '==> Tool_Type_findAll()');
            answer = Tool_Type_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Tool_Type::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Tool_Type.find()').method('find').className('Tool_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Tool_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Tool_Type_find' in dir():
            print(__toString + '==> Tool_Type_find()');
            answer = Tool_Type_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Event():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, className=None, method=None, payload=None, carrier=None, sender=None, recipient=None, responseTo=None):
        super().__init__();

        #print('Event::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.className(className);
        self.method(method);
        self.payload(payload);
        self.carrier(carrier);
        self.sender(sender);
        self.recipient(recipient);
        self.responseTo(responseTo);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # className: Getters and Setters
    _className = None;
    def className(self, *args):
        if args:
            self._className = args[0];
            return self;
        else:
            return self._className;


    
    # method: Getters and Setters
    _method = None;
    def method(self, *args):
        if args:
            self._method = args[0];
            return self;
        else:
            return self._method;


    
    # payload: Getters and Setters
    _payload = None;
    def payload(self, *args):
        if args:
            self._payload = args[0];
            return self;
        else:
            return self._payload;


    
    # carrier: Getters and Setters
    _carrier = None;
    def carrier(self, *args):
        if args:
            self._carrier = args[0];
            return self;
        else:
            return self._carrier;


    
    # sender: Getters and Setters
    _sender = None;
    def sender(self, *args):
        if args:
            self._sender = args[0];
            return self;
        else:
            return self._sender;


    
    # recipient: Getters and Setters
    _recipient = None;
    def recipient(self, *args):
        if args:
            self._recipient = args[0];
            return self;
        else:
            return self._recipient;


    
    # responseTo: Getters and Setters
    _responseTo = None;
    def responseTo(self, *args):
        if args:
            self._responseTo = args[0];
            return self;
        else:
            return self._responseTo;


    
    
    def _fromDocument(self, obj):
        __toString = 'Event::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Event()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'className' in obj:
            self.className(obj['className']);
        
    
        if 'method' in obj:
            self.method(obj['method']);
        
    
        if 'payload' in obj:
            self.payload(obj['payload']);
        
            self.payload( base64.b64decode(self.payload()) );
        
    
        if 'carrier' in obj:
            self.carrier(Node()._fromDocument(obj['carrier']));
        
    
        if 'sender' in obj:
            self.sender(Node()._fromDocument(obj['sender']));
        
    
        if 'recipient' in obj:
            self.recipient(Node()._fromDocument(obj['recipient']));
        
    
        if 'responseTo' in obj:
            self.responseTo(Event()._fromDocument(obj['responseTo']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Event::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.className() is not None:
            ret["className"] = self.className();
        
    
        if self.method() is not None:
            ret["method"] = self.method();
        
    
        if self.payload() is not None:
            ret["payload"] = self.payload();
        
            if isinstance(ret["payload"], dict):
                ret["payload"] = json.dumps(ret["payload"]).encode('utf-8');

            ret["payload"] =  base64.b64encode(ret["payload"]).decode('utf-8').strip();
        
    
        if self.carrier() is not None:
            ret["carrier"] = self.carrier()._toDocument();
        
    
        if self.sender() is not None:
            ret["sender"] = self.sender()._toDocument();
        
    
        if self.recipient() is not None:
            ret["recipient"] = self.recipient()._toDocument();
        
    
        if self.responseTo() is not None:
            ret["responseTo"] = self.responseTo()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Event::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Event.store()').method('store').className('Event').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Event()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Event_store' in dir():
            print(__toString + '==> Event_store()');
            answer = Event_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Event::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Event.findAll()').method('findAll').className('Event').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Event()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Event_findAll' in dir():
            print(__toString + '==> Event_findAll()');
            answer = Event_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Event::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Event.find()').method('find').className('Event').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Event()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Event_find' in dir():
            print(__toString + '==> Event_find()');
            answer = Event_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def listen(self, __event=None, node=None):
        __toString = 'Event::listen(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        
            if 'node' in evJSON:
                node = evJSON['node'];
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Event.listen()').method('listen').className('Event').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Event_listen' in dir():
            print(__toString + '==> Event_listen()');
            answer = Event_listen(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def trigger(self, __event=None):
        __toString = 'Event::trigger(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Event.trigger()').method('trigger').className('Event').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        

        if __event is None:
            print(__toString + "executing locally");

            return mqtt_client.publish(mqtt_topic, self._toDocument(True));
		


        if 'Event_trigger' in dir():
            print(__toString + '==> Event_trigger()');
            answer = Event_trigger(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            

        return answer;

    
    def process(self, __event=None):
        __toString = 'Event::process(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Event.process()').method('process').className('Event').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Event()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");

            if self.sender().code()==node.code():
                print(__toString + "ignoring my events");
                return;
            elif self.recipient().code()!=node.code():
                print(__toString + "not sent to me");
                return;

            return getattr(globals()[self.className()](), self.method())();
		


        if 'Event_process' in dir():
            print(__toString + '==> Event_process()');
            answer = Event_process(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Node():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, address=None, backup=None, parent=None, group=None, context=None, port=None, online=None, secure=None, type=None):
        super().__init__();

        #print('Node::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.address(address);
        self.backup(backup);
        self.parent(parent);
        self.group(group);
        self.context(context);
        self.port(port);
        self.online(online);
        self.secure(secure);
        self.type(type);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # address: Getters and Setters
    _address = None;
    def address(self, *args):
        if args:
            self._address = args[0];
            return self;
        else:
            return self._address;


    
    # backup: Getters and Setters
    _backup = None;
    def backup(self, *args):
        if args:
            self._backup = args[0];
            return self;
        else:
            return self._backup;


    
    # parent: Getters and Setters
    _parent = None;
    def parent(self, *args):
        if args:
            self._parent = args[0];
            return self;
        else:
            return self._parent;


    
    # group: Getters and Setters
    _group = None;
    def group(self, *args):
        if args:
            self._group = args[0];
            return self;
        else:
            return self._group;


    
    # context: Getters and Setters
    _context = None;
    def context(self, *args):
        if args:
            self._context = args[0];
            return self;
        else:
            return self._context;


    
    # port: Getters and Setters
    _port = None;
    def port(self, *args):
        if args:
            self._port = args[0];
            return self;
        else:
            return self._port;


    
    # online: Getters and Setters
    _online = None;
    def online(self, *args):
        if args:
            self._online = args[0];
            return self;
        else:
            return self._online;


    
    # secure: Getters and Setters
    _secure = None;
    def secure(self, *args):
        if args:
            self._secure = args[0];
            return self;
        else:
            return self._secure;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    
    def _fromDocument(self, obj):
        __toString = 'Node::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Node()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'address' in obj:
            self.address(obj['address']);
        
    
        if 'backup' in obj:
            self.backup(Node()._fromDocument(obj['backup']));
        
    
        if 'parent' in obj:
            self.parent(Node()._fromDocument(obj['parent']));
        
    
        if 'group' in obj:
            self.group(Node_Group()._fromDocument(obj['group']));
        
    
        if 'context' in obj:
            self.context(Node_Context()._fromDocument(obj['context']));
        
    
        if 'port' in obj:
            self.port(obj['port']);
        
    
        if 'online' in obj:
            self.online(obj['online']);
        
    
        if 'secure' in obj:
            self.secure(obj['secure']);
        
    
        if 'type' in obj:
            self.type(Node_Type()._fromDocument(obj['type']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Node::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.address() is not None:
            ret["address"] = self.address();
        
    
        if self.backup() is not None:
            ret["backup"] = self.backup()._toDocument();
        
    
        if self.parent() is not None:
            ret["parent"] = self.parent()._toDocument();
        
    
        if self.group() is not None:
            ret["group"] = self.group()._toDocument();
        
    
        if self.context() is not None:
            ret["context"] = self.context()._toDocument();
        
    
        if self.port() is not None:
            ret["port"] = self.port();
        
    
        if self.online() is not None:
            ret["online"] = self.online();
        
    
        if self.secure() is not None:
            ret["secure"] = self.secure();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Node::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.store()').method('store').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node()._fromDocument(evJSON);
        
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_store' in dir():
            print(__toString + '==> Node_store()');
            answer = Node_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Node::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.findAll()').method('findAll').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_findAll' in dir():
            print(__toString + '==> Node_findAll()');
            answer = Node_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Node::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.find()').method('find').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_find' in dir():
            print(__toString + '==> Node_find()');
            answer = Node_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def authCode(self, __event=None, code=None, tool=None):
        __toString = 'Node::authCode(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        
            if 'code' in evJSON:
                code = evJSON['code'];
        
            if 'tool' in evJSON:
                tool = evJSON['tool'];
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.authCode()').method('authCode').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_authCode' in dir():
            print(__toString + '==> Node_authCode()');
            answer = Node_authCode(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def init(self, __event=None, online=None, code=None, uid=None):
        __toString = 'Node::init(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        
            if 'online' in evJSON:
                online = evJSON['online'];
        
            if 'code' in evJSON:
                code = evJSON['code'];
        
            if 'uid' in evJSON:
                uid = evJSON['uid'];
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.init()').method('init').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_init' in dir():
            print(__toString + '==> Node_init()');
            answer = Node_init(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def restart(self, __event=None):
        __toString = 'Node::restart(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.restart()').method('restart').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_restart' in dir():
            print(__toString + '==> Node_restart()');
            answer = Node_restart(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def status(self, __event=None):
        __toString = 'Node::status(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node.status()').method('status').className('Node').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_status' in dir():
            print(__toString + '==> Node_status()');
            answer = Node_status(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Node_Context():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None):
        super().__init__();

        #print('Node_Context::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    
    def _fromDocument(self, obj):
        __toString = 'Node_Context::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Node_Context()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Node_Context::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Node_Context::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Context.store()').method('store').className('Node_Context').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Context()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Context_store' in dir():
            print(__toString + '==> Node_Context_store()');
            answer = Node_Context_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Node_Context::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Context.findAll()').method('findAll').className('Node_Context').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Context()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Context_findAll' in dir():
            print(__toString + '==> Node_Context_findAll()');
            answer = Node_Context_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Node_Context::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Context.find()').method('find').className('Node_Context').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Context()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Context_find' in dir():
            print(__toString + '==> Node_Context_find()');
            answer = Node_Context_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Node_Group():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None):
        super().__init__();

        #print('Node_Group::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    
    def _fromDocument(self, obj):
        __toString = 'Node_Group::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Node_Group()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Node_Group::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Node_Group::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Group.store()').method('store').className('Node_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Group_store' in dir():
            print(__toString + '==> Node_Group_store()');
            answer = Node_Group_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Node_Group::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Group.findAll()').method('findAll').className('Node_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Group_findAll' in dir():
            print(__toString + '==> Node_Group_findAll()');
            answer = Node_Group_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Node_Group::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Group.find()').method('find').className('Node_Group').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Group()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Group_find' in dir():
            print(__toString + '==> Node_Group_find()');
            answer = Node_Group_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Node_Type():
    def __init__(self, Id=None, active=None, enabled=None, code=None, order=None, date=None, name=None, remark=None, dynamic=None):
        super().__init__();

        #print('Node_Type::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.code(code);
        self.order(order);
        self.date(date);
        self.name(name);
        self.remark(remark);
        self.dynamic(dynamic);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # code: Getters and Setters
    _code = None;
    def code(self, *args):
        if args:
            self._code = args[0];
            return self;
        else:
            return self._code;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # date: Getters and Setters
    _date = None;
    def date(self, *args):
        if args:
            self._date = args[0];
            return self;
        else:
            return self._date;


    
    # name: Getters and Setters
    _name = None;
    def name(self, *args):
        if args:
            self._name = args[0];
            return self;
        else:
            return self._name;


    
    # remark: Getters and Setters
    _remark = None;
    def remark(self, *args):
        if args:
            self._remark = args[0];
            return self;
        else:
            return self._remark;


    
    # dynamic: Getters and Setters
    _dynamic = None;
    def dynamic(self, *args):
        if args:
            self._dynamic = args[0];
            return self;
        else:
            return self._dynamic;


    
    
    def _fromDocument(self, obj):
        __toString = 'Node_Type::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Node_Type()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'code' in obj:
            self.code(obj['code']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'date' in obj:
            self.date(obj['date']);
        
    
        if 'name' in obj:
            self.name(obj['name']);
        
    
        if 'remark' in obj:
            self.remark(obj['remark']);
        
            self.remark( base64.b64decode(self.remark()) );
        
    
        if 'dynamic' in obj:
            self.dynamic(obj['dynamic']);
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Node_Type::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.code() is not None:
            ret["code"] = self.code();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.date() is not None:
            ret["date"] = self.date();
        
    
        if self.name() is not None:
            ret["name"] = self.name();
        
    
        if self.remark() is not None:
            ret["remark"] = self.remark();
        
            if isinstance(ret["remark"], dict):
                ret["remark"] = json.dumps(ret["remark"]).encode('utf-8');

            ret["remark"] =  base64.b64encode(ret["remark"]).decode('utf-8').strip();
        
    
        if self.dynamic() is not None:
            ret["dynamic"] = self.dynamic();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Node_Type::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Type.store()').method('store').className('Node_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Type_store' in dir():
            print(__toString + '==> Node_Type_store()');
            answer = Node_Type_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Node_Type::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Type.findAll()').method('findAll').className('Node_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Type_findAll' in dir():
            print(__toString + '==> Node_Type_findAll()');
            answer = Node_Type_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Node_Type::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Type.find()').method('find').className('Node_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Node_Type()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Type_find' in dir():
            print(__toString + '==> Node_Type_find()');
            answer = Node_Type_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def deploy(self, __event=None):
        __toString = 'Node_Type::deploy(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Node_Type.deploy()').method('deploy').className('Node_Type').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = evJSON;
        
        
			
            

        if __event is None:
            print(__toString + "executing locally");



        if 'Node_Type_deploy' in dir():
            print(__toString + '==> Node_Type_deploy()');
            answer = Node_Type_deploy(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(str(answer));
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    


class Mapping():
    def __init__(self, Id=None, active=None, enabled=None, order=None, className=None, scope=None, context=None, source=None, target=None, operator=None, inScript=None, outScript=None, tool=None, group=None, type=None):
        super().__init__();

        #print('Mapping::__init__()');
        if Id is not None:
            self.Id = Id;

        
        self.active(active);
        self.enabled(enabled);
        self.order(order);
        self.className(className);
        self.scope(scope);
        self.context(context);
        self.source(source);
        self.target(target);
        self.operator(operator);
        self.inScript(inScript);
        self.outScript(outScript);
        self.tool(tool);
        self.group(group);
        self.type(type);
        
    Id = None;
    
    
    # active: Getters and Setters
    _active = None;
    def active(self, *args):
        if args:
            self._active = args[0];
            return self;
        else:
            return self._active;


    
    # enabled: Getters and Setters
    _enabled = None;
    def enabled(self, *args):
        if args:
            self._enabled = args[0];
            return self;
        else:
            return self._enabled;


    
    # order: Getters and Setters
    _order = None;
    def order(self, *args):
        if args:
            self._order = args[0];
            return self;
        else:
            return self._order;


    
    # className: Getters and Setters
    _className = None;
    def className(self, *args):
        if args:
            self._className = args[0];
            return self;
        else:
            return self._className;


    
    # scope: Getters and Setters
    _scope = None;
    def scope(self, *args):
        if args:
            self._scope = args[0];
            return self;
        else:
            return self._scope;


    
    # context: Getters and Setters
    _context = None;
    def context(self, *args):
        if args:
            self._context = args[0];
            return self;
        else:
            return self._context;


    
    # source: Getters and Setters
    _source = None;
    def source(self, *args):
        if args:
            self._source = args[0];
            return self;
        else:
            return self._source;


    
    # target: Getters and Setters
    _target = None;
    def target(self, *args):
        if args:
            self._target = args[0];
            return self;
        else:
            return self._target;


    
    # operator: Getters and Setters
    _operator = None;
    def operator(self, *args):
        if args:
            self._operator = args[0];
            return self;
        else:
            return self._operator;


    
    # inScript: Getters and Setters
    _inScript = None;
    def inScript(self, *args):
        if args:
            self._inScript = args[0];
            return self;
        else:
            return self._inScript;


    
    # outScript: Getters and Setters
    _outScript = None;
    def outScript(self, *args):
        if args:
            self._outScript = args[0];
            return self;
        else:
            return self._outScript;


    
    # tool: Getters and Setters
    _tool = None;
    def tool(self, *args):
        if args:
            self._tool = args[0];
            return self;
        else:
            return self._tool;


    
    # group: Getters and Setters
    _group = None;
    def group(self, *args):
        if args:
            self._group = args[0];
            return self;
        else:
            return self._group;


    
    # type: Getters and Setters
    _type = None;
    def type(self, *args):
        if args:
            self._type = args[0];
            return self;
        else:
            return self._type;


    
    
    def _fromDocument(self, obj):
        __toString = 'Mapping::_fromDocument(): ';

        if obj is None:
            return self;
        
        if isinstance(obj, bytes):
            obj = str(obj, "utf-8");

        if isinstance(obj, str) or type(obj) is str:
            obj = json.loads(obj);
        
        if not isinstance(obj, (str, bytes, dict)):
            print(__toString + 'GOT HERE: ' + str(type(obj)));
            return obj;
            
            for i in obj:
                obj[i] = Mapping()._fromDocument(obj[i]);
            return obj;


        if 'Id' in obj:
            self.Id = obj['Id'];

    
        if 'active' in obj:
            self.active(obj['active']);
        
    
        if 'enabled' in obj:
            self.enabled(obj['enabled']);
        
    
        if 'order' in obj:
            self.order(obj['order']);
        
    
        if 'className' in obj:
            self.className(obj['className']);
        
    
        if 'scope' in obj:
            self.scope(obj['scope']);
        
    
        if 'context' in obj:
            self.context(obj['context']);
        
    
        if 'source' in obj:
            self.source(obj['source']);
        
    
        if 'target' in obj:
            self.target(obj['target']);
        
    
        if 'operator' in obj:
            self.operator(obj['operator']);
        
    
        if 'inScript' in obj:
            self.inScript(obj['inScript']);
        
            self.inScript( base64.b64decode(self.inScript()) );
        
    
        if 'outScript' in obj:
            self.outScript(obj['outScript']);
        
            self.outScript( base64.b64decode(self.outScript()) );
        
    
        if 'tool' in obj:
            self.tool(Tool()._fromDocument(obj['tool']));
        
    
        if 'group' in obj:
            self.group(Config_Group()._fromDocument(obj['group']));
        
    
        if 'type' in obj:
            self.type(Tool_Type()._fromDocument(obj['type']));
        
    

        gc.collect();
        return self;
    
    def _toDocument(self, bJSON=None):
        __toString = 'Mapping::_toDocument(): ';

        ret = {};
        if self.Id is not None:
            ret["Id"] = self.Id;

    
        if self.active() is not None:
            ret["active"] = self.active();
        
    
        if self.enabled() is not None:
            ret["enabled"] = self.enabled();
        
    
        if self.order() is not None:
            ret["order"] = self.order();
        
    
        if self.className() is not None:
            ret["className"] = self.className();
        
    
        if self.scope() is not None:
            ret["scope"] = self.scope();
        
    
        if self.context() is not None:
            ret["context"] = self.context();
        
    
        if self.source() is not None:
            ret["source"] = self.source();
        
    
        if self.target() is not None:
            ret["target"] = self.target();
        
    
        if self.operator() is not None:
            ret["operator"] = self.operator();
        
    
        if self.inScript() is not None:
            ret["inScript"] = self.inScript();
        
            if isinstance(ret["inScript"], dict):
                ret["inScript"] = json.dumps(ret["inScript"]).encode('utf-8');

            ret["inScript"] =  base64.b64encode(ret["inScript"]).decode('utf-8').strip();
        
    
        if self.outScript() is not None:
            ret["outScript"] = self.outScript();
        
            if isinstance(ret["outScript"], dict):
                ret["outScript"] = json.dumps(ret["outScript"]).encode('utf-8');

            ret["outScript"] =  base64.b64encode(ret["outScript"]).decode('utf-8').strip();
        
    
        if self.tool() is not None:
            ret["tool"] = self.tool()._toDocument();
        
    
        if self.group() is not None:
            ret["group"] = self.group()._toDocument();
        
    
        if self.type() is not None:
            ret["type"] = self.type()._toDocument();
        
    
        
        if bJSON is not None:
            print(__toString + "GOT HERE", type(ret), ret);
            ret = json.dumps(ret);
        gc.collect();
        return ret;

    
    def store(self, __event=None):
        __toString = 'Mapping::store(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Mapping.store()').method('store').className('Mapping').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Mapping()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Mapping_store' in dir():
            print(__toString + '==> Mapping_store()');
            answer = Mapping_store(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def findAll(self, __event=None):
        __toString = 'Mapping::findAll(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Mapping.findAll()').method('findAll').className('Mapping').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Mapping()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Mapping_findAll' in dir():
            print(__toString + '==> Mapping_findAll()');
            answer = Mapping_findAll(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    
    def find(self, __event=None):
        __toString = 'Mapping::find(): ';
        
        evJSON = None;

        if __event is not None:
            evJSON = json.loads(__event.payload());
            if '__this' in evJSON:
                self._fromDocument(evJSON['__this']);
        

        answer = None;

        __response = Event().code('['+node.code()+'@'+str(time.time())+'].Mapping.find()').method('find').className('Mapping').carrier(node).sender(node).recipient(node.parent());
        if __event is not None:
            __response.responseTo(Event(name=__event.name(), code=__event.code()));
        
        gc.collect();
        
        if __event is not None and __event.responseTo() is None:
            print(__toString + " handling event["+__event.code()+"]");
        
        
        if __event is not None and __event.responseTo() is not None:
            print(__toString + "a response to my event("+__event.responseTo().code()+") [" + __event.className() + "()." + __event.method() + "()]");
        
            answer = Mapping()._fromDocument(evJSON);
        
        

        if __event is None:
            print(__toString + "executing locally");



        if 'Mapping_find' in dir():
            print(__toString + '==> Mapping_find()');
            answer = Mapping_find(self, __event, answer, __toString);

        if __event is None or __event.responseTo() is None:
            if answer is not None:
            
                __response.payload(answer._toDocument());
            
            else:
                __response.payload({"__this": self._toDocument()});

            
            __response.trigger();
            

        return answer;

    





    
ncode = "apiserver/esptest/pyclient";
    

node = Node(code=ncode, parent=Node(code='apiserver/esptest/master'));


########### MQTT Connection #########################################
print('main()', "Connecting to MQTT server", "... ", end="");
mqtt_topic = 'apiserver/esptest';

mqtt_client = paho.mqtt.client.Client(callback_api_version=paho.mqtt.client.CallbackAPIVersion.VERSION2, client_id=mqtt_topic+'/'+node.code(), transport='tcp');

mqtt_client.on_message = lambda client, userdata, oMsg : Event()._fromDocument(oMsg.payload).process();
mqtt_client.connect('test.mosquitto.org');


mqtt_client.subscribe(mqtt_topic);
print("Connected!");
########### MQTT Connection #########################################



########### Method Triggers #########################################

########### Method Triggers #########################################

node.store();

print('main()', 'looping for mqtt events');

mqtt_client.loop_forever();


",
	"__keys": ["name"],
	"__trMap": []
}