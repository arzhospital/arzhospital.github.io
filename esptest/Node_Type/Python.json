{
	"Id": "e4d9cfaa17d9fa325e022f19625bb020c26f73cd",
	"active": "true",
	"enabled": "true",
	"code": "python",
	"date": "2024-10-08T11:03:36.980Z",
	"name": "Python",
	"remark": "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjICAgQVBJIFNlcnZlciBTdHViIGZvciAoTWljcm8pUHl0aG9uICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIyBWRVJTSU9OOiAyMDI0LTEwLTA4VDExOjAzOjMzLjQ3M1ogICMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjICBTWVNURU06IGFwaXNlcnZlci9lc3B0ZXN0ICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgojaW1wb3J0IHVybGxpYjMsIGpzb24sIGJhc2U2NDsKI2V4ZWMoYmFzZTY0LmI2NGRlY29kZShqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCAiaHR0cHM6Ly9hcnpob3NwaXRhbC5naXRodWIuaW8vZXNwdGVzdC9Ob2RlX1R5cGUvUHl0aG9uLmpzb24iKS5kYXRhLmRlY29kZSgndXRmLTgnKSlbInJlbWFyayJdKSk7CgojIGltcG9ydCByZXF1ZXN0cywgdWJpbmFzY2lpLCB1anNvbjsKIyBleGVjKHViaW5hc2NpaS5hMmJfYmFzZTY0KHVqc29uLmxvYWRzKHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcnpob3NwaXRhbC5naXRodWIuaW8vZXNwdGVzdC9Ob2RlX1R5cGUvUHl0aG9uLmpzb24iKS50ZXh0KVsicmVtYXJrIl0pKTsKCmltcG9ydCBwYWhvLm1xdHQuY2xpZW50LGpzb24sdXJsbGliMyx0aHJlYWRpbmcsdXVpZCxwYXRobGliLHRpbWUsZ2MsaW8sZGF0ZXRpbWUscmUsb3Msc3lzOwoKCmNsYXNzIFVzZXIoKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdXNlcm5hbWU9Tm9uZSwgcGFzc3dvcmQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOwoKICAgICAgICAjcHJpbnQoJ1VzZXI6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIHNlbGYudXNlcm5hbWUodXNlcm5hbWUpOwogICAgICAgIHNlbGYucGFzc3dvcmQocGFzc3dvcmQpOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgICMgdXNlcm5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF91c2VybmFtZSA9IE5vbmU7CiAgICBkZWYgdXNlcm5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3VzZXJuYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3VzZXJuYW1lOwogICAgCiAgICAjIHBhc3N3b3JkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcGFzc3dvcmQgPSBOb25lOwogICAgZGVmIHBhc3N3b3JkKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9wYXNzd29yZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9wYXNzd29yZDsKICAgIAogICAgCiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1VzZXI6Ol9mcm9tRG9jdW1lbnQoKTogJzsKICAgICAgICAKICAgICAgICBpZiBvYmogaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6CiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOgogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2Fkcyh1cmxsaWIzLlBvb2xNYW5hZ2VyKCkucmVxdWVzdCgnR0VUJywgb2JqKS5kYXRhLmRlY29kZSgndXRmLTgnKSk7CiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7CiAgICAgICAgCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gW1VzZXIoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICd1c2VybmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnVzZXJuYW1lKG9ialsndXNlcm5hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAncGFzc3dvcmQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5wYXNzd29yZChvYmpbJ3Bhc3N3b3JkJ10pOwogICAgICAgIAogICAgCgogICAgCgogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gc2VsZjsKICAgIAogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVXNlcjo6X3RvRG9jdW1lbnQoKTogJzsKCiAgICAgICAgcmV0ID0ge307CiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsKCiAgICAKICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsKCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYudXNlcm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJ1c2VybmFtZSJdID0gc2VsZi51c2VybmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5wYXNzd29yZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInBhc3N3b3JkIl0gPSBzZWxmLnBhc3N3b3JkKCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVXNlcjo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Vc2VyLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdVc2VyJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBVc2VyKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1VzZXI6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Vc2VyLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnVXNlcicpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gVXNlcigpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdVc2VyOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uVXNlci5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ1VzZXInKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IFVzZXIoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgaW5pdChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVXNlcjo6aW5pdCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlVzZXIuaW5pdCgpJykubWV0aG9kKCdpbml0JykuY2xhc3NOYW1lKCdVc2VyJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBldkpTT047CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHN0cihhbnN3ZXIpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTWV0cmljKCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIHNjcmlwdD1Ob25lLCB0eXBlPU5vbmUsIGRldmljZVR5cGU9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOwoKICAgICAgICAjcHJpbnQoJ01ldHJpYzo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgc2VsZi5zY3JpcHQoc2NyaXB0KTsKICAgICAgICBzZWxmLnR5cGUodHlwZSk7CiAgICAgICAgc2VsZi5kZXZpY2VUeXBlKGRldmljZVR5cGUpOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgICMgc2NyaXB0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfc2NyaXB0ID0gTm9uZTsKICAgIGRlZiBzY3JpcHQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3NjcmlwdCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zY3JpcHQ7CiAgICAKICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3R5cGUgPSBOb25lOwogICAgZGVmIHR5cGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3R5cGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fdHlwZTsKICAgIAogICAgIyBkZXZpY2VUeXBlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGV2aWNlVHlwZSA9IE5vbmU7CiAgICBkZWYgZGV2aWNlVHlwZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGV2aWNlVHlwZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kZXZpY2VUeXBlOwogICAgCiAgICAKICAgIAogICAgIyBtZXRyaWNfTWV0cmljX1ZhbHVlczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX21ldHJpY19NZXRyaWNfVmFsdWVzID0gTm9uZTsKICAgIGRlZiBtZXRyaWNfTWV0cmljX1ZhbHVlcyhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbWV0cmljX01ldHJpY19WYWx1ZXMgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbWV0cmljX01ldHJpY19WYWx1ZXM7CiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpYzo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbTWV0cmljKCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYucmVtYXJrKCkpIHNlbGYucmVtYXJrKHN0cihzZWxmLnJlbWFyaygpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnc2NyaXB0JyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuc2NyaXB0KG9ialsnc2NyaXB0J10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLnNjcmlwdCggYmFzZTY0LmI2NGRlY29kZShzZWxmLnNjcmlwdCgpKSApOwogICAgICAgICAgICBpZihzZWxmLnNjcmlwdCgpKSBzZWxmLnNjcmlwdChzdHIoc2VsZi5zY3JpcHQoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3R5cGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50eXBlKE1ldHJpY19UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGUnXSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2RldmljZVR5cGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5kZXZpY2VUeXBlKERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2RldmljZVR5cGUnXSkpOwogICAgICAgIAogICAgCgogICAgCiAgICAgICAgaWYgJ21ldHJpY19NZXRyaWNfVmFsdWVzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubWV0cmljX01ldHJpY19WYWx1ZXMoTWV0cmljX1ZhbHVlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ21ldHJpY19NZXRyaWNfVmFsdWVzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpYzo6X3RvRG9jdW1lbnQoKTogJzsKCiAgICAgICAgcmV0ID0ge307CiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsKCiAgICAKICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsKCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuc2NyaXB0KCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsic2NyaXB0Il0gPSBzZWxmLnNjcmlwdCgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsic2NyaXB0Il0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJzY3JpcHQiXSA9IGpzb24uZHVtcHMocmV0WyJzY3JpcHQiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJzY3JpcHQiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsic2NyaXB0Il0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi50eXBlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidHlwZSJdID0gc2VsZi50eXBlKCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGV2aWNlVHlwZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRldmljZVR5cGUiXSA9IHNlbGYuZGV2aWNlVHlwZSgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubWV0cmljX01ldHJpY19WYWx1ZXMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJtZXRyaWNfTWV0cmljX1ZhbHVlcyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYubWV0cmljX01ldHJpY19WYWx1ZXMoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpYzo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWMuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ01ldHJpYycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTWV0cmljKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpYzo6ZmluZEFsbCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpYy5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ01ldHJpYycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTWV0cmljKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKICAgICAgICAgICAgZm9yIG0gaW4gYW5zd2VyOgogICAgICAgICAgICAgICAgcyA9ICJkZWYgIiArIG0uY29kZSgpICsgIigpOiIgKyBtLnNjcmlwdCgpOwogICAgICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArIHMpOwogICAgICAgICAgICAgICAgc2VsZlsiXyIgKyBtLmNvZGUoKV0gPSBleGVjKHMpOwogICAgICAgIAoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWV0cmljLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTWV0cmljJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWMoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTWV0cmljX1ZhbHVlKCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIHZhbHVlPU5vbmUsIG1lYXN1cmVkPU5vbmUsIG1ldHJpYz1Ob25lLCBkZXZpY2U9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOwoKICAgICAgICAjcHJpbnQoJ01ldHJpY19WYWx1ZTo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgc2VsZi52YWx1ZSh2YWx1ZSk7CiAgICAgICAgc2VsZi5tZWFzdXJlZChtZWFzdXJlZCk7CiAgICAgICAgc2VsZi5tZXRyaWMobWV0cmljKTsKICAgICAgICBzZWxmLmRldmljZShkZXZpY2UpOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgICMgdmFsdWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF92YWx1ZSA9IE5vbmU7CiAgICBkZWYgdmFsdWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3ZhbHVlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlOwogICAgCiAgICAjIG1lYXN1cmVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfbWVhc3VyZWQgPSBOb25lOwogICAgZGVmIG1lYXN1cmVkKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9tZWFzdXJlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tZWFzdXJlZDsKICAgIAogICAgIyBtZXRyaWM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9tZXRyaWMgPSBOb25lOwogICAgZGVmIG1ldHJpYyhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbWV0cmljID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ldHJpYzsKICAgIAogICAgIyBkZXZpY2U6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kZXZpY2UgPSBOb25lOwogICAgZGVmIGRldmljZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGV2aWNlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RldmljZTsKICAgIAogICAgCiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19WYWx1ZTo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbTWV0cmljX1ZhbHVlKCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYucmVtYXJrKCkpIHNlbGYucmVtYXJrKHN0cihzZWxmLnJlbWFyaygpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAndmFsdWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi52YWx1ZShvYmpbJ3ZhbHVlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ21lYXN1cmVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubWVhc3VyZWQob2JqWydtZWFzdXJlZCddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5tZWFzdXJlZChkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYubWVhc3VyZWQoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ21ldHJpYycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm1ldHJpYyhNZXRyaWMoKS5fZnJvbURvY3VtZW50KG9ialsnbWV0cmljJ10pKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkZXZpY2UnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5kZXZpY2UoRGV2aWNlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2RldmljZSddKSk7CiAgICAgICAgCiAgICAKCiAgICAKCiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiBzZWxmOwogICAgCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVmFsdWU6Ol90b0RvY3VtZW50KCk6ICc7CgogICAgICAgIHJldCA9IHt9OwogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7CgogICAgCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnZhbHVlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidmFsdWUiXSA9IHNlbGYudmFsdWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubWVhc3VyZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJtZWFzdXJlZCJdID0gc2VsZi5tZWFzdXJlZCgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsibWVhc3VyZWQiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJtZWFzdXJlZCJdID0gcmV0WyJtZWFzdXJlZCJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5tZXRyaWMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJtZXRyaWMiXSA9IHNlbGYubWV0cmljKCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGV2aWNlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGV2aWNlIl0gPSBzZWxmLmRldmljZSgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX1ZhbHVlOjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19WYWx1ZS5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTWV0cmljX1ZhbHVlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgICAgICBpZiBzZWxmLm1lYXN1cmVkKCkgaXMgTm9uZToKICAgICAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAicmVhZGluZy4uLiIpOwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJ3cml0aW5nLi4uIik7CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpY19WYWx1ZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVmFsdWU6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWNfVmFsdWUuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdNZXRyaWNfVmFsdWUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpY19WYWx1ZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVmFsdWU6OmZpbmQoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWNfVmFsdWUuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdNZXRyaWNfVmFsdWUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpY19WYWx1ZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKCgpjbGFzcyBEZXZpY2UoKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdHlwZT1Ob25lLCBjb250cm9sbGVyPU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdEZXZpY2U6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIHNlbGYudHlwZSh0eXBlKTsKICAgICAgICBzZWxmLmNvbnRyb2xsZXIoY29udHJvbGxlcik7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb2RlID0gTm9uZTsKICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7CiAgICAKICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9vcmRlciA9IE5vbmU7CiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOwogICAgCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kYXRlID0gTm9uZTsKICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7CiAgICAKICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25hbWUgPSBOb25lOwogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsKICAgIAogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZW1hcmsgPSBOb25lOwogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsKICAgIAogICAgIyB0eXBlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfdHlwZSA9IE5vbmU7CiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fdHlwZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl90eXBlOwogICAgCiAgICAjIGNvbnRyb2xsZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb250cm9sbGVyID0gTm9uZTsKICAgIGRlZiBjb250cm9sbGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb250cm9sbGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvbnRyb2xsZXI7CiAgICAKICAgIAogICAgCiAgICAjIGRldmljZV9NZXRyaWNfVmFsdWVzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGV2aWNlX01ldHJpY19WYWx1ZXMgPSBOb25lOwogICAgZGVmIGRldmljZV9NZXRyaWNfVmFsdWVzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kZXZpY2VfTWV0cmljX1ZhbHVlcyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kZXZpY2VfTWV0cmljX1ZhbHVlczsKICAgIAogICAgCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOgogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlOjpfZnJvbURvY3VtZW50KCk6ICc7CiAgICAgICAgCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOgogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoKICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHModXJsbGliMy5Qb29sTWFuYWdlcigpLnJlcXVlc3QoJ0dFVCcsIG9iaikuZGF0YS5kZWNvZGUoJ3V0Zi04JykpOwogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOwogICAgICAgIAogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToKICAgICAgICAgICAgcmV0dXJuIFtEZXZpY2UoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICd0eXBlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudHlwZShEZXZpY2VfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqWyd0eXBlJ10pKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjb250cm9sbGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuY29udHJvbGxlcihOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2NvbnRyb2xsZXInXSkpOwogICAgICAgIAogICAgCgogICAgCiAgICAgICAgaWYgJ2RldmljZV9NZXRyaWNfVmFsdWVzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGV2aWNlX01ldHJpY19WYWx1ZXMoTWV0cmljX1ZhbHVlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2RldmljZV9NZXRyaWNfVmFsdWVzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZTo6X3RvRG9jdW1lbnQoKTogJzsKCiAgICAgICAgcmV0ID0ge307CiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsKCiAgICAKICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsKCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYudHlwZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInR5cGUiXSA9IHNlbGYudHlwZSgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvbnRyb2xsZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb250cm9sbGVyIl0gPSBzZWxmLmNvbnRyb2xsZXIoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRldmljZV9NZXRyaWNfVmFsdWVzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGV2aWNlX01ldHJpY19WYWx1ZXMiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLmRldmljZV9NZXRyaWNfVmFsdWVzKCldOwogICAgCgogICAgICAgIGlmIGJKU09OIGlzIG5vdCBOb25lOgogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsKICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOwogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gcmV0OwoKICAgIAogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2U6OnN0b3JlKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdEZXZpY2UnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2U6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2UuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdEZXZpY2UnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2U6OmZpbmQoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2UuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdEZXZpY2UnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKCgpjbGFzcyBEZXZpY2VfQ2F0ZWdvcnkoKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdEZXZpY2VfQ2F0ZWdvcnk6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIHNlbGYucGFyZW50KHBhcmVudCk7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb2RlID0gTm9uZTsKICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7CiAgICAKICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9vcmRlciA9IE5vbmU7CiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOwogICAgCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kYXRlID0gTm9uZTsKICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7CiAgICAKICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25hbWUgPSBOb25lOwogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsKICAgIAogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZW1hcmsgPSBOb25lOwogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsKICAgIAogICAgIyBwYXJlbnQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9wYXJlbnQgPSBOb25lOwogICAgZGVmIHBhcmVudChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcGFyZW50ID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3BhcmVudDsKICAgIAogICAgCiAgICAKICAgICMgY2F0ZWdvcnlfRGV2aWNlX1R5cGVzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY2F0ZWdvcnlfRGV2aWNlX1R5cGVzID0gTm9uZTsKICAgIGRlZiBjYXRlZ29yeV9EZXZpY2VfVHlwZXMoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NhdGVnb3J5X0RldmljZV9UeXBlcyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXRlZ29yeV9EZXZpY2VfVHlwZXM7CiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9DYXRlZ29yeTo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbRGV2aWNlX0NhdGVnb3J5KCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYucmVtYXJrKCkpIHNlbGYucmVtYXJrKHN0cihzZWxmLnJlbWFyaygpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAncGFyZW50JyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucGFyZW50KG9ialsncGFyZW50J10pOwogICAgICAgIAogICAgCgogICAgCiAgICAgICAgaWYgJ2NhdGVnb3J5X0RldmljZV9UeXBlcycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNhdGVnb3J5X0RldmljZV9UeXBlcyhEZXZpY2VfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqWydjYXRlZ29yeV9EZXZpY2VfVHlwZXMnXSkpOwogICAgCgogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gc2VsZjsKICAgIAogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlX0NhdGVnb3J5OjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5wYXJlbnQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJwYXJlbnQiXSA9IHNlbGYucGFyZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY2F0ZWdvcnlfRGV2aWNlX1R5cGVzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY2F0ZWdvcnlfRGV2aWNlX1R5cGVzIl0gPSBbdGEuX3RvRG9jdW1lbnQoKSBmb3IgdGEgaW4gc2VsZi5jYXRlZ29yeV9EZXZpY2VfVHlwZXMoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9DYXRlZ29yeTo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2VfQ2F0ZWdvcnkuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ0RldmljZV9DYXRlZ29yeScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlX0NhdGVnb3J5KCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9DYXRlZ29yeTo6ZmluZEFsbCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkRldmljZV9DYXRlZ29yeS5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ0RldmljZV9DYXRlZ29yeScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlX0NhdGVnb3J5KCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9DYXRlZ29yeTo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkRldmljZV9DYXRlZ29yeS5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0RldmljZV9DYXRlZ29yeScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlX0NhdGVnb3J5KCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIERldmljZV9UeXBlKCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIGNhdGVnb3J5PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdEZXZpY2VfVHlwZTo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgc2VsZi5jYXRlZ29yeShjYXRlZ29yeSk7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb2RlID0gTm9uZTsKICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7CiAgICAKICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9vcmRlciA9IE5vbmU7CiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOwogICAgCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kYXRlID0gTm9uZTsKICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7CiAgICAKICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25hbWUgPSBOb25lOwogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsKICAgIAogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZW1hcmsgPSBOb25lOwogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsKICAgIAogICAgIyBjYXRlZ29yeTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NhdGVnb3J5ID0gTm9uZTsKICAgIGRlZiBjYXRlZ29yeShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY2F0ZWdvcnkgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY2F0ZWdvcnk7CiAgICAKICAgIAogICAgCiAgICAjIGRldmljZVR5cGVfTWV0cmljczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2RldmljZVR5cGVfTWV0cmljcyA9IE5vbmU7CiAgICBkZWYgZGV2aWNlVHlwZV9NZXRyaWNzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kZXZpY2VUeXBlX01ldHJpY3MgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGV2aWNlVHlwZV9NZXRyaWNzOwogICAgCiAgICAjIHR5cGVfRGV2aWNlczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3R5cGVfRGV2aWNlcyA9IE5vbmU7CiAgICBkZWYgdHlwZV9EZXZpY2VzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90eXBlX0RldmljZXMgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fdHlwZV9EZXZpY2VzOwogICAgCiAgICAKICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6CiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfVHlwZTo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbRGV2aWNlX1R5cGUoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjYXRlZ29yeScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNhdGVnb3J5KERldmljZV9DYXRlZ29yeSgpLl9mcm9tRG9jdW1lbnQob2JqWydjYXRlZ29yeSddKSk7CiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICBpZiAnZGV2aWNlVHlwZV9NZXRyaWNzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGV2aWNlVHlwZV9NZXRyaWNzKE1ldHJpYygpLl9mcm9tRG9jdW1lbnQob2JqWydkZXZpY2VUeXBlX01ldHJpY3MnXSkpOwogICAgCiAgICAgICAgaWYgJ3R5cGVfRGV2aWNlcycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnR5cGVfRGV2aWNlcyhEZXZpY2UoKS5fZnJvbURvY3VtZW50KG9ialsndHlwZV9EZXZpY2VzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9UeXBlOjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jYXRlZ29yeSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNhdGVnb3J5Il0gPSBzZWxmLmNhdGVnb3J5KCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kZXZpY2VUeXBlX01ldHJpY3MoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkZXZpY2VUeXBlX01ldHJpY3MiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLmRldmljZVR5cGVfTWV0cmljcygpXTsKICAgIAogICAgICAgIGlmIHNlbGYudHlwZV9EZXZpY2VzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidHlwZV9EZXZpY2VzIl0gPSBbdGEuX3RvRG9jdW1lbnQoKSBmb3IgdGEgaW4gc2VsZi50eXBlX0RldmljZXMoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9UeXBlOjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkRldmljZV9UeXBlLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdEZXZpY2VfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlX1R5cGU6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2VfVHlwZS5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ0RldmljZV9UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBEZXZpY2VfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfVHlwZTo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkRldmljZV9UeXBlLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnRGV2aWNlX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIE1ldHJpY19Hcm91cCgpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7CgogICAgICAgICNwcmludCgnTWV0cmljX0dyb3VwOjpfX2luaXRfXygpJyk7CiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsKCiAgICAgICAgCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsKICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7CiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOwogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOwogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsKICAgICAgICBzZWxmLm5hbWUobmFtZSk7CiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsKICAgICAgICAKICAgIElkID0gTm9uZTsKICAgIAogICAgCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2FjdGl2ZSA9IE5vbmU7CiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOwogICAgCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9lbmFibGVkID0gTm9uZTsKICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7CiAgICAKICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvZGUgPSBOb25lOwogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsKICAgIAogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX29yZGVyID0gTm9uZTsKICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7CiAgICAKICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2RhdGUgPSBOb25lOwogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsKICAgIAogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfbmFtZSA9IE5vbmU7CiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOwogICAgCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3JlbWFyayA9IE5vbmU7CiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOwogICAgCiAgICAKICAgIAogICAgIyBncm91cF9NZXRyaWNfVHlwZXM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9ncm91cF9NZXRyaWNfVHlwZXMgPSBOb25lOwogICAgZGVmIGdyb3VwX01ldHJpY19UeXBlcyhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZ3JvdXBfTWV0cmljX1R5cGVzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dyb3VwX01ldHJpY19UeXBlczsKICAgIAogICAgCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX0dyb3VwOjpfZnJvbURvY3VtZW50KCk6ICc7CiAgICAgICAgCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOgogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoKICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHModXJsbGliMy5Qb29sTWFuYWdlcigpLnJlcXVlc3QoJ0dFVCcsIG9iaikuZGF0YS5kZWNvZGUoJ3V0Zi04JykpOwogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOwogICAgICAgIAogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToKICAgICAgICAgICAgcmV0dXJuIFtNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIGlmICdncm91cF9NZXRyaWNfVHlwZXMnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5ncm91cF9NZXRyaWNfVHlwZXMoTWV0cmljX1R5cGUoKS5fZnJvbURvY3VtZW50KG9ialsnZ3JvdXBfTWV0cmljX1R5cGVzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19Hcm91cDo6X3RvRG9jdW1lbnQoKTogJzsKCiAgICAgICAgcmV0ID0ge307CiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsKCiAgICAKICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsKCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5ncm91cF9NZXRyaWNfVHlwZXMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJncm91cF9NZXRyaWNfVHlwZXMiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLmdyb3VwX01ldHJpY19UeXBlcygpXTsKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX0dyb3VwOjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19Hcm91cC5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTWV0cmljX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX0dyb3VwOjpmaW5kQWxsKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWV0cmljX0dyb3VwLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTWV0cmljX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX0dyb3VwOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWV0cmljX0dyb3VwLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTWV0cmljX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTWV0cmljX1R5cGUoKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgZ3JvdXA9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOwoKICAgICAgICAjcHJpbnQoJ01ldHJpY19UeXBlOjpfX2luaXRfXygpJyk7CiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsKCiAgICAgICAgCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsKICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7CiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOwogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOwogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsKICAgICAgICBzZWxmLm5hbWUobmFtZSk7CiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsKICAgICAgICBzZWxmLmdyb3VwKGdyb3VwKTsKICAgICAgICAKICAgIElkID0gTm9uZTsKICAgIAogICAgCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2FjdGl2ZSA9IE5vbmU7CiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOwogICAgCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9lbmFibGVkID0gTm9uZTsKICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7CiAgICAKICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvZGUgPSBOb25lOwogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsKICAgIAogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX29yZGVyID0gTm9uZTsKICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7CiAgICAKICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2RhdGUgPSBOb25lOwogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsKICAgIAogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfbmFtZSA9IE5vbmU7CiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOwogICAgCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3JlbWFyayA9IE5vbmU7CiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOwogICAgCiAgICAjIGdyb3VwOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZ3JvdXAgPSBOb25lOwogICAgZGVmIGdyb3VwKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9ncm91cCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9ncm91cDsKICAgIAogICAgCiAgICAKICAgICMgdHlwZV9NZXRyaWNzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfdHlwZV9NZXRyaWNzID0gTm9uZTsKICAgIGRlZiB0eXBlX01ldHJpY3Moc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3R5cGVfTWV0cmljcyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl90eXBlX01ldHJpY3M7CiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19UeXBlOjpfZnJvbURvY3VtZW50KCk6ICc7CiAgICAgICAgCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOgogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoKICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHModXJsbGliMy5Qb29sTWFuYWdlcigpLnJlcXVlc3QoJ0dFVCcsIG9iaikuZGF0YS5kZWNvZGUoJ3V0Zi04JykpOwogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOwogICAgICAgIAogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToKICAgICAgICAgICAgcmV0dXJuIFtNZXRyaWNfVHlwZSgpLl9mcm9tRG9jdW1lbnQobykgZm9yIG8gaW4gb2JqXTsKICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ3VuaGFuZGxlZCB0eXBlOiAnICsgc3RyKHR5cGUob2JqKSkpOwogICAgICAgICAgICByZXR1cm4gb2JqOwoKICAgICAgICBpZiAnSWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsKCiAgICAKICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnb3JkZXInIGluIG9iajoKICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICduYW1lJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOwogICAgICAgICAgICBpZihzZWxmLnJlbWFyaygpKSBzZWxmLnJlbWFyayhzdHIoc2VsZi5yZW1hcmsoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2dyb3VwJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZ3JvdXAoTWV0cmljX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2dyb3VwJ10pKTsKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIGlmICd0eXBlX01ldHJpY3MnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50eXBlX01ldHJpY3MoTWV0cmljKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGVfTWV0cmljcyddKSk7CiAgICAKCiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiBzZWxmOwogICAgCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVHlwZTo6X3RvRG9jdW1lbnQoKTogJzsKCiAgICAgICAgcmV0ID0ge307CiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsKCiAgICAKICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsKCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZ3JvdXAoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJncm91cCJdID0gc2VsZi5ncm91cCgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYudHlwZV9NZXRyaWNzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidHlwZV9NZXRyaWNzIl0gPSBbdGEuX3RvRG9jdW1lbnQoKSBmb3IgdGEgaW4gc2VsZi50eXBlX01ldHJpY3MoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19UeXBlOjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19UeXBlLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdNZXRyaWNfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTWV0cmljX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX1R5cGU6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWNfVHlwZS5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ01ldHJpY19UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVHlwZTo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19UeXBlLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTWV0cmljX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpY19UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIENvbmZpZygpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCB2YWx1ZT1Ob25lLCBzY3JpcHQ9Tm9uZSwgdG9vbD1Ob25lLCBncm91cD1Ob25lLCB0eXBlPU5vbmUsIG5vZGU9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOwoKICAgICAgICAjcHJpbnQoJ0NvbmZpZzo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgc2VsZi52YWx1ZSh2YWx1ZSk7CiAgICAgICAgc2VsZi5zY3JpcHQoc2NyaXB0KTsKICAgICAgICBzZWxmLnRvb2wodG9vbCk7CiAgICAgICAgc2VsZi5ncm91cChncm91cCk7CiAgICAgICAgc2VsZi50eXBlKHR5cGUpOwogICAgICAgIHNlbGYubm9kZShub2RlKTsKICAgICAgICAKICAgIElkID0gTm9uZTsKICAgIAogICAgCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2FjdGl2ZSA9IE5vbmU7CiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOwogICAgCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9lbmFibGVkID0gTm9uZTsKICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7CiAgICAKICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvZGUgPSBOb25lOwogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsKICAgIAogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX29yZGVyID0gTm9uZTsKICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7CiAgICAKICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2RhdGUgPSBOb25lOwogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsKICAgIAogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfbmFtZSA9IE5vbmU7CiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOwogICAgCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3JlbWFyayA9IE5vbmU7CiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOwogICAgCiAgICAjIHZhbHVlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfdmFsdWUgPSBOb25lOwogICAgZGVmIHZhbHVlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl92YWx1ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl92YWx1ZTsKICAgIAogICAgIyBzY3JpcHQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9zY3JpcHQgPSBOb25lOwogICAgZGVmIHNjcmlwdChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fc2NyaXB0ID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3NjcmlwdDsKICAgIAogICAgIyB0b29sOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfdG9vbCA9IE5vbmU7CiAgICBkZWYgdG9vbChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fdG9vbCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl90b29sOwogICAgCiAgICAjIGdyb3VwOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZ3JvdXAgPSBOb25lOwogICAgZGVmIGdyb3VwKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9ncm91cCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9ncm91cDsKICAgIAogICAgIyB0eXBlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfdHlwZSA9IE5vbmU7CiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fdHlwZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl90eXBlOwogICAgCiAgICAjIG5vZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9ub2RlID0gTm9uZTsKICAgIGRlZiBub2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9ub2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25vZGU7CiAgICAKICAgIAogICAgCiAgICAKICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6CiAgICAgICAgX190b1N0cmluZyA9ICdDb25maWc6Ol9mcm9tRG9jdW1lbnQoKTogJzsKICAgICAgICAKICAgICAgICBpZiBvYmogaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6CiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOgogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2Fkcyh1cmxsaWIzLlBvb2xNYW5hZ2VyKCkucmVxdWVzdCgnR0VUJywgb2JqKS5kYXRhLmRlY29kZSgndXRmLTgnKSk7CiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7CiAgICAgICAgCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gW0NvbmZpZygpLl9mcm9tRG9jdW1lbnQobykgZm9yIG8gaW4gb2JqXTsKICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ3VuaGFuZGxlZCB0eXBlOiAnICsgc3RyKHR5cGUob2JqKSkpOwogICAgICAgICAgICByZXR1cm4gb2JqOwoKICAgICAgICBpZiAnSWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsKCiAgICAKICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnb3JkZXInIGluIG9iajoKICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICduYW1lJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOwogICAgICAgICAgICBpZihzZWxmLnJlbWFyaygpKSBzZWxmLnJlbWFyayhzdHIoc2VsZi5yZW1hcmsoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3ZhbHVlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudmFsdWUob2JqWyd2YWx1ZSddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi52YWx1ZSggYmFzZTY0LmI2NGRlY29kZShzZWxmLnZhbHVlKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYudmFsdWUoKSkgc2VsZi52YWx1ZShzdHIoc2VsZi52YWx1ZSgpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnc2NyaXB0JyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuc2NyaXB0KG9ialsnc2NyaXB0J10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLnNjcmlwdCggYmFzZTY0LmI2NGRlY29kZShzZWxmLnNjcmlwdCgpKSApOwogICAgICAgICAgICBpZihzZWxmLnNjcmlwdCgpKSBzZWxmLnNjcmlwdChzdHIoc2VsZi5zY3JpcHQoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3Rvb2wnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50b29sKFRvb2woKS5fZnJvbURvY3VtZW50KG9ialsndG9vbCddKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZ3JvdXAnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5ncm91cChDb25maWdfR3JvdXAoKS5fZnJvbURvY3VtZW50KG9ialsnZ3JvdXAnXSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3R5cGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50eXBlKFRvb2xfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqWyd0eXBlJ10pKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdub2RlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubm9kZShOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ25vZGUnXSkpOwogICAgICAgIAogICAgCgogICAgCgogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gc2VsZjsKICAgIAogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnOjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi52YWx1ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInZhbHVlIl0gPSBzZWxmLnZhbHVlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJ2YWx1ZSJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsidmFsdWUiXSA9IGpzb24uZHVtcHMocmV0WyJ2YWx1ZSJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInZhbHVlIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInZhbHVlIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5zY3JpcHQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJzY3JpcHQiXSA9IHNlbGYuc2NyaXB0KCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJzY3JpcHQiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInNjcmlwdCJdID0ganNvbi5kdW1wcyhyZXRbInNjcmlwdCJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInNjcmlwdCJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJzY3JpcHQiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnRvb2woKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJ0b29sIl0gPSBzZWxmLnRvb2woKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5ncm91cCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImdyb3VwIl0gPSBzZWxmLmdyb3VwKCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYudHlwZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInR5cGUiXSA9IHNlbGYudHlwZSgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5vZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJub2RlIl0gPSBzZWxmLm5vZGUoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0NvbmZpZzo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Db25maWcuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ0NvbmZpZycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0NvbmZpZzo6ZmluZEFsbCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkNvbmZpZy5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ0NvbmZpZycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0NvbmZpZzo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkNvbmZpZy5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0NvbmZpZycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIFRvb2woKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdHlwZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7CgogICAgICAgICNwcmludCgnVG9vbDo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgc2VsZi50eXBlKHR5cGUpOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3R5cGUgPSBOb25lOwogICAgZGVmIHR5cGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3R5cGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fdHlwZTsKICAgIAogICAgCiAgICAKICAgICMgdG9vbF9Db25maWdzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfdG9vbF9Db25maWdzID0gTm9uZTsKICAgIGRlZiB0b29sX0NvbmZpZ3Moc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3Rvb2xfQ29uZmlncyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl90b29sX0NvbmZpZ3M7CiAgICAKICAgICMgdG9vbF9NYXBwaW5nczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3Rvb2xfTWFwcGluZ3MgPSBOb25lOwogICAgZGVmIHRvb2xfTWFwcGluZ3Moc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3Rvb2xfTWFwcGluZ3MgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fdG9vbF9NYXBwaW5nczsKICAgIAogICAgCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbDo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbVG9vbCgpLl9mcm9tRG9jdW1lbnQobykgZm9yIG8gaW4gb2JqXTsKICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ3VuaGFuZGxlZCB0eXBlOiAnICsgc3RyKHR5cGUob2JqKSkpOwogICAgICAgICAgICByZXR1cm4gb2JqOwoKICAgICAgICBpZiAnSWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsKCiAgICAKICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnb3JkZXInIGluIG9iajoKICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICduYW1lJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOwogICAgICAgICAgICBpZihzZWxmLnJlbWFyaygpKSBzZWxmLnJlbWFyayhzdHIoc2VsZi5yZW1hcmsoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3R5cGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50eXBlKFRvb2xfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqWyd0eXBlJ10pKTsKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIGlmICd0b29sX0NvbmZpZ3MnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50b29sX0NvbmZpZ3MoQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3Rvb2xfQ29uZmlncyddKSk7CiAgICAKICAgICAgICBpZiAndG9vbF9NYXBwaW5ncycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnRvb2xfTWFwcGluZ3MoTWFwcGluZygpLl9mcm9tRG9jdW1lbnQob2JqWyd0b29sX01hcHBpbmdzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2w6Ol90b0RvY3VtZW50KCk6ICc7CgogICAgICAgIHJldCA9IHt9OwogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7CgogICAgCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnR5cGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJ0eXBlIl0gPSBzZWxmLnR5cGUoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnRvb2xfQ29uZmlncygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInRvb2xfQ29uZmlncyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYudG9vbF9Db25maWdzKCldOwogICAgCiAgICAgICAgaWYgc2VsZi50b29sX01hcHBpbmdzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidG9vbF9NYXBwaW5ncyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYudG9vbF9NYXBwaW5ncygpXTsKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbDo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ub29sLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdUb29sJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBUb29sKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2w6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ub29sLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnVG9vbCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gVG9vbCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdUb29sOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uVG9vbC5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ1Rvb2wnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IFRvb2woKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgQ29uZmlnX0dyb3VwKCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdDb25maWdfR3JvdXA6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgIAogICAgCiAgICAjIGdyb3VwX0NvbmZpZ3M6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9ncm91cF9Db25maWdzID0gTm9uZTsKICAgIGRlZiBncm91cF9Db25maWdzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9ncm91cF9Db25maWdzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dyb3VwX0NvbmZpZ3M7CiAgICAKICAgICMgZ3JvdXBfTWFwcGluZ3M6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9ncm91cF9NYXBwaW5ncyA9IE5vbmU7CiAgICBkZWYgZ3JvdXBfTWFwcGluZ3Moc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2dyb3VwX01hcHBpbmdzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dyb3VwX01hcHBpbmdzOwogICAgCiAgICAKICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6CiAgICAgICAgX190b1N0cmluZyA9ICdDb25maWdfR3JvdXA6Ol9mcm9tRG9jdW1lbnQoKTogJzsKICAgICAgICAKICAgICAgICBpZiBvYmogaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6CiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOgogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2Fkcyh1cmxsaWIzLlBvb2xNYW5hZ2VyKCkucmVxdWVzdCgnR0VUJywgb2JqKS5kYXRhLmRlY29kZSgndXRmLTgnKSk7CiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7CiAgICAgICAgCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gW0NvbmZpZ19Hcm91cCgpLl9mcm9tRG9jdW1lbnQobykgZm9yIG8gaW4gb2JqXTsKICAgICAgICAgICAgCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ3VuaGFuZGxlZCB0eXBlOiAnICsgc3RyKHR5cGUob2JqKSkpOwogICAgICAgICAgICByZXR1cm4gb2JqOwoKICAgICAgICBpZiAnSWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsKCiAgICAKICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnb3JkZXInIGluIG9iajoKICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICduYW1lJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOwogICAgICAgICAgICBpZihzZWxmLnJlbWFyaygpKSBzZWxmLnJlbWFyayhzdHIoc2VsZi5yZW1hcmsoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCgogICAgCiAgICAgICAgaWYgJ2dyb3VwX0NvbmZpZ3MnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5ncm91cF9Db25maWdzKENvbmZpZygpLl9mcm9tRG9jdW1lbnQob2JqWydncm91cF9Db25maWdzJ10pKTsKICAgIAogICAgICAgIGlmICdncm91cF9NYXBwaW5ncycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmdyb3VwX01hcHBpbmdzKE1hcHBpbmcoKS5fZnJvbURvY3VtZW50KG9ialsnZ3JvdXBfTWFwcGluZ3MnXSkpOwogICAgCgogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gc2VsZjsKICAgIAogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnX0dyb3VwOjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmdyb3VwX0NvbmZpZ3MoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJncm91cF9Db25maWdzIl0gPSBbdGEuX3RvRG9jdW1lbnQoKSBmb3IgdGEgaW4gc2VsZi5ncm91cF9Db25maWdzKCldOwogICAgCiAgICAgICAgaWYgc2VsZi5ncm91cF9NYXBwaW5ncygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImdyb3VwX01hcHBpbmdzIl0gPSBbdGEuX3RvRG9jdW1lbnQoKSBmb3IgdGEgaW4gc2VsZi5ncm91cF9NYXBwaW5ncygpXTsKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnX0dyb3VwOjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkNvbmZpZ19Hcm91cC5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnQ29uZmlnX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBDb25maWdfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnX0dyb3VwOjpmaW5kQWxsKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQ29uZmlnX0dyb3VwLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnQ29uZmlnX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBDb25maWdfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnX0dyb3VwOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQ29uZmlnX0dyb3VwLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnQ29uZmlnX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBDb25maWdfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTWFwcGluZ19Hcm91cCgpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7CgogICAgICAgICNwcmludCgnTWFwcGluZ19Hcm91cDo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb2RlID0gTm9uZTsKICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7CiAgICAKICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9vcmRlciA9IE5vbmU7CiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOwogICAgCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kYXRlID0gTm9uZTsKICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7CiAgICAKICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25hbWUgPSBOb25lOwogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsKICAgIAogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZW1hcmsgPSBOb25lOwogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsKICAgIAogICAgCiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01hcHBpbmdfR3JvdXA6Ol9mcm9tRG9jdW1lbnQoKTogJzsKICAgICAgICAKICAgICAgICBpZiBvYmogaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6CiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOgogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2Fkcyh1cmxsaWIzLlBvb2xNYW5hZ2VyKCkucmVxdWVzdCgnR0VUJywgb2JqKS5kYXRhLmRlY29kZSgndXRmLTgnKSk7CiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7CiAgICAgICAgCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gW01hcHBpbmdfR3JvdXAoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAoKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01hcHBpbmdfR3JvdXA6Ol90b0RvY3VtZW50KCk6ICc7CgogICAgICAgIHJldCA9IHt9OwogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7CgogICAgCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWFwcGluZ19Hcm91cDo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NYXBwaW5nX0dyb3VwLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdNYXBwaW5nX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNYXBwaW5nX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01hcHBpbmdfR3JvdXA6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NYXBwaW5nX0dyb3VwLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTWFwcGluZ19Hcm91cCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTWFwcGluZ19Hcm91cCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nX0dyb3VwOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWFwcGluZ19Hcm91cC5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ01hcHBpbmdfR3JvdXAnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE1hcHBpbmdfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgVG9vbF9UeXBlKCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdUb29sX1R5cGU6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgIAogICAgCiAgICAjIHR5cGVfQ29uZmlnczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3R5cGVfQ29uZmlncyA9IE5vbmU7CiAgICBkZWYgdHlwZV9Db25maWdzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90eXBlX0NvbmZpZ3MgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fdHlwZV9Db25maWdzOwogICAgCiAgICAjIHR5cGVfVG9vbHM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF90eXBlX1Rvb2xzID0gTm9uZTsKICAgIGRlZiB0eXBlX1Rvb2xzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90eXBlX1Rvb2xzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGVfVG9vbHM7CiAgICAKICAgICMgdHlwZV9NYXBwaW5nczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3R5cGVfTWFwcGluZ3MgPSBOb25lOwogICAgZGVmIHR5cGVfTWFwcGluZ3Moc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3R5cGVfTWFwcGluZ3MgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fdHlwZV9NYXBwaW5nczsKICAgIAogICAgCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbF9UeXBlOjpfZnJvbURvY3VtZW50KCk6ICc7CiAgICAgICAgCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOgogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoKICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHModXJsbGliMy5Qb29sTWFuYWdlcigpLnJlcXVlc3QoJ0dFVCcsIG9iaikuZGF0YS5kZWNvZGUoJ3V0Zi04JykpOwogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOwogICAgICAgIAogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToKICAgICAgICAgICAgcmV0dXJuIFtUb29sX1R5cGUoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAoKICAgIAogICAgICAgIGlmICd0eXBlX0NvbmZpZ3MnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50eXBlX0NvbmZpZ3MoQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGVfQ29uZmlncyddKSk7CiAgICAKICAgICAgICBpZiAndHlwZV9Ub29scycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnR5cGVfVG9vbHMoVG9vbCgpLl9mcm9tRG9jdW1lbnQob2JqWyd0eXBlX1Rvb2xzJ10pKTsKICAgIAogICAgICAgIGlmICd0eXBlX01hcHBpbmdzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudHlwZV9NYXBwaW5ncyhNYXBwaW5nKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGVfTWFwcGluZ3MnXSkpOwogICAgCgogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gc2VsZjsKICAgIAogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbF9UeXBlOjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnR5cGVfQ29uZmlncygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInR5cGVfQ29uZmlncyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYudHlwZV9Db25maWdzKCldOwogICAgCiAgICAgICAgaWYgc2VsZi50eXBlX1Rvb2xzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidHlwZV9Ub29scyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYudHlwZV9Ub29scygpXTsKICAgIAogICAgICAgIGlmIHNlbGYudHlwZV9NYXBwaW5ncygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInR5cGVfTWFwcGluZ3MiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLnR5cGVfTWFwcGluZ3MoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2xfVHlwZTo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ub29sX1R5cGUuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ1Rvb2xfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2xfVHlwZTo6ZmluZEFsbCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlRvb2xfVHlwZS5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ1Rvb2xfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2xfVHlwZTo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlRvb2xfVHlwZS5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ1Rvb2xfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIEV2ZW50KCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIGNsYXNzTmFtZT1Ob25lLCBtZXRob2Q9Tm9uZSwgcGF5bG9hZD1Ob25lLCBjYXJyaWVyPU5vbmUsIHNlbmRlcj1Ob25lLCByZWNpcGllbnQ9Tm9uZSwgcmVzcG9uc2VUbz1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7CgogICAgICAgICNwcmludCgnRXZlbnQ6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIHNlbGYuY2xhc3NOYW1lKGNsYXNzTmFtZSk7CiAgICAgICAgc2VsZi5tZXRob2QobWV0aG9kKTsKICAgICAgICBzZWxmLnBheWxvYWQocGF5bG9hZCk7CiAgICAgICAgc2VsZi5jYXJyaWVyKGNhcnJpZXIpOwogICAgICAgIHNlbGYuc2VuZGVyKHNlbmRlcik7CiAgICAgICAgc2VsZi5yZWNpcGllbnQocmVjaXBpZW50KTsKICAgICAgICBzZWxmLnJlc3BvbnNlVG8ocmVzcG9uc2VUbyk7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb2RlID0gTm9uZTsKICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7CiAgICAKICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9vcmRlciA9IE5vbmU7CiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOwogICAgCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kYXRlID0gTm9uZTsKICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7CiAgICAKICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25hbWUgPSBOb25lOwogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsKICAgIAogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZW1hcmsgPSBOb25lOwogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsKICAgIAogICAgIyBjbGFzc05hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jbGFzc05hbWUgPSBOb25lOwogICAgZGVmIGNsYXNzTmFtZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY2xhc3NOYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NsYXNzTmFtZTsKICAgIAogICAgIyBtZXRob2Q6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9tZXRob2QgPSBOb25lOwogICAgZGVmIG1ldGhvZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbWV0aG9kID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ldGhvZDsKICAgIAogICAgIyBwYXlsb2FkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcGF5bG9hZCA9IE5vbmU7CiAgICBkZWYgcGF5bG9hZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcGF5bG9hZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9wYXlsb2FkOwogICAgCiAgICAjIGNhcnJpZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jYXJyaWVyID0gTm9uZTsKICAgIGRlZiBjYXJyaWVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jYXJyaWVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NhcnJpZXI7CiAgICAKICAgICMgc2VuZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfc2VuZGVyID0gTm9uZTsKICAgIGRlZiBzZW5kZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3NlbmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zZW5kZXI7CiAgICAKICAgICMgcmVjaXBpZW50OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVjaXBpZW50ID0gTm9uZTsKICAgIGRlZiByZWNpcGllbnQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlY2lwaWVudCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZWNpcGllbnQ7CiAgICAKICAgICMgcmVzcG9uc2VUbzogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3Jlc3BvbnNlVG8gPSBOb25lOwogICAgZGVmIHJlc3BvbnNlVG8oc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3Jlc3BvbnNlVG8gPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVzcG9uc2VUbzsKICAgIAogICAgCiAgICAKICAgICMgcmVzcG9uc2VUb19FdmVudHM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZXNwb25zZVRvX0V2ZW50cyA9IE5vbmU7CiAgICBkZWYgcmVzcG9uc2VUb19FdmVudHMoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3Jlc3BvbnNlVG9fRXZlbnRzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Jlc3BvbnNlVG9fRXZlbnRzOwogICAgCiAgICAKICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6CiAgICAgICAgX190b1N0cmluZyA9ICdFdmVudDo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbRXZlbnQoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjbGFzc05hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jbGFzc05hbWUob2JqWydjbGFzc05hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbWV0aG9kJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYubWV0aG9kKG9ialsnbWV0aG9kJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3BheWxvYWQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5wYXlsb2FkKG9ialsncGF5bG9hZCddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5wYXlsb2FkKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucGF5bG9hZCgpKSApOwogICAgICAgICAgICBpZihzZWxmLnBheWxvYWQoKSkgc2VsZi5wYXlsb2FkKHN0cihzZWxmLnBheWxvYWQoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NhcnJpZXInIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jYXJyaWVyKE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsnY2FycmllciddKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnc2VuZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuc2VuZGVyKE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsnc2VuZGVyJ10pKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZWNpcGllbnQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZWNpcGllbnQoTm9kZSgpLl9mcm9tRG9jdW1lbnQob2JqWydyZWNpcGllbnQnXSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3Jlc3BvbnNlVG8nIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZXNwb25zZVRvKEV2ZW50KCkuX2Zyb21Eb2N1bWVudChvYmpbJ3Jlc3BvbnNlVG8nXSkpOwogICAgICAgIAogICAgCgogICAgCiAgICAgICAgaWYgJ3Jlc3BvbnNlVG9fRXZlbnRzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucmVzcG9uc2VUb19FdmVudHMoRXZlbnQoKS5fZnJvbURvY3VtZW50KG9ialsncmVzcG9uc2VUb19FdmVudHMnXSkpOwogICAgCgogICAgICAgIGdjLmNvbGxlY3QoKTsKICAgICAgICByZXR1cm4gc2VsZjsKICAgIAogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnRXZlbnQ6Ol90b0RvY3VtZW50KCk6ICc7CgogICAgICAgIHJldCA9IHt9OwogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7CgogICAgCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNsYXNzTmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNsYXNzTmFtZSJdID0gc2VsZi5jbGFzc05hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubWV0aG9kKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibWV0aG9kIl0gPSBzZWxmLm1ldGhvZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5wYXlsb2FkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicGF5bG9hZCJdID0gc2VsZi5wYXlsb2FkKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJwYXlsb2FkIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJwYXlsb2FkIl0gPSBqc29uLmR1bXBzKHJldFsicGF5bG9hZCJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInBheWxvYWQiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicGF5bG9hZCJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY2FycmllcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNhcnJpZXIiXSA9IHNlbGYuY2FycmllcigpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnNlbmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInNlbmRlciJdID0gc2VsZi5zZW5kZXIoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZWNpcGllbnQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZWNpcGllbnQiXSA9IHNlbGYucmVjaXBpZW50KCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlc3BvbnNlVG8iXSA9IHNlbGYucmVzcG9uc2VUbygpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVzcG9uc2VUb19FdmVudHMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZXNwb25zZVRvX0V2ZW50cyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYucmVzcG9uc2VUb19FdmVudHMoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0V2ZW50OjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkV2ZW50LnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdFdmVudCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnRXZlbnQ6OmZpbmRBbGwoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5FdmVudC5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ0V2ZW50JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBFdmVudCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdFdmVudDo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkV2ZW50LmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnRXZlbnQnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IEV2ZW50KCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGxpc3RlbihzZWxmLCBfX2V2ZW50PU5vbmUsIG5vZGU9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdFdmVudDo6bGlzdGVuKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKICAgICAgICAgICAgaWYgJ25vZGUnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIG5vZGUgPSBldkpTT05bJ25vZGUnXTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRXZlbnQubGlzdGVuKCknKS5tZXRob2QoJ2xpc3RlbicpLmNsYXNzTmFtZSgnRXZlbnQnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IGV2SlNPTjsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoc3RyKGFuc3dlcikpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiB0cmlnZ2VyKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdFdmVudDo6dHJpZ2dlcigpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkV2ZW50LnRyaWdnZXIoKScpLm1ldGhvZCgndHJpZ2dlcicpLmNsYXNzTmFtZSgnRXZlbnQnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IGV2SlNPTjsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKICAgICAgICAgICAgcmV0dXJuIG1xdHRfY2xpZW50LnB1Ymxpc2gobXF0dF90b3BpYywgc2VsZi5fdG9Eb2N1bWVudChUcnVlKSk7CiAgICAgICAgCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHN0cihhbnN3ZXIpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIHByb2Nlc3Moc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ0V2ZW50Ojpwcm9jZXNzKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRXZlbnQucHJvY2VzcygpJykubWV0aG9kKCdwcm9jZXNzJykuY2xhc3NOYW1lKCdFdmVudCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCiAgICAgICAgICAgIGlmIHNlbGYuc2VuZGVyKCkuY29kZSgpPT1ub2RlLmNvZGUoKToKICAgICAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiaWdub3JpbmcgbXkgZXZlbnRzIik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGVsaWYgc2VsZi5yZWNpcGllbnQoKS5jb2RlKCkhPW5vZGUuY29kZSgpOgogICAgICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJub3Qgc2VudCB0byBtZSIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIoZ2xvYmFscygpW3NlbGYuY2xhc3NOYW1lKCldKCksIHNlbGYubWV0aG9kKCkpKHNlbGYpOwogICAgICAgIAoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIE5vZGUoKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgYWRkcmVzcz1Ob25lLCBiYWNrdXA9Tm9uZSwgcGFyZW50PU5vbmUsIGdyb3VwPU5vbmUsIGNvbnRleHQ9Tm9uZSwgcG9ydD1Ob25lLCBvbmxpbmU9Tm9uZSwgc2VjdXJlPU5vbmUsIHR5cGU9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOwoKICAgICAgICAjcHJpbnQoJ05vZGU6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIHNlbGYuYWRkcmVzcyhhZGRyZXNzKTsKICAgICAgICBzZWxmLmJhY2t1cChiYWNrdXApOwogICAgICAgIHNlbGYucGFyZW50KHBhcmVudCk7CiAgICAgICAgc2VsZi5ncm91cChncm91cCk7CiAgICAgICAgc2VsZi5jb250ZXh0KGNvbnRleHQpOwogICAgICAgIHNlbGYucG9ydChwb3J0KTsKICAgICAgICBzZWxmLm9ubGluZShvbmxpbmUpOwogICAgICAgIHNlbGYuc2VjdXJlKHNlY3VyZSk7CiAgICAgICAgc2VsZi50eXBlKHR5cGUpOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgICMgYWRkcmVzczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2FkZHJlc3MgPSBOb25lOwogICAgZGVmIGFkZHJlc3Moc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FkZHJlc3MgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWRkcmVzczsKICAgIAogICAgIyBiYWNrdXA6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9iYWNrdXAgPSBOb25lOwogICAgZGVmIGJhY2t1cChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYmFja3VwID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2JhY2t1cDsKICAgIAogICAgIyBwYXJlbnQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9wYXJlbnQgPSBOb25lOwogICAgZGVmIHBhcmVudChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcGFyZW50ID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3BhcmVudDsKICAgIAogICAgIyBncm91cDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2dyb3VwID0gTm9uZTsKICAgIGRlZiBncm91cChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZ3JvdXAgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZ3JvdXA7CiAgICAKICAgICMgY29udGV4dDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvbnRleHQgPSBOb25lOwogICAgZGVmIGNvbnRleHQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NvbnRleHQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29udGV4dDsKICAgIAogICAgIyBwb3J0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcG9ydCA9IE5vbmU7CiAgICBkZWYgcG9ydChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcG9ydCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9wb3J0OwogICAgCiAgICAjIG9ubGluZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX29ubGluZSA9IE5vbmU7CiAgICBkZWYgb25saW5lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vbmxpbmUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb25saW5lOwogICAgCiAgICAjIHNlY3VyZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3NlY3VyZSA9IE5vbmU7CiAgICBkZWYgc2VjdXJlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9zZWN1cmUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fc2VjdXJlOwogICAgCiAgICAjIHR5cGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF90eXBlID0gTm9uZTsKICAgIGRlZiB0eXBlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7CiAgICAKICAgIAogICAgCiAgICAjIGNvbnRyb2xsZXJfRGV2aWNlczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvbnRyb2xsZXJfRGV2aWNlcyA9IE5vbmU7CiAgICBkZWYgY29udHJvbGxlcl9EZXZpY2VzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb250cm9sbGVyX0RldmljZXMgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29udHJvbGxlcl9EZXZpY2VzOwogICAgCiAgICAjIG5vZGVfQ29uZmlnczogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25vZGVfQ29uZmlncyA9IE5vbmU7CiAgICBkZWYgbm9kZV9Db25maWdzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9ub2RlX0NvbmZpZ3MgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbm9kZV9Db25maWdzOwogICAgCiAgICAjIGNhcnJpZXJfRXZlbnRzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY2Fycmllcl9FdmVudHMgPSBOb25lOwogICAgZGVmIGNhcnJpZXJfRXZlbnRzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jYXJyaWVyX0V2ZW50cyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jYXJyaWVyX0V2ZW50czsKICAgIAogICAgIyBzZW5kZXJfRXZlbnRzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfc2VuZGVyX0V2ZW50cyA9IE5vbmU7CiAgICBkZWYgc2VuZGVyX0V2ZW50cyhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fc2VuZGVyX0V2ZW50cyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zZW5kZXJfRXZlbnRzOwogICAgCiAgICAjIHJlY2lwaWVudF9FdmVudHM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZWNpcGllbnRfRXZlbnRzID0gTm9uZTsKICAgIGRlZiByZWNpcGllbnRfRXZlbnRzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9yZWNpcGllbnRfRXZlbnRzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlY2lwaWVudF9FdmVudHM7CiAgICAKICAgICMgYmFja3VwX05vZGVzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYmFja3VwX05vZGVzID0gTm9uZTsKICAgIGRlZiBiYWNrdXBfTm9kZXMoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2JhY2t1cF9Ob2RlcyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9iYWNrdXBfTm9kZXM7CiAgICAKICAgICMgcGFyZW50X05vZGVzOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcGFyZW50X05vZGVzID0gTm9uZTsKICAgIGRlZiBwYXJlbnRfTm9kZXMoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3BhcmVudF9Ob2RlcyA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9wYXJlbnRfTm9kZXM7CiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6Ol9mcm9tRG9jdW1lbnQoKTogJzsKICAgICAgICAKICAgICAgICBpZiBvYmogaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6CiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOgogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2Fkcyh1cmxsaWIzLlBvb2xNYW5hZ2VyKCkucmVxdWVzdCgnR0VUJywgb2JqKS5kYXRhLmRlY29kZSgndXRmLTgnKSk7CiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7CiAgICAgICAgCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGxpc3QpOgogICAgICAgICAgICByZXR1cm4gW05vZGUoKS5fZnJvbURvY3VtZW50KG8pIGZvciBvIGluIG9ial07CiAgICAgICAgICAgIAogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICd1bmhhbmRsZWQgdHlwZTogJyArIHN0cih0eXBlKG9iaikpKTsKICAgICAgICAgICAgcmV0dXJuIG9iajsKCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107CgogICAgCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29kZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnbmFtZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5yZW1hcmsoKSkgc2VsZi5yZW1hcmsoc3RyKHNlbGYucmVtYXJrKCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdhZGRyZXNzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuYWRkcmVzcyhvYmpbJ2FkZHJlc3MnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnYmFja3VwJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuYmFja3VwKE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsnYmFja3VwJ10pKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdwYXJlbnQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5wYXJlbnQoTm9kZSgpLl9mcm9tRG9jdW1lbnQob2JqWydwYXJlbnQnXSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2dyb3VwJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZ3JvdXAoTm9kZV9Hcm91cCgpLl9mcm9tRG9jdW1lbnQob2JqWydncm91cCddKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnY29udGV4dCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvbnRleHQoTm9kZV9Db250ZXh0KCkuX2Zyb21Eb2N1bWVudChvYmpbJ2NvbnRleHQnXSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3BvcnQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5wb3J0KG9ialsncG9ydCddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvbmxpbmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5vbmxpbmUob2JqWydvbmxpbmUnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYub25saW5lKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5vbmxpbmUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ3NlY3VyZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnNlY3VyZShvYmpbJ3NlY3VyZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICd0eXBlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudHlwZShOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KG9ialsndHlwZSddKSk7CiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICBpZiAnY29udHJvbGxlcl9EZXZpY2VzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuY29udHJvbGxlcl9EZXZpY2VzKERldmljZSgpLl9mcm9tRG9jdW1lbnQob2JqWydjb250cm9sbGVyX0RldmljZXMnXSkpOwogICAgCiAgICAgICAgaWYgJ25vZGVfQ29uZmlncycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm5vZGVfQ29uZmlncyhDb25maWcoKS5fZnJvbURvY3VtZW50KG9ialsnbm9kZV9Db25maWdzJ10pKTsKICAgIAogICAgICAgIGlmICdjYXJyaWVyX0V2ZW50cycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNhcnJpZXJfRXZlbnRzKEV2ZW50KCkuX2Zyb21Eb2N1bWVudChvYmpbJ2NhcnJpZXJfRXZlbnRzJ10pKTsKICAgIAogICAgICAgIGlmICdzZW5kZXJfRXZlbnRzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuc2VuZGVyX0V2ZW50cyhFdmVudCgpLl9mcm9tRG9jdW1lbnQob2JqWydzZW5kZXJfRXZlbnRzJ10pKTsKICAgIAogICAgICAgIGlmICdyZWNpcGllbnRfRXZlbnRzJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYucmVjaXBpZW50X0V2ZW50cyhFdmVudCgpLl9mcm9tRG9jdW1lbnQob2JqWydyZWNpcGllbnRfRXZlbnRzJ10pKTsKICAgIAogICAgICAgIGlmICdiYWNrdXBfTm9kZXMnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5iYWNrdXBfTm9kZXMoTm9kZSgpLl9mcm9tRG9jdW1lbnQob2JqWydiYWNrdXBfTm9kZXMnXSkpOwogICAgCiAgICAgICAgaWYgJ3BhcmVudF9Ob2RlcycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLnBhcmVudF9Ob2RlcyhOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3BhcmVudF9Ob2RlcyddKSk7CiAgICAKCiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiBzZWxmOwogICAgCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlOjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToKICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5hZGRyZXNzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWRkcmVzcyJdID0gc2VsZi5hZGRyZXNzKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmJhY2t1cCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImJhY2t1cCJdID0gc2VsZi5iYWNrdXAoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5wYXJlbnQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJwYXJlbnQiXSA9IHNlbGYucGFyZW50KCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZ3JvdXAoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJncm91cCJdID0gc2VsZi5ncm91cCgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvbnRleHQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb250ZXh0Il0gPSBzZWxmLmNvbnRleHQoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5wb3J0KCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsicG9ydCJdID0gc2VsZi5wb3J0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9ubGluZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9ubGluZSJdID0gc2VsZi5vbmxpbmUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbIm9ubGluZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbIm9ubGluZSJdID0gcmV0WyJvbmxpbmUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuc2VjdXJlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsic2VjdXJlIl0gPSBzZWxmLnNlY3VyZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi50eXBlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidHlwZSJdID0gc2VsZi50eXBlKCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb250cm9sbGVyX0RldmljZXMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb250cm9sbGVyX0RldmljZXMiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLmNvbnRyb2xsZXJfRGV2aWNlcygpXTsKICAgIAogICAgICAgIGlmIHNlbGYubm9kZV9Db25maWdzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibm9kZV9Db25maWdzIl0gPSBbdGEuX3RvRG9jdW1lbnQoKSBmb3IgdGEgaW4gc2VsZi5ub2RlX0NvbmZpZ3MoKV07CiAgICAKICAgICAgICBpZiBzZWxmLmNhcnJpZXJfRXZlbnRzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY2Fycmllcl9FdmVudHMiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLmNhcnJpZXJfRXZlbnRzKCldOwogICAgCiAgICAgICAgaWYgc2VsZi5zZW5kZXJfRXZlbnRzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsic2VuZGVyX0V2ZW50cyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYuc2VuZGVyX0V2ZW50cygpXTsKICAgIAogICAgICAgIGlmIHNlbGYucmVjaXBpZW50X0V2ZW50cygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlY2lwaWVudF9FdmVudHMiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLnJlY2lwaWVudF9FdmVudHMoKV07CiAgICAKICAgICAgICBpZiBzZWxmLmJhY2t1cF9Ob2RlcygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImJhY2t1cF9Ob2RlcyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYuYmFja3VwX05vZGVzKCldOwogICAgCiAgICAgICAgaWYgc2VsZi5wYXJlbnRfTm9kZXMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJwYXJlbnRfTm9kZXMiXSA9IFt0YS5fdG9Eb2N1bWVudCgpIGZvciB0YSBpbiBzZWxmLnBhcmVudF9Ob2RlcygpXTsKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZTo6c3RvcmUoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdOb2RlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKICAgICAgICAgICAgTWV0cmljKCkuZGV2aWNlVHlwZShEZXZpY2VfVHlwZSgpLnR5cGVfRGV2aWNlcyhbRGV2aWNlKCkuY29udHJvbGxlcihub2RlKV0pKS5maW5kQWxsKCk7CgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZTo6ZmluZEFsbCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGUuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdOb2RlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6OmZpbmQoKTogJzsKICAgICAgICAKICAgICAgICBldkpTT04gPSBOb25lOwoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsKICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOwogICAgICAgIAoKICAgICAgICBhbnN3ZXIgPSBOb25lOwoKICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTm9kZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTm9kZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBhdXRoQ29kZShzZWxmLCBfX2V2ZW50PU5vbmUsIGNvZGU9Tm9uZSwgdG9vbD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6OmF1dGhDb2RlKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKICAgICAgICAgICAgaWYgJ2NvZGUnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIGNvZGUgPSBldkpTT05bJ2NvZGUnXTsKICAgICAgICAKICAgICAgICAgICAgaWYgJ3Rvb2wnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHRvb2wgPSBldkpTT05bJ3Rvb2wnXTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZS5hdXRoQ29kZSgpJykubWV0aG9kKCdhdXRoQ29kZScpLmNsYXNzTmFtZSgnTm9kZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gZXZKU09OOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChzdHIoYW5zd2VyKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAogICAgZGVmIGluaXQoc2VsZiwgX19ldmVudD1Ob25lLCBvbmxpbmU9Tm9uZSwgY29kZT1Ob25lLCB1aWQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlOjppbml0KCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKICAgICAgICAgICAgaWYgJ29ubGluZScgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgb25saW5lID0gZXZKU09OWydvbmxpbmUnXTsKICAgICAgICAKICAgICAgICAgICAgaWYgJ2NvZGUnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIGNvZGUgPSBldkpTT05bJ2NvZGUnXTsKICAgICAgICAKICAgICAgICAgICAgaWYgJ3VpZCcgaW4gZXZKU09OOgogICAgICAgICAgICAgICAgdWlkID0gZXZKU09OWyd1aWQnXTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZS5pbml0KCknKS5tZXRob2QoJ2luaXQnKS5jbGFzc05hbWUoJ05vZGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTm9kZV9Db250ZXh0KCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdOb2RlX0NvbnRleHQ6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIAogICAgSWQgPSBOb25lOwogICAgCiAgICAKICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfYWN0aXZlID0gTm9uZTsKICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7CiAgICAKICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2VuYWJsZWQgPSBOb25lOwogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsKICAgIAogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfY29kZSA9IE5vbmU7CiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZGF0ZSA9IE5vbmU7CiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOwogICAgCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9uYW1lID0gTm9uZTsKICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7CiAgICAKICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfcmVtYXJrID0gTm9uZTsKICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7CiAgICAKICAgIAogICAgCiAgICAjIGNvbnRleHRfTm9kZXM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb250ZXh0X05vZGVzID0gTm9uZTsKICAgIGRlZiBjb250ZXh0X05vZGVzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb250ZXh0X05vZGVzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvbnRleHRfTm9kZXM7CiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfQ29udGV4dDo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbTm9kZV9Db250ZXh0KCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYucmVtYXJrKCkpIHNlbGYucmVtYXJrKHN0cihzZWxmLnJlbWFyaygpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICBpZiAnY29udGV4dF9Ob2RlcycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmNvbnRleHRfTm9kZXMoTm9kZSgpLl9mcm9tRG9jdW1lbnQob2JqWydjb250ZXh0X05vZGVzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfQ29udGV4dDo6X3RvRG9jdW1lbnQoKTogJzsKCiAgICAgICAgcmV0ID0ge307CiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsKCiAgICAKICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6CiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToKICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsKCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5jb250ZXh0X05vZGVzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY29udGV4dF9Ob2RlcyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYuY29udGV4dF9Ob2RlcygpXTsKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Db250ZXh0OjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGVfQ29udGV4dC5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTm9kZV9Db250ZXh0JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX0NvbnRleHQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Db250ZXh0OjpmaW5kQWxsKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9Db250ZXh0LmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTm9kZV9Db250ZXh0JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX0NvbnRleHQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Db250ZXh0OjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9Db250ZXh0LmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTm9kZV9Db250ZXh0JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX0NvbnRleHQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTm9kZV9Hcm91cCgpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7CgogICAgICAgICNwcmludCgnTm9kZV9Hcm91cDo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYuY29kZShjb2RlKTsKICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsKICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7CiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOwogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jb2RlID0gTm9uZTsKICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7CiAgICAKICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9vcmRlciA9IE5vbmU7CiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOwogICAgCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9kYXRlID0gTm9uZTsKICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7CiAgICAKICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX25hbWUgPSBOb25lOwogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsKICAgIAogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9yZW1hcmsgPSBOb25lOwogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsKICAgIAogICAgCiAgICAKICAgICMgZ3JvdXBfTm9kZXM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9ncm91cF9Ob2RlcyA9IE5vbmU7CiAgICBkZWYgZ3JvdXBfTm9kZXMoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2dyb3VwX05vZGVzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dyb3VwX05vZGVzOwogICAgCiAgICAKICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6CiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX0dyb3VwOjpfZnJvbURvY3VtZW50KCk6ICc7CiAgICAgICAgCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOgogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoKICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHModXJsbGliMy5Qb29sTWFuYWdlcigpLnJlcXVlc3QoJ0dFVCcsIG9iaikuZGF0YS5kZWNvZGUoJ3V0Zi04JykpOwogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOwogICAgICAgIAogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToKICAgICAgICAgICAgcmV0dXJuIFtOb2RlX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYucmVtYXJrKCkpIHNlbGYucmVtYXJrKHN0cihzZWxmLnJlbWFyaygpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKCiAgICAKICAgICAgICBpZiAnZ3JvdXBfTm9kZXMnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5ncm91cF9Ob2RlcyhOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2dyb3VwX05vZGVzJ10pKTsKICAgIAoKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAKICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfR3JvdXA6Ol90b0RvY3VtZW50KCk6ICc7CgogICAgICAgIHJldCA9IHt9OwogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7CgogICAgCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZ3JvdXBfTm9kZXMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJncm91cF9Ob2RlcyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYuZ3JvdXBfTm9kZXMoKV07CiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfR3JvdXA6OnN0b3JlKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9Hcm91cC5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTm9kZV9Hcm91cCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTm9kZV9Hcm91cCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX0dyb3VwOjpmaW5kQWxsKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9Hcm91cC5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ05vZGVfR3JvdXAnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGVfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Hcm91cDo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGVfR3JvdXAuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdOb2RlX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCmNsYXNzIE5vZGVfVHlwZSgpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCBkeW5hbWljPU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsKCiAgICAgICAgI3ByaW50KCdOb2RlX1R5cGU6Ol9faW5pdF9fKCknKTsKICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5JZCA9IElkOwoKICAgICAgICAKICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOwogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsKICAgICAgICBzZWxmLmNvZGUoY29kZSk7CiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7CiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOwogICAgICAgIHNlbGYubmFtZShuYW1lKTsKICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOwogICAgICAgIHNlbGYuZHluYW1pYyhkeW5hbWljKTsKICAgICAgICAKICAgIElkID0gTm9uZTsKICAgIAogICAgCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2FjdGl2ZSA9IE5vbmU7CiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOwogICAgCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9lbmFibGVkID0gTm9uZTsKICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7CiAgICAKICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvZGUgPSBOb25lOwogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsKICAgIAogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX29yZGVyID0gTm9uZTsKICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7CiAgICAKICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2RhdGUgPSBOb25lOwogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsKICAgIAogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfbmFtZSA9IE5vbmU7CiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOwogICAgCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3JlbWFyayA9IE5vbmU7CiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOwogICAgCiAgICAjIGR5bmFtaWM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9keW5hbWljID0gTm9uZTsKICAgIGRlZiBkeW5hbWljKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9keW5hbWljID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2R5bmFtaWM7CiAgICAKICAgIAogICAgCiAgICAjIHR5cGVfTm9kZXM6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF90eXBlX05vZGVzID0gTm9uZTsKICAgIGRlZiB0eXBlX05vZGVzKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90eXBlX05vZGVzID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGVfTm9kZXM7CiAgICAKICAgIAogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToKICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfVHlwZTo6X2Zyb21Eb2N1bWVudCgpOiAnOwogICAgICAgIAogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToKICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7CgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6CiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKHVybGxpYjMuUG9vbE1hbmFnZXIoKS5yZXF1ZXN0KCdHRVQnLCBvYmopLmRhdGEuZGVjb2RlKCd1dGYtOCcpKTsKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBvYmogPSB7fTsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsKICAgICAgICAKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBbTm9kZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOwogICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7CiAgICAgICAgICAgIGlmKHNlbGYucmVtYXJrKCkpIHNlbGYucmVtYXJrKHN0cihzZWxmLnJlbWFyaygpLCAidXRmLTgiKSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZHluYW1pYycgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmR5bmFtaWMob2JqWydkeW5hbWljJ10pOwogICAgICAgIAogICAgCgogICAgCiAgICAgICAgaWYgJ3R5cGVfTm9kZXMnIGluIG9iajoKICAgICAgICAgICAgc2VsZi50eXBlX05vZGVzKE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsndHlwZV9Ob2RlcyddKSk7CiAgICAKCiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiBzZWxmOwogICAgCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX1R5cGU6Ol90b0RvY3VtZW50KCk6ICc7CgogICAgICAgIHJldCA9IHt9OwogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7CgogICAgCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsKICAgICAgICAKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOgogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7CiAgICAgICAgCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7CgogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmR5bmFtaWMoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJkeW5hbWljIl0gPSBzZWxmLmR5bmFtaWMoKTsKICAgICAgICAKICAgIAogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi50eXBlX05vZGVzKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidHlwZV9Ob2RlcyJdID0gW3RhLl90b0RvY3VtZW50KCkgZm9yIHRhIGluIHNlbGYudHlwZV9Ob2RlcygpXTsKICAgIAoKICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToKICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7CiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsKICAgICAgICBnYy5jb2xsZWN0KCk7CiAgICAgICAgcmV0dXJuIHJldDsKCiAgICAKICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9UeXBlOjpzdG9yZSgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGVfVHlwZS5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTm9kZV9UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9UeXBlOjpmaW5kQWxsKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9UeXBlLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTm9kZV9UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9UeXBlOjpmaW5kKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9UeXBlLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTm9kZV9UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCiAgICAgICAgbGFzdFVwZGF0ZSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChiYXNlX3VybCk7CgogICAgICAgIGlmIHNlbGYuZGF0ZSgpPmxhc3RVcGRhdGU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAibmV3ZXIgdmVyc2lvbjogIiArIHN0cihzZWxmLmRhdGUoKSkgKyAiLCByZWJvb3RpbmcuLi4iKTsKICAgICAgICAgICAgb3MuZXhlY2woc3lzLmV4ZWN1dGFibGUsIHN5cy5leGVjdXRhYmxlLCAqc3lzLmFyZ3YpOwoKICAgICAgICB0aW1lLnNsZWVwKDMwKTsKICAgICAgICByZXR1cm4gc2VsZi5maW5kKCk7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCgoKY2xhc3MgTWFwcGluZygpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIG9yZGVyPU5vbmUsIGNsYXNzTmFtZT1Ob25lLCBzY29wZT1Ob25lLCBjb250ZXh0PU5vbmUsIHNvdXJjZT1Ob25lLCB0YXJnZXQ9Tm9uZSwgb3BlcmF0b3I9Tm9uZSwgaW5TY3JpcHQ9Tm9uZSwgb3V0U2NyaXB0PU5vbmUsIHRvb2w9Tm9uZSwgZ3JvdXA9Tm9uZSwgdHlwZT1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7CgogICAgICAgICNwcmludCgnTWFwcGluZzo6X19pbml0X18oKScpOwogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLklkID0gSWQ7CgogICAgICAgIAogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7CiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOwogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOwogICAgICAgIHNlbGYuY2xhc3NOYW1lKGNsYXNzTmFtZSk7CiAgICAgICAgc2VsZi5zY29wZShzY29wZSk7CiAgICAgICAgc2VsZi5jb250ZXh0KGNvbnRleHQpOwogICAgICAgIHNlbGYuc291cmNlKHNvdXJjZSk7CiAgICAgICAgc2VsZi50YXJnZXQodGFyZ2V0KTsKICAgICAgICBzZWxmLm9wZXJhdG9yKG9wZXJhdG9yKTsKICAgICAgICBzZWxmLmluU2NyaXB0KGluU2NyaXB0KTsKICAgICAgICBzZWxmLm91dFNjcmlwdChvdXRTY3JpcHQpOwogICAgICAgIHNlbGYudG9vbCh0b29sKTsKICAgICAgICBzZWxmLmdyb3VwKGdyb3VwKTsKICAgICAgICBzZWxmLnR5cGUodHlwZSk7CiAgICAgICAgCiAgICBJZCA9IE5vbmU7CiAgICAKICAgIAogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9hY3RpdmUgPSBOb25lOwogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsKICAgIAogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfZW5hYmxlZCA9IE5vbmU7CiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOwogICAgCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzCiAgICBfb3JkZXIgPSBOb25lOwogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsKICAgIAogICAgIyBjbGFzc05hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9jbGFzc05hbWUgPSBOb25lOwogICAgZGVmIGNsYXNzTmFtZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fY2xhc3NOYW1lID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NsYXNzTmFtZTsKICAgIAogICAgIyBzY29wZTogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX3Njb3BlID0gTm9uZTsKICAgIGRlZiBzY29wZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fc2NvcGUgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fc2NvcGU7CiAgICAKICAgICMgY29udGV4dDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX2NvbnRleHQgPSBOb25lOwogICAgZGVmIGNvbnRleHQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2NvbnRleHQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29udGV4dDsKICAgIAogICAgIyBzb3VyY2U6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9zb3VyY2UgPSBOb25lOwogICAgZGVmIHNvdXJjZShzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fc291cmNlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3NvdXJjZTsKICAgIAogICAgIyB0YXJnZXQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF90YXJnZXQgPSBOb25lOwogICAgZGVmIHRhcmdldChzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fdGFyZ2V0ID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3RhcmdldDsKICAgIAogICAgIyBvcGVyYXRvcjogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX29wZXJhdG9yID0gTm9uZTsKICAgIGRlZiBvcGVyYXRvcihzZWxmLCAqYXJncyk6CiAgICAgICAgaWYgYXJnczoKICAgICAgICAgICAgc2VsZi5fb3BlcmF0b3IgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3BlcmF0b3I7CiAgICAKICAgICMgaW5TY3JpcHQ6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9pblNjcmlwdCA9IE5vbmU7CiAgICBkZWYgaW5TY3JpcHQoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2luU2NyaXB0ID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2luU2NyaXB0OwogICAgCiAgICAjIG91dFNjcmlwdDogR2V0dGVycyBhbmQgU2V0dGVycwogICAgX291dFNjcmlwdCA9IE5vbmU7CiAgICBkZWYgb3V0U2NyaXB0KHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl9vdXRTY3JpcHQgPSBhcmdzWzBdOwogICAgICAgICAgICByZXR1cm4gc2VsZjsKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3V0U2NyaXB0OwogICAgCiAgICAjIHRvb2w6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF90b29sID0gTm9uZTsKICAgIGRlZiB0b29sKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90b29sID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Rvb2w7CiAgICAKICAgICMgZ3JvdXA6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF9ncm91cCA9IE5vbmU7CiAgICBkZWYgZ3JvdXAoc2VsZiwgKmFyZ3MpOgogICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgIHNlbGYuX2dyb3VwID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dyb3VwOwogICAgCiAgICAjIHR5cGU6IEdldHRlcnMgYW5kIFNldHRlcnMKICAgIF90eXBlID0gTm9uZTsKICAgIGRlZiB0eXBlKHNlbGYsICphcmdzKToKICAgICAgICBpZiBhcmdzOgogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7CiAgICAKICAgIAogICAgCiAgICAKICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6CiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nOjpfZnJvbURvY3VtZW50KCk6ICc7CiAgICAgICAgCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmOwoKICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOgogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsKCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoKICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHModXJsbGliMy5Qb29sTWFuYWdlcigpLnJlcXVlc3QoJ0dFVCcsIG9iaikuZGF0YS5kZWNvZGUoJ3V0Zi04JykpOwogICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOwogICAgICAgIAogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToKICAgICAgICAgICAgcmV0dXJuIFtNYXBwaW5nKCkuX2Zyb21Eb2N1bWVudChvKSBmb3IgbyBpbiBvYmpdOwogICAgICAgICAgICAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAndW5oYW5kbGVkIHR5cGU6ICcgKyBzdHIodHlwZShvYmopKSk7CiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIGlmICdJZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOwoKICAgIAogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdjbGFzc05hbWUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jbGFzc05hbWUob2JqWydjbGFzc05hbWUnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAnc2NvcGUnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5zY29wZShvYmpbJ3Njb3BlJ10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2NvbnRleHQnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5jb250ZXh0KG9ialsnY29udGV4dCddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdzb3VyY2UnIGluIG9iajoKICAgICAgICAgICAgc2VsZi5zb3VyY2Uob2JqWydzb3VyY2UnXSk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiAndGFyZ2V0JyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudGFyZ2V0KG9ialsndGFyZ2V0J10pOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ29wZXJhdG9yJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYub3BlcmF0b3Iob2JqWydvcGVyYXRvciddKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICdpblNjcmlwdCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLmluU2NyaXB0KG9ialsnaW5TY3JpcHQnXSk7CiAgICAgICAgCiAgICAgICAgICAgIHNlbGYuaW5TY3JpcHQoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5pblNjcmlwdCgpKSApOwogICAgICAgICAgICBpZihzZWxmLmluU2NyaXB0KCkpIHNlbGYuaW5TY3JpcHQoc3RyKHNlbGYuaW5TY3JpcHQoKSwgInV0Zi04IikpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ291dFNjcmlwdCcgaW4gb2JqOgogICAgICAgICAgICBzZWxmLm91dFNjcmlwdChvYmpbJ291dFNjcmlwdCddKTsKICAgICAgICAKICAgICAgICAgICAgc2VsZi5vdXRTY3JpcHQoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5vdXRTY3JpcHQoKSkgKTsKICAgICAgICAgICAgaWYoc2VsZi5vdXRTY3JpcHQoKSkgc2VsZi5vdXRTY3JpcHQoc3RyKHNlbGYub3V0U2NyaXB0KCksICJ1dGYtOCIpKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICd0b29sJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudG9vbChUb29sKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3Rvb2wnXSkpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgJ2dyb3VwJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYuZ3JvdXAoQ29uZmlnX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2dyb3VwJ10pKTsKICAgICAgICAKICAgIAogICAgICAgIGlmICd0eXBlJyBpbiBvYmo6CiAgICAgICAgICAgIHNlbGYudHlwZShUb29sX1R5cGUoKS5fZnJvbURvY3VtZW50KG9ialsndHlwZSddKSk7CiAgICAgICAgCiAgICAKCiAgICAKCiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiBzZWxmOwogICAgCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nOjpfdG9Eb2N1bWVudCgpOiAnOwoKICAgICAgICByZXQgPSB7fTsKICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOwoKICAgIAogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuY2xhc3NOYW1lKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsiY2xhc3NOYW1lIl0gPSBzZWxmLmNsYXNzTmFtZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi5zY29wZSgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXRbInNjb3BlIl0gPSBzZWxmLnNjb3BlKCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLmNvbnRleHQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJjb250ZXh0Il0gPSBzZWxmLmNvbnRleHQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuc291cmNlKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsic291cmNlIl0gPSBzZWxmLnNvdXJjZSgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi50YXJnZXQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJ0YXJnZXQiXSA9IHNlbGYudGFyZ2V0KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLm9wZXJhdG9yKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3BlcmF0b3IiXSA9IHNlbGYub3BlcmF0b3IoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuaW5TY3JpcHQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJpblNjcmlwdCJdID0gc2VsZi5pblNjcmlwdCgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiaW5TY3JpcHQiXSwgZGljdCk6CiAgICAgICAgICAgICAgICByZXRbImluU2NyaXB0Il0gPSBqc29uLmR1bXBzKHJldFsiaW5TY3JpcHQiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJpblNjcmlwdCJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJpblNjcmlwdCJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYub3V0U2NyaXB0KCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsib3V0U2NyaXB0Il0gPSBzZWxmLm91dFNjcmlwdCgpOwogICAgICAgIAogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsib3V0U2NyaXB0Il0sIGRpY3QpOgogICAgICAgICAgICAgICAgcmV0WyJvdXRTY3JpcHQiXSA9IGpzb24uZHVtcHMocmV0WyJvdXRTY3JpcHQiXSkuZW5jb2RlKCd1dGYtOCcpOwoKICAgICAgICAgICAgcmV0WyJvdXRTY3JpcHQiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsib3V0U2NyaXB0Il0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOwogICAgICAgIAogICAgCiAgICAgICAgaWYgc2VsZi50b29sKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldFsidG9vbCJdID0gc2VsZi50b29sKCkuX3RvRG9jdW1lbnQoKTsKICAgICAgICAKICAgIAogICAgICAgIGlmIHNlbGYuZ3JvdXAoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJncm91cCJdID0gc2VsZi5ncm91cCgpLl90b0RvY3VtZW50KCk7CiAgICAgICAgCiAgICAKICAgICAgICBpZiBzZWxmLnR5cGUoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0WyJ0eXBlIl0gPSBzZWxmLnR5cGUoKS5fdG9Eb2N1bWVudCgpOwogICAgICAgIAogICAgCiAgICAgICAgCiAgICAKCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOwogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7CiAgICAgICAgZ2MuY29sbGVjdCgpOwogICAgICAgIHJldHVybiByZXQ7CgogICAgCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToKICAgICAgICBfX3RvU3RyaW5nID0gJ01hcHBpbmc6OnN0b3JlKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWFwcGluZy5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTWFwcGluZycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOgogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOwogICAgICAgIAogICAgICAgIGdjLmNvbGxlY3QoKTsKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOwoKICAgICAgICAKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsKICAgICAgICAKICAgICAgICAgICAgYW5zd2VyID0gTWFwcGluZygpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsKICAgICAgICAKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOwoKCgoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOwogICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOwogICAgICAgICAgICAKCiAgICAgICAgcmV0dXJuIGFuc3dlcjsKCiAgICAKICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6CiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nOjpmaW5kQWxsKCk6ICc7CiAgICAgICAgCiAgICAgICAgZXZKU09OID0gTm9uZTsKCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7CiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoKICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsKICAgICAgICAKCiAgICAgICAgYW5zd2VyID0gTm9uZTsKCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWFwcGluZy5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ01hcHBpbmcnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7CiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToKICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsKICAgICAgICAKICAgICAgICBnYy5jb2xsZWN0KCk7CgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsKCiAgICAgICAgCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7CiAgICAgICAgCiAgICAgICAgICAgIGFuc3dlciA9IE1hcHBpbmcoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7CiAgICAgICAgCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsKCgoKCgogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsKICAgICAgICAgICAgCgogICAgICAgIHJldHVybiBhbnN3ZXI7CgogICAgCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOgogICAgICAgIF9fdG9TdHJpbmcgPSAnTWFwcGluZzo6ZmluZCgpOiAnOwogICAgICAgIAogICAgICAgIGV2SlNPTiA9IE5vbmU7CgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOwogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046CiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7CiAgICAgICAgCgogICAgICAgIGFuc3dlciA9IE5vbmU7CgogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1hcHBpbmcuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdNYXBwaW5nJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOwogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7CiAgICAgICAgCiAgICAgICAgZ2MuY29sbGVjdCgpOwoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7CgogICAgICAgIAogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOwogICAgICAgIAogICAgICAgICAgICBhbnN3ZXIgPSBNYXBwaW5nKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOwogICAgICAgIAoKCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7CgoKCgoKICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToKICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7CiAgICAgICAgICAgIAoKICAgICAgICByZXR1cm4gYW5zd2VyOwoKICAgIAoKCgoKCiAgICAKbmNvZGUgPSBoZXgodXVpZC5nZXRub2RlKCkpOwogICAgCgpub2RlID0gTm9kZShjb2RlPW5jb2RlLCBwYXJlbnQ9Tm9kZShjb2RlPSdhcGlzZXJ2ZXIvZXNwdGVzdC9tYXN0ZXInKSk7CgoKIyMjIyMjIyMjIyMgTVFUVCBDb25uZWN0aW9uICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCnByaW50KCdtYWluKCknLCAiQ29ubmVjdGluZyB0byBNUVRUIHNlcnZlciIsICIuLi4gIiwgZW5kPSIiKTsKbXF0dF90b3BpYyA9ICdhcGlzZXJ2ZXIvZXNwdGVzdCc7CgptcXR0X2NsaWVudCA9IHBhaG8ubXF0dC5jbGllbnQuQ2xpZW50KGNhbGxiYWNrX2FwaV92ZXJzaW9uPXBhaG8ubXF0dC5jbGllbnQuQ2FsbGJhY2tBUElWZXJzaW9uLlZFUlNJT04yLCBjbGllbnRfaWQ9bXF0dF90b3BpYysnLycrbm9kZS5jb2RlKCksIHRyYW5zcG9ydD0ndGNwJyk7CgptcXR0X2NsaWVudC5vbl9tZXNzYWdlID0gbGFtYmRhIGNsaWVudCwgdXNlcmRhdGEsIG9Nc2cgOiBFdmVudCgpLl9mcm9tRG9jdW1lbnQob01zZy5wYXlsb2FkKS5wcm9jZXNzKCk7Cm1xdHRfY2xpZW50LmNvbm5lY3QoJ3Rlc3QubW9zcXVpdHRvLm9yZycpOwoKCm1xdHRfY2xpZW50LnN1YnNjcmliZShtcXR0X3RvcGljKTsKcHJpbnQoIkNvbm5lY3RlZCEiKTsKIyMjIyMjIyMjIyMgTVFUVCBDb25uZWN0aW9uICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgoKIyMjIyMjIyMjIyBDSEVDSyBGT1IgVVBEQVRFUyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCmJhc2VfdXJsID0gImh0dHBzOi8vYXJ6aG9zcGl0YWwuZ2l0aHViLmlvL2VzcHRlc3QvTm9kZV9UeXBlL1B5dGhvbi5qc29uIjsKdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9bGFtYmRhIDogTm9kZV9UeXBlKCkubmFtZSgiUHl0aG9uIikuZGF0ZShkYXRldGltZS5kYXRldGltZS5ub3coZGF0ZXRpbWUudGltZXpvbmUudXRjKSkuZmluZCgpKS5zdGFydCgpOwojIyMjIyMjIyMjIENIRUNLIEZPUiBVUERBVEVTICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgpub2RlLnN0b3JlKCk7CgpwcmludCgnbWFpbigpJywgJ2xvb3BpbmcgZm9yIG1xdHQgZXZlbnRzJyk7CgptcXR0X2NsaWVudC5sb29wX2ZvcmV2ZXIoKTsKCgo=",
	"__keys": ["name"],
	"__trMap": []
}