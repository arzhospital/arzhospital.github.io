{
	"Id": "1074a287f082dc774bea2c6e43906edf01949ff9",
	"active": "true",
	"enabled": "true",
	"code": "python",
	"date": "2024-10-05T15:29:02.905Z",
	"name": "Python",
	"remark": "",
	"__keys": ["name"],
	"__trMap": []
}