{
	"Id": "d03d91204ac319d7a23372ac4df962e19d2febed",
	"active": "true",
	"enabled": "true",
	"code": "python",
	"date": "2024-10-02T06:44:53.327Z",
	"name": "Python",
	"remark": "I2ltcG9ydCB1cmxsaWIucmVxdWVzdCwganNvbiwgYmFzZTY0Ow0KI2V4ZWMoYmFzZTY0LmI2NGRlY29kZShqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbigiaHR0cHM6Ly9hcnpob3NwaXRhbC5naXRodWIuaW8vZXNwdGVzdC9Ob2RlX1R5cGUvUHl0aG9uLmpzb24iKSlbInJlbWFyayJdKSk7DQoNCiMgaW1wb3J0IHJlcXVlc3RzLCB1YmluYXNjaWksIHVqc29uOw0KIyBleGVjKHViaW5hc2NpaS5hMmJfYmFzZTY0KHVqc29uLmxvYWRzKHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcnpob3NwaXRhbC5naXRodWIuaW8vZXNwdGVzdC9Ob2RlX1R5cGUvTWljcm9QeXRob24uanNvbiIpLnRleHQpWyJyZW1hcmsiXSkpOw0KDQppbXBvcnQgcGFoby5tcXR0LmNsaWVudCxqc29uLHpsaWIsdXVpZCx0aW1lLGdjLGlvLGRhdGV0aW1lLHJlLHRocmVhZGluZzsNCg0KDQpjbGFzcyBVc2VyKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCB1c2VybmFtZT1Ob25lLCBwYXNzd29yZD1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnVXNlcjo6X19pbml0X18oKScpOw0KICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsNCg0KICAgICAgICANCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsNCiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOw0KICAgICAgICBzZWxmLmNvZGUoY29kZSk7DQogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOw0KICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7DQogICAgICAgIHNlbGYubmFtZShuYW1lKTsNCiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsNCiAgICAgICAgc2VsZi51c2VybmFtZSh1c2VybmFtZSk7DQogICAgICAgIHNlbGYucGFzc3dvcmQocGFzc3dvcmQpOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgICMgdXNlcm5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfdXNlcm5hbWUgPSBOb25lOw0KICAgIGRlZiB1c2VybmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl91c2VybmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl91c2VybmFtZTsNCg0KDQogICAgDQogICAgIyBwYXNzd29yZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9wYXNzd29yZCA9IE5vbmU7DQogICAgZGVmIHBhc3N3b3JkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3Bhc3N3b3JkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Bhc3N3b3JkOw0KDQoNCiAgICANCiAgICANCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ1VzZXI6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBVc2VyKCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndXNlcm5hbWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYudXNlcm5hbWUob2JqWyd1c2VybmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdwYXNzd29yZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5wYXNzd29yZChvYmpbJ3Bhc3N3b3JkJ10pOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdVc2VyOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYudXNlcm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsidXNlcm5hbWUiXSA9IHNlbGYudXNlcm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucGFzc3dvcmQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicGFzc3dvcmQiXSA9IHNlbGYucGFzc3dvcmQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdVc2VyOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlVzZXIuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ1VzZXInKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBVc2VyKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ1VzZXI6OmZpbmRBbGwoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Vc2VyLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnVXNlcicpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IFVzZXIoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnVXNlcjo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlVzZXIuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdVc2VyJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gVXNlcigpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGluaXQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdVc2VyOjppbml0KCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uVXNlci5pbml0KCknKS5tZXRob2QoJ2luaXQnKS5jbGFzc05hbWUoJ1VzZXInKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBldkpTT047DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoc3RyKGFuc3dlcikpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIEFjdGlvbl9FeGVjdXRpb24oKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIGRldmljZT1Ob25lLCBhY3Rpb249Tm9uZSwgcmVzdWx0PU5vbmUsIGNvbXBsZXRlZD1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnQWN0aW9uX0V4ZWN1dGlvbjo6X19pbml0X18oKScpOw0KICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsNCg0KICAgICAgICANCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsNCiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOw0KICAgICAgICBzZWxmLmNvZGUoY29kZSk7DQogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOw0KICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7DQogICAgICAgIHNlbGYubmFtZShuYW1lKTsNCiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsNCiAgICAgICAgc2VsZi5kZXZpY2UoZGV2aWNlKTsNCiAgICAgICAgc2VsZi5hY3Rpb24oYWN0aW9uKTsNCiAgICAgICAgc2VsZi5yZXN1bHQocmVzdWx0KTsNCiAgICAgICAgc2VsZi5jb21wbGV0ZWQoY29tcGxldGVkKTsNCiAgICAgICAgDQogICAgSWQgPSBOb25lOw0KICAgIA0KICAgIA0KICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2FjdGl2ZSA9IE5vbmU7DQogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOw0KDQoNCiAgICANCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZW5hYmxlZCA9IE5vbmU7DQogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOw0KDQoNCiAgICANCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfY29kZSA9IE5vbmU7DQogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOw0KDQoNCiAgICANCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX29yZGVyID0gTm9uZTsNCiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7DQoNCg0KICAgIA0KICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kYXRlID0gTm9uZTsNCiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7DQoNCg0KICAgIA0KICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9uYW1lID0gTm9uZTsNCiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7DQoNCg0KICAgIA0KICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3JlbWFyayA9IE5vbmU7DQogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOw0KDQoNCiAgICANCiAgICAjIGRldmljZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kZXZpY2UgPSBOb25lOw0KICAgIGRlZiBkZXZpY2Uoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGV2aWNlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RldmljZTsNCg0KDQogICAgDQogICAgIyBhY3Rpb246IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aW9uID0gTm9uZTsNCiAgICBkZWYgYWN0aW9uKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGlvbiA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3Rpb247DQoNCg0KICAgIA0KICAgICMgcmVzdWx0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3Jlc3VsdCA9IE5vbmU7DQogICAgZGVmIHJlc3VsdChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZXN1bHQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVzdWx0Ow0KDQoNCiAgICANCiAgICAjIGNvbXBsZXRlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb21wbGV0ZWQgPSBOb25lOw0KICAgIGRlZiBjb21wbGV0ZWQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY29tcGxldGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvbXBsZXRlZDsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdBY3Rpb25fRXhlY3V0aW9uOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gQWN0aW9uX0V4ZWN1dGlvbigpLl9mcm9tRG9jdW1lbnQob2JqW2ldKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQoNCg0KICAgICAgICBpZiAnSWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107DQoNCiAgICANCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RldmljZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5kZXZpY2UoRGV2aWNlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2RldmljZSddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnYWN0aW9uJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGlvbihEZXZpY2VfQWN0aW9uKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2FjdGlvbiddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVzdWx0JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnJlc3VsdChvYmpbJ3Jlc3VsdCddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnJlc3VsdCggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlc3VsdCgpKSApOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvbXBsZXRlZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb21wbGV0ZWQob2JqWydjb21wbGV0ZWQnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5jb21wbGV0ZWQoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmNvbXBsZXRlZCgpKSk7DQogICAgICAgIA0KICAgIA0KDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgDQogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0FjdGlvbl9FeGVjdXRpb246Ol90b0RvY3VtZW50KCk6ICc7DQoNCiAgICAgICAgcmV0ID0ge307DQogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOw0KDQogICAgDQogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kZXZpY2UoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGV2aWNlIl0gPSBzZWxmLmRldmljZSgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGlvbigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3Rpb24iXSA9IHNlbGYuYWN0aW9uKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVzdWx0KCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlc3VsdCJdID0gc2VsZi5yZXN1bHQoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVzdWx0Il0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVzdWx0Il0gPSBqc29uLmR1bXBzKHJldFsicmVzdWx0Il0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZXN1bHQiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVzdWx0Il0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb21wbGV0ZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29tcGxldGVkIl0gPSBzZWxmLmNvbXBsZXRlZCgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJjb21wbGV0ZWQiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiY29tcGxldGVkIl0gPSByZXRbImNvbXBsZXRlZCJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgDQogICAgICAgIGlmIGJKU09OIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7DQogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7DQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgIA0KICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0FjdGlvbl9FeGVjdXRpb246OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQWN0aW9uX0V4ZWN1dGlvbi5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnQWN0aW9uX0V4ZWN1dGlvbicpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IEFjdGlvbl9FeGVjdXRpb24oKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnQWN0aW9uX0V4ZWN1dGlvbjo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkFjdGlvbl9FeGVjdXRpb24uZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdBY3Rpb25fRXhlY3V0aW9uJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gQWN0aW9uX0V4ZWN1dGlvbigpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdBY3Rpb25fRXhlY3V0aW9uOjpmaW5kKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQWN0aW9uX0V4ZWN1dGlvbi5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0FjdGlvbl9FeGVjdXRpb24nKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBBY3Rpb25fRXhlY3V0aW9uKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCgogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImNvbXBsZXRlZD0iK2Fuc3dlci5jb21wbGV0ZWQoKSk7CiAgICAgICAgICAgICMgaWYgYW5kIGFuc3dlci5yZXN1bHQoKSBpcyBOb25lIGFuZCBhbnN3ZXIuY29tcGxldGVkKCkgaXMgTm9uZSBhbmQgYW5zd2VyLmFjdGlvbigpLnNjcmlwdCgpIGlzIG5vdCBOb25lCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgYW5zd2VyLmFjdGlvbigpLmNvZGUoKSArICcgaXMgZXhlY3V0aW5nJyk7CgkgICAgDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIERldmljZV9BY3Rpb24oKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIHNjcmlwdD1Ob25lLCB0eXBlPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdEZXZpY2VfQWN0aW9uOjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICBzZWxmLnNjcmlwdChzY3JpcHQpOw0KICAgICAgICBzZWxmLnR5cGUodHlwZSk7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgIyBzY3JpcHQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfc2NyaXB0ID0gTm9uZTsNCiAgICBkZWYgc2NyaXB0KHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3NjcmlwdCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zY3JpcHQ7DQoNCg0KICAgIA0KICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF90eXBlID0gTm9uZTsNCiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlX0FjdGlvbjo6X2Zyb21Eb2N1bWVudCgpOiAnOw0KICAgICAgICANCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCg0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOg0KICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7DQogICAgICAgIA0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOg0KICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZCh1cmxsaWIucmVxdWVzdC51cmxvcGVuKG9iaikpOw0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7DQogICAgICAgIA0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ0dPVCBIRVJFOiAnICsgc3RyKHR5cGUob2JqKSkpOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIGkgaW4gb2JqOg0KICAgICAgICAgICAgICAgIG9ialtpXSA9IERldmljZV9BY3Rpb24oKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdzY3JpcHQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuc2NyaXB0KG9ialsnc2NyaXB0J10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuc2NyaXB0KCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYuc2NyaXB0KCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndHlwZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi50eXBlKERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGUnXSkpOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfQWN0aW9uOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuc2NyaXB0KCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInNjcmlwdCJdID0gc2VsZi5zY3JpcHQoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsic2NyaXB0Il0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsic2NyaXB0Il0gPSBqc29uLmR1bXBzKHJldFsic2NyaXB0Il0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJzY3JpcHQiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsic2NyaXB0Il0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi50eXBlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInR5cGUiXSA9IHNlbGYudHlwZSgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlX0FjdGlvbjo6c3RvcmUoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2VfQWN0aW9uLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdEZXZpY2VfQWN0aW9uJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlX0FjdGlvbigpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfQWN0aW9uOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlX0FjdGlvbi5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ0RldmljZV9BY3Rpb24nKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBEZXZpY2VfQWN0aW9uKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9BY3Rpb246OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2VfQWN0aW9uLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnRGV2aWNlX0FjdGlvbicpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZV9BY3Rpb24oKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIERldmljZSgpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdHlwZT1Ob25lLCBjb250cm9sbGVyPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdEZXZpY2U6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIHNlbGYudHlwZSh0eXBlKTsNCiAgICAgICAgc2VsZi5jb250cm9sbGVyKGNvbnRyb2xsZXIpOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF90eXBlID0gTm9uZTsNCiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7DQoNCg0KICAgIA0KICAgICMgY29udHJvbGxlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb250cm9sbGVyID0gTm9uZTsNCiAgICBkZWYgY29udHJvbGxlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb250cm9sbGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvbnRyb2xsZXI7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gRGV2aWNlKCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndHlwZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi50eXBlKERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGUnXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvbnRyb2xsZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29udHJvbGxlcihOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2NvbnRyb2xsZXInXSkpOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2U6Ol90b0RvY3VtZW50KCk6ICc7DQoNCiAgICAgICAgcmV0ID0ge307DQogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOw0KDQogICAgDQogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi50eXBlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInR5cGUiXSA9IHNlbGYudHlwZSgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvbnRyb2xsZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29udHJvbGxlciJdID0gc2VsZi5jb250cm9sbGVyKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2U6OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdEZXZpY2UnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBEZXZpY2UoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnRGV2aWNlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZTo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkRldmljZS5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0RldmljZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgRGV2aWNlX0NhdGVnb3J5KCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCBwYXJlbnQ9Tm9uZSk6DQogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsNCg0KICAgICAgICAjcHJpbnQoJ0RldmljZV9DYXRlZ29yeTo6X19pbml0X18oKScpOw0KICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsNCg0KICAgICAgICANCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsNCiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOw0KICAgICAgICBzZWxmLmNvZGUoY29kZSk7DQogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOw0KICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7DQogICAgICAgIHNlbGYubmFtZShuYW1lKTsNCiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsNCiAgICAgICAgc2VsZi5wYXJlbnQocGFyZW50KTsNCiAgICAgICAgDQogICAgSWQgPSBOb25lOw0KICAgIA0KICAgIA0KICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2FjdGl2ZSA9IE5vbmU7DQogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOw0KDQoNCiAgICANCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZW5hYmxlZCA9IE5vbmU7DQogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOw0KDQoNCiAgICANCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfY29kZSA9IE5vbmU7DQogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOw0KDQoNCiAgICANCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX29yZGVyID0gTm9uZTsNCiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7DQoNCg0KICAgIA0KICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kYXRlID0gTm9uZTsNCiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7DQoNCg0KICAgIA0KICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9uYW1lID0gTm9uZTsNCiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7DQoNCg0KICAgIA0KICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3JlbWFyayA9IE5vbmU7DQogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOw0KDQoNCiAgICANCiAgICAjIHBhcmVudDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9wYXJlbnQgPSBOb25lOw0KICAgIGRlZiBwYXJlbnQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcGFyZW50ID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3BhcmVudDsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfQ2F0ZWdvcnk6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBEZXZpY2VfQ2F0ZWdvcnkoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdwYXJlbnQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucGFyZW50KG9ialsncGFyZW50J10pOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfQ2F0ZWdvcnk6Ol90b0RvY3VtZW50KCk6ICc7DQoNCiAgICAgICAgcmV0ID0ge307DQogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOw0KDQogICAgDQogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5wYXJlbnQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicGFyZW50Il0gPSBzZWxmLnBhcmVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgDQogICAgICAgIGlmIGJKU09OIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7DQogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7DQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgIA0KICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9DYXRlZ29yeTo6c3RvcmUoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2VfQ2F0ZWdvcnkuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ0RldmljZV9DYXRlZ29yeScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZV9DYXRlZ29yeSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdEZXZpY2VfQ2F0ZWdvcnk6OmZpbmRBbGwoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5EZXZpY2VfQ2F0ZWdvcnkuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdEZXZpY2VfQ2F0ZWdvcnknKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBEZXZpY2VfQ2F0ZWdvcnkoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlX0NhdGVnb3J5OjpmaW5kKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlX0NhdGVnb3J5LmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnRGV2aWNlX0NhdGVnb3J5JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRGV2aWNlX0NhdGVnb3J5KCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCg0KDQpjbGFzcyBEZXZpY2VfVHlwZSgpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgY2F0ZWdvcnk9Tm9uZSk6DQogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsNCg0KICAgICAgICAjcHJpbnQoJ0RldmljZV9UeXBlOjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICBzZWxmLmNhdGVnb3J5KGNhdGVnb3J5KTsNCiAgICAgICAgDQogICAgSWQgPSBOb25lOw0KICAgIA0KICAgIA0KICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2FjdGl2ZSA9IE5vbmU7DQogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOw0KDQoNCiAgICANCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZW5hYmxlZCA9IE5vbmU7DQogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOw0KDQoNCiAgICANCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfY29kZSA9IE5vbmU7DQogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOw0KDQoNCiAgICANCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX29yZGVyID0gTm9uZTsNCiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7DQoNCg0KICAgIA0KICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kYXRlID0gTm9uZTsNCiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7DQoNCg0KICAgIA0KICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9uYW1lID0gTm9uZTsNCiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7DQoNCg0KICAgIA0KICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3JlbWFyayA9IE5vbmU7DQogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOw0KDQoNCiAgICANCiAgICAjIGNhdGVnb3J5OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NhdGVnb3J5ID0gTm9uZTsNCiAgICBkZWYgY2F0ZWdvcnkoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY2F0ZWdvcnkgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY2F0ZWdvcnk7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRGV2aWNlX1R5cGU6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBEZXZpY2VfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqW2ldKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQoNCg0KICAgICAgICBpZiAnSWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107DQoNCiAgICANCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NhdGVnb3J5JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNhdGVnb3J5KERldmljZV9DYXRlZ29yeSgpLl9mcm9tRG9jdW1lbnQob2JqWydjYXRlZ29yeSddKSk7DQogICAgICAgIA0KICAgIA0KDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgDQogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9UeXBlOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY2F0ZWdvcnkoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY2F0ZWdvcnkiXSA9IHNlbGYuY2F0ZWdvcnkoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgDQogICAgICAgIGlmIGJKU09OIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7DQogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7DQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgIA0KICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9UeXBlOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkRldmljZV9UeXBlLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdEZXZpY2VfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9UeXBlOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlX1R5cGUuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdEZXZpY2VfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0RldmljZV9UeXBlOjpmaW5kKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRGV2aWNlX1R5cGUuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdEZXZpY2VfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IERldmljZV9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCg0KDQpjbGFzcyBNZXRyaWNfR3JvdXAoKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdNZXRyaWNfR3JvdXA6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfR3JvdXA6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQoNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gc2VsZjsNCiAgICANCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX0dyb3VwOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfR3JvdXA6OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWV0cmljX0dyb3VwLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdNZXRyaWNfR3JvdXAnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX0dyb3VwOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWV0cmljX0dyb3VwLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTWV0cmljX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTWV0cmljX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19Hcm91cDo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19Hcm91cC5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ01ldHJpY19Hcm91cCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpY19Hcm91cCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgTWV0cmljX1R5cGUoKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUsIGdyb3VwPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdNZXRyaWNfVHlwZTo6X19pbml0X18oKScpOw0KICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsNCg0KICAgICAgICANCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsNCiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOw0KICAgICAgICBzZWxmLmNvZGUoY29kZSk7DQogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOw0KICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7DQogICAgICAgIHNlbGYubmFtZShuYW1lKTsNCiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsNCiAgICAgICAgc2VsZi5ncm91cChncm91cCk7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgIyBncm91cDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9ncm91cCA9IE5vbmU7DQogICAgZGVmIGdyb3VwKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2dyb3VwID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dyb3VwOw0KDQoNCiAgICANCiAgICANCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19UeXBlOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gTWV0cmljX1R5cGUoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdncm91cCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5ncm91cChNZXRyaWNfR3JvdXAoKS5fZnJvbURvY3VtZW50KG9ialsnZ3JvdXAnXSkpOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVHlwZTo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToNCiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmdyb3VwKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImdyb3VwIl0gPSBzZWxmLmdyb3VwKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVHlwZTo6c3RvcmUoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWNfVHlwZS5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTWV0cmljX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVHlwZTo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19UeXBlLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTWV0cmljX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVHlwZTo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19UeXBlLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTWV0cmljX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgTWV0cmljX1ZhbHVlKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCB2YWx1ZT1Ob25lLCBtZXRyaWM9Tm9uZSwgZGV2aWNlPU5vbmUsIGNvbnRyb2xsZXI9Tm9uZSwgZXhlY3V0aW9uPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdNZXRyaWNfVmFsdWU6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIHNlbGYudmFsdWUodmFsdWUpOw0KICAgICAgICBzZWxmLm1ldHJpYyhtZXRyaWMpOw0KICAgICAgICBzZWxmLmRldmljZShkZXZpY2UpOw0KICAgICAgICBzZWxmLmNvbnRyb2xsZXIoY29udHJvbGxlcik7DQogICAgICAgIHNlbGYuZXhlY3V0aW9uKGV4ZWN1dGlvbik7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgIyB2YWx1ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF92YWx1ZSA9IE5vbmU7DQogICAgZGVmIHZhbHVlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3ZhbHVlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlOw0KDQoNCiAgICANCiAgICAjIG1ldHJpYzogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9tZXRyaWMgPSBOb25lOw0KICAgIGRlZiBtZXRyaWMoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbWV0cmljID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ldHJpYzsNCg0KDQogICAgDQogICAgIyBkZXZpY2U6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGV2aWNlID0gTm9uZTsNCiAgICBkZWYgZGV2aWNlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RldmljZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kZXZpY2U7DQoNCg0KICAgIA0KICAgICMgY29udHJvbGxlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb250cm9sbGVyID0gTm9uZTsNCiAgICBkZWYgY29udHJvbGxlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb250cm9sbGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvbnRyb2xsZXI7DQoNCg0KICAgIA0KICAgICMgZXhlY3V0aW9uOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2V4ZWN1dGlvbiA9IE5vbmU7DQogICAgZGVmIGV4ZWN1dGlvbihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9leGVjdXRpb24gPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZXhlY3V0aW9uOw0KDQoNCiAgICANCiAgICANCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19WYWx1ZTo6X2Zyb21Eb2N1bWVudCgpOiAnOw0KICAgICAgICANCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCg0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOg0KICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7DQogICAgICAgIA0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOg0KICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZCh1cmxsaWIucmVxdWVzdC51cmxvcGVuKG9iaikpOw0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7DQogICAgICAgIA0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ0dPVCBIRVJFOiAnICsgc3RyKHR5cGUob2JqKSkpOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIGkgaW4gb2JqOg0KICAgICAgICAgICAgICAgIG9ialtpXSA9IE1ldHJpY19WYWx1ZSgpLl9mcm9tRG9jdW1lbnQob2JqW2ldKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQoNCg0KICAgICAgICBpZiAnSWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107DQoNCiAgICANCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3ZhbHVlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnZhbHVlKG9ialsndmFsdWUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbWV0cmljJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm1ldHJpYyhNZXRyaWMoKS5fZnJvbURvY3VtZW50KG9ialsnbWV0cmljJ10pKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkZXZpY2UnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGV2aWNlKERldmljZSgpLl9mcm9tRG9jdW1lbnQob2JqWydkZXZpY2UnXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvbnRyb2xsZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29udHJvbGxlcihOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2NvbnRyb2xsZXInXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2V4ZWN1dGlvbicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5leGVjdXRpb24ob2JqWydleGVjdXRpb24nXSk7DQogICAgICAgIA0KICAgIA0KDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgDQogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19WYWx1ZTo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToNCiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnZhbHVlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInZhbHVlIl0gPSBzZWxmLnZhbHVlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm1ldHJpYygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJtZXRyaWMiXSA9IHNlbGYubWV0cmljKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGV2aWNlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRldmljZSJdID0gc2VsZi5kZXZpY2UoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb250cm9sbGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvbnRyb2xsZXIiXSA9IHNlbGYuY29udHJvbGxlcigpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmV4ZWN1dGlvbigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJleGVjdXRpb24iXSA9IHNlbGYuZXhlY3V0aW9uKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljX1ZhbHVlOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19WYWx1ZS5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTWV0cmljX1ZhbHVlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTWV0cmljX1ZhbHVlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpY19WYWx1ZTo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpY19WYWx1ZS5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ01ldHJpY19WYWx1ZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpY19WYWx1ZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWNfVmFsdWU6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWNfVmFsdWUuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdNZXRyaWNfVmFsdWUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWNfVmFsdWUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIE1ldHJpYygpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdHlwZT1Ob25lLCBkZXZpY2VUeXBlPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdNZXRyaWM6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIHNlbGYudHlwZSh0eXBlKTsNCiAgICAgICAgc2VsZi5kZXZpY2VUeXBlKGRldmljZVR5cGUpOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF90eXBlID0gTm9uZTsNCiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7DQoNCg0KICAgIA0KICAgICMgZGV2aWNlVHlwZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kZXZpY2VUeXBlID0gTm9uZTsNCiAgICBkZWYgZGV2aWNlVHlwZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9kZXZpY2VUeXBlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RldmljZVR5cGU7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gTWV0cmljKCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndHlwZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi50eXBlKE1ldHJpY19UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGUnXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RldmljZVR5cGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGV2aWNlVHlwZShEZXZpY2VfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqWydkZXZpY2VUeXBlJ10pKTsNCiAgICAgICAgDQogICAgDQoNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gc2VsZjsNCiAgICANCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYudHlwZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJ0eXBlIl0gPSBzZWxmLnR5cGUoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kZXZpY2VUeXBlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRldmljZVR5cGUiXSA9IHNlbGYuZGV2aWNlVHlwZSgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWV0cmljOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpYy5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTWV0cmljJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTWV0cmljKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01ldHJpYzo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1ldHJpYy5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ01ldHJpYycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE1ldHJpYygpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNZXRyaWM6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NZXRyaWMuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdNZXRyaWMnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNZXRyaWMoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIENvbmZpZygpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdmFsdWU9Tm9uZSwgc2NyaXB0PU5vbmUsIHRvb2w9Tm9uZSwgZ3JvdXA9Tm9uZSwgdHlwZT1Ob25lLCBub2RlPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdDb25maWc6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIHNlbGYudmFsdWUodmFsdWUpOw0KICAgICAgICBzZWxmLnNjcmlwdChzY3JpcHQpOw0KICAgICAgICBzZWxmLnRvb2wodG9vbCk7DQogICAgICAgIHNlbGYuZ3JvdXAoZ3JvdXApOw0KICAgICAgICBzZWxmLnR5cGUodHlwZSk7DQogICAgICAgIHNlbGYubm9kZShub2RlKTsNCiAgICAgICAgDQogICAgSWQgPSBOb25lOw0KICAgIA0KICAgIA0KICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2FjdGl2ZSA9IE5vbmU7DQogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOw0KDQoNCiAgICANCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZW5hYmxlZCA9IE5vbmU7DQogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOw0KDQoNCiAgICANCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfY29kZSA9IE5vbmU7DQogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOw0KDQoNCiAgICANCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX29yZGVyID0gTm9uZTsNCiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7DQoNCg0KICAgIA0KICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kYXRlID0gTm9uZTsNCiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7DQoNCg0KICAgIA0KICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9uYW1lID0gTm9uZTsNCiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7DQoNCg0KICAgIA0KICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3JlbWFyayA9IE5vbmU7DQogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOw0KDQoNCiAgICANCiAgICAjIHZhbHVlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3ZhbHVlID0gTm9uZTsNCiAgICBkZWYgdmFsdWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fdmFsdWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fdmFsdWU7DQoNCg0KICAgIA0KICAgICMgc2NyaXB0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3NjcmlwdCA9IE5vbmU7DQogICAgZGVmIHNjcmlwdChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9zY3JpcHQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fc2NyaXB0Ow0KDQoNCiAgICANCiAgICAjIHRvb2w6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfdG9vbCA9IE5vbmU7DQogICAgZGVmIHRvb2woc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fdG9vbCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl90b29sOw0KDQoNCiAgICANCiAgICAjIGdyb3VwOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2dyb3VwID0gTm9uZTsNCiAgICBkZWYgZ3JvdXAoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZ3JvdXAgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZ3JvdXA7DQoNCg0KICAgIA0KICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF90eXBlID0gTm9uZTsNCiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7DQoNCg0KICAgIA0KICAgICMgbm9kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9ub2RlID0gTm9uZTsNCiAgICBkZWYgbm9kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9ub2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25vZGU7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndmFsdWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYudmFsdWUob2JqWyd2YWx1ZSddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnZhbHVlKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYudmFsdWUoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdzY3JpcHQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuc2NyaXB0KG9ialsnc2NyaXB0J10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuc2NyaXB0KCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYuc2NyaXB0KCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndG9vbCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi50b29sKFRvb2woKS5fZnJvbURvY3VtZW50KG9ialsndG9vbCddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZ3JvdXAnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZ3JvdXAoQ29uZmlnX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2dyb3VwJ10pKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICd0eXBlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnR5cGUoVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGUnXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ25vZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYubm9kZShOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ25vZGUnXSkpOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdDb25maWc6Ol90b0RvY3VtZW50KCk6ICc7DQoNCiAgICAgICAgcmV0ID0ge307DQogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOw0KDQogICAgDQogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi52YWx1ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJ2YWx1ZSJdID0gc2VsZi52YWx1ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJ2YWx1ZSJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInZhbHVlIl0gPSBqc29uLmR1bXBzKHJldFsidmFsdWUiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInZhbHVlIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInZhbHVlIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5zY3JpcHQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsic2NyaXB0Il0gPSBzZWxmLnNjcmlwdCgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJzY3JpcHQiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJzY3JpcHQiXSA9IGpzb24uZHVtcHMocmV0WyJzY3JpcHQiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInNjcmlwdCJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJzY3JpcHQiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnRvb2woKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsidG9vbCJdID0gc2VsZi50b29sKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZ3JvdXAoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZ3JvdXAiXSA9IHNlbGYuZ3JvdXAoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi50eXBlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInR5cGUiXSA9IHNlbGYudHlwZSgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5vZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibm9kZSJdID0gc2VsZi5ub2RlKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdDb25maWc6OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQ29uZmlnLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdDb25maWcnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBDb25maWcoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQ29uZmlnLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnQ29uZmlnJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gQ29uZmlnKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0NvbmZpZzo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkNvbmZpZy5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0NvbmZpZycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IENvbmZpZygpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgVG9vbCgpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgdHlwZT1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnVG9vbDo6X19pbml0X18oKScpOw0KICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsNCg0KICAgICAgICANCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsNCiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOw0KICAgICAgICBzZWxmLmNvZGUoY29kZSk7DQogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOw0KICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7DQogICAgICAgIHNlbGYubmFtZShuYW1lKTsNCiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsNCiAgICAgICAgc2VsZi50eXBlKHR5cGUpOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgICMgdHlwZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF90eXBlID0gTm9uZTsNCiAgICBkZWYgdHlwZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90eXBlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3R5cGU7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbDo6X2Zyb21Eb2N1bWVudCgpOiAnOw0KICAgICAgICANCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCg0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOg0KICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7DQogICAgICAgIA0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOg0KICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZCh1cmxsaWIucmVxdWVzdC51cmxvcGVuKG9iaikpOw0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7DQogICAgICAgIA0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ0dPVCBIRVJFOiAnICsgc3RyKHR5cGUob2JqKSkpOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIGkgaW4gb2JqOg0KICAgICAgICAgICAgICAgIG9ialtpXSA9IFRvb2woKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICd0eXBlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnR5cGUoVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3R5cGUnXSkpOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdUb29sOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYudHlwZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJ0eXBlIl0gPSBzZWxmLnR5cGUoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgDQogICAgICAgIGlmIGJKU09OIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7DQogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7DQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgIA0KICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2w6OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uVG9vbC5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnVG9vbCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IFRvb2woKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbDo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlRvb2wuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdUb29sJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gVG9vbCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdUb29sOjpmaW5kKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uVG9vbC5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ1Rvb2wnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBUb29sKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCg0KDQpjbGFzcyBDb25maWdfR3JvdXAoKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdDb25maWdfR3JvdXA6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdDb25maWdfR3JvdXA6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBDb25maWdfR3JvdXAoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQoNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gc2VsZjsNCiAgICANCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnX0dyb3VwOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdDb25maWdfR3JvdXA6OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQ29uZmlnX0dyb3VwLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdDb25maWdfR3JvdXAnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBDb25maWdfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnQ29uZmlnX0dyb3VwOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uQ29uZmlnX0dyb3VwLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnQ29uZmlnX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gQ29uZmlnX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0NvbmZpZ19Hcm91cDo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkNvbmZpZ19Hcm91cC5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0NvbmZpZ19Hcm91cCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IENvbmZpZ19Hcm91cCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgTWFwcGluZ19Hcm91cCgpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSk6DQogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsNCg0KICAgICAgICAjcHJpbnQoJ01hcHBpbmdfR3JvdXA6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5jb2RlKGNvZGUpOw0KICAgICAgICBzZWxmLm9yZGVyKG9yZGVyKTsNCiAgICAgICAgc2VsZi5kYXRlKGRhdGUpOw0KICAgICAgICBzZWxmLm5hbWUobmFtZSk7DQogICAgICAgIHNlbGYucmVtYXJrKHJlbWFyayk7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nX0dyb3VwOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gTWFwcGluZ19Hcm91cCgpLl9mcm9tRG9jdW1lbnQob2JqW2ldKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQoNCg0KICAgICAgICBpZiAnSWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107DQoNCiAgICANCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjb2RlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNvZGUob2JqWydjb2RlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ29yZGVyJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm9yZGVyKG9ialsnb3JkZXInXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZGF0ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5kYXRlKG9ialsnZGF0ZSddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLmRhdGUoZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChzZWxmLmRhdGUoKSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ25hbWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYubmFtZShvYmpbJ25hbWUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVtYXJrJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnJlbWFyayhvYmpbJ3JlbWFyayddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnJlbWFyayggYmFzZTY0LmI2NGRlY29kZShzZWxmLnJlbWFyaygpKSApOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nX0dyb3VwOjpfdG9Eb2N1bWVudCgpOiAnOw0KDQogICAgICAgIHJldCA9IHt9Ow0KICAgICAgICBpZiBzZWxmLklkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJJZCJdID0gc2VsZi5JZDsNCg0KICAgIA0KICAgICAgICBpZiBzZWxmLmFjdGl2ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJhY3RpdmUiXSA9IHNlbGYuYWN0aXZlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmVuYWJsZWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZW5hYmxlZCJdID0gc2VsZi5lbmFibGVkKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNvZGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY29kZSJdID0gc2VsZi5jb2RlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9yZGVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm9yZGVyIl0gPSBzZWxmLm9yZGVyKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmRhdGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gc2VsZi5kYXRlKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbImRhdGUiXSwgZGF0ZXRpbWUuZGF0ZXRpbWUpOg0KICAgICAgICAgICAgICAgIHJldFsiZGF0ZSJdID0gcmV0WyJkYXRlIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm5hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsibmFtZSJdID0gc2VsZi5uYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnJlbWFyaygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IHNlbGYucmVtYXJrKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInJlbWFyayJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbInJlbWFyayJdID0ganNvbi5kdW1wcyhyZXRbInJlbWFyayJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbInJlbWFyayJdKS5kZWNvZGUoJ3V0Zi04Jykuc3RyaXAoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nX0dyb3VwOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1hcHBpbmdfR3JvdXAuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ01hcHBpbmdfR3JvdXAnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNYXBwaW5nX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01hcHBpbmdfR3JvdXA6OmZpbmRBbGwoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NYXBwaW5nX0dyb3VwLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTWFwcGluZ19Hcm91cCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE1hcHBpbmdfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWFwcGluZ19Hcm91cDo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk1hcHBpbmdfR3JvdXAuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdNYXBwaW5nX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTWFwcGluZ19Hcm91cCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgVG9vbF9UeXBlKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnVG9vbF9UeXBlOjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbF9UeXBlOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgDQogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2xfVHlwZTo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToNCiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnVG9vbF9UeXBlOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlRvb2xfVHlwZS5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnVG9vbF9UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gVG9vbF9UeXBlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ1Rvb2xfVHlwZTo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLlRvb2xfVHlwZS5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ1Rvb2xfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IFRvb2xfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdUb29sX1R5cGU6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ub29sX1R5cGUuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdUb29sX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBUb29sX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIEV2ZW50KCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCBjbGFzc05hbWU9Tm9uZSwgbWV0aG9kPU5vbmUsIHBheWxvYWQ9Tm9uZSwgY2Fycmllcj1Ob25lLCBzZW5kZXI9Tm9uZSwgcmVjaXBpZW50PU5vbmUsIHJlc3BvbnNlVG89Tm9uZSk6DQogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsNCg0KICAgICAgICAjcHJpbnQoJ0V2ZW50OjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICBzZWxmLmNsYXNzTmFtZShjbGFzc05hbWUpOw0KICAgICAgICBzZWxmLm1ldGhvZChtZXRob2QpOw0KICAgICAgICBzZWxmLnBheWxvYWQocGF5bG9hZCk7DQogICAgICAgIHNlbGYuY2FycmllcihjYXJyaWVyKTsNCiAgICAgICAgc2VsZi5zZW5kZXIoc2VuZGVyKTsNCiAgICAgICAgc2VsZi5yZWNpcGllbnQocmVjaXBpZW50KTsNCiAgICAgICAgc2VsZi5yZXNwb25zZVRvKHJlc3BvbnNlVG8pOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgICMgY2xhc3NOYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NsYXNzTmFtZSA9IE5vbmU7DQogICAgZGVmIGNsYXNzTmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jbGFzc05hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY2xhc3NOYW1lOw0KDQoNCiAgICANCiAgICAjIG1ldGhvZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9tZXRob2QgPSBOb25lOw0KICAgIGRlZiBtZXRob2Qoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbWV0aG9kID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21ldGhvZDsNCg0KDQogICAgDQogICAgIyBwYXlsb2FkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3BheWxvYWQgPSBOb25lOw0KICAgIGRlZiBwYXlsb2FkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3BheWxvYWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcGF5bG9hZDsNCg0KDQogICAgDQogICAgIyBjYXJyaWVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NhcnJpZXIgPSBOb25lOw0KICAgIGRlZiBjYXJyaWVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NhcnJpZXIgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY2FycmllcjsNCg0KDQogICAgDQogICAgIyBzZW5kZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfc2VuZGVyID0gTm9uZTsNCiAgICBkZWYgc2VuZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3NlbmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zZW5kZXI7DQoNCg0KICAgIA0KICAgICMgcmVjaXBpZW50OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3JlY2lwaWVudCA9IE5vbmU7DQogICAgZGVmIHJlY2lwaWVudChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZWNpcGllbnQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVjaXBpZW50Ow0KDQoNCiAgICANCiAgICAjIHJlc3BvbnNlVG86IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVzcG9uc2VUbyA9IE5vbmU7DQogICAgZGVmIHJlc3BvbnNlVG8oc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVzcG9uc2VUbyA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZXNwb25zZVRvOw0KDQoNCiAgICANCiAgICANCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0V2ZW50OjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjbGFzc05hbWUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY2xhc3NOYW1lKG9ialsnY2xhc3NOYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ21ldGhvZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5tZXRob2Qob2JqWydtZXRob2QnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncGF5bG9hZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5wYXlsb2FkKG9ialsncGF5bG9hZCddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLnBheWxvYWQoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5wYXlsb2FkKCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY2FycmllcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jYXJyaWVyKE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsnY2FycmllciddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnc2VuZGVyJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnNlbmRlcihOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3NlbmRlciddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVjaXBpZW50JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnJlY2lwaWVudChOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3JlY2lwaWVudCddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAncmVzcG9uc2VUbycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZXNwb25zZVRvKEV2ZW50KCkuX2Zyb21Eb2N1bWVudChvYmpbJ3Jlc3BvbnNlVG8nXSkpOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdFdmVudDo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToNCiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLmNsYXNzTmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjbGFzc05hbWUiXSA9IHNlbGYuY2xhc3NOYW1lKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm1ldGhvZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJtZXRob2QiXSA9IHNlbGYubWV0aG9kKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnBheWxvYWQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicGF5bG9hZCJdID0gc2VsZi5wYXlsb2FkKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbInBheWxvYWQiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJwYXlsb2FkIl0gPSBqc29uLmR1bXBzKHJldFsicGF5bG9hZCJdKS5lbmNvZGUoJ3V0Zi04Jyk7DQoNCiAgICAgICAgICAgIHJldFsicGF5bG9hZCJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJwYXlsb2FkIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jYXJyaWVyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNhcnJpZXIiXSA9IHNlbGYuY2FycmllcigpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnNlbmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJzZW5kZXIiXSA9IHNlbGYuc2VuZGVyKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVjaXBpZW50KCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlY2lwaWVudCJdID0gc2VsZi5yZWNpcGllbnQoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlc3BvbnNlVG8iXSA9IHNlbGYucmVzcG9uc2VUbygpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRXZlbnQ6OnN0b3JlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uRXZlbnQuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ0V2ZW50JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kQWxsKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRXZlbnQ6OmZpbmRBbGwoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5FdmVudC5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ0V2ZW50JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRXZlbnQ6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5FdmVudC5maW5kKCknKS5tZXRob2QoJ2ZpbmQnKS5jbGFzc05hbWUoJ0V2ZW50JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBsaXN0ZW4oc2VsZiwgX19ldmVudD1Ob25lLCBub2RlPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ0V2ZW50OjpsaXN0ZW4oKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiAnbm9kZScgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIG5vZGUgPSBldkpTT05bJ25vZGUnXTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5FdmVudC5saXN0ZW4oKScpLm1ldGhvZCgnbGlzdGVuJykuY2xhc3NOYW1lKCdFdmVudCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IGV2SlNPTjsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChzdHIoYW5zd2VyKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIHRyaWdnZXIoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdFdmVudDo6dHJpZ2dlcigpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLkV2ZW50LnRyaWdnZXIoKScpLm1ldGhvZCgndHJpZ2dlcicpLmNsYXNzTmFtZSgnRXZlbnQnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBldkpTT047DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KCiAgICAgICAgICAgIHJldHVybiBtcXR0X2NsaWVudC5wdWJsaXNoKG1xdHRfdG9waWMsIHNlbGYuX3RvRG9jdW1lbnQoVHJ1ZSkpOwoJCQ0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHN0cihhbnN3ZXIpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBwcm9jZXNzKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnRXZlbnQ6OnByb2Nlc3MoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5FdmVudC5wcm9jZXNzKCknKS5tZXRob2QoJ3Byb2Nlc3MnKS5jbGFzc05hbWUoJ0V2ZW50JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gRXZlbnQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KCiAgICAgICAgICAgIGlmIHNlbGYuc2VuZGVyKCkuY29kZSgpPT1ub2RlLmNvZGUoKToKICAgICAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiaWdub3JpbmcgbXkgZXZlbnRzIik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGVsaWYgc2VsZi5yZWNpcGllbnQoKS5jb2RlKCkhPW5vZGUuY29kZSgpOgogICAgICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJub3Qgc2VudCB0byBtZSIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIoZ2xvYmFscygpW3NlbGYuY2xhc3NOYW1lKCldKCksIHNlbGYubWV0aG9kKCkpKHNlbGYpOwoJCQ0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCg0KDQpjbGFzcyBOb2RlKCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lLCBhZGRyZXNzPU5vbmUsIGJhY2t1cD1Ob25lLCBwYXJlbnQ9Tm9uZSwgZ3JvdXA9Tm9uZSwgY29udGV4dD1Ob25lLCBwb3J0PU5vbmUsIG9ubGluZT1Ob25lLCBzZWN1cmU9Tm9uZSwgdHlwZT1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnTm9kZTo6X19pbml0X18oKScpOw0KICAgICAgICBpZiBJZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHNlbGYuSWQgPSBJZDsNCg0KICAgICAgICANCiAgICAgICAgc2VsZi5hY3RpdmUoYWN0aXZlKTsNCiAgICAgICAgc2VsZi5lbmFibGVkKGVuYWJsZWQpOw0KICAgICAgICBzZWxmLmNvZGUoY29kZSk7DQogICAgICAgIHNlbGYub3JkZXIob3JkZXIpOw0KICAgICAgICBzZWxmLmRhdGUoZGF0ZSk7DQogICAgICAgIHNlbGYubmFtZShuYW1lKTsNCiAgICAgICAgc2VsZi5yZW1hcmsocmVtYXJrKTsNCiAgICAgICAgc2VsZi5hZGRyZXNzKGFkZHJlc3MpOw0KICAgICAgICBzZWxmLmJhY2t1cChiYWNrdXApOw0KICAgICAgICBzZWxmLnBhcmVudChwYXJlbnQpOw0KICAgICAgICBzZWxmLmdyb3VwKGdyb3VwKTsNCiAgICAgICAgc2VsZi5jb250ZXh0KGNvbnRleHQpOw0KICAgICAgICBzZWxmLnBvcnQocG9ydCk7DQogICAgICAgIHNlbGYub25saW5lKG9ubGluZSk7DQogICAgICAgIHNlbGYuc2VjdXJlKHNlY3VyZSk7DQogICAgICAgIHNlbGYudHlwZSh0eXBlKTsNCiAgICAgICAgDQogICAgSWQgPSBOb25lOw0KICAgIA0KICAgIA0KICAgICMgYWN0aXZlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2FjdGl2ZSA9IE5vbmU7DQogICAgZGVmIGFjdGl2ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9hY3RpdmUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fYWN0aXZlOw0KDQoNCiAgICANCiAgICAjIGVuYWJsZWQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZW5hYmxlZCA9IE5vbmU7DQogICAgZGVmIGVuYWJsZWQoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZW5hYmxlZCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9lbmFibGVkOw0KDQoNCiAgICANCiAgICAjIGNvZGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfY29kZSA9IE5vbmU7DQogICAgZGVmIGNvZGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fY29kZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jb2RlOw0KDQoNCiAgICANCiAgICAjIG9yZGVyOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX29yZGVyID0gTm9uZTsNCiAgICBkZWYgb3JkZXIoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fb3JkZXIgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3JkZXI7DQoNCg0KICAgIA0KICAgICMgZGF0ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9kYXRlID0gTm9uZTsNCiAgICBkZWYgZGF0ZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9kYXRlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RhdGU7DQoNCg0KICAgIA0KICAgICMgbmFtZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9uYW1lID0gTm9uZTsNCiAgICBkZWYgbmFtZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9uYW1lID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWU7DQoNCg0KICAgIA0KICAgICMgcmVtYXJrOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3JlbWFyayA9IE5vbmU7DQogICAgZGVmIHJlbWFyayhzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9yZW1hcmsgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVtYXJrOw0KDQoNCiAgICANCiAgICAjIGFkZHJlc3M6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWRkcmVzcyA9IE5vbmU7DQogICAgZGVmIGFkZHJlc3Moc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWRkcmVzcyA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hZGRyZXNzOw0KDQoNCiAgICANCiAgICAjIGJhY2t1cDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9iYWNrdXAgPSBOb25lOw0KICAgIGRlZiBiYWNrdXAoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYmFja3VwID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2JhY2t1cDsNCg0KDQogICAgDQogICAgIyBwYXJlbnQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcGFyZW50ID0gTm9uZTsNCiAgICBkZWYgcGFyZW50KHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3BhcmVudCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9wYXJlbnQ7DQoNCg0KICAgIA0KICAgICMgZ3JvdXA6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZ3JvdXAgPSBOb25lOw0KICAgIGRlZiBncm91cChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9ncm91cCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9ncm91cDsNCg0KDQogICAgDQogICAgIyBjb250ZXh0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvbnRleHQgPSBOb25lOw0KICAgIGRlZiBjb250ZXh0KHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvbnRleHQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29udGV4dDsNCg0KDQogICAgDQogICAgIyBwb3J0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3BvcnQgPSBOb25lOw0KICAgIGRlZiBwb3J0KHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3BvcnQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fcG9ydDsNCg0KDQogICAgDQogICAgIyBvbmxpbmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb25saW5lID0gTm9uZTsNCiAgICBkZWYgb25saW5lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29ubGluZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vbmxpbmU7DQoNCg0KICAgIA0KICAgICMgc2VjdXJlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3NlY3VyZSA9IE5vbmU7DQogICAgZGVmIHNlY3VyZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9zZWN1cmUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fc2VjdXJlOw0KDQoNCiAgICANCiAgICAjIHR5cGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfdHlwZSA9IE5vbmU7DQogICAgZGVmIHR5cGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fdHlwZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl90eXBlOw0KDQoNCiAgICANCiAgICANCiAgICBkZWYgX2Zyb21Eb2N1bWVudChzZWxmLCBvYmopOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBOb2RlKCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnYWRkcmVzcycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5hZGRyZXNzKG9ialsnYWRkcmVzcyddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdiYWNrdXAnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYmFja3VwKE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsnYmFja3VwJ10pKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdwYXJlbnQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucGFyZW50KE5vZGUoKS5fZnJvbURvY3VtZW50KG9ialsncGFyZW50J10pKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdncm91cCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5ncm91cChOb2RlX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChvYmpbJ2dyb3VwJ10pKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjb250ZXh0JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNvbnRleHQoTm9kZV9Db250ZXh0KCkuX2Zyb21Eb2N1bWVudChvYmpbJ2NvbnRleHQnXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3BvcnQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucG9ydChvYmpbJ3BvcnQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb25saW5lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm9ubGluZShvYmpbJ29ubGluZSddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLm9ubGluZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYub25saW5lKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdzZWN1cmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuc2VjdXJlKG9ialsnc2VjdXJlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3R5cGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYudHlwZShOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KG9ialsndHlwZSddKSk7DQogICAgICAgIA0KICAgIA0KDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgDQogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6Ol90b0RvY3VtZW50KCk6ICc7DQoNCiAgICAgICAgcmV0ID0ge307DQogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOw0KDQogICAgDQogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5hZGRyZXNzKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFkZHJlc3MiXSA9IHNlbGYuYWRkcmVzcygpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5iYWNrdXAoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYmFja3VwIl0gPSBzZWxmLmJhY2t1cCgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnBhcmVudCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJwYXJlbnQiXSA9IHNlbGYucGFyZW50KCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZ3JvdXAoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZ3JvdXAiXSA9IHNlbGYuZ3JvdXAoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb250ZXh0KCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvbnRleHQiXSA9IHNlbGYuY29udGV4dCgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnBvcnQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicG9ydCJdID0gc2VsZi5wb3J0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLm9ubGluZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvbmxpbmUiXSA9IHNlbGYub25saW5lKCk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXRbIm9ubGluZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJvbmxpbmUiXSA9IHJldFsib25saW5lIl0uaXNvZm9ybWF0KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnNlY3VyZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJzZWN1cmUiXSA9IHNlbGYuc2VjdXJlKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnR5cGUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsidHlwZSJdID0gc2VsZi50eXBlKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIA0KICAgICAgICBpZiBiSlNPTiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICNwcmludChfX3RvU3RyaW5nICsgIkdPVCBIRVJFIiwgdHlwZShyZXQpLCByZXQpOw0KICAgICAgICAgICAgcmV0ID0ganNvbi5kdW1wcyhyZXQpOw0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiByZXQ7DQoNCiAgICANCiAgICBkZWYgc3RvcmUoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlOjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGUuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ05vZGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6OmZpbmRBbGwoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlLmZpbmRBbGwoKScpLm1ldGhvZCgnZmluZEFsbCcpLmNsYXNzTmFtZSgnTm9kZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZTo6ZmluZCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGUuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdOb2RlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTm9kZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGF1dGhDb2RlKHNlbGYsIF9fZXZlbnQ9Tm9uZSwgY29kZT1Ob25lLCB0b29sPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGU6OmF1dGhDb2RlKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgaWYgJ2NvZGUnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBjb2RlID0gZXZKU09OWydjb2RlJ107DQogICAgICAgIA0KICAgICAgICAgICAgaWYgJ3Rvb2wnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICB0b29sID0gZXZKU09OWyd0b29sJ107DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZS5hdXRoQ29kZSgpJykubWV0aG9kKCdhdXRoQ29kZScpLmNsYXNzTmFtZSgnTm9kZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IGV2SlNPTjsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChzdHIoYW5zd2VyKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGluaXQoc2VsZiwgX19ldmVudD1Ob25lLCBvbmxpbmU9Tm9uZSwgY29kZT1Ob25lLCB1aWQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZTo6aW5pdCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIGlmICdvbmxpbmUnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBvbmxpbmUgPSBldkpTT05bJ29ubGluZSddOw0KICAgICAgICANCiAgICAgICAgICAgIGlmICdjb2RlJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgY29kZSA9IGV2SlNPTlsnY29kZSddOw0KICAgICAgICANCiAgICAgICAgICAgIGlmICd1aWQnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICB1aWQgPSBldkpTT05bJ3VpZCddOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGUuaW5pdCgpJykubWV0aG9kKCdpbml0JykuY2xhc3NOYW1lKCdOb2RlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTm9kZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgTm9kZV9Db250ZXh0KCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIElkPU5vbmUsIGFjdGl2ZT1Ob25lLCBlbmFibGVkPU5vbmUsIGNvZGU9Tm9uZSwgb3JkZXI9Tm9uZSwgZGF0ZT1Ob25lLCBuYW1lPU5vbmUsIHJlbWFyaz1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnTm9kZV9Db250ZXh0OjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Db250ZXh0OjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gTm9kZV9Db250ZXh0KCkuX2Zyb21Eb2N1bWVudChvYmpbaV0pOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCg0KDQogICAgICAgIGlmICdJZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5JZCA9IG9ialsnSWQnXTsNCg0KICAgIA0KICAgICAgICBpZiAnYWN0aXZlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmFjdGl2ZShvYmpbJ2FjdGl2ZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdlbmFibGVkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmVuYWJsZWQob2JqWydlbmFibGVkJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NvZGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuY29kZShvYmpbJ2NvZGUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3JkZXInIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYub3JkZXIob2JqWydvcmRlciddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkYXRlJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmRhdGUob2JqWydkYXRlJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYuZGF0ZShkYXRldGltZS5kYXRldGltZS5mcm9taXNvZm9ybWF0KHNlbGYuZGF0ZSgpKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnbmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5uYW1lKG9ialsnbmFtZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdyZW1hcmsnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYucmVtYXJrKG9ialsncmVtYXJrJ10pOw0KICAgICAgICANCiAgICAgICAgICAgIHNlbGYucmVtYXJrKCBiYXNlNjQuYjY0ZGVjb2RlKHNlbGYucmVtYXJrKCkpICk7DQogICAgICAgIA0KICAgIA0KDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgDQogICAgZGVmIF90b0RvY3VtZW50KHNlbGYsIGJKU09OPU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfQ29udGV4dDo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToNCiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Db250ZXh0OjpzdG9yZSgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGVfQ29udGV4dC5zdG9yZSgpJykubWV0aG9kKCdzdG9yZScpLmNsYXNzTmFtZSgnTm9kZV9Db250ZXh0JykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTm9kZV9Db250ZXh0KCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZEFsbChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfQ29udGV4dDo6ZmluZEFsbCgpOiAnOw0KICAgICAgICANCiAgICAgICAgZXZKU09OID0gTm9uZTsNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgZXZKU09OID0ganNvbi5sb2FkcyhfX2V2ZW50LnBheWxvYWQoKSk7DQogICAgICAgICAgICBpZiAnX190aGlzJyBpbiBldkpTT046DQogICAgICAgICAgICAgICAgc2VsZi5fZnJvbURvY3VtZW50KGV2SlNPTlsnX190aGlzJ10pOw0KICAgICAgICANCg0KICAgICAgICBhbnN3ZXIgPSBOb25lOw0KDQogICAgICAgIF9fcmVzcG9uc2UgPSBFdmVudCgpLmNvZGUoJ1snK25vZGUuY29kZSgpKydAJytzdHIodGltZS50aW1lKCkpKyddLk5vZGVfQ29udGV4dC5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ05vZGVfQ29udGV4dCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGVfQ29udGV4dCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmQoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX0NvbnRleHQ6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlX0NvbnRleHQuZmluZCgpJykubWV0aG9kKCdmaW5kJykuY2xhc3NOYW1lKCdOb2RlX0NvbnRleHQnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX0NvbnRleHQoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIE5vZGVfR3JvdXAoKToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgSWQ9Tm9uZSwgYWN0aXZlPU5vbmUsIGVuYWJsZWQ9Tm9uZSwgY29kZT1Ob25lLCBvcmRlcj1Ob25lLCBkYXRlPU5vbmUsIG5hbWU9Tm9uZSwgcmVtYXJrPU5vbmUpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKCk7DQoNCiAgICAgICAgI3ByaW50KCdOb2RlX0dyb3VwOjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgY29kZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9jb2RlID0gTm9uZTsNCiAgICBkZWYgY29kZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9jb2RlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NvZGU7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBkYXRlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2RhdGUgPSBOb25lOw0KICAgIGRlZiBkYXRlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2RhdGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGF0ZTsNCg0KDQogICAgDQogICAgIyBuYW1lOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX25hbWUgPSBOb25lOw0KICAgIGRlZiBuYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX25hbWUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZTsNCg0KDQogICAgDQogICAgIyByZW1hcms6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfcmVtYXJrID0gTm9uZTsNCiAgICBkZWYgcmVtYXJrKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3JlbWFyayA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZW1hcms7DQoNCg0KICAgIA0KICAgIA0KICAgIGRlZiBfZnJvbURvY3VtZW50KHNlbGYsIG9iaik6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Hcm91cDo6X2Zyb21Eb2N1bWVudCgpOiAnOw0KICAgICAgICANCiAgICAgICAgaWYgb2JqIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCg0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgYnl0ZXMpOg0KICAgICAgICAgICAgb2JqID0gc3RyKG9iaiwgInV0Zi04Iik7DQogICAgICAgIA0KICAgICAgICBpZiBpc2luc3RhbmNlKG9iaiwgc3RyKSBvciB0eXBlKG9iaikgaXMgc3RyOg0KICAgICAgICAgICAgaWYgcmUubWF0Y2gociIoKChbQS1aYS16XXszLDl9Oig/OlwvXC8pPykoPzpbLTs6Jj1cK1wkLFx3XStAKT9bQS1aYS16MC05Li1dK3woPzp3d3cufFstOzomPVwrXCQsXHddK0ApW0EtWmEtejAtOS4tXSspKCg/OlwvW1wrfiVcLy5cd1wtX10qKT9cPz8oPzpbLVwrPSY7JUAuXHdfXSopIz8oPzpbXHddKikpPykiLCBvYmopOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZCh1cmxsaWIucmVxdWVzdC51cmxvcGVuKG9iaikpOw0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWRzKG9iaik7DQogICAgICAgIA0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIChzdHIsIGJ5dGVzLCBkaWN0KSk6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgJ0dPVCBIRVJFOiAnICsgc3RyKHR5cGUob2JqKSkpOw0KICAgICAgICAgICAgcmV0dXJuIG9iajsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIGkgaW4gb2JqOg0KICAgICAgICAgICAgICAgIG9ialtpXSA9IE5vZGVfR3JvdXAoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQoNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gc2VsZjsNCiAgICANCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Hcm91cDo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb2RlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvZGUiXSA9IHNlbGYuY29kZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5kYXRlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImRhdGUiXSA9IHNlbGYuZGF0ZSgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJkYXRlIl0sIGRhdGV0aW1lLmRhdGV0aW1lKToNCiAgICAgICAgICAgICAgICByZXRbImRhdGUiXSA9IHJldFsiZGF0ZSJdLmlzb2Zvcm1hdCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5uYW1lKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIm5hbWUiXSA9IHNlbGYubmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5yZW1hcmsoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBzZWxmLnJlbWFyaygpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJyZW1hcmsiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9IGpzb24uZHVtcHMocmV0WyJyZW1hcmsiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJyZW1hcmsiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9Hcm91cDo6c3RvcmUoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlX0dyb3VwLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdOb2RlX0dyb3VwJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTm9kZV9Hcm91cCgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX0dyb3VwOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9Hcm91cC5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ05vZGVfR3JvdXAnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX0dyb3VwKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfR3JvdXA6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlX0dyb3VwLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTm9kZV9Hcm91cCcpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGVfR3JvdXAoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCmNsYXNzIE5vZGVfVHlwZSgpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBjb2RlPU5vbmUsIG9yZGVyPU5vbmUsIGRhdGU9Tm9uZSwgbmFtZT1Ob25lLCByZW1hcms9Tm9uZSwgZHluYW1pYz1Ob25lKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpOw0KDQogICAgICAgICNwcmludCgnTm9kZV9UeXBlOjpfX2luaXRfXygpJyk7DQogICAgICAgIGlmIElkIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5JZCA9IElkOw0KDQogICAgICAgIA0KICAgICAgICBzZWxmLmFjdGl2ZShhY3RpdmUpOw0KICAgICAgICBzZWxmLmVuYWJsZWQoZW5hYmxlZCk7DQogICAgICAgIHNlbGYuY29kZShjb2RlKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuZGF0ZShkYXRlKTsNCiAgICAgICAgc2VsZi5uYW1lKG5hbWUpOw0KICAgICAgICBzZWxmLnJlbWFyayhyZW1hcmspOw0KICAgICAgICBzZWxmLmR5bmFtaWMoZHluYW1pYyk7DQogICAgICAgIA0KICAgIElkID0gTm9uZTsNCiAgICANCiAgICANCiAgICAjIGFjdGl2ZTogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9hY3RpdmUgPSBOb25lOw0KICAgIGRlZiBhY3RpdmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fYWN0aXZlID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2FjdGl2ZTsNCg0KDQogICAgDQogICAgIyBlbmFibGVkOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2VuYWJsZWQgPSBOb25lOw0KICAgIGRlZiBlbmFibGVkKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2VuYWJsZWQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZW5hYmxlZDsNCg0KDQogICAgDQogICAgIyBjb2RlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvZGUgPSBOb25lOw0KICAgIGRlZiBjb2RlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvZGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29kZTsNCg0KDQogICAgDQogICAgIyBvcmRlcjogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9vcmRlciA9IE5vbmU7DQogICAgZGVmIG9yZGVyKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX29yZGVyID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX29yZGVyOw0KDQoNCiAgICANCiAgICAjIGRhdGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZGF0ZSA9IE5vbmU7DQogICAgZGVmIGRhdGUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fZGF0ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kYXRlOw0KDQoNCiAgICANCiAgICAjIG5hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfbmFtZSA9IE5vbmU7DQogICAgZGVmIG5hbWUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fbmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9uYW1lOw0KDQoNCiAgICANCiAgICAjIHJlbWFyazogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9yZW1hcmsgPSBOb25lOw0KICAgIGRlZiByZW1hcmsoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fcmVtYXJrID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlbWFyazsNCg0KDQogICAgDQogICAgIyBkeW5hbWljOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2R5bmFtaWMgPSBOb25lOw0KICAgIGRlZiBkeW5hbWljKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2R5bmFtaWMgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fZHluYW1pYzsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX1R5cGU6Ol9mcm9tRG9jdW1lbnQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGlmIG9iaiBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQoNCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIGJ5dGVzKToNCiAgICAgICAgICAgIG9iaiA9IHN0cihvYmosICJ1dGYtOCIpOw0KICAgICAgICANCiAgICAgICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cikgb3IgdHlwZShvYmopIGlzIHN0cjoNCiAgICAgICAgICAgIGlmIHJlLm1hdGNoKHIiKCgoW0EtWmEtel17Myw5fTooPzpcL1wvKT8pKD86Wy07OiY9XCtcJCxcd10rQCk/W0EtWmEtejAtOS4tXSt8KD86d3d3LnxbLTs6Jj1cK1wkLFx3XStAKVtBLVphLXowLTkuLV0rKSgoPzpcL1tcK34lXC8uXHdcLV9dKik/XD8/KD86Wy1cKz0mOyVALlx3X10qKSM/KD86W1x3XSopKT8pIiwgb2JqKToNCiAgICAgICAgICAgICAgICBvYmogPSBqc29uLmxvYWQodXJsbGliLnJlcXVlc3QudXJsb3BlbihvYmopKTsNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkcyhvYmopOw0KICAgICAgICANCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob2JqLCAoc3RyLCBieXRlcywgZGljdCkpOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICdHT1QgSEVSRTogJyArIHN0cih0eXBlKG9iaikpKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBpIGluIG9iajoNCiAgICAgICAgICAgICAgICBvYmpbaV0gPSBOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KG9ialtpXSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KDQoNCiAgICAgICAgaWYgJ0lkJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLklkID0gb2JqWydJZCddOw0KDQogICAgDQogICAgICAgIGlmICdhY3RpdmUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuYWN0aXZlKG9ialsnYWN0aXZlJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2VuYWJsZWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZW5hYmxlZChvYmpbJ2VuYWJsZWQnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnY29kZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jb2RlKG9ialsnY29kZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2RhdGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuZGF0ZShvYmpbJ2RhdGUnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5kYXRlKGRhdGV0aW1lLmRhdGV0aW1lLmZyb21pc29mb3JtYXQoc2VsZi5kYXRlKCkpKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICduYW1lJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm5hbWUob2JqWyduYW1lJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3JlbWFyaycgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5yZW1hcmsob2JqWydyZW1hcmsnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5yZW1hcmsoIGJhc2U2NC5iNjRkZWNvZGUoc2VsZi5yZW1hcmsoKSkgKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdkeW5hbWljJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmR5bmFtaWMob2JqWydkeW5hbWljJ10pOw0KICAgICAgICANCiAgICANCg0KICAgICAgICBnYy5jb2xsZWN0KCk7DQogICAgICAgIHJldHVybiBzZWxmOw0KICAgIA0KICAgIGRlZiBfdG9Eb2N1bWVudChzZWxmLCBiSlNPTj1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX1R5cGU6Ol90b0RvY3VtZW50KCk6ICc7DQoNCiAgICAgICAgcmV0ID0ge307DQogICAgICAgIGlmIHNlbGYuSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbIklkIl0gPSBzZWxmLklkOw0KDQogICAgDQogICAgICAgIGlmIHNlbGYuYWN0aXZlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImFjdGl2ZSJdID0gc2VsZi5hY3RpdmUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZW5hYmxlZCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJlbmFibGVkIl0gPSBzZWxmLmVuYWJsZWQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuY29kZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJjb2RlIl0gPSBzZWxmLmNvZGUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYub3JkZXIoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3JkZXIiXSA9IHNlbGYub3JkZXIoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZGF0ZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSBzZWxmLmRhdGUoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsiZGF0ZSJdLCBkYXRldGltZS5kYXRldGltZSk6DQogICAgICAgICAgICAgICAgcmV0WyJkYXRlIl0gPSByZXRbImRhdGUiXS5pc29mb3JtYXQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYubmFtZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJuYW1lIl0gPSBzZWxmLm5hbWUoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYucmVtYXJrKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInJlbWFyayJdID0gc2VsZi5yZW1hcmsoKTsNCiAgICAgICAgDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHJldFsicmVtYXJrIl0sIGRpY3QpOg0KICAgICAgICAgICAgICAgIHJldFsicmVtYXJrIl0gPSBqc29uLmR1bXBzKHJldFsicmVtYXJrIl0pLmVuY29kZSgndXRmLTgnKTsNCg0KICAgICAgICAgICAgcmV0WyJyZW1hcmsiXSA9ICBiYXNlNjQuYjY0ZW5jb2RlKHJldFsicmVtYXJrIl0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5keW5hbWljKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImR5bmFtaWMiXSA9IHNlbGYuZHluYW1pYygpOw0KICAgICAgICANCiAgICANCiAgICAgICAgDQogICAgICAgIGlmIGJKU09OIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgI3ByaW50KF9fdG9TdHJpbmcgKyAiR09UIEhFUkUiLCB0eXBlKHJldCksIHJldCk7DQogICAgICAgICAgICByZXQgPSBqc29uLmR1bXBzKHJldCk7DQogICAgICAgIGdjLmNvbGxlY3QoKTsNCiAgICAgICAgcmV0dXJuIHJldDsNCg0KICAgIA0KICAgIGRlZiBzdG9yZShzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ05vZGVfVHlwZTo6c3RvcmUoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlX1R5cGUuc3RvcmUoKScpLm1ldGhvZCgnc3RvcmUnKS5jbGFzc05hbWUoJ05vZGVfVHlwZScpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGVfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdOb2RlX1R5cGU6OmZpbmRBbGwoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5Ob2RlX1R5cGUuZmluZEFsbCgpJykubWV0aG9kKCdmaW5kQWxsJykuY2xhc3NOYW1lKCdOb2RlX1R5cGUnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBOb2RlX1R5cGUoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KICAgIGRlZiBmaW5kKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTm9kZV9UeXBlOjpmaW5kKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTm9kZV9UeXBlLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTm9kZV9UeXBlJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KCgkJbGFzdFVwZGF0ZSA9IHNlbGYuZGF0ZSgpOwogICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiY3VycmVudCB2ZXJzaW9uOiAiICsgc3RyKGxhc3RVcGRhdGUpICsgIiwgY2hlY2tpbmcuLi4iKTsKICAgICAgICBzZWxmX2Zyb21Eb2N1bWVudCgiaHR0cHM6Ly9hcnpob3NwaXRhbC5naXRodWIuaW8vZXNwdGVzdC9Ob2RlX1R5cGUvIitzZWxmLm5hbWUoKSsiLmpzb24iKTsKCiAgICAgICAgaWYgc2VsZi5kYXRlKCk+bGFzdFVwZGF0ZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJuZXdlciB2ZXJzaW9uOiAiICsgc3RyKHNlbGYuZGF0ZSgpKSArICIsIHJlYm9vdGluZy4uLiIpOwogICAgICAgICAgICBvcy5leGVjbChzeXMuZXhlY3V0YWJsZSwgc3lzLmV4ZWN1dGFibGUsICpzeXMuYXJndik7CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJjdXJyZW50IHZlcnNpb24gaXMgdXAtdG8tZGF0ZS4iKTsKCiAgICAgICAgdGltZS5zbGVlcCgzMCk7CiAgICAgICAgcmV0dXJuIHNlbGYuZmluZCgpOwogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE5vZGVfVHlwZSgpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQoNCg0KY2xhc3MgTWFwcGluZygpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBJZD1Ob25lLCBhY3RpdmU9Tm9uZSwgZW5hYmxlZD1Ob25lLCBvcmRlcj1Ob25lLCBjbGFzc05hbWU9Tm9uZSwgc2NvcGU9Tm9uZSwgY29udGV4dD1Ob25lLCBzb3VyY2U9Tm9uZSwgdGFyZ2V0PU5vbmUsIG9wZXJhdG9yPU5vbmUsIGluU2NyaXB0PU5vbmUsIG91dFNjcmlwdD1Ob25lLCB0b29sPU5vbmUsIGdyb3VwPU5vbmUsIHR5cGU9Tm9uZSk6DQogICAgICAgIHN1cGVyKCkuX19pbml0X18oKTsNCg0KICAgICAgICAjcHJpbnQoJ01hcHBpbmc6Ol9faW5pdF9fKCknKTsNCiAgICAgICAgaWYgSWQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLklkID0gSWQ7DQoNCiAgICAgICAgDQogICAgICAgIHNlbGYuYWN0aXZlKGFjdGl2ZSk7DQogICAgICAgIHNlbGYuZW5hYmxlZChlbmFibGVkKTsNCiAgICAgICAgc2VsZi5vcmRlcihvcmRlcik7DQogICAgICAgIHNlbGYuY2xhc3NOYW1lKGNsYXNzTmFtZSk7DQogICAgICAgIHNlbGYuc2NvcGUoc2NvcGUpOw0KICAgICAgICBzZWxmLmNvbnRleHQoY29udGV4dCk7DQogICAgICAgIHNlbGYuc291cmNlKHNvdXJjZSk7DQogICAgICAgIHNlbGYudGFyZ2V0KHRhcmdldCk7DQogICAgICAgIHNlbGYub3BlcmF0b3Iob3BlcmF0b3IpOw0KICAgICAgICBzZWxmLmluU2NyaXB0KGluU2NyaXB0KTsNCiAgICAgICAgc2VsZi5vdXRTY3JpcHQob3V0U2NyaXB0KTsNCiAgICAgICAgc2VsZi50b29sKHRvb2wpOw0KICAgICAgICBzZWxmLmdyb3VwKGdyb3VwKTsNCiAgICAgICAgc2VsZi50eXBlKHR5cGUpOw0KICAgICAgICANCiAgICBJZCA9IE5vbmU7DQogICAgDQogICAgDQogICAgIyBhY3RpdmU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfYWN0aXZlID0gTm9uZTsNCiAgICBkZWYgYWN0aXZlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2FjdGl2ZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9hY3RpdmU7DQoNCg0KICAgIA0KICAgICMgZW5hYmxlZDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF9lbmFibGVkID0gTm9uZTsNCiAgICBkZWYgZW5hYmxlZChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9lbmFibGVkID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2VuYWJsZWQ7DQoNCg0KICAgIA0KICAgICMgb3JkZXI6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3JkZXIgPSBOb25lOw0KICAgIGRlZiBvcmRlcihzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9vcmRlciA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vcmRlcjsNCg0KDQogICAgDQogICAgIyBjbGFzc05hbWU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfY2xhc3NOYW1lID0gTm9uZTsNCiAgICBkZWYgY2xhc3NOYW1lKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NsYXNzTmFtZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbGFzc05hbWU7DQoNCg0KICAgIA0KICAgICMgc2NvcGU6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfc2NvcGUgPSBOb25lOw0KICAgIGRlZiBzY29wZShzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9zY29wZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zY29wZTsNCg0KDQogICAgDQogICAgIyBjb250ZXh0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX2NvbnRleHQgPSBOb25lOw0KICAgIGRlZiBjb250ZXh0KHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX2NvbnRleHQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fY29udGV4dDsNCg0KDQogICAgDQogICAgIyBzb3VyY2U6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfc291cmNlID0gTm9uZTsNCiAgICBkZWYgc291cmNlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3NvdXJjZSA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9zb3VyY2U7DQoNCg0KICAgIA0KICAgICMgdGFyZ2V0OiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3RhcmdldCA9IE5vbmU7DQogICAgZGVmIHRhcmdldChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90YXJnZXQgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fdGFyZ2V0Ow0KDQoNCiAgICANCiAgICAjIG9wZXJhdG9yOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX29wZXJhdG9yID0gTm9uZTsNCiAgICBkZWYgb3BlcmF0b3Ioc2VsZiwgKmFyZ3MpOg0KICAgICAgICBpZiBhcmdzOg0KICAgICAgICAgICAgc2VsZi5fb3BlcmF0b3IgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fb3BlcmF0b3I7DQoNCg0KICAgIA0KICAgICMgaW5TY3JpcHQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfaW5TY3JpcHQgPSBOb25lOw0KICAgIGRlZiBpblNjcmlwdChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9pblNjcmlwdCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9pblNjcmlwdDsNCg0KDQogICAgDQogICAgIyBvdXRTY3JpcHQ6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfb3V0U2NyaXB0ID0gTm9uZTsNCiAgICBkZWYgb3V0U2NyaXB0KHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX291dFNjcmlwdCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vdXRTY3JpcHQ7DQoNCg0KICAgIA0KICAgICMgdG9vbDogR2V0dGVycyBhbmQgU2V0dGVycw0KICAgIF90b29sID0gTm9uZTsNCiAgICBkZWYgdG9vbChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl90b29sID0gYXJnc1swXTsNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Rvb2w7DQoNCg0KICAgIA0KICAgICMgZ3JvdXA6IEdldHRlcnMgYW5kIFNldHRlcnMNCiAgICBfZ3JvdXAgPSBOb25lOw0KICAgIGRlZiBncm91cChzZWxmLCAqYXJncyk6DQogICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICBzZWxmLl9ncm91cCA9IGFyZ3NbMF07DQogICAgICAgICAgICByZXR1cm4gc2VsZjsNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLl9ncm91cDsNCg0KDQogICAgDQogICAgIyB0eXBlOiBHZXR0ZXJzIGFuZCBTZXR0ZXJzDQogICAgX3R5cGUgPSBOb25lOw0KICAgIGRlZiB0eXBlKHNlbGYsICphcmdzKToNCiAgICAgICAgaWYgYXJnczoNCiAgICAgICAgICAgIHNlbGYuX3R5cGUgPSBhcmdzWzBdOw0KICAgICAgICAgICAgcmV0dXJuIHNlbGY7DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fdHlwZTsNCg0KDQogICAgDQogICAgDQogICAgZGVmIF9mcm9tRG9jdW1lbnQoc2VsZiwgb2JqKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nOjpfZnJvbURvY3VtZW50KCk6ICc7DQogICAgICAgIA0KICAgICAgICBpZiBvYmogaXMgTm9uZToNCiAgICAgICAgICAgIHJldHVybiBzZWxmOw0KDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBieXRlcyk6DQogICAgICAgICAgICBvYmogPSBzdHIob2JqLCAidXRmLTgiKTsNCiAgICAgICAgDQogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBzdHIpIG9yIHR5cGUob2JqKSBpcyBzdHI6DQogICAgICAgICAgICBpZiByZS5tYXRjaChyIigoKFtBLVphLXpdezMsOX06KD86XC9cLyk/KSg/OlstOzomPVwrXCQsXHddK0ApP1tBLVphLXowLTkuLV0rfCg/Ond3dy58Wy07OiY9XCtcJCxcd10rQClbQS1aYS16MC05Li1dKykoKD86XC9bXCt+JVwvLlx3XC1fXSopP1w/Pyg/OlstXCs9JjslQC5cd19dKikjPyg/Oltcd10qKSk/KSIsIG9iaik6DQogICAgICAgICAgICAgICAgb2JqID0ganNvbi5sb2FkKHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ob2JqKSk7DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG9iaiA9IGpzb24ubG9hZHMob2JqKTsNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgKHN0ciwgYnl0ZXMsIGRpY3QpKToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAnR09UIEhFUkU6ICcgKyBzdHIodHlwZShvYmopKSk7DQogICAgICAgICAgICByZXR1cm4gb2JqOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBmb3IgaSBpbiBvYmo6DQogICAgICAgICAgICAgICAgb2JqW2ldID0gTWFwcGluZygpLl9mcm9tRG9jdW1lbnQob2JqW2ldKTsNCiAgICAgICAgICAgIHJldHVybiBvYmo7DQoNCg0KICAgICAgICBpZiAnSWQnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuSWQgPSBvYmpbJ0lkJ107DQoNCiAgICANCiAgICAgICAgaWYgJ2FjdGl2ZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5hY3RpdmUob2JqWydhY3RpdmUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnZW5hYmxlZCcgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5lbmFibGVkKG9ialsnZW5hYmxlZCddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcmRlcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcmRlcihvYmpbJ29yZGVyJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2NsYXNzTmFtZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5jbGFzc05hbWUob2JqWydjbGFzc05hbWUnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnc2NvcGUnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYuc2NvcGUob2JqWydzY29wZSddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdjb250ZXh0JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmNvbnRleHQob2JqWydjb250ZXh0J10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3NvdXJjZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5zb3VyY2Uob2JqWydzb3VyY2UnXSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndGFyZ2V0JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLnRhcmdldChvYmpbJ3RhcmdldCddKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmICdvcGVyYXRvcicgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi5vcGVyYXRvcihvYmpbJ29wZXJhdG9yJ10pOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2luU2NyaXB0JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmluU2NyaXB0KG9ialsnaW5TY3JpcHQnXSk7DQogICAgICAgIA0KICAgICAgICAgICAgc2VsZi5pblNjcmlwdCggYmFzZTY0LmI2NGRlY29kZShzZWxmLmluU2NyaXB0KCkpICk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAnb3V0U2NyaXB0JyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLm91dFNjcmlwdChvYmpbJ291dFNjcmlwdCddKTsNCiAgICAgICAgDQogICAgICAgICAgICBzZWxmLm91dFNjcmlwdCggYmFzZTY0LmI2NGRlY29kZShzZWxmLm91dFNjcmlwdCgpKSApOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ3Rvb2wnIGluIG9iajoNCiAgICAgICAgICAgIHNlbGYudG9vbChUb29sKCkuX2Zyb21Eb2N1bWVudChvYmpbJ3Rvb2wnXSkpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgJ2dyb3VwJyBpbiBvYmo6DQogICAgICAgICAgICBzZWxmLmdyb3VwKENvbmZpZ19Hcm91cCgpLl9mcm9tRG9jdW1lbnQob2JqWydncm91cCddKSk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiAndHlwZScgaW4gb2JqOg0KICAgICAgICAgICAgc2VsZi50eXBlKFRvb2xfVHlwZSgpLl9mcm9tRG9jdW1lbnQob2JqWyd0eXBlJ10pKTsNCiAgICAgICAgDQogICAgDQoNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gc2VsZjsNCiAgICANCiAgICBkZWYgX3RvRG9jdW1lbnQoc2VsZiwgYkpTT049Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWFwcGluZzo6X3RvRG9jdW1lbnQoKTogJzsNCg0KICAgICAgICByZXQgPSB7fTsNCiAgICAgICAgaWYgc2VsZi5JZCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiSWQiXSA9IHNlbGYuSWQ7DQoNCiAgICANCiAgICAgICAgaWYgc2VsZi5hY3RpdmUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiYWN0aXZlIl0gPSBzZWxmLmFjdGl2ZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5lbmFibGVkKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImVuYWJsZWQiXSA9IHNlbGYuZW5hYmxlZCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcmRlcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcmRlciJdID0gc2VsZi5vcmRlcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jbGFzc05hbWUoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiY2xhc3NOYW1lIl0gPSBzZWxmLmNsYXNzTmFtZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5zY29wZSgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJzY29wZSJdID0gc2VsZi5zY29wZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5jb250ZXh0KCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbImNvbnRleHQiXSA9IHNlbGYuY29udGV4dCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5zb3VyY2UoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsic291cmNlIl0gPSBzZWxmLnNvdXJjZSgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi50YXJnZXQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsidGFyZ2V0Il0gPSBzZWxmLnRhcmdldCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vcGVyYXRvcigpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJvcGVyYXRvciJdID0gc2VsZi5vcGVyYXRvcigpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5pblNjcmlwdCgpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0WyJpblNjcmlwdCJdID0gc2VsZi5pblNjcmlwdCgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJpblNjcmlwdCJdLCBkaWN0KToNCiAgICAgICAgICAgICAgICByZXRbImluU2NyaXB0Il0gPSBqc29uLmR1bXBzKHJldFsiaW5TY3JpcHQiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbImluU2NyaXB0Il0gPSAgYmFzZTY0LmI2NGVuY29kZShyZXRbImluU2NyaXB0Il0pLmRlY29kZSgndXRmLTgnKS5zdHJpcCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi5vdXRTY3JpcHQoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsib3V0U2NyaXB0Il0gPSBzZWxmLm91dFNjcmlwdCgpOw0KICAgICAgICANCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UocmV0WyJvdXRTY3JpcHQiXSwgZGljdCk6DQogICAgICAgICAgICAgICAgcmV0WyJvdXRTY3JpcHQiXSA9IGpzb24uZHVtcHMocmV0WyJvdXRTY3JpcHQiXSkuZW5jb2RlKCd1dGYtOCcpOw0KDQogICAgICAgICAgICByZXRbIm91dFNjcmlwdCJdID0gIGJhc2U2NC5iNjRlbmNvZGUocmV0WyJvdXRTY3JpcHQiXSkuZGVjb2RlKCd1dGYtOCcpLnN0cmlwKCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICBpZiBzZWxmLnRvb2woKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsidG9vbCJdID0gc2VsZi50b29sKCkuX3RvRG9jdW1lbnQoKTsNCiAgICAgICAgDQogICAgDQogICAgICAgIGlmIHNlbGYuZ3JvdXAoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHJldFsiZ3JvdXAiXSA9IHNlbGYuZ3JvdXAoKS5fdG9Eb2N1bWVudCgpOw0KICAgICAgICANCiAgICANCiAgICAgICAgaWYgc2VsZi50eXBlKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICByZXRbInR5cGUiXSA9IHNlbGYudHlwZSgpLl90b0RvY3VtZW50KCk7DQogICAgICAgIA0KICAgIA0KICAgICAgICANCiAgICAgICAgaWYgYkpTT04gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAjcHJpbnQoX190b1N0cmluZyArICJHT1QgSEVSRSIsIHR5cGUocmV0KSwgcmV0KTsNCiAgICAgICAgICAgIHJldCA9IGpzb24uZHVtcHMocmV0KTsNCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KICAgICAgICByZXR1cm4gcmV0Ow0KDQogICAgDQogICAgZGVmIHN0b3JlKHNlbGYsIF9fZXZlbnQ9Tm9uZSk6DQogICAgICAgIF9fdG9TdHJpbmcgPSAnTWFwcGluZzo6c3RvcmUoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NYXBwaW5nLnN0b3JlKCknKS5tZXRob2QoJ3N0b3JlJykuY2xhc3NOYW1lKCdNYXBwaW5nJykuY2Fycmllcihub2RlKS5zZW5kZXIobm9kZSkucmVjaXBpZW50KG5vZGUucGFyZW50KCkpOw0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgX19yZXNwb25zZS5yZXNwb25zZVRvKEV2ZW50KG5hbWU9X19ldmVudC5uYW1lKCksIGNvZGU9X19ldmVudC5jb2RlKCkpKTsNCiAgICAgICAgDQogICAgICAgIGdjLmNvbGxlY3QoKTsNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICIgaGFuZGxpbmcgZXZlbnRbIitfX2V2ZW50LmNvZGUoKSsiXSIpOw0KDQogICAgICAgIA0KICAgICAgICBpZiBfX2V2ZW50IGlzIG5vdCBOb25lIGFuZCBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiYSByZXNwb25zZSB0byBteSBldmVudCgiK19fZXZlbnQucmVzcG9uc2VUbygpLmNvZGUoKSsiKSBbIiArIF9fZXZlbnQuY2xhc3NOYW1lKCkgKyAiKCkuIiArIF9fZXZlbnQubWV0aG9kKCkgKyAiKCldIik7DQogICAgICAgIA0KICAgICAgICAgICAgYW5zd2VyID0gTWFwcGluZygpLl9mcm9tRG9jdW1lbnQoZXZKU09OKTsNCiAgICAgICAgDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImV4ZWN1dGluZyBsb2NhbGx5Iik7DQoNCg0KDQoNCg0KICAgICAgICBpZiBfX2V2ZW50IGlzIE5vbmUgb3IgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIGlmIGFuc3dlciBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZChhbnN3ZXIuX3RvRG9jdW1lbnQoKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKHsiX190aGlzIjogc2VsZi5fdG9Eb2N1bWVudCgpfSk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgX19yZXNwb25zZS50cmlnZ2VyKCk7DQogICAgICAgICAgICANCg0KICAgICAgICByZXR1cm4gYW5zd2VyOw0KDQogICAgDQogICAgZGVmIGZpbmRBbGwoc2VsZiwgX19ldmVudD1Ob25lKToNCiAgICAgICAgX190b1N0cmluZyA9ICdNYXBwaW5nOjpmaW5kQWxsKCk6ICc7DQogICAgICAgIA0KICAgICAgICBldkpTT04gPSBOb25lOw0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBldkpTT04gPSBqc29uLmxvYWRzKF9fZXZlbnQucGF5bG9hZCgpKTsNCiAgICAgICAgICAgIGlmICdfX3RoaXMnIGluIGV2SlNPTjoNCiAgICAgICAgICAgICAgICBzZWxmLl9mcm9tRG9jdW1lbnQoZXZKU09OWydfX3RoaXMnXSk7DQogICAgICAgIA0KDQogICAgICAgIGFuc3dlciA9IE5vbmU7DQoNCiAgICAgICAgX19yZXNwb25zZSA9IEV2ZW50KCkuY29kZSgnWycrbm9kZS5jb2RlKCkrJ0AnK3N0cih0aW1lLnRpbWUoKSkrJ10uTWFwcGluZy5maW5kQWxsKCknKS5tZXRob2QoJ2ZpbmRBbGwnKS5jbGFzc05hbWUoJ01hcHBpbmcnKS5jYXJyaWVyKG5vZGUpLnNlbmRlcihub2RlKS5yZWNpcGllbnQobm9kZS5wYXJlbnQoKSk7DQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBfX3Jlc3BvbnNlLnJlc3BvbnNlVG8oRXZlbnQobmFtZT1fX2V2ZW50Lm5hbWUoKSwgY29kZT1fX2V2ZW50LmNvZGUoKSkpOw0KICAgICAgICANCiAgICAgICAgZ2MuY29sbGVjdCgpOw0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgIiBoYW5kbGluZyBldmVudFsiK19fZXZlbnQuY29kZSgpKyJdIik7DQoNCiAgICAgICAgDQogICAgICAgIGlmIF9fZXZlbnQgaXMgbm90IE5vbmUgYW5kIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJhIHJlc3BvbnNlIHRvIG15IGV2ZW50KCIrX19ldmVudC5yZXNwb25zZVRvKCkuY29kZSgpKyIpIFsiICsgX19ldmVudC5jbGFzc05hbWUoKSArICIoKS4iICsgX19ldmVudC5tZXRob2QoKSArICIoKV0iKTsNCiAgICAgICAgDQogICAgICAgICAgICBhbnN3ZXIgPSBNYXBwaW5nKCkuX2Zyb21Eb2N1bWVudChldkpTT04pOw0KICAgICAgICANCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiZXhlY3V0aW5nIGxvY2FsbHkiKTsNCg0KDQoNCg0KDQogICAgICAgIGlmIF9fZXZlbnQgaXMgTm9uZSBvciBfX2V2ZW50LnJlc3BvbnNlVG8oKSBpcyBOb25lOg0KICAgICAgICAgICAgaWYgYW5zd2VyIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgX19yZXNwb25zZS5wYXlsb2FkKGFuc3dlci5fdG9Eb2N1bWVudCgpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoeyJfX3RoaXMiOiBzZWxmLl90b0RvY3VtZW50KCl9KTsNCg0KICAgICAgICAgICAgDQogICAgICAgICAgICBfX3Jlc3BvbnNlLnRyaWdnZXIoKTsNCiAgICAgICAgICAgIA0KDQogICAgICAgIHJldHVybiBhbnN3ZXI7DQoNCiAgICANCiAgICBkZWYgZmluZChzZWxmLCBfX2V2ZW50PU5vbmUpOg0KICAgICAgICBfX3RvU3RyaW5nID0gJ01hcHBpbmc6OmZpbmQoKTogJzsNCiAgICAgICAgDQogICAgICAgIGV2SlNPTiA9IE5vbmU7DQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV2SlNPTiA9IGpzb24ubG9hZHMoX19ldmVudC5wYXlsb2FkKCkpOw0KICAgICAgICAgICAgaWYgJ19fdGhpcycgaW4gZXZKU09OOg0KICAgICAgICAgICAgICAgIHNlbGYuX2Zyb21Eb2N1bWVudChldkpTT05bJ19fdGhpcyddKTsNCiAgICAgICAgDQoNCiAgICAgICAgYW5zd2VyID0gTm9uZTsNCg0KICAgICAgICBfX3Jlc3BvbnNlID0gRXZlbnQoKS5jb2RlKCdbJytub2RlLmNvZGUoKSsnQCcrc3RyKHRpbWUudGltZSgpKSsnXS5NYXBwaW5nLmZpbmQoKScpLm1ldGhvZCgnZmluZCcpLmNsYXNzTmFtZSgnTWFwcGluZycpLmNhcnJpZXIobm9kZSkuc2VuZGVyKG5vZGUpLnJlY2lwaWVudChub2RlLnBhcmVudCgpKTsNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIF9fcmVzcG9uc2UucmVzcG9uc2VUbyhFdmVudChuYW1lPV9fZXZlbnQubmFtZSgpLCBjb2RlPV9fZXZlbnQuY29kZSgpKSk7DQogICAgICAgIA0KICAgICAgICBnYy5jb2xsZWN0KCk7DQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgTm9uZToNCiAgICAgICAgICAgIHByaW50KF9fdG9TdHJpbmcgKyAiIGhhbmRsaW5nIGV2ZW50WyIrX19ldmVudC5jb2RlKCkrIl0iKTsNCg0KICAgICAgICANCiAgICAgICAgaWYgX19ldmVudCBpcyBub3QgTm9uZSBhbmQgX19ldmVudC5yZXNwb25zZVRvKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBwcmludChfX3RvU3RyaW5nICsgImEgcmVzcG9uc2UgdG8gbXkgZXZlbnQoIitfX2V2ZW50LnJlc3BvbnNlVG8oKS5jb2RlKCkrIikgWyIgKyBfX2V2ZW50LmNsYXNzTmFtZSgpICsgIigpLiIgKyBfX2V2ZW50Lm1ldGhvZCgpICsgIigpXSIpOw0KICAgICAgICANCiAgICAgICAgICAgIGFuc3dlciA9IE1hcHBpbmcoKS5fZnJvbURvY3VtZW50KGV2SlNPTik7DQogICAgICAgIA0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lOg0KICAgICAgICAgICAgcHJpbnQoX190b1N0cmluZyArICJleGVjdXRpbmcgbG9jYWxseSIpOw0KDQoNCg0KDQoNCiAgICAgICAgaWYgX19ldmVudCBpcyBOb25lIG9yIF9fZXZlbnQucmVzcG9uc2VUbygpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBhbnN3ZXIgaXMgbm90IE5vbmU6DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBfX3Jlc3BvbnNlLnBheWxvYWQoYW5zd2VyLl90b0RvY3VtZW50KCkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIF9fcmVzcG9uc2UucGF5bG9hZCh7Il9fdGhpcyI6IHNlbGYuX3RvRG9jdW1lbnQoKX0pOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIF9fcmVzcG9uc2UudHJpZ2dlcigpOw0KICAgICAgICAgICAgDQoNCiAgICAgICAgcmV0dXJuIGFuc3dlcjsNCg0KICAgIA0KDQoNCg0KDQoNCiAgICANCm5jb2RlID0gaGV4KHV1aWQuZ2V0bm9kZSgpKTsNCiAgICANCg0Kbm9kZSA9IE5vZGUoY29kZT1uY29kZSwgcGFyZW50PU5vZGUoY29kZT0nYXBpc2VydmVyL2VzcHRlc3QvbWFzdGVyJykpOw0KDQoNCiMjIyMjIyMjIyMjIE1RVFQgQ29ubmVjdGlvbiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KcHJpbnQoJ21haW4oKScsICJDb25uZWN0aW5nIHRvIE1RVFQgc2VydmVyIiwgIi4uLiAiLCBlbmQ9IiIpOw0KbXF0dF90b3BpYyA9ICdhcGlzZXJ2ZXIvZXNwdGVzdCc7DQoNCm1xdHRfY2xpZW50ID0gcGFoby5tcXR0LmNsaWVudC5DbGllbnQoY2FsbGJhY2tfYXBpX3ZlcnNpb249cGFoby5tcXR0LmNsaWVudC5DYWxsYmFja0FQSVZlcnNpb24uVkVSU0lPTjIsIGNsaWVudF9pZD1tcXR0X3RvcGljKycvJytub2RlLmNvZGUoKSwgdHJhbnNwb3J0PSd0Y3AnKTsNCg0KbXF0dF9jbGllbnQub25fbWVzc2FnZSA9IGxhbWJkYSBjbGllbnQsIHVzZXJkYXRhLCBvTXNnIDogRXZlbnQoKS5fZnJvbURvY3VtZW50KG9Nc2cucGF5bG9hZCkucHJvY2VzcygpOw0KbXF0dF9jbGllbnQuY29ubmVjdCgndGVzdC5tb3NxdWl0dG8ub3JnJyk7DQoNCg0KbXF0dF9jbGllbnQuc3Vic2NyaWJlKG1xdHRfdG9waWMpOw0KcHJpbnQoIkNvbm5lY3RlZCEiKTsNCiMjIyMjIyMjIyMjIE1RVFQgQ29ubmVjdGlvbiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQoNCiMjIyMjIyMjIyMgQ0hFQ0sgRk9SIFVQREFURVMgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9bGFtYmRhIDogTm9kZV9UeXBlKCkubmFtZSgiUHl0aG9uIikuZGF0ZShkYXRldGltZS5kYXRldGltZS5ub3coKSkuZmluZCgpKS5zdGFydCgpOw0KIyMjIyMjIyMjIyBDSEVDSyBGT1IgVVBEQVRFUyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCg0Kbm9kZS5zdG9yZSgpOw0KDQpwcmludCgnbWFpbigpJywgJ2xvb3BpbmcgZm9yIG1xdHQgZXZlbnRzJyk7DQoNCm1xdHRfY2xpZW50Lmxvb3BfZm9yZXZlcigpOw0KDQoNCg==",
	"__keys": ["name"],
	"__trMap": []
}