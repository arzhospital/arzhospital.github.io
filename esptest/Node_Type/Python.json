{
	"Id": "3c1e04b7cefa014a4093a06f37c2ac421190912e",
	"active": "true",
	"enabled": "true",
	"code": "python",
	"date": "2024-10-05T18:24:12.936Z",
	"name": "Python",
	"remark": "",
	"__keys": ["name"],
	"__trMap": []
}