<%
let authClass = arClasses.find(_c => _c.EntityMethods.find(m => m.Name=='authorize' && m.IsPublic));
let ems = arClasses.find(_c => _c.Name=='EntityClass');

// the default Set_On date to use
let Set_On = `new Date()`;

let _b64test = s => `/^([0-9a-zA-Z+\/]{4})*(([0-9a-zA-Z+\/]{2}==)|([0-9a-zA-Z+\/]{3}=))?$/.test(typeof(${s}.substring)!=='undefined'?${s}.substring(0, 1000):${s})`;

let _def = (s, v) => %><%=s%> = typeof(<%=s%>)!=='undefined'?<%=s%>:<%=v%>;<%

let _defaults = (obj='this', _c=c) => _c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.Default).forEach(ea => {%>
            if(!<%=obj%>._<%=nName(ea)%>_set){
                <%=obj%>.<%=nName(ea)%>(<%valueOf(ea.Default)%>);
            }
<% });

let log = (n, _this='this') => `${_this}.log(null, undefined, '${n || mName}', 'EntityObject', 0, `;
let warn = (n, _this='this') => `${_this}.log(null, undefined, '${n || mName}', 'EntityObject', 1, `;
let error = (n, _this='this') => `${_this}.log(null, undefined, '${n || mName}', 'EntityObject', 2, `;

let qlType = (ea, bInput) => {
    if(ea.IsBool) return 'Boolean';
    //if(ea.IsDate) return 'DateTime';
    if(ea.IsInt || ea.IsFloat) return 'Int';
    if(ea.EntityType) return nName(ea.EntityType)+(bInput?"Input":"");
    return 'String';
};

// why hard coded???
let _restTools = ['ServiceNow', 'SalesForce', 'RestDBIO', 'GitHub', 'FileSystem'];
let _sqlTools = ['SqlDB', 'SalesForce', 'SnowFlake'];

let clsTools = _c => _c.Tools.map(t => t.type?t.type.name:(t.name || t));
let mainClass = (_arTools, _c=c) => arClasses.find(__c => (_arTools || clsTools(_c)).find(t => clsTools(__c).includes(t))) || (!(_arTools || clsTools(_c)).length && arClasses[0]);

let _eaTypes = (_c=c, bAll) => _FrEMD._toJS(Object.assign({}, ..._c.EntityAttributes.filter(ea => !ea.EntityMethod && bAll?true:ea.EntityType).map(ea => ({[nName(ea)]: nName(ea.EntityType) || _FrEMD._attr(ea)}))));

let _cField = (ea, _c=ea.EntityClass) => ((ea.EntityType?(ea.EntityType.TypedAttributes.find(ta => ta.EntityClass==_c) || ea.EntityClass.EntityAttributes.find(_ea => _ea.EntityType==_c)):null) || {Name: ""}).Name;

let _cName = (cn=c.Name, bAlias) => {
    if(cn.Name) cn = cn.Name;
    let _c = arClasses.find(ec => ec.Name==cn);
    if(!_c) return '';
    return nName(_c, bAlias);
};

let alias = (cn, j='.') => (scope + '.' + _cName(cn, true).replace(_cName(cn), '')).split('.').filter(n => n).join(j);
let nscope = alias('Node');

let _vCode = k => {%>(<%valueOf(k.Code)%> || ("<%=nCode(k)%>"))<%};
let _nCode = (ea, bTyped) => ea?("this._nCode('" + nCode(ea) + (bTyped?('_' + ea.EntityClass.Plural.replace(/ /g, '_')):"")  + "', " + (bTyped?null:_FrEMD._toJS(ea.Code)) + ")"):"this._nCode()";
let mRouting = (c, m) => {
    if (!c && m) c = m.EntityClass;
    if (!m && !c) return "";
    if (!m) m = c;
    if (!m.Routing && !c.Routing) return "";

%>(_node, method) => {
    	let log = (obj, ...msg) => this.log("<%=nName(c)%>", obj, "<%m?m.Name:''%>" || method, "Router", 0, ...msg);
    	let warn = (obj, ...msg) => this.log("<%=nName(c)%>", obj, "<%m?m.Name:''%>" || method, "Router", 1, ...msg);
    	let error = (obj, ...msg) => this.log("<%=nName(c)%>", obj, "<%m?m.Name:''%>" || method, "Router", 2, ...msg);
    	let oScope = <%=alias()%>;
    	let pScope = <%=scope%>;
    	let nScope = <%=nscope%>;

        try{
        <%functionOf(m.Routing)%>
        }catch(ex){
            warn(ex);
        }
}
<%};

let mName = '';

let functionOf = (fun, _this='this') => {%>
        let __ret = undefined;
    <% if(fun){%>
        <% if(typeof(fun)==='object'){%>
            <% clsTools(c).forEach(t => {%>
        if(<%=_this%>.Tool && <%=_this%>.Tool.type.name=="<%=t%>"){
                <% if(typeof(fun[t])==='function'){%>
            __ret = <%=fun[t]%>;
                <% }else{%>
            __ret = <%=(JSON.stringify(fun[t]) || '""')%>;
                <% }%>
        }
            <% })%>
        <% }else{%>
            __ret = <%=fun%>;
        <% }%>
    <% }%>
        if(typeof(__ret)==='string' && __ret.startsWith("s(") && __ret.endsWith(")")){
            __ret = this.runScript(__ret.slice(2,-1));
        }
        if(typeof(__ret)==="function"){
            __ret = __ret(<%=_this%>);
        }
        return __ret;
<%};

let valueOf = (fun, _this='this') => {%>((
(oScope) => {
    try{
<%functionOf(fun, _this)%>
    }catch(_vOfEx){
        <%=warn()%>'valueOf', _vOfEx, <%=_FrEMD._toJS(fun)%>);
    }
}
)(<%=alias()%>))<%};

let unRecurse = (obj, fun, fArgs='arguments', sRet, validity=`this.__config('unRecurse.validity', 0.5)`, idf) => {
    idf = idf || `(this?this.__config('idField', 'Id'):'Id')`;
    fun = fun || `"${mName}"`;
    sRet = `
        try{
            if(v){
                v.date = new Date().getTime();
                v.reused++;
            }
            
            ${sRet}
        }catch(sRet_ex){
            this.log(null, undefined, ${fun}, '${mName}.unRecurse', 1, 'sRet', sRet_ex);
        }finally{
            if(v && v.reused>1) return v?v.obj:v;
        }
    `;
    let bDanger = () => %>(["_toHash"].indexOf(<%=fun%>)>=0)<%;
%>
        let v = undefined;
        try{
            <%=scope%>.unRecurseAbort = <%=scope%>.unRecurseAbort || {};
            if(<%=scope%>.unRecurseAbort[<%=fun%>]){
                <%=warn(`${mName}.unRecurse`)%>`Aborting as per <%=scope%>.unRecurseAbort.${<%=fun%>}`);
                <%=sRet%>
            }

            let _id = null;
            if(typeof(<%=obj%>)==='undefined'){
                <%=warn(`${mName}.unRecurse`)%>"Null input", <%=obj%>, <%=fun%>, <%=fArgs%>);
                return <%=obj%>;
            }else if(typeof(<%=obj%>)==='string'){
                _id = this.hashCode(<%=obj%>);
            }else{
                _id = <%=obj%>[<%=idf%>];
            }
            
            if(typeof(_id)==='undefined' || !_id){
                if(<%=obj%>.Id && <%=obj%>.Id==<%=obj%>.Id){
                    _id = <%=obj%>.Id;
                }else if(this.Id==this.Id){
                    _id = this.Id;
                }else if(this.Set_On){
                    _id = this._toHash(<%=fArgs%>, {onlyUnique: true}, <%=fun%>);
                    <%=log(`${mName}.unRecurse`)%>"this.hashed_id", _id, <%=fun%>, <%=fArgs%>);
                }else if(<%=obj%>.EntityClass){
                    _id = <%=obj%>.EntityClass.Id || <%=obj%>.EntityClass.Name || this._toHash(<%=fArgs%>, {depth: <%bDanger()%>?3:undefined}, <%=fun%>);
                }else{
                    _id = this.EntityClass.Id || "<%=c.Id%>" || this._toHash(<%=fArgs%>, {depth: <%bDanger()%>?3:undefined}, <%=fun%>) || "NULL";
                }
            }
            
            // if("<%=nName(c)%>"=="User" && <%=fun%>=="_toSNFlow") <%=warn(`${mName}.unRecurse`)%>"_id", _id, <%=fun%>, <%=fArgs%>);
            
        	<%=scope%>._unRecurse = <%=scope%>._unRecurse || {};
        	<%=scope%>._unRecurse.<%=nName(c)%> = <%=scope%>._unRecurse.<%=nName(c)%> || {};
        	<%=scope%>._unRecurse.<%=nName(c)%>[<%=fun%>] = <%=scope%>._unRecurse.<%=nName(c)%>[<%=fun%>] || {};
        	<%=scope%>._unRecurse.<%=nName(c)%>[<%=fun%>][_id] = <%=scope%>._unRecurse.<%=nName(c)%>[<%=fun%>][_id] || {};
        	
            v = <%=scope%>._unRecurse.<%=nName(c)%>[<%=fun%>][_id];

            if(v && Math.abs(new Date().getTime() - v.date) < (1000*<%=validity%>)){
                if((<%bDanger()%>?new Date(0):(this.Set_On || new Date(0))).getTime() > v.date){
                    <%=log(`${mName}.unRecurse`)%>`Spawning in ${<%=fun%>}`, _id, <%=fun%>, <%=obj%>, v.reused, <%=validity%>);
                }else{
                    <%=log(`${mName}.unRecurse`)%>"Selected hash", _id, <%=fun%>, <%=obj%>, v.reused, <%=validity%>);
                }
                <%=sRet%>
            }

            <%=log(`${mName}.unRecurse`)%>"Pushing hash", _id, <%=fun%>, <%=obj%>);
        	v = <%=scope%>._unRecurse.<%=nName(c)%>[<%=fun%>][_id] = {
                date: new Date().getTime(),
                args: JSON.stringify(<%=fArgs%>),
                obj: <%=obj%>,
                reused: 0,
                path: '',
                _id,
            };
            
            <%/*experimental: remove this if all goes wrong*/%>
            <%=sRet%>
    	}catch(unRecEx){
    	    if(!unRecEx.toString().indexOf('RangeError: ')){
    	        <%=scope%>.unRecurseAbort[<%=fun%>] = true;
    	    }
    	    <%=error(`${mName}.unRecurse`)%><%=obj%>, <%=fun%>, <%=fArgs%>, unRecEx.toString());
    	    <%=sRet%>
    	}
<%
};

let invokeRule = r => {
%>
await (async (authObj) => {
    let _rule = <%=_FrEMD._toJS(r)%>;
    delete _rule.Script;
    // ruleRuns.push(_rule);
    try{
        <%=r.Script%>
    }catch(ex){
        _rule.Exception = ex;
    }
})(authObj);
<%
}
%>

class <%=nName(c)%> {
    <%=mName='constructor'%>(id, tool) {
        //super(id, tool);

        this.Scope = "<%=scope%>";
        this.Debug = <%=_FrEMD._toJS(c.Debug)%>;
        this.Config = <%=_FrEMD._toJS(c.Config)%>;
        this.Test = <%=_FrEMD._toJS(c.Test)%>;
        this.Tools = <%=_FrEMD._toJS(c.Tools)%>;
        this.Mappings = <%=_FrEMD._toJS(c.Mappings)%>;

        // avoid super, keep this here
        this.__ID = this.__ID || {};
        this.Tool = tool;
        this.Id = id;

        this.ValueEntities = [];

        this.Date = null;

        this.clear_THIS();
        this.EntityValues = [];
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
        this.EntityValues.push({
            EntityAttribute: {
<% if(Number(ea.Id)){%>
                Id: "<%=ea.Id%>",
<% }%>
                Name: "<%=ea.Name%>",
                OPERATORS: {Name: "="},
                EntityClass: this.EntityClass,
            },
            OPERATORS: {}
        });
        this.clear_<%=nName(ea)%>();
<% }); %>

<% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {%>
        this.clear_<%=nName(ta)%>_<%=ta.EntityClass.Plural.replace(/ /g, '_')%>();
<% }); %>
    }
    
    <%=mName='_defaults'%>(){
<%_defaults()%>
        return this;
    }
    
    <%=mName='get EntityClass'%>(){
        let ec = {
<% if(Number(c.Id)){%>
            Id: "<%=c.Id%>",
<% }%>
            Name: "<%=c.Name%>",
            OPERATORS: {Name: "="},
        };

<% if(c.EntityModuleid){ %>
        ec.EntityModule = {
            Id: <%=c.EntityModuleid%>
        };
<% }%>

        // that's why we need it as a getter
        if(!Number(ec.Id) && <%=scope%>.EntityClasses){
            let cid = <%=scope%>.EntityClasses.find(c => Number(c.Id) && c.Name==ec.Name);
            if(cid) ec.Id = cid.Id;
        }
        return ec;
    }

	<%=mName='get Id'%>() {
		return this.__ID[this.Tool.name] || this._uuid();
	}

	<%=mName='set Id'%>(id) {
		if (!this.Tool) {
			<%=log()%>"Empty Tool", this.Tools.length, <%=scope%>.Tools.length);
			return;
		}
		if(this.__ID[this.Tool.name]==id) return;
		this.__ID[this.Tool.name] = id;
	}

    <%=mName='get Tool'%>() {
        if(typeof(this.__Tool)!=='undefined') return this.__Tool;
        let noTool = {
            name: '',
            type: {name: ''},
        };
        if(typeof(<%=scope%>.Tools)!=="undefined" && !Array.isArray(<%=scope%>.Tools)){
            <%=error()%>"<%=scope%>.Tools is not an array: ", <%=scope%>.Tools);
            return noTool;
        }
        
        let ret = (<%=scope%>.__lastTool?[<%=scope%>.__lastTool]:[]).concat(this.Tools).find(t => (<%=scope%>.Tools || []).find(_t => t == _t.name || t.name==_t.name));
        if(typeof(ret)!=='undefined') ret = (<%=scope%>.Tools || []).find(t => t.name==ret || t.name==ret.name);
        if(typeof(ret)==='undefined'){
            if(this.Tools.length){
                ret = {
                    name: this.Tools[0],
                    type: {
                        name: this.Tools[0]
                    }
                };
            }else ret = noTool;
        }
        return ret;
    }

    <%=mName='set Tool'%>(tool) {
        if (typeof(tool)==='undefined') return;
        if(typeof(tool)==="string"){
            tool = {name: tool};
        }
        if(tool.EntityClass){
            tool = tool._toDocument();
        }
        if(typeof(tool.name)==='undefined' && typeof(tool.type.name)==='undefined') return;
        tool.type = tool.type || {name: tool.name};
        
        if(!tool.type && !tool.name){
            <%=warn()%>"Empty Tool object");
            return;
        }

        let t = (<%=scope%>.Tools || []).filter(t => t.name && t.type).find(t => (t.name == tool.name) || (t.type.name == tool.type.name));
        if (!t) {
            <%=log()%>"no matching tool", tool, <%=scope%>.Tools);
            return;
        }
        
        <%=scope%>.__lastTool = this.__Tool = t;
        
        return this;
    }

    <%=mName='THIS'%>(v, co){
        if(typeof(v)==='undefined') return this._THIS;
        if(!v) return this;
        v = Array.isArray(v)?v:[v];
        this._THIS = v.filter(_v => typeof(_v)==='object' && _v.EntityClass && _v.EntityClass.Name==this.EntityClass.Name && _v.Scope==this.Scope);
        if (co) this._THIS_coop = co;
        return this;
    }
    
    <%=mName='clear_THIS'%>() {
        this._THIS = [];
        this._THIS_coop = '';
        return this;
    }
    
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
    /** start: setters and getters for <%=ea.Name%> **/
    <%=mName=nName(ea)%>(v, co, id) {
        if (co) this._<%=nName(ea)%>_coop = co;

        var ev = this.EntityValue("<%=ea.Name%>");
        if (!ev){
            return this;
        }

        if (id) ev.Id = id;

        if (typeof(v)!=='undefined') {
            // values were given, therefore a setter

    <% if(ea.IsArray){%>
            v = Array.isArray(v)?v:[v];
            v = v.map(_v => {
    <% }else{%>
            v = (_v => {
    <% }%>

    <% if(ea.IsDate){%>
                _v = Object.prototype.toString.call(_v) === '[object Date]'?_v:(new Date(_v));
                if(isNaN(_v.getTime())) _v = null;
    <% }%>
    <% if(ea.IsBool){%>
                _v = ["true", "1", "yes", true, 1].includes(_v);
    <% }%>
    <% if(ea.IsInt || ea.IsLong || ea.IsFloat){%>
                if(isNaN(_v)) _v = 0;
    <% }%>
    <% if(ea.IsText){%>
                if(typeof(_v)==='object') _v = JSON.stringify(_v);
    <% }%>

    <% if(ea.EntityType){%>
                if(_v && !_v.EntityClass){
                    <%=log()%>"using _toDocument for invalid setter value", _v);
                    _v = new <%=scope%>.<%=_cName(ea.EntityType, true)%>()._fromDocument(_v);
                }

                if(_v && _v.EntityClass.Id!=='<%=ea.EntityType.Id%>' && _v.EntityClass.Name!=='<%=ea.EntityType.Name%>'){
                    <%=warn()%>"Invalid Setter value", _v, "<%=ea.EntityType.Id%>", _v.EntityClass.Name, "<%=ea.EntityType.Name%>");
                }else{
                    _v = ((_v && !this.Id) ? _v.toEntityObject() : _v);
                }
    <% }%>

                return _v;
    <% if(ea.IsArray){%>
            });
    <% }else{%>
            })(v);
    <% }%>
    
    <% if(ea.EntityType){%>
            delete ev.ObjectValueid;
            ev.ObjectValue = v;
    <% }else{%>
            ev.<%=_FrEMD._attr(ea)%>Value = v;
    <% }%>

            if(true || this._<%=nName(ea)%>!=v){
                this._<%=nName(ea)%>_set = <%=Set_On%>; // a change in value
    <% if(ea.EntityType){%>
                <%=log()%>"Set after", this._<%=nName(ea)%>?this._<%=nName(ea)%>.Set_On:null, v?v.Set_On:null);
                /*if(v) this._<%=nName(ea)%>_set = v.Set_On;*/
    <% }%>
            }

            this._<%=nName(ea)%> = v;
            if (co) ev.OPERATORS.<%=_FrEMD._attr(ea)%>Value = co;

            return this;
        } else {
            return this.i18n(ev, this._<%=nName(ea)%>);
        }
    }

    <%=mName='clear_'+nName(ea)%>() {
        let ret = this._<%=nName(ea)%>;
        this._<%=nName(ea)%>_set = null;
        this._<%=nName(ea)%> = null;
        this._<%=nName(ea)%>_coop = "";
        return ret;
    }

    /** end: setters and getters for <%=ea.Name%> **/
<% }); %>
<% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => { let taName = ta.EntityClass.Plural.replace(/ /g, '_');%>
    /** start: setters and getters for <%=ta.Name%>_<%=taName%> **/
    <%=mName=nName(ta)+'_'+taName%>(v, co, bClear) {
        if(typeof(v)==="undefined") return this._<%=nName(ta)%>_<%=taName%>;
        
        if(v && v.toEntityObject && v.EntityClass.Id!=='<%=ta.EntityClass.Id%>' && v.EntityClass.Name!=='<%=ta.EntityClass.Name%>') return this;
        
        v = Array.isArray(v)?v:[v];
        
        v = v.filter(_v => !v || _v._<%=nName(ta)%>_set).concat(v.filter(_v => _v && !_v._<%=nName(ta)%>_set).map(_v => {
            if(!_v.constructor){
                <%=warn()%>"<%=nName(ta)%> has no constructor", _v);
            }else if(_v.constructor.name=="Object"){
                _v = new <%=scope%>.<%=nName(ta.EntityClass, true)%>()._fromDocument(_v)
                _v.<%=nName(ta)%>(this);
                return _v;
            }else if(_v.constructor.name!="<%=nName(ta.EntityClass)%>"){
                <%=warn()%>"<%=nName(ta)%> not valid", _v, _v.constructor.name, "<%=nName(ta.EntityClass)%>");
            }else{
                _v.<%=nName(ta)%>(this);
                return _v;
            }
        }).filter(_v => _v));
        
        if(bClear) this.clear_<%=nName(ta)%>_<%=taName%>();
        this._<%=nName(ta)%>_<%=taName%>.push(...v);
        this._<%=nName(ta)%>_<%=taName%>_set = <%=Set_On%>;
        if (co) this._<%=nName(ta)%>_<%=taName%>_coop = co;

        return this;
    }
    clear_<%=nName(ta)%>_<%=taName%>() {
        let ret = this._<%=nName(ta)%>_<%=taName%>;

        this._<%=nName(ta)%>_<%=taName%>_set = null;
        this._<%=nName(ta)%>_<%=taName%> = new Array();
        this._<%=nName(ta)%>_<%=taName%>_coop = null;
        return ret;
    }
    /** end: setters and getters for <%=nName(ta)%>_<%=taName%> **/

<% }) %>

    <%=mName='log'%>(className, obj, m, type, level, ...msg){
        className = className || "<%=nName(c)%>";
        type = type || "EntityObject";
        
<% if(mainClass()!=c){%>
        return new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(className, obj, m, type, level, ...msg);
<% }else{%>
        try{
			let debug = this.Debug;
			let levels = ["info", "warn", "error", "critical"];

			debug = debug || Object.fromEntries(new Map(levels.map(l => [l, '*'])));

			let functions = Object.assign({}, ...levels.map(l => ({
				[l]: debug[l] ? debug[l].split(',') : []
			})));

			let css = 'background: #00ff99; color: #008000';
			let fg = '\x1b[32m';
			switch (Number(level)) {
				case 1:
					css = 'background: #ffff00; color: #000080';
					fg = '\x1b[33m';
					break;
				case 2:
					css = 'background: #b22222; color: #ffffff';
					fg = '\x1b[31m';
					break;
				case 3:
					css = 'background: #b22222; color: #ffffff';
					fg = '\x1b[31m[CRITICAL]';
					break;
			}

			if (functions[levels[Number(level) || 0]].every(f => !['*.*', '*.' + m, '*', m, className + '.' + m, className + '.*'].includes(f))) {
				return;
			}

			if (typeof(global) !== 'undefined') {
				console.log(fg + "%s\x1b[0m", `${type || '<type>'}: ${this.Scope}.${className}.${m || '<method>'}()`, ...(typeof(obj) === 'undefined' ? (msg || []) : [obj].concat(msg || [])));
			} else {
				console.log(`%c ${type || '<type>'}: ${this.Scope}.${className}.${m || '<method>'}()`, css, ...(typeof(obj) === 'undefined' ? (msg || []) : [obj].concat(msg || [])));
			}
		} catch (ex) {
			console.log(ex);
		}
<% }%>
	}

    async <%=mName='setInterval'%>(className, fun, minutes, ...args){
        className = className || "<%=nName(c)%>";
<% if(mainClass()!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(className, fun, minutes, ...args);
<% }else{%>
		try {
    		let fName = fun.toString().split(')')[0] + ')';
    		try {
    			// this.__time(`${fName}.Loop`);
    
    			this.__time(`${fName}.Call`);
    			let ret = await fun(...args.concat([new Date()]));
    
    			<%=log()%>`{Call: ` + this.__time(`${fName}.Call`) + `, Loop: ` + this.__time(`${fName}.Loop`) + '}');
    			if (!ret) {
    				<%=log()%>`did not return true, exiting looper (${this.__time(fName)})`);
    				return;
    			}
    		} catch (ex) {
    			<%=error()%>this.__time(fName), ex);
    			console.trace();
    		}
    		if (!Number(minutes)) {
    			<%=log()%>this.__time(fName), "Not repeating. Minutes is " + minutes);
    			return;
    		}
    		await new Promise(r => setTimeout(r, minutes * 60 * 1000));
    		await this.<%=mName%>(null, fun, minutes, ...args);
		} catch (ex) {
			<%=error()%>ex);
		}
<% }%>
	}

    async <%=mName='_execute'%>(className, scope, m, fRouter, fScript, oParams = {}, source){
		this.__time(`<%=scope%>.<%=_cName(mainClass(), true)%>.${m}`);
		className = className || "<%=nName(c)%>";
		scope = scope || <%=scope%>;
		source = source || this;

<% if(mainClass()!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(className, scope, m, fRouter, fScript, oParams, this);
<% }else{%>
		delete <%=scope%>._unRecurse; // experimental
		
    	let __beforeRules = oParams.__beforeRules || [];
    	let __afterRules = oParams.__afterRules || [];
    	delete oParams.__beforeRules;
    	delete oParams.__afterRules;

        let log = (...s) => <%=log()%>className, m, ...s);
        let warn = (...s) => <%=warn()%>className, m, ...s);
        let error = (...s) => <%=error()%>className, m, ...s);
            
        try{
    		let lParams = Object.entries(oParams).map(x => x[1]);
    		let results = [];
    
    		let nodes = [];
    		
    		if (<%=nscope%>._node && await fRouter(<%=nscope%>._node, m)) {
    			nodes.push(<%=nscope%>._node);
    		}
    
    		if (<%=nscope%>._node && <%=nscope%>._node._parent && await fRouter(<%=nscope%>._node.parent(), m)) {
    			nodes.push(<%=nscope%>._node.parent());
    		}
    
    		for await (const cn of (<%=nscope%>._node?<%=nscope%>._node.parent_Nodes():[])) {
                if (await fRouter(cn, m)) {
                	log('adding child node', cn);
                	nodes.push(cn);
                }
    		}
    
    		// remove any nulls
    		nodes = nodes.flat().filter(n => n);
    		
    		if (!nodes.length) {
    			nodes.push(<%=nscope%>._node);
    		}
    		
    		nodes = this._unique(nodes, '_code');
    		log('nodes.length', nodes.length);

    		for await (const n of nodes) {
    			let nRet = null;
    			log(`${m} @ ${n?.code() || 'LOCAL'}`);
    			if (!n || this._sameEntity(<%=nscope%>._node, n)) {
    				// local script
    				for await (const r of __beforeRules) {
                        <%valueOf("r.Script")%>
    					//await this._Script(className, r.Script, m, r.Name || 'BeforeRule', scope, null, ...lParams);
    				}

    				nRet = await fScript();

    				for await (const r of __afterRules) {
                        <%valueOf("r.Script")%>
    					//await this._Script(className, r.Script, m, r.Name || 'AfterRule', scope, null, ...lParams);
    				}
    			} else {
    				nRet = await source._invokeNode(n, m, oParams);
    			}
    
    			results.push({
    				node: n,
    				ret: nRet
    			});
    		}
    		log(results, "_execute", 'Results');
    
    		let errors = results.filter(r => r.ret && r.ret.__exception).map(r => ({
    			node: r.node ? {
    				code: r.node.code(),
    				address: r.node.address()
    			} : null,
    			__exception: r.ret.__exception
    		}));

    		if (errors.length) {
    			warn("errors", errors);
    		}
    
    		return results;
        }catch(ex){
            error(ex);
        }
<% }%>
	}

    async <%=mName='_Script'%>(className, script, m, type, scope, _node, ...sfArgs){
        className = className || "<%=nName(c)%>";
        scope = scope || <%=scope%>;
        
<% if(mainClass()!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(className, script, m, type, scope, _node, ...sfArgs);
<% }else{%>
    	if (typeof(script) === 'undefined') return;
    	
        try{
    		if (typeof(script) === 'string') script = this.runScript(`() => {${script}}`);
    
    		let ret = null;
    		if (typeof(script) === 'function') {
    			ret = await script();
    		}
    
    		return ret;
        }catch(ex){
            <%=warn()%>className, m, type, script, ex);
        }
<% }%>
	}

    <%=mName='_sameEntity'%>(...arEntities){
        if(arEntities.length==0) return false;
        if(arEntities.length==1) arEntities.push(this);
<% if(mainClass()!=c){%>
        return new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(...arEntities);
<% }else{%>
        try{
            return arEntities.slice(1).every(e => {
                let v = arEntities[0];
                let negTest = {
                    vNull: v==null,
                    eNull: e==null,
                    vObject: typeof(v)!=='object',
                    eObject: typeof(e)!=='object',
                };
                <%=log()%>1, negTest);
                if(Object.keys(Object.assign({}, ...Object.keys(negTest).filter(k => negTest[k]).map(k => ({v, e, [k]: true})))).length) return false;
                // passed initial consistency check
                
                if(v==e) return true;
                
                negTest = {
                    evConstr: v.constructor.name!=e.constructor.name,
                    eEntity: !e.EntityClass,
                    vEntity: !v.EntityClass,
                    evEntityNames: typeof(e.EntityClass.Name)!=='undefined' && e.EntityClass.Name!=v.EntityClass.Name,
                    evEntityIds: typeof(e.EntityClass.Id)!=='undefined' && e.EntityClass.Id!=v.EntityClass.Id,
                    evIDs: v.Id==v.Id && e.Id==e.Id && v.Id!=e.Id,
                    evHash: v._toHash(null, {onlyUnique: true}, '<%=mName%>')!=e._toHash(null, {onlyUnique: true}, '<%=mName%>'),
                };
                <%=log()%>2, negTest);
                negTest = Object.assign({}, ...Object.keys(negTest).filter(k => negTest[k]).map(k => ({v, e, [k]: true})));
                if(!Object.keys(negTest).length) return true;
                
                <%=log()%>3, negTest);
                return false;
            });
        }catch(ex){
            <%=error()%>ex);
        }
<% }%>
    }

    <%=mName='get Set_On'%>() {
        let ret = new Date(Math.max(
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
            this._<%=nName(ea)%>_set,
<% })%>            
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            this._<%=taName%>_set,
<% })%>
        ));
        
        if(!ret || !(ret instanceof Date && !isNaN(ret))) return undefined;
        return ret;
    }
    
    <%=mName='get Set_Count'%>() {
        return [
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
            this._<%=nName(ea)%>_set,
<% })%>            
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            this._<%=taName%>_set,
<% })%>
        ].filter(s => s).length;
    }
    
    <%=mName='_flatten'%>(depth){
        <%=warn()%>"DEPRECATED");
        let ret = {};
        if(!depth) return ret;
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
        ret._<%=nName(ea)%>_set = this._<%=nName(ea)%>_set;
        ret._<%=nName(ea)%>_coop = this._<%=nName(ea)%>_coop;
        ret.<%=nName(ea)%> = this.<%=nName(ea)%>()?this.<%=nName(ea)%>()<%if(ea.EntityType){%>.<%=mName%>(depth-1)<%}%>:this.<%=nName(ea)%>();
<% })%>
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
        ret.<%=taName%> = this.<%=taName%>().map(t => t?t.<%=mName%>(depth-1):t);
<% })%>
        return ret;
    }
    
    <%=mName='_toHash'%>(args, options, fSource){
        options = options || {};
        
        let oHash = {
            class: "<%=nName(c)%>",
            source: fSource,
            args: args,
            _this: {}
        };
        
        if(!options.noThis && fSource!="<%=mName%>" && (typeof(options.depth)==='undefined' || --options.depth>0)){
            this.__export(oHash._this, {
                OPERATORS: true,
                _map: options._map,
                Id: (obj, idCode, v) => obj[idCode] = options.onlyUnique?undefined:v,
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => {
                    if(options.onlyUnique && !<%valueOf(ea.IsUnique)%>) return;
                    <% if(ea.EntityType){%>if(options.noTypes) return;<%}%>
                    obj[eaCode] = <% if(ea.EntityType){%>v?v.<%=mName%>(null, options, fSource):<%}%>v;
                },
<% })%>
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => {
                    if(options.onlyUnique) return;
                    obj[eaCode] = (v || []).map(_v => _v.<%=mName%>(null, options, fSource));
                },
<% })%>
<% c.EntityFields.forEach(ef => {%>
                ef_<%=nName(ef)%>: (obj, efCode, v) => {
                    if(options.onlyUnique && !<%valueOf(ef.IsUnique)%>) return;
                    obj[efCode] = v;
                },
<% })%>
            }, "<%=mName%>");
        }
        
        if(options.noArgs) oHash = oHash._this;
        return options.noCode?oHash:this.hashCode(JSON.stringify(oHash));
    }

    async <%=mName='_authorize'%>(username, password, bServer){
<% if(mainClass()==c){%>
        if(!username && !password && !<%=scope%>.__token && this.Test['<%=mName%>.username']){
            username = this.Test['<%=mName%>.username'];
            password = this.Test['<%=mName%>.password'];
        }

        if(bServer){
            if(username && !<%=scope%>._testUser && this.Test['<%=mName%>.testUser']){
                <%=scope%>._testUser = await new <%=scope%>.<%=nName(c, true)%>()._fromDocument(this.Test['<%=mName%>.testUser']).active(true).enabled(true).username(username).password(password).store();
            }
            let ret = await this.username(username, '=').password(password, '=').active(true).enabled(true).find();
            <%=log()%>"Server: " + bServer+", Obj:", ret);
            
            if(ret){
                if(typeof(jsonwebtoken)!=='undefined'){
                    ret = jsonwebtoken.sign(ret._toDocument(), this.__config('secret'), { expiresIn: '1800s' });
                }else{
                    ret = this._btoa(JSON.stringify(ret._toDocument()));
                }
            }
            
            ret = {
                access_token: ret,
            };
            <%=log()%>"Server: " + bServer+", token: ", ret);
            return ret;
        }else{
            let client_id = this.__config('client_id');
            let client_secret = this.__config('secret');
    
            if(!username && !password && <%=scope%>.__token){
                <%=log()%>"No username/password and token already exists");
                return;
            }

    <%if(_cName('oAuth Token')){%>
            let data = {
                grant_type: 'password',
                username,
                password,
                client_id,
                client_secret,
            };
            
            let config = {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            };
            if(!username && !password && <%=scope%>.__token && <%=scope%>.__token.refresh_token){
                data = {
                    grant_type: "refresh_token",
                    refresh_token: <%=scope%>.__token.refresh_token,
                    client_id,
                    client_secret,
                };
                config.headers.Authorization = `${<%=scope%>.__token.token_type} ${<%=scope%>.__token.access_token}`;
            }
            
            let ret = await axios.post(`http${<%=nscope%>._node.parent().secure()?'s':''}://${<%=nscope%>._node.parent().address()}:${<%=nscope%>._node.parent().port() || 3000}/oauth/token`, Object.keys(data).map(key => key + '=' + data[key]).join('&'), config);
            if(ret.data.access_token){
                <%=scope%>.__token = ret.data;

                if(<%=scope%>.__token.refresh_token){
                    if(axios.interceptors.response.clear) axios.interceptors.response.clear();
                    axios.interceptors.response.use(response => response, async error => {
                        const originalRequest = error.config;
                        if (error.response.status === 401 && !originalRequest._retry && originalRequest.headers.Authorization.indexOf(<%=scope%>.__token.access_token)>0) {
                            originalRequest._retry = true;
                            await this._authorize();
                            originalRequest.headers.Authorization = 'Bearer ' + <%=scope%>.__token.access_token;
                            return axios(originalRequest);
                        }
                        return Promise.reject(error);
                    });
                }
            }
    <% }else if(authClass){%>
    	<%=scope%>.__token = await new <%=scope%>.<%=nName(authClass)%>().username(username).password(password).<%=mName.replace('_', '')%>();
    <% }else{%>
        <%=warn()%>"No authorization defined");
    <% }%>
        }
<% }else{%>
        return await new <%=scope%>.<%=nName(mainClass())%>().<%=mName%>(username, password, bServer);
<%}%>
    }
    
<% if(mainClass()==c){%>
    async <%=mName='_server'%>(options={}) {
        try{
            if(options.clearConsole) console.clear();

            if(typeof(window)!=='undefined' && <%=scope%>.hrefs){
        		for await (const l of <%=scope%>.hrefs.map(n => n.lib)) {
        			await this.require(l, <%=scope%>.hrefs);
        		}
            }else if(typeof(WorkerGlobalScope)!=='undefined'){
                // a web-worker
        		for await (const l of <%=scope%>.hrefs.map(n => n.lib)) {
        			await this.require(l, <%=scope%>.hrefs);
        		}
            }
    
            let secure = this.__config('secure');
            if(typeof(global)!=='undefined'){
                // globals
                var globalModules = {
                    express: 'express',
                    https: 'https',
                    http: 'http',
                    selfsigned: 'selfsigned',
                    util: 'util',
                    cors: 'cors',
                    bodyParser: 'body-parser',
                    axios: 'axios',
                    //crypto: 'crypto',
                    os: 'os',
                    //jmespath: 'jmespath',
                    jsonpath: 'jsonpath',
                    jsonata: 'jsonata',
                    DotObject: 'dot-object',
                    machineid: 'node-machine-id',
                    
                    minimist: 'minimist',
                
<% if(c.Config && c.Config['graphql']){%>
                    graphqlHTTP: 'express-graphql',
                    graphql: 'graphql',
                    playground: 'graphql-playground-middleware-express',
<% }%>

<% if(c.Config && c.Config['email.host']){%>
                    nodemailer: 'nodemailer',
<% }%>

<% if(c.Config && c.Config['totp.secret']){%>
                    otpauth: 'otpauth',
<% }%>

<% if(_cName('Node')){%>
                    child_process: 'child_process',
<% }%>

<% if(_cName('Event')){%>
                    events: 'events',
                    socketio: 'socket.io',
                    mqtt: 'mqtt',
                    amqplib: 'amqplib',
                    protobufjs: 'protobufjs',
<% }%>

<% if(mainClass(['FileSystem'])){%>
                    fs: 'fs',
<% }%>

<% if(mainClass(['Kafka'])){%>
                    kafkajs: 'kafkajs',
<% }%>

<% if(mainClass(['Neo4j'])){%>
                    neo4j: 'neo4j-driver',
<% }%>

<% if(_cName('oAuth Token')){%>
                    OAuthServer: 'express-oauth-server',
<% }else if(authClass){%>
                    jsonwebtoken: 'jsonwebtoken',
<% }%>


<% if(mainClass(['SqlDB'])){%>
                    sqlite: 'sqlite3',
                    mysql: 'mysql',
                    postgres: 'pg',
<% }%>
<% if(mainClass(['SnowFlake'])){%>
                    snowflake: 'snowflake-sdk',
<% }%>
<% if(mainClass(['MongoDB'])){%>
                    mongodb: 'mongodb',
<% }%>
<% if(mainClass(['RxDB'])){%>
                    RxDB: 'rxdb',
<% }%>
<% if(mainClass(['Excel'])){%>
                    XLSX: 'xlsx',
<% }%>
                };
            
                let missingGlobalModules = Object.entries(globalModules).map(e => {
                    try{
                        global[e[0]] = require(e[1]);
                    }catch(ex){
                        <%=warn()%>ex);
                        return e[1];
                    }
                }).filter(e => e);
                if(missingGlobalModules.length) <%=warn()%>"npm install " + missingGlobalModules.join(' '));
            }
            
    		<%=log()%>`Starting [${<%=nscope%>._node?<%=nscope%>._node.code():''}]...`);

			if (options.loadTools) await new <%=scope%>.<%=_cName('Node', true) || _cName()%>()._loadTools(options.saveTools);

<% if(_cName('Node')){  /* Tools first or Nodes first??? */%>
            if(options.initNode){
                <%=nscope%>._node = await new <%=scope%>.<%=_cName('Node', true)%>().secure(secure).init(this.__config('init.loop', 0.5));
                if(typeof(<%=nscope%>._node)==='undefined') return <%=error()%>"<%=nscope%>._node is undefined!");
            }
<% }%>

    		if (typeof(this.init)==='function' && options.initSelf) {
    			await this.init();
    
    			let sqlTool = (<%=scope%>.Tools || []).find(t => t.__dmlStatements);
    			if (options.copyDML && sqlTool) {
    				let dmls = sqlTool.__dmlStatements;
    				if (sqlTool.type.name == 'SqlDB') dmls = [ /*"Customers", "Orders", "Shippings", */ "demo"].map(t => `drop table if exists ${t}`).concat(dmls);
    				_FrEMD._copyTextToClipboard(dmls.join(';\n'));
    			}
    		}

<% if(_cName('Node Type')){%>
            // refresh script
            this.setInterval(null, async (/*version*/) => {
                if(this.sr().bLocal) return false;
                
                let sct = new <%=scope%>.<%=_cName('Node Type', true)%>(null, 'FileSystem')._fromDocument(<%=scope%>.__<%=_cName('Node Type')%> || {name: 'NodeJS'});
                let ct = await sct.find();
                if(!ct || !ct.active() || !ct.enabled()) return false;
                
                if( !sct.date() || ((ct.date().getTime() - sct.date().getTime())/1000) > 5 ){
                    <%=log()%>`Newer version found: [date: ${ct.date().toISOString()}, tool: ${ct.Tool.name}], storing...`);
                    if(typeof(global)!=='undefined'){
                        // we want to store the content directly to the nodejs.js file
                        await ct._filesystem(ct.code() + '.js', this._atob(ct.remark()));
                    }else if(typeof(window)!=='undefined'){
                        try{
                            if(window.self !== window.top){
                                <%=log()%>"iFrame should be restarted...");
                            }else{
                                <%=log()%>"window location reloading...");
                                //window.location.reload();
                            }
                        }catch(ex){
                            <%=error()%>"frame check", ex);
                        }
                    }
    
                    <%=scope%>.__<%=_cName('Node Type')%> = sct.date(ct.date()).name(ct.name()).code(ct.code())._toDocument();
                    return false;
                }
                return true;
            }, 0.5);
<% }%>
        
            if(options.loadContent && typeof(window)!=='undefined') window.onhashchange = async () => document.body = await this._export({tmp: location.hash.page});
    
            if(typeof(global)!=='undefined'){
                const app = express();
                
                app.use(cors());
        
                app.use(express.urlencoded({extended: true, limit: '50mb'}));
                app.use(bodyParser.json({
                    verify: (req, res, buf) => req.rawBody = buf
                }));
        
                global.authenticate = async (req, res, next) => {
                    const authHeader = req.headers['authorization'];
                    const token = authHeader && authHeader.split(' ')[1];
        
                    if (token == null) return res.sendStatus(401);
        
                    jsonwebtoken.verify(token, this.__config('secret'), (err, obj) => {
                        if (err) return res.sendStatus(403);
                    
                        req.__authorization = obj;
                        next();
                    });
                };
        
<% if(_cName('oAuth Token')){%>
                app.oauth = new OAuthServer({
                    debug: true,
                    // useErrorHandler: true,
                    // continueMiddleware: true,
                    // requireClientAuthentication: { password: false },
        
                    model: (() => ({
                		getAccessToken: bearerToken => new <%=scope%>.OAuth_Token().accessToken(bearerToken).active(true).enabled(true).find().then(t => app.oauth.handler(t, 'getAccessToken')).then(t => {t.accessTokenExpiresAt = new Date(t.accessTokenExpiresOn); return t}),
                        getClient: (clientId, clientSecret) => new <%=scope%>.OAuth_Client().init().finally(() => new <%=scope%>.OAuth_Client().id(clientId).secret(clientSecret).active(true).enabled(true).find()).then(t => app.oauth.handler(t, 'getClient')),
                	    getUser: (username, password) => new <%=scope%>.<%=nName(authClass)%>().authorize(username, password).then(t => app.oauth.handler(t, 'getUser')),
                	    saveToken: (token, client, user) => new <%=scope%>.OAuth_Token()._fromDocument(token).client(new <%=scope%>.OAuth_Client()._fromDocument(client)).user(user).active(true).enabled(true).store().then(t => app.oauth.handler(t, 'saveToken')),
                	    revokeToken: token => new <%=scope%>.OAuth_Token().refreshToken(token.refreshToken).client(new <%=scope%>.OAuth_Client().id(token.client.id).active(true).enabled(true)).find().then(t => t.enabled(false).active(false).store()).then(t => app.oauth.handler(t, 'revokeToken')),
                	    getRefreshToken: refreshToken => new <%=scope%>.OAuth_Token().refreshToken(refreshToken).active(true).enabled(true).find(2/*why*/).then(t => t._toDocument()).then(t => {t.refreshTokenExpiresAt = new Date(t.refreshTokenExpiresOn); return t}),
        	        }))()
                });
                app.oauth.handler = (t, m) => {
                    try{
                        if(m) <%=log()%>m, t._toDocument());
                        return t._toDocument();
                    }catch(ex){
                        <%=warn()%>m, ex.toString());
                    }
                };
        
                app.post('/oauth/token', app.oauth.token());
                global.authenticate = app.oauth.authenticate();
<% }%>

<% arClasses.forEach(_c => _c.EntityMethods.filter(m => m.IsPublic).forEach(m => {%>
                app.post('/method/<%=nName(_c)%>/<%=nName(m)%>', (req, res) => this._inboundCall(req, res, "<%=nName(_c)%>", "<%=nName(m)%>"));
                app.get('/method/<%=nName(_c)%>/<%=nName(m)%>', (req, res) => this._inboundCall(req, res, "<%=nName(_c)%>", "<%=nName(m)%>"));
<% }))%>

                app.post('/method/:class/:method', global.authenticate, (req, res) => this._inboundCall(req, res));
                app.get('/method/:class/:method', global.authenticate, (req, res) => this._inboundCall(req, res));
        
<% if(c.Config && c.Config['graphql']){%>
                app.use('/graphql', graphqlHTTP.graphqlHTTP({
                    schema: graphql.buildSchema(this._toGQLSchema()),
                    rootValue: this._qlResolver(),
                    graphiql: this.__config("playground"),
                }));
                if(this.__config("playground") && typeof(playground)!=="undefined") app.get('/playground', playground.default({ endpoint: '/graphql' }))
<% }%>

                if(this.__config('email.host')){
                    <%=scope%>.transporter = nodemailer.createTransport({
                        service: this.__config('email.host'),
                        auth: this.__config('email.user')?{
                            user: this.__config('email.user'),
                            pass: this.__config('email.password'),
                        }:undefined,
                    });
                    
                    /*
                    await <%=scope%>.transporter.sendMail({
                        from: this.__config('email.sender'),
                        to,
                        subject,
                        text,
                    });
                    */
                }
                
                let port = <%=nscope%>._node?(<%=nscope%>._node.port() || 3000):3000;
                let address = "0.0.0.0";
                
                let listen = async () => <%=log()%>`<%=scope%>[${this.ipAddress()}] listening at http${secure?'s':''}://${address}:${port}`);
                if(secure){
                    let cert = null;
                    if(this.__config('secure.private')){
                        cert = {
                            private: (await fs.promises.readFile(this.__config('secure.private'))),
                            cert: (await fs.promises.readFile(this.__config('secure.cert'))),
                        };
                    }else{
                        cert = selfsigned.generate([{ name: 'commonName', value: 'nammour.com' }], { days: 365 });
                    }
                    global.exServer = https.createServer({
                        key: cert.private,
                        cert: cert.cert
                    }, app).listen(port, address, listen);
                }else{
                    global.exServer = http.createServer(app).listen(port, address, listen);
                }
            }
        }catch(ex){
            <%=error()%>ex);
        }
    }

<% if(false && _cName('Content')){%>
    async <%=mName='_deploy'%>(content){
        try{
    		let ct = new <%=scope%>.<%=_cName('Content', true)%>(null, 'GitHub').code('apiserver').name('API Server').date(this.serverDate()).active(true).enabled(true).content(this._btoa(content));
    		await ct.store();
    
    		ct.Tool = 'FileSystem';
    		let html = `<script>fetch('${ct.__config('path.read') + ct._fileName()}?__random='+Math.random()).then(async response => atob((await response.json()).content)).then(js => {if(typeof(document)!=='undefined'){let newScript = document.createElement("script");newScript.appendChild(document.createTextNode(js));document.body.appendChild(newScript);}else{eval(js)}});</script>`;
    		<%=log()%>html);
    		return html;
        }catch(ex){
            <%=error()%>ex);
        }
    }
<% }%>
    
    async <%=mName='_inboundCall'%>(req, res, cName, mName){
        let ret = {};
        try{
            ret = await new <%=scope%>[req.params.class || cName]()._invoke(req.params.method || mName, req.body, req.query, req.__authorization);
        }catch(ex){
            <%=error()%>ex);
            ret = {
                Exception: "Exception: " + ex,
            };
        }

        if(ret && typeof(ret)==="number") ret = ret.toString();
        res.send(ret);
    }

<% if(c.Config['graphql']){%>
    <%=mName='_qlSelections'%>(sSet){
        let ret = [];
        if(!sSet || !sSet.selections) return ret;
        
        sSet.selections.filter(s => s.selectionSet).forEach(s => {
<% c.EntityAttributes.filter(ea => ea.EntityType && !ea.EntityMethod).forEach(ea => {%>
            if(s.name.value=="<%=nName(ea)%>"){
                <%=log()%>'Reference for <%=nName(ea)%>', s);
                let sObj = new <%=scope%>.<%=nName(ea.EntityType, true)%>().<%=nName(ea)%>_<%=c.Plural.replace(/ /g, '_')%>(this);
                ret.push(sObj);
                ret.push(...sObj._qlSelections(s.selectionSet));
            }
<% })%>
        });
        
        return ret;
    }
    
    <%=mName='_qlResolver'%>(){
        return {
<% arClasses.forEach(_c => {%>
            <%=nName(_c)%>: async (parent, args, context, info) => {
                if(!parent.data) parent.query = parent.query || {};
                let obj = new <%=scope%>.<%=nName(_c)%>()._fromDocument(parent.query || parent.data);
                let ret = null;
                if(parent.query){
                    let fields = null;
                    ret = await obj.findAll(null, obj._qlSelections(context.fieldNodes[0].selectionSet), null, null, [this.__config('idField', 'Id')].concat(context.fieldNodes[0].selectionSet.selections.map(s => s.name.value)));
                }else if(parent.data){
                    ret = await obj.store();
                    if(obj.__assertError) throw obj.__assertError;
                }
                if(Array.isArray(ret)){
                    return ret.map(r => r._toDocument());
                }else{
                    return ret?ret._toDocument():ret;
                }
            },
    <% _c.EntityMethods.forEach(_m => {%>
            // <%=nName(_m)%>: (parent, args, context, info) => new <%=scope%>.<%=nName(_c)%>().<%=nName(_m)%>("<%=nName(_m)%>", parent, args, context, info),
    <% })%>
<% })%>
        };
    }
    
    <%=mName='_toGQLSchema'%>(){
        let ret = `
type Query {
<% arClasses.forEach(_c => {%>
    """
    Find all matches for <%=nName(_c)%>
    """
    <%=nName(_c)%>(query: <%=nName(_c)%>Input): [<%=nName(_c)%>]
<% })%>
}

type Mutation {
<% arClasses.forEach(_c => {%>
    """
    Store a single <%=nName(_c)%> object
    """
    <%=nName(_c)%>(data: <%=nName(_c)%>Input): <%=nName(_c)%>
<% })%>
}
    
    <% arClasses.forEach(_c => {%>
"""
Input type for <%=nName(_c)%>
"""
input <%=nName(_c)%>Input{
    <% _c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
    <%=nName(ea)%>: <%=qlType(ea, true)%>
    <% })%>
    <% _c.TypedAttributes.filter(ta => !ta.EntityMethod && ta.EntityType).forEach(ta => { let taName = ta.EntityClass.Plural.replace(/ /g, '_'); %>
    <%=nName(ta)%>_<%=taName%>: [<%=nName(ta.EntityClass)%>Input]
    <% })%>
    OPERATORS: <%=nName(_c)%>Operator
}

input <%=nName(_c)%>Operator{
    <% _c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
    <%=nName(ea)%>: String
    <% })%>
}

"""
<%=_c.Remark%>
"""
type <%=nName(_c)%>{
    _id: ID!
    <% _c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
    """
    <%=ea.Remark%>
    """
    <%=nName(ea)%>: <%=qlType(ea)%><%=ea.IsRequired?'!':''%>
    <% })%>
    <% _c.TypedAttributes.filter(ta => !ta.EntityMethod && ta.EntityType).forEach(ta => { let taName = ta.EntityClass.Plural.replace(/ /g, '_'); %>
    <%=nName(ta)%>_<%=taName%>: [<%=nName(ta.EntityClass)%>]
    <% })%>

    <% _c.EntityMethods.filter(_m => !_m.MethodParameters.length).forEach(_m => {%>
    """
    <%=_m.Remark%>
    """
    <%=nName(_m)%>: <%=qlType(_m.ResponseAttribute, true)%>
    <% })%>
    <% _c.EntityMethods.filter(_m => _m.MethodParameters.length).forEach(_m => {%>
    """
    <%=_m.Remark%>
    """
    <%=nName(_m)%>(<%=_m.MethodParameters.map(p => nName(p) + ': ' + qlType(p, true)).join(', ')%>): <%=qlType(_m.ResponseAttribute)%>
    <% })%>
}
    <% })%>
        `;
        <%=log()%>ret);
        return ret;
    }
<% } // graph%>

<% } // IsMain %>

    async <%=mName='_invokeNode'%>(n, method, data, event, bRaw) {
        // if(!n) return null;
        
        if(typeof(<%=nscope%>._node)==='undefined'){
            <%=warn()%>"<%=nscope%>._node not defined");
            return null;
        }
        
        if(event){
<% if(_cName('Event')){%>
            if(event._className_set && event.className() && event.className()!='<%=nName(c)%>'){
                let oClass = null;
                if(false){
                    <%=log()%>"Delegating invokation to " + event.className()+'.'+method+' ....');
    <% sr.groupBy(arClasses, 'EntityModule').forEach(em => {%>
                }else if(["<%=em.values.map(mc => nName(mc)).join('", "')%>"].indexOf(event.className())>=0){
                    oClass = new <%=scope%><%=em.key?('.'+em.key.Alias):''%>[event.className()]();
    <% })%>
                }
                return await oClass.<%=mName%>(n, method, data, event, bRaw);
            }
<% }else{%>
            <%=error()%>"Event cannot be defined without the Event class");
            return null;
<% }%>
        }
        
        let ret = null;

        data = data || {};

        if(typeof(data)==="object"){
            data.__this = data.__this || this._toJSON({parse: 1});
            switch(method){
    <% c.EntityMethods.forEach(m => {%>
                case "<%=nCode(m)%>": {
        <% m.MethodParameters.forEach(p => {%>
                    data.<%=nName(p)%> = data.<%=nName(p)%>?data.<%=nName(p)%>
            <%if(p.IsArray){%>.map(_p => _p<%}%>
            <% if(p.EntityType){%>._toDocument()
            <% }else if(p.IsDate){%>.toISOString()
            <% }%>
            <%if(p.IsArray){%>)<%}%>:undefined;
        <% })%>
                    break;
                }
    <% })%>
            }
        }

<% if(_cName('Node')){%>
        if(typeof(n)==='string') n = new <%=scope%>.<%=_cName('Node', true)%>().code(n);
<% }%>

        if(!n || <%=nscope%>._node._sameEntity(n)){
            ret = await this._invoke(method, data);
            <%=log()%>"Local node", ret);

        }else if(n.address()){
            try{
                <%=log()%>n.address(), n.port(), method);
                ret = await this._rest(undefined, data, null, null, {path: `http${n.secure()?'s':''}://${n.address()}:${n.port() || 3000}/method/<%=nName(c)%>/${method}`, headers: {}});
            }catch(ex){
                <%=error()%>ex);
            }
        }else{
<% if(_cName('Event') && c.Name!=='Event'){%>
            if(typeof(data)==="object"){
                delete data.__this.__generated;
                delete data.__this.online;
            }
            
            //why do we need this???
            <% /*unRecurse('data', 'method', '{}', '', 5, '__this.code')*/ %>
            
            let ev = new <%=scope%>.<%=_cName('Event', true)%>().active(true).enabled(true).code(this._uuid()).name(this.__config('event') || '<%=scope%>.Event').date(this.serverDate()).recipient(n).method(method).className('<%=nName(c)%>').sender(<%=nscope%>._node).carrier(<%=nscope%>._node).payload(this._btoa(JSON.stringify(data)));
            if(event){
                if(event._responseTo_set) ev.responseTo(event.responseTo());
                if(event._sender_set) ev.sender(event.sender());
                if(event._className_set) ev.className(event.className());
                if(event._carrier_set || event._sender_set) ev.carrier(event.carrier() || event.sender());
            }
            ret = await ev.trigger();
            
            if(typeof(ret)==="string"){
                try{
                    ret = JSON.parse(ret);
                }catch(ex){
                }
            }else if(ret && typeof(ret.payload)==='function'){
                // ret is an event
                ret = ret.payload();
            }else if(Array.isArray(ret) && ret[0] && typeof(ret[0].payload)==='function'){
                ret = ret.map(r => r.payload());
                if(ret.length==1) ret = ret[0];
            }
<% }%>
        }
        
        if(!ret) return null;
        ret = ret.data || ret;

        if(ret.__exception){
            // an exception occurred at the server
            <%=error()%>`Exception at ${n._address}`, ret.__exception);
            return ret;
        }

        switch(method){
<% c.EntityMethods.forEach(m => {%>
            case "<%=nCode(m)%>": {
    <% if(m.ResponseAttribute.EntityType){ %>
                if(!bRaw) ret = new <%=scope%>.<%=nName(m.ResponseAttribute.EntityType)%>()._fromDocument(ret);
    <% } %>
    <% if(m.Name=='authorize'){%>
                <%=scope%>.__token = {token_type: "Bearer", access_token: ret};
    <% } %>
                break;
            }
<% }); %>

            case "insert":
            case "update":
            case "store":
            case "delete":
            case "find": 
            case "findAll": {
                if(!bRaw) ret = new <%=scope%>.<%=nName(c, true)%>()._fromDocument(ret);
                break;
            }

            default: {
            }
        }

        return ret;
    }

<% if(mainClass()){%>
    async <%=mName='_invoke'%>(method, body, query, authObj){
        this.__time('<%=scope%>.<%=nName(c)%>.' + method);
        <%=log()%>method, query, body);
        
        if(typeof(body)==='string'){
            if(<%=_b64test('body')%>){ // base64?
                body = this._atob(body);
            }

            if(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(body)){ // json
                try{
                    body = JSON.parse(body.toString());
                }catch(ex){
                    <%=warn()%>"Body is not a valid JSON", body);
                    return;
                }
            }
        }

        let _params = query?Object.assign(query, body):body;
        if(typeof(_params)==='string') _params = JSON.parse(_params);
        
        if(_params){
            _params = DotObject.object(_params);
        }else{
            _params = {};
        }

        <%=log()%>"_params", _params);

    <% if(_cName('Node') && c.Name!='Node'){%>
        if(_params.__node){
            // probably should not be processed here, but rather consumed as part of the execute() logic, pushing __node to the list of my nodes to delegate to!?
            let tn = new <%=scope%>.<%=_cName('Node', true)%>()._fromDocument(_params.__node)/*._deReference()*/;
            delete _params.__node;
            return await new <%=scope%>.<%=_cName(c, true)%>()._invokeNode(tn, method, _params);
        }
    <% }%>

        if(_params.__this) {
            _params.__this = DotObject.object(_params.__this);
            let __this = new <%=scope%>.<%=_cName(c, true)%>()._fromDocument(_params.__this)/*._deReference()*/;
            delete _params.__this;
            return await __this.<%=mName%>(method, _params, null, authObj);
        }

        let arArgs = [];
        switch(method){
<% c.EntityMethods.forEach(m => {%>
            case "<%=nCode(m)%>": {
<% if(_cName('Transaction') && _cName('Content') && c.Name!='Transaction' && !m.IsSync){%>
        if(!_params.Sync){
            return new <%=scope%>.<%=_cName('Content', true)%>((await new <%=scope%>.<%=_cName('Content', true)%>().active(true).enabled(true).scope("<%=scope%>").class("<%=c.Name%>").method(method).authorization(authObj).date(this.serverDate()).payload(this._btoa(_params)).transaction_TransactionLogs([new <%=scope%>.TransactionLog().date(this.serverDate()).state(new <%=scope%>.TransactionState().active(true).enabled(true).name("loaded"))]).store()).Id)._toDocument();
        }
<% }%>

    <% m.MethodParameters.forEach(p => {%>
        <% if(p.EntityType && p.IsArray){%>
                _params.<%=nCode(p)%> = _params.<%=nCode(p)%>.map(p => new <%=scope%>.<%=nName(p.EntityType)%>()._fromDocument(p)._deReference());
        <% }else if(p.EntityType){ %>
                _params.<%=nCode(p)%> = new <%=scope%>.<%=nName(p.EntityType)%>()._fromDocument(_params.<%=nCode(p)%>)._deReference();
        <% } %>
                arArgs.push(_params.<%=nCode(p)%>);
    <% });%>
                break;
            }
<% });%>

            case "findAll":{
                arArgs.push(_params.depth);
                arArgs.push(_params.objs);
                arArgs.push(_params.start);
                arArgs.push(_params.end);
                break;
            }
            case "find": {
                arArgs.push(_params.depth);
                break;
            }

            default: {
                break;
            }
        }
        
        let obj = this;
        
        let ret = null;
        if(!obj){
            ret = {
                __exception: {
                    '-1': `<%=nName(c)%>.<%=mName%>: obj is undefined`
                }
            };
        }else if(!obj[method]){
            ret = {
                __exception: {
                    '-2': `<%=nName(c)%>.<%=mName%>: method ${obj.constructor.name}(${method}) is not found`,
                    'obj': obj
                }
            };
        }else{
            ret = await obj[method](...arArgs);
        }
        
<% clsTools(c).forEach(t => {%>
        if(this.Tool.type.name=="<%=t%>"){
    <% if(t=="SqlDB"){ %>
            if(false && <%=scope%>.__sqlTransaction && !<%=scope%>.__sqlTransaction.end){
                ret = {
                    __exception: {
                        '-4': "Uncommitted transactions: " + <%=scope%>.__sqlTransaction.sqls.length,
                        'obj': obj
                    }
                }
            }
    <% }%>
        }
<% })%>

        if(ret && !ret.__exception){
            <%=scope%>._unRecurse = {};
            if(Array.isArray(ret)){
                let _ret = [];
                for await(const r of ret){
                    if(r && r._toDocument){
                        if(<%=scope%>._unRecurse.<%=nName(c)%>) delete <%=scope%>._unRecurse.<%=nName(c)%>._toDocument;
                        _ret.push(await r._toDocument());
                    }else _ret.push(r);
                }
                ret = _ret;
            }else{
                ret = (ret && ret._toDocument)?await ret._toDocument():ret;
            }
        }
        
        <%=log()%>'ret', ret);
        <%=log()%>`${method}: ${this.__time('<%=scope%>.<%=nName(c)%>.' + method)}`);
        return ret;
    }

<% if(_cName('Node')){%>
    <%=mName='_parseCodeState'%>(t){
    <% if(mainClass()==c){%>
        let state = this.__config(this.__config('oauth.redirect.state', null, {tool: t}));
        let code = this.__config(this.__config('oauth.redirect.code', null, {tool: t}));
        if(!state || !code) return;
        state = JSON.parse(this._atob(state));
        if(state.tool!==t.name) return;

        <%=log()%>"GOT CODE " + code + " for node " + state.ncode + " with tool " + state.tool);
        if(!<%=nscope%>._node.parent() || !<%=nscope%>._node._parent._sameEntity(<%=nscope%>._node.parent())){
            <%=log()%>'new parent', state.ncode);
            <%=nscope%>._node.parent(new <%=scope%>.<%=_cName('Node', true)%>().code(state.ncode));
        }
        <%=nscope%>._node.authCode(code, new <%=scope%>.<%=_cName('Tool', true)%>().name(state.tool));
        window.close();
    <% }else{%>
        return new <%=scope%>.<%=nName(mainClass())%>().<%=mName%>(t);
    <% }%>
    }
<% }%>

    async <%=mName='_loadTools'%>(bStore){
        if(<%=scope%>.Tools && <%=scope%>.Tools.length){
            <%=log()%>`Tools already loaded`);
            return <%=scope%>.Tools;
        }
        
        <%=log()%>`Loading tools...`);
        
        let tools = [];
        let arTools = <%=_FrEMD._toJS([...new Set(arClasses.map(_c => _c.Tools).flat())])%>;
        let toolNames = arTools.map(t => t.name || (t.type?t.type.name:t));
        try{
            if(/*this.sr().bLocal && */tools.length!==toolNames.length){
                tools = await this._getStoredScript({Name: '<%=mName%>', Active: true, Enabled: true}) || tools;
            }

<% if(_cName('Tool')){%>
            if(!tools.length) tools = (await new <%=scope%>.<%=_cName('Tool', true)%>().THIS(toolNames.map(t => new <%=scope%>.<%=_cName('Tool', true)%>().name(t))).findAll(2)).map(t => t._toJSON({parse: 1})) || tools;
<% }%>
        }catch(ex){
            <%=warn()%>ex);
        }
        tools = <%=scope%>.__Tools || tools;
        delete <%=scope%>.__Tools;
        
        let fixTools = tools => {
            tools.filter(t => typeof(t)==='object' && t).forEach(t => {
                <%_def('t.Id', 'this._uuid()')%>
                <%_def('t.name', 't.type.name')%>
                <%_def('t.active', true)%>
                <%_def('t.enabled', true)%>
                <%_def('t.type.active', true)%>
                <%_def('t.type.enabled', true)%>

                <%_def('t.tool_Configs', '[]')%>;
                <%_def('t.type.type_Configs', '[]')%>;
                <%_def('t.type.type_Mappings', '[]')%>;
                <%_def('t.tool_Mappings', '[]')%>;
    
                [].concat(t.tool_Configs, t.type.type_Configs, t.type.type_Mappings, t.tool_Mappings).forEach(c => {
                    <%_def('c.active', true)%>
                    <%_def('c.enabled', true)%>
                    <%_def('c.Id', 'this._uuid()')%>
                });
            });
    
            tools.filter(t => typeof(t)==='object' && t).forEach(t => ['tool_Configs', 'type.type_Configs'].forEach(sConfig => {
                    DotObject.set(sConfig, DotObject.pick(sConfig, t).filter(c => typeof(c.value)!=="object").concat(DotObject.pick(sConfig, t).filter(c => typeof(c.value)==="object" && c.value).map(c => Object.keys(c.value).map(ncode => {
                        let _c = {
                            name: c.name,
                            value: c.value[ncode],
                        };
                        if(ncode!="default"){
                            _c.node = {
                                code: ncode,
                                active: true,
                                enabled: false, <%// otherwise it starts getting events%>
                                type: {
                                    name: "NodeJS",
                                }
                            };
                        }
                        return _c;
                    }).flat()).flat()), t);
                    DotObject.pick(sConfig, t).forEach(c => c.value = JSON.stringify(c.value));
                })
            );
        };

        fixTools(tools);
        tools = tools.filter(t => /*typeof(t.active)==="undefined" || */t.active);
        tools = tools.filter(t => toolNames.find(_t => (typeof(_t)==='string'?_t:_t.name)==t.name));

        <%=log()%>`Tools are ${tools.length}`);

        <%=scope%>.Tools = tools;

        <%=scope%>.Tools.filter(t => !t.axios && <%=JSON.stringify(_restTools)%>.indexOf(t.type.name)>=0).forEach(t => {
            t.axios = axios.create();
            t.axios.interceptors.request.use(request => this._requestInterceptor(request, t), error => {});
            t.axios.interceptors.response.use(response => response, error => this._responseInterceptor(error, t));
        });
        
        // connect to the loaded tools!!!
        let tool = this.Tool;
        for await (const t of <%=scope%>.Tools){
<% sr.groupBy(arClasses, 'EntityModule').forEach(em => {em.values = em.values.sort((a, b) => b.Rank - a.Rank); %>
            await new <%=scope%>.<%=_cName(em.values[0], true)%>(undefined, t)._storeEntityClass(<%=em.values[0].Rank%>);
<% })%>
        }
        this.Tool = tool;
        
<% if(_cName('Tool')){%>
        arTools = arTools.filter(_t => !tools.find(t => (typeof(_t)==='string'?_t:_t.name)==t.name));
        fixTools(arTools);
        
        if(bStore){
            <%=log()%>`Saving tools...`);
            <%=scope%>.oTools = <%=scope%>.Tools.concat(arTools).filter(t => t.active).map(t => {
                t.tool_Mappings.forEach(m => delete m.tool);
                t.type.type_Mappings.forEach(m => delete m.type);
    
                return new <%=scope%>.<%=_cName('Tool', true)%>()._fromDocument(t);
            });
            for await (const t of <%=scope%>.oTools){
                await t.store();
            }
        }
<% }%>

        <%=log()%>`Exiting`);
        return tools;
    }
    
<% } // mainClass %>

	<%=mName='_parametrize'%>(str, fun, options={}, prefix='{{', postfix='}}') {
<% if(mainClass()==c){%>
        try{
            if(typeof(str)!=='string') return str;
            
            let rex = `${prefix}([^${postfix}]+)${postfix}`;
            (str.match(new RegExp(rex, "g")) || []).forEach(m => str = str.replace(m, m => fun(m.replace(prefix, '').replace(postfix, ''))));

            return str;
        }catch(ex){
            <%=error()%>ex);
        }
<% }else{%>
        return new <%=scope%>.<%=nName(mainClass())%>().<%=mName%>(str, fun, options, prefix, postfix);
<% }%>
	}

    <%=mName='__sync_on'%>(d){
        this._<%=mName%> = this._<%=mName%> || {};
    
        if(d){ // set the value
            this._<%=mName%>[this.Tool.name] = d;

            return this.__import(this, {
                Cyclic: true,
<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode) => this.<%=nName(ea)%>()?this.<%=nName(ea)%>().<%=mName%>(d):undefined,
<% })%>

<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                //<%=taName%>: this.<%=taName%>().forEach(t => t.<%=mName%>(d)),
<% })%>
            }, "<%=mName%>", d);


<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
            if(this._<%=nName(ea)%>_set && this.<%=nName(ea)%>()) this.<%=nName(ea)%>().<%=mName%>(d);
<% })%>

<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            // this.<%=taName%>().forEach(t => t.<%=mName%>(d));
<% })%>
            return this;
        }

        return this._<%=mName%>[this.Tool.name]; // get the value
    }
    
    <%=mName='_clone'%>(bTypeAttributes){
        <%=warn()%>"DEPRECATED: use new <%=scope%>.<%=_cName(c.Name, true)%>()._fromDocument(this._toJSON())");

        return null;
        
        try{
            return this.__export(new <%=scope%>.<%=_cName(c.Name, true)%>(), {
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => obj.<%=nName(ea)%>(v<%if(ea.EntityType){%>.<%=mName%>(bTypeAttributes)<%}%>),
<% });%>
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => bTypeAttributes?obj.<%=taName%>(v.map(_v => _v.<%=mName%>(bTypeAttributes))):null,
<% });%>
            }, "<%=mName%>");
        }catch(ex){
            <%=error()%>ex);
        }
    }

    <%=mName='_map'%>(code, bReverse, context, objFrom, objTo, eaCode, className, tool, codeType, _this, moduleName){
        _this = _this || this;
        context = context || 'EntityAttribute';
        tool = tool || _this.Tool;
        codeType = codeType || <%=_eaTypes()%>[code];
        className = className || "<%=nName(c)%>";
        moduleName = moduleName || "<%=c.EntityModule?c.EntityModule.Name:''%>";

<% if(mainClass()!=c){%>
        return new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(code, bReverse, context, objFrom, objTo, eaCode, className, tool, codeType, _this, moduleName);
<% }else{%>
        try{
            let _log = `${moduleName}.${className}.${context}${bReverse?'<=':'=>'}${code}`;
            
            //if(Array.isArray(objFrom)) return objFrom.map(o => this.<%=mName%>(code, bReverse, context, o, objTo, eaCode, className, tool, codeType, _this, moduleName));
        
            <% /* tempted to use jsonata in Query fields, does not work because jsonata.evaluate return a promise!!! */%>
            let sField = bReverse?'target':'source';
            let sScript = (bReverse?'out':'in')+'Script';
            let sCond = (bReverse?'out':'in')+'Condition';
            let sPath = (bReverse?'out':'in')+'Path';
            let tField = bReverse?'source':'target';
            let tScript = (bReverse?'in':'out')+'Script';
            let tPath = (bReverse?'in':'out')+'Path';
            let tCond = (bReverse?'in':'out')+'Condition';
            
            let log = (...s) => <%=log()%>className, _log, ...s);
            let warn = (...s) => <%=warn()%>className, _log, ...s);
            let error = (...s) => <%=error()%>className, _log, ...s);
            
            let options = {_class: className, _this: _this, tool: tool};
            
            let _script = (s, m) => {
                try{
                    return this.runScript(`(oScope, m, objFrom, objTo, code, _this, className, tool, codeType, eaCode, bReverse, context, log, warn, error) => ${s}`)(<%=scope%>, m, objFrom, objTo, code, _this, className, tool, codeType, eaCode, bReverse, context, log, warn, error);
                }catch(ex){
                    warn(m.tests.log, ex); 
                }
            };
            
            let _match = (s, r) => {
                if(typeof(s)==='undefined' || s===null || typeof(s.match)!=='function') return false;
                let answer = s.match(new RegExp(r, 'g'));
                return s==r || ((answer && answer.length)?true:false);
            }

            const clone = items => items.map(item => Array.isArray(item) ? clone(item) : item);
            
            let ms = clone( [...(tool.tool_Mappings || []).concat(tool.type.type_Mappings || [])] ); // do not tamper with the mappings, deep clone
            ms.forEach(m => Object.keys(m).forEach(k => m[k] = this._parametrize(m[k], p => this.__config(p) || DotObject.pick(p, options), options)));
            ms.forEach(m => m.tests = {
                active: <%valueOf("m.active")%>, //_script(m.active, m),
                enabled: <%valueOf("m.enabled")%>, //_script(m.enabled, m),
                context: _match(context, m.context),
                class: _match(className, m.className),
                module: _match(moduleName, m.moduleName),
                sField: typeof(code)==='undefined' || _match(code, m[sField]),
                sScript: typeof(code)==='undefined' || typeof(m[sScript])!=='undefined',
                sPath: typeof(m[sPath])!=='undefined',
                target: typeof(m[tField] || m[tScript] || m[tPath])!=='undefined',
                text: `${code}:${sField}==>${tField}`,
                log: `${_log}[${m.context}/${m.className}]`,
            });
            ms = ms.filter(m => m.tests.active && m.tests.enabled && m.tests.context && m.tests.class && m.tests.module && (m.tests.sField || m.tests.sScript || m.tests.sPath) && m.tests.target).sort((a, b) => a.order - b.order);
            
            <% /* we might not work with all ms entries. log here is only a preview of what might work! */ %>
            //if(ms.filter(m => m.debug).length) log(this._beautify(ms.filter(m => m.debug), 'javascript'));

            ms.forEach(m => {
                if(m[tScript]){
                    if(typeof(m[tCond])==='undefined' || <%valueOf("m[tCond]", '_this')%>){
                        if(m.debug) log(m.tests.log + ': ' + tScript, '<%=mName%>', m[tScript]);
                        code = <%valueOf("m[tScript]", '_this')%>
                    }
                }
                
                if(m[sPath] && typeof(jmespath)!=='undefined') code = jmespath.search(objFrom, m[sPath]);
                if(m[sPath] && typeof(jsonpath)!=='undefined') code = jsonpath.query(objFrom, m[sPath]);
                
                if(m[tField]){
                    let dPath = '';
                    if(typeof(m[tField])==='function'){
                        if(typeof(code)!=='undefined'){
                            dPath = `${code}.replace`;
                            code = code.replace(new RegExp(m[sField], 'g'), m[tField]);
                        }else{
                            //code = DotObject.copy(m[sField], m[tField], objFrom, objTo);
                        }
                    }else{
                        if(typeof(code)!=='undefined'){
                            if(_match(code, m[sField])){
                                dPath = `${code}.code`;
                                code = m[tField];
                            }
                        }else{
                            dPath = `dotcopy`;
                            code = DotObject.copy(m[sField], m[tField], objFrom, objTo);
                        }
                    }
                    
                    if(m.debug && dPath) log(`${m.tests.log}/${dPath}[code=${code}]: ${m[sField]} => ${m[tField]}`);
                }
                
                if(m[tPath] && typeof(jmespath)!=='undefined' && (!m[tCond] || jmespath.search(objTo, m[tCond]))) objTo[m[tField]] = jmespath.search(objTo, m[tPath]);
                if(m[tPath] && typeof(jsonpath)!=='undefined' && (!m[tCond] || jsonpath.query(objTo, m[tCond]))) objTo[m[tField]] = jsonpath.query(objTo, m[tPath]);
            });

            ms.forEach(m => delete m.tests);
            
            if(typeof(code)==='undefined'){
                return objTo;
            }
            
            //if(context=='EntityClass' && className=='User') <%=warn()%>"GOT HERE", code, context, options);
            return this._parametrize(code, p => this.__config(p) || DotObject.pick(p, options), options);
        }catch(ex){
            <%=error()%>ex);
        }
<% }%>
    }
    
    <%=mName='_nCode'%>(code, oCode){
        try{
            let context = 'EntityAttribute';
            if(!code && !oCode){
                context = 'EntityClass';
                code = "<%=nCode(c)%>";
                oCode = <%=_FrEMD._toJS(c.Code)%>;
            }

            let ret = code;
            if(oCode && typeof(oCode)==='object'){
                ret = oCode[this.Tool.name] || oCode[this.Tool.type.name] || ret;
            }

            return this._map(ret, false, context) || ret;
        }catch(ex){
            <%=warn()%>ex);
            return code;
        }
    }
    
    <%=mName='__config'%>(n, nullValue, options){
        options = options || {};
        options._this = options._this || this;
        options._class = options._class || '<%=nName(c)%>';
        options.tool = options.tool || options._this.Tool || this.Tool;
        if(typeof(options.tool)==='object' && options.tool.constructor.name=='Tool') options.tool = (<%=scope%>.Tools || []).find(t => t.name==options.tool.name());
        
        if(typeof(options.tool)==='string') options.tool = (<%=scope%>.Tools || []).find(t => t.name==options.tool || t.type.name==options.tool);

<% if(mainClass()!=c){%>
        return new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(n, nullValue, Object.assign({_this: this, tool: this.Tool, _class: '<%=nName(c)%>'}, options || {}));
<% }else{%>
        try{
            if(typeof(options.tool)!=='object') <%=warn()%>options.tool);
            if(!options.tool) <%=warn()%>"tool not defined", options._this.Tool, <%=scope%>.Tools, options._this.Tools);
            //options.noCache = true;
            if(!options.noCache) <%=scope%>.<%=mName%> = <%=scope%>.<%=mName%> || {};

            let nID = <%=nscope%>._node?<%=nscope%>._node.code():'default';

            if(typeof(options[n])!=='undefined') nullValue = nullValue || options[n];
            let ret = nullValue;
            if(typeof(ret)==='undefined'){
                ret = null;
                
                // use scope cache (improves performance???)
                if(!options.noCache && Object.hasOwn(<%=scope%>.<%=mName%>, `${options._class}.${options.tool.name}.${nID}.${n}`)) return <%=scope%>.<%=mName%>[`${options._class}.${options.tool.name}.${nID}.${n}`];
            }

            // tool_Configs, type_Configs: allow class-level and node-level - done
            let tconf = [].concat(options.tool.type.type_Configs || [], options.tool.tool_Configs || []).filter(c => c && c.name==n && (!c.node || c.node.code==nID)).sort(c => c.node?(c.node.code=='default'?0:-1):1);
            if(tconf.length){
                if(tconf[0].script){
                    ret = tconf[0].script;
                    
                    let _sc = this._parametrize(tconf[0].script, p => this.<%=mName%>(p, null, options) || DotObject.pick(p, options), options);
                    ret = <%valueOf("_sc")%>;
                }else{
                    ret = tconf[0].value;
                    try{
                        [1,2,3].forEach(a => ret = JSON.parse(ret));
                    }catch(jex){}
                }
            }
            if(options.newValue){
                let tc = tconf.length?tconf[0]:{};
                if(options.node) tc.node = {code: options.node.code()};
                tc.value = options.newValue;
                tc.name = n;
                if(!tconf.length){
                    (options.tool.tool_Configs || options.tool.type.type_Configs).push(tc);
                }
                ret = options.newValue;
            }

            // model Config: Config is class level, node not possible - pending
            let mconf = options._this.Config?options._this.Config[n]:undefined;
            mconf = this._parametrize(mconf, p => this.<%=mName%>(p, null, options) || DotObject.pick(p, options), options);
            mconf = <%valueOf("mconf")%>;
            if(typeof(mconf)!=="undefined") ret = mconf;

            // command line: allow class-level and node-level - pending
            if(typeof(global)!=='undefined' && global.minimist){
                ret = DotObject.pick(n, global.minimist(process.argv.slice(2))) || ret;
            }
            
            // request: allow class-level and node-level - pending
            if(this.$_REQUEST) ret = this.$_REQUEST(n) || ret;
            
            // config replacement
            ret = this._parametrize(ret, p => this.<%=mName%>(p, null, options) || DotObject.pick(p, options), options);
            
            if(!options.noCache) <%=scope%>.<%=mName%>[`${options._class}.${options.tool.name}.${nID}.${n}`] = ret;
            
            ret = <%valueOf("ret")%>;
            
            return ret;
        }catch(ex){
            <%=warn()%>n, nullValue, options._class, options.tool.tool_Configs, ex);
        }
<% }%>
    }


<% c.EntityMethods.forEach(m => {%>
    /**
     * Summary. <%=m.Name%>.
     *
     * Description. <%=m.Remark%>.
     *
     * @since      x.x.x
     * @deprecated x.x.x Use new_function_name() instead.
     * @access     public
     *
     * @class
     * @augments parent
     * @mixes    mixin
     *
     * @alias    realName
     * @memberof namespace
     *
     * @see  Function/class relied on
     * @link URL
     * @global
     *
     * @fires   eventName
     * @fires   className#eventName
     * @listens event:eventName
     * @listens className~event:eventName
     * @param {type}   var           Description.
     * @param {type}   [var]         Description of optional variable.
     * @param {type}   [var=default] Description of optional variable with default variable.
     * @param {Object} objectVar     Description.
     * @param {type}   objectVar.key Description of a key in the objectVar parameter.
     *
     * @yield {type} Yielded value description.
     *
     * @return {type} Return value description.
     */
    <% if(!m.IsSync){%>async <%}%><%=mName=nCode(m)%>(<%=m.MethodParameters.map(p => p.Name).join(', ')%>){

    	let log = (obj, ...msg) => this.log("<%=nName(c)%>", obj, "<%=nCode(m)%>", null, 0, ...msg);
    	let warn = (obj, ...msg) => this.log("<%=nName(c)%>", obj, "<%=nCode(m)%>", null, 1, ...msg);
    	let error = (obj, ...msg) => this.log("<%=nName(c)%>", obj, "<%=nCode(m)%>", null, 2, ...msg);
    	let oScope = <%=alias()%>;
    	let pScope = <%=scope%>;
        
    
<% if(!m.IsSync){%>
    <% if(!m.ResponseAttribute){ %>
        let answer = null;
    <% }else if(m.ResponseAttribute.EntityType){ %>
        let answer = new <%=scope%>.<%=_cName(m.ResponseAttribute.EntityType, true)%>();
    <% }else if(m.ResponseAttribute.IsBool){ %>
        let answer = false;
    <% }else if(m.IsArray){ %>
        let answer = [];
    <% }else{ %>
        let answer = null;
    <% } %>
    
        let results = await this._execute(null, <%=alias()%>, "<%=nCode(m)%>", <%mRouting(c, m)%>, async () => {
        
<% }%>
<% m.MethodParameters.filter(p => p.Default).forEach(p => {%>
        if(typeof(<%=nName(p)%>)==='undefined'){
            <%=nName(p)%> = <%valueOf(p.Default)%>;
        }
<% })%>

        var errors = {
        <%  [].concat(m.MethodParameters.filter(p => p.Required).map(p => ({
                Code: `${nName(p)}-required`,
                Error: `${nName(p)} is a required Parameter`,
                Script: `typeof(${nName(p)})==='undefined'`,
            }))).concat(m.MethodParameters.filter(p => p.EntityType).map(p => ({
                Code: `${nName(p)}`,
                Error: `${nName(p)} is not of type ${nName(p.EntityType)}`,
                Script: `(!${nName(p)} && ${p.Required?'true':'false'}) || (${nName(p)} && (${nName(p)}.constructor.name!='${nName(p.EntityType)}' || ${nName(p)}.EntityClass.Name!='${nName(p.EntityType)}'))`,
            }))).concat(m.Validators || []).filter(v => !v.Ignore).forEach(v => { %>
            "<%=v.Code%>": ((<%=m.MethodParameters.map(p => p.Name).join(', ')%>) => {
                try{

                <% if(v.Script.indexOf('return ')<0){%>
                    let answer = 
                <%}%>
                    <%=v.Script%>
                    //<%=log()%>"answer", "<%=v.Code%>", answer);
                    return answer;
                }catch(ex){
                    <%=warn()%>"validator", "<%=v.Code%>", ex);
                }
            })(<%=m.MethodParameters.map(p => p.Name).join(', ')%>)?('<%=v.Error%>' || 'Validation Error'):'',
        <% }) %>
        };
        Object.keys(errors).filter(k => !errors[k]).forEach(k => delete errors[k]);
        if(Object.keys(errors).length){
            Object.keys(errors).filter(k => k.startsWith('-')).forEach(k => {
                <%=log()%>{[k]: errors[k]});
                delete errors[k];
            });
            if(Object.values(errors).length){
                return {
                    __exception: errors,
                };
            }
            return;
        }

        <%=m.Script%>
        
<% if(!m.IsSync){%>
        }, {__beforeRules: [<%(m.MethodRules || []).filter(r => r.Before).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>], __afterRules: [<%(m.MethodRules || []).filter(r => r.After).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>], <%=m.MethodParameters.map(p => p.Name + ": " + p.Name).join(', ')%>});
        
        
        // take out the invalid node results
        results = results.filter(r => r && r.ret);

        // has any node generated a validation exception?
        let __ex = results.find(r => r.ret.__exception);
        if(__ex) return __ex.ret;

        <%=m.Reduce%>

        <% if(m.IsArray || m.ResponseAttribute.IsArray){%>
        return results.map(r => r.ret).flat();
        <% }else if(m.ResponseAttribute.EntityType){ %>
        return results.length?results[0].ret:null;
        <% }else{ %>
        return results.length?results[0].ret:null;
        <% }%>
<% }%>
    }
<% });%>

<% if(mainClass(_restTools)){%>
    async <%=mName='_responseInterceptor'%>(error, t){
    <% if(mainClass(_restTools)!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(_restTools))%>().<%=mName%>(error, t);
    <% }else{%>
        try{
            t = t || this.Tool;
            const originalRequest = error.config;
            if (this.__config("oauth.access_token", null, {tool: t}) && error.response && error.response.status === 401 && !originalRequest._retry && originalRequest.headers.Authorization.indexOf(this.__config("oauth.access_token", null, {tool: t}))>0) {
                originalRequest._retry = true;
                // await (get the token or refresh it)
                
                originalRequest.headers.Authorization = this.__config("oauth.access_type", "Bearer", {tool: t}) + " " + this.__config("oauth.access_token", null, {tool: t});
                return t.axios(originalRequest);
            }
            return Promise.reject(error);
        }catch(ex){
            <%=error()%>ex);
        }
        <%=log()%>config);
        return config;
    <% }%>
    }

    async <%=mName='_requestInterceptor'%>(config, t){
    <% if(mainClass(_restTools)!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(_restTools))%>().<%=mName%>(config, t);
    <% }else{%>
        try{
            t = t || this.Tool;
            config = config || {headers: {}};
            config.meta = config.meta || {};
            config.meta.counter = 4;
            
            let tokenUri = this.__config("oauth.token.uri", null, {tool: t});
            let refreshUri = this.__config("oauth.refresh.uri", null, {tool: t});
            let authUri = this.__config("oauth.authorize.uri", null, {tool: t});
            let authType = this.__config("oauth.auth_type", "Bearer", {tool: t});
            let token = this.__config("oauth.access_token", null, {tool: t, node: <%=nscope%>._node});
            if(!config.headers.Authorization && [tokenUri, refreshUri, authUri].indexOf(config.url)<0){
                if(!token){
                    let authCode = this.__config('oauth.authorize.code', null, {tool: t});
                    let authMethod = this.__config('oauth.authorize.method', null, {tool: t});
                    
                    if(!tokenUri && !authCode && !authMethod && this.__config('username')){
                        authType = 'Basic';
                        token = this._btoa(this.__config('username') + ":" + this.__config('password'));
                    }
                    
<%if(_cName('Node')){%>
                    if(<%=nscope%>._node && !authCode && authMethod=="get"){
                        // create or load a new oauth state
                        this.__config("oauth.authorize.state", null, {tool: t, node: <%=nscope%>._node, newValue: this._btoa(JSON.stringify({tool: t.name, ncode: <%=nscope%>._node.code()}))});
                        // authorize and get the auth code
                        authUri = this.__config("oauth.authorize.uri", null, {tool: t});
                        <%=log()%>`${authUri}`);
                        window.open(authUri);
                        await this.setInterval(null, tool => <%=nscope%>._node && config.meta.counter-- && !(authCode = this.__config('oauth.authorize.code', null, {tool: t})), 0.1, t);
                        <%=log()%>`Done Looping: ${authCode}`);
                        if(!authCode) authMethod=undefined;
                    }
<%}%>

                    if(authMethod){
                        let flow = (!authCode && authMethod=='post')?'authorize':'token';
                        // get the token
                        // the tokenUri might have a dependency on the authorization code
                        tokenUri = this.__config(`oauth.${flow}.uri`, null, {tool: t});
                        let tconfig = {
                            url: tokenUri,
                            method: this.__config(`oauth.${flow}.method`, 'post', {tool: t}),
                            headers: Object.assign({
                                "Content-Type": this.__config(`oauth.${flow}.content_type`, "text/json", {tool: t}),
                                "Authorization": "Basic "+this._btoa(this.__config("oauth.login", null, {tool: t}) + ":" + this.__config("oauth.password", null, {tool: t})),
                            }, this.__config(`oauth.${flow}.headers`, "{}", {tool: t})),
                            data: this.__config(`oauth.${flow}.body`, null, {tool: t}),
                        };
                        let tres = await t.axios(tconfig);
                        <%=log()%>`Token fetched - ${flow}`, tconfig, tres.data);
                        ['access_token', 'token_type', 'expires_in', 'refresh_token'].forEach(ta => this.__config(`oauth.${ta}`, null, {tool: t, node: <%=nscope%>._node, newValue: tres.data[this.__config(`oauth.token.response.${ta}`, ta, {tool: t})]}));
                        token = this.__config("oauth.access_token", null, {tool: t, node: <%=nscope%>._node});
                    }
                }
                if(token) config.headers.Authorization = authType + " " + token;
            }
        }catch(ex){
            <%=error()%>ex);
        }
        <%=log()%>config);
        return config;
    <% }%>
    }

    async <%=mName='_rest'%>(tName, params, data, method, options){
        /* tName no longer required!! */
        tName = tName || <%=_nCode()%>;
        options = options || {_this: this};
        options.tName = options.tName || tName;
        
        params = params || {};
        method = method || (data?"post":"get");
        
    <% if(mainClass(_restTools)!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(_restTools))%>(null, this.Tool).<%=mName%>(tName, params, data, method, options);
    <% }else{%>
        try{
            if(options.form){
                let fd = new FormData();
                Object.keys(data).forEach(k => fd.append(k, data[k]));
                data = fd;
            }
            let config = {
                url: this.__config(options.url || `restapi.url.${method}`, this.__config(options.url || 'restapi.url', options.path + options.file, options), options),
                method: method,
                params: params,
                headers: Object.assign({}, options.headers || {}),
                data: data,
                validateStatus: status => status<400,
            };
            
            let ret = [];
            <%=log()%>`[LIVE:${this.__config('live', true)}]`, config);
            if(this.__config('live', true)) ret = (await (this.Tool.axios?this.Tool.axios:axios)(config)).data;
            <%=log()%>JSON.stringify(ret, null, 4));
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    <% }%>
    }
<% } // mainClass(_restTools) %>

<% if(mainClass(_sqlTools)){%>
    <%=mName='_toSQLTable'%>(options={}){
        let ret = this.__export({Id: "<%=scope%>.<%=_cName(c, true)%>", deps: {}, sql: ``, fields: ``}, {
            //_map: true,
            Null: true,
            Full: true,
            __header: obj => obj.sql = `CREATE TABLE IF NOT EXISTS ${this._Q()}${<%=_nCode()%>}${this._Q()} (${obj.fields}/*<%=nName(c)%>*/);\n`,
            exporter: v => v.obj = (typeof(options.reused)==='undefined' || options.reused>=v.reused)?v.obj:{sql: v.obj.sql += `/*<%=nName(c)%>: reused: ${v.reused}*/\n\n`, Id: v.obj.Id},
            Id: (obj, idCode, v) => obj.fields += `${this._Q()}${this.__config('idField', 'Id')}${this._Q()} CHAR(25) PRIMARY KEY`,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.EntityType).forEach(ea => {%>
            <%=nName(ea)%>: (obj, eaCode, v) => obj.fields += `,${this._Q()}${<%=_nCode(ea)%>}${this._Q()} ${this._sqlType("<%=_FrEMD._attr(ea)%>", this.__config('type'))}`,
    <% }); %>
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
            <%=nName(ea)%>: (obj, eaCode, v) => {
                obj.deps.<%=nName(ea.EntityType)%> = (v || new <%=scope%>.<%=_cName(ea.EntityType, true)%>()).<%=mName%>(options);
                obj.fields += `,${this._Q()}${eaCode}id${this._Q()} ${this._sqlType("<%=_FrEMD._attr(ea)%>", this.__config('type'))}`;
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => {
                obj.deps.<%=nName(ta.EntityClass)%> = (v && v.length)?v[0]:new <%=scope%>.<%=_cName(ta.EntityClass, true)%>().<%=mName%>(options);
            },
    <% })%>
        }, "<%=mName%>");
        
        <%=log()%>ret);
        
        return Object.keys(ret.deps || {}).filter(k => typeof(ret.deps[k])==='string').map(k => ret.deps[k]).join('\n\n') + ret.sql;
    }
    
    <%=mName='_fromSQLTable'%>(table, fields){
        // table is a json array
<% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
        if((fields && fields.indexOf("<%=nName(ea)%>")) || !fields){
            this.<%=nName(ea)%>(table["<%=nCode(ea)%>"]);
        }
<% }); %>
        
        return this;
    }

    async <%=mName='_sql'%>(sql, _this){
        _this = _this || this;
    <% if(mainClass(_sqlTools)!=c){%>
        return await new <%=scope%>.<%=nName(mainClass(_sqlTools))%>().<%=mName%>(sql, _this);
    <% }else{%>
        if(!this.Tool.db || !sql || !sql.trim()){
            if(!this.Tool.db) <%=log()%>sql, " <==SKIPPED==>");
            return [];
        }
        
        if(sql.indexOf(';\n')>0){
            for await (const sqlS of sql.split(';\n')){
                await this.<%=mName%>(sqlS.trim());
            }
            return;
        }
        
        let ret = null;

        if((sql.match(/\(/g) || []).length!=(sql.match(/\)/g) || []).length){
            <%=log()%>"incorrect sql", sql);
            return;
        }
        
        try{
            ret = await new Promise((resolve, reject) => {
                let _ok = (_ret, _sql) => {
                    if(_sql && _sql.indexOf('select')) this.Tool.__dmlStatements.push(_sql);
                    return resolve(_ret);
                }
            
                let db = this.Tool.db;
                let type = this.__config('type');
    
                let fun = "";
                
                // Query list of statement starting keywords        
                let qList = ["select", "insert", "update", "delete"];
                if(this.__config('database.transactions', true)){
                    qList = qList.concat(["begin", "start", "commit"]);
                }
                let bQuery = qList.indexOf(sql.substring(0, sql.indexOf(' ')).trim().toLowerCase())>=0;

                if(bQuery){
                    // query
                    if(['mysql', 'postgres'].indexOf(type)>=0) fun = 'query';
                    if(type=='sqlite') fun = 'all';
                }else{
                    // DML
                    if(['mysql', 'postgres'].indexOf(type)>=0) fun = 'query';
                    if(type=='sqlite') fun = 'run';

                    this.Tool.dmlCache = this.Tool.dmlCache || {};
                    if(this.Tool.dmlCache[this.hashCode(sql)]) return _ok(0);
                    this.Tool.dmlCache[this.hashCode(sql)] = sql;
                }
                if(type=='sqlite' && typeof(window)!=='undefined') fun = "";
                if(fun && !db[fun]) fun = "";
                
                sql = typeof(sqlFormatter)!=='undefined'?sqlFormatter.format(sql):sql;
                
                <%=log()%>`${type}.${fun}`, sql);
                if(<%=scope%>.__sqlTransaction) <%=scope%>.__sqlTransaction.sqls.push(sql);

                if (fun) {
                    let ret = [];
                    if(type=="postgres"){
                        ret = db[fun](sql).then(rows => _ok(rows, sql)).catch(retEx => reject(retEx));
                    }else{
                        ret = db[fun](sql, [], (error, rows) => {
                            if(error){
                                reject(error);
                            }else{
                                _ok(rows, sql);
                            }
                        });
                    }
                } else if (type=='snowflake') {
                    this.Tool.db.execute({
                        sqlText: sql,
                        complete: function(err, stmt, rows) {
                            if(err){
                                reject(err);
                            }else{
                                _ok(rows, sql);
                            }
                        }
                    });
                } else if (type=='sqlite') {
                    // sqlite in the browser
                    try{
                        let ret = null;
                        ret = db.exec(sql);
                        if(!ret || !ret.length) return _ok(ret, sql);
                        
                        ret = ret[0].values.map(r => Object.fromEntries(new Map(ret[0].columns.map((c, i) => [c, r[i]]))));
                        // <%=log()%>ret);
                        _ok(ret, sql);
                    }catch(ex){
                        reject(ex);
                    }
                }
            });
        }catch(ex){
            <%=error()%>`
ERROR:
${ex}

While Sending Query 
${sql}
`);
        }

        if(ret && ret.rows) ret = ret.rows;        
        if(Array.isArray(ret)) ret = ret.map(r => DotObject.object(r));
        return ret;
    <% }%>
    }
<% }%>

<% if(mainClass(['AirTable'])){%>
<%
let _toTypeAT = ea => {
    let ret = {name: nName(ea), description: ea.Name, type: "singleLineText"};
    if(ea.IsBool){
        ret.type = "checkbox";
        ret.options = {
            color: "greenBright",
            icon: "check"
        };
    }
    if(ea.IsDate){
        ret.type = "dateTime";
        ret.options = {
            dateFormat: {
                name: 'iso'
            },
            timeFormat: {
                name: '24hour',
            },
            timeZone: 'utc',
        };
    }
    
    return ret;
};
%>
    <%=mName='_toATTable'%>(level){
        let ret = [{
            name: '<%=nName(c)%>',
            description: '',
            fields: [
                {name: this.__config('idField', 'Id'), description: 'ID', type: 'singleLineText'},
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%><%=_FrEMD._toJS(_toTypeAT(ea))%>,<% })%>],
        }];

        ret = this.__export(ret, {
            Full: true,
            Null: true,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => { %>
            "<%=nName(ea)%>": (obj, eaCode, v) => ret.push(new <%=scope%>.<%=nName(ea.EntityType, true)%>().<%=mName%>()),
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => ret.push(new <%=scope%>.<%=nName(ta.EntityClass, true)%>().<%=mName%>()),
    <% })%>
        }, "<%=mName%>");

        <%=log()%>ret.sql);
        return ret.sql;

        ret = ret.filter((tag, index, array) => array.findIndex(t => t.name == tag.name) == index);
        <%=log()%>ret, level);
        return ret;
    }
    
    <%=mName='_toATFunction'%>(){
        let tPref = `${this._Q()}${<%=_nCode()%>}${this._Q()}.`;
        let ret = this.__export({fun: ""}, {
            _fields: (this.__sync_on() || this.Id==this.Id)?['Id']:undefined,
            _THIS: obj => obj.fun += ` and ${tPref}${this._Q()}${this.__config('idField', 'Id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t.<%=mName%>(t.__config('idField', 'Id'))).join(' UNION ALL ') + ")",
            Id: obj => obj.fun += ` and ${tPref}${this._Q()}${this.__config('idField', 'Id')}${this._Q()}='${this.Id}'`,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => {
        <% if(ea.EntityType){%>
                let coop = this._<%=nName(ea)%>_coop;
                switch(coop){
                    case "!=":
                        coop = "NOT IN";
                    case "=":
                        coop = "IN";
                    case "":
                        coop = "IN";
                }
                
                if(v){
                    obj.fun += ` and ${tPref}${this._Q()}${eaCode}id${this._Q()} ${coop} (${v.<%=mName%>(v.__config('idField', 'Id'))})`;
                }else{
                    obj.fun += ` and (${tPref}${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
                }
                return;
        <% }else if(ea.IsText || ea.IsImage || ea.IsFile){%>
                return;
        <% }else{%>
                obj.fun += ` and ${tPref}${this._Q()}${eaCode}${this._Q()} ` + <%if(ea.IsBool){%>"="<%}else{%>(this._<%=nName(ea)%>_coop || "LIKE")<%}%> + " ";
        <% }%>
        
        <% if(ea.IsDate){ %>
                if(v && v.toISOString){
                    obj.fun += "'" + v.toISOString() + "'";
                }
        <% }else if(ea.IsString){ %>
                if(typeof(v)==="string"){
                    obj.fun += "'" + ((this._<%=nName(ea)%>_coop=="LIKE" || !this._<%=nName(ea)%>_coop)?"%":"") + v + ((this._<%=nName(ea)%>_coop=="LIKE" || !this._<%=nName(ea)%>_coop)?"%":"") + "'";
                    return;
                }
        <% }else if(ea.IsBool){ %>
                if(typeof(v)==="boolean"){
                    obj.fun += "'" + (v?"1":"0") + "'";
                    return;
                }
        <% } %>
                if(v && v.EntityClass){
                    obj.fun += "(" + v.<%=mName%>() + ")";
                }else{
                    obj.fun += "'" + v + "'";
                }
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => {
                obj.sql += " and /*<%=taName%>*/ ";
                if(this._<%=taName%>_coop=='!='){
                    obj.fun += "NOT EXISTS";
                }else if(this._<%=taName%>_coop=='='){
                    obj.fun += "EXISTS";
                }else{
                    obj.fun += `${tPref}${this._Q()}${this.__config('idField', 'Id')}${this._Q()} ${this._<%=taName%>_coop || "IN"}`;
                }
                
                obj.fun += " (" + (v || []).map(t => (t && t.<%=mName%>)?t.<%=mName%>("<%=nName(ta)%>.id"):(t || 'NULL')).join(' UNION ALL/*M2M*/ ') + ")";
            },
    <% })%>
        }, "<%=mName%>");

        <%=log()%>ret);
        return ret;
    }

    async <%=mName='_airtable'%>(tName, params, data, method){
    <% if(mainClass(['AirTable'])!=c){%>
        return await new <%=scope%>.<%=nName(mainClass(['AirTable']))%>().<%=mName%>(tName, params, data, method);
    <% }else{%>
        try{
            tName = tName || <%=_nCode()%>;
            let ret = (await axios.request({
                url: `${this.__config('endpointUrl')}${tName}`,
                method: method?method:(data?"post":"get"),
                params: {
                    filterByFormula: params,
                },
                data: data,
                headers: {
                    "content-type": "application/json",
                },
            })).data;
            <%=log()%>ret);
            return ret;
        }catch(ex){
            <%=error()%>JSON.stringify(ex.response.data, null, 4));
        }
    <% }%>
    }
<% }%>

<% if(mainClass(['FileSystem'])){%>
    async <%=mName='_filesystem'%>(file, content, obj=this){
    <% if(mainClass(['FileSystem'])!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(['FileSystem']), true)%>().<%=mName%>(file, content, obj);
    <% }else{%>
        try{
            if(!file) return null;

            let ret = {};
            let path = obj.__config(`path.${content?'write':'read'}`, (typeof(global)!=='undefined'?'./db/':'https://{{owner}}.github.io/'));
            
            if(obj.__config('live', true)){
                if(typeof(content)!=='undefined'){
                    // write
                    if(typeof(global)!=='undefined'){
                        await fs.promises.mkdir((path + file).replace(/(.*\/).*/g, '$1'), { recursive: true });
                        ret = global.fs.writeFileSync(path + file, typeof(content)==='object'?/*this._btoa(*/JSON.stringify(content, null, '\t')/*)*/:content);
                    }else{
                        <%=warn()%>"Cannot write to file system");
                    }
                }else{
                    // read
                    if(path.startsWith('http') && path.indexOf('://')>0){
                        ret = await this._rest(undefined, null, null, null, {url: 'path.read', file, path});
                    }else if(typeof(global)!=='undefined' && global.fs.existsSync(path + file)){
                        ret = global.fs.readFileSync(path + file);
                    }
                }
            }
            
            ret = ret?(ret.data || ret):ret;
            <%=log()%>`[${obj.__config('live', true)?'':'NOT '}LIVE|${typeof(content)!=='undefined'?'write':'read'}]${path + file}: ${(ret || '').length}`);
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    <% }%>
    }
<% }%>

<% if(mainClass(['GitHub', 'FileSystem'])){%>
    <%=mName='_fileName'%>(_class=<%=_nCode()%>, obj=this, eaCode=<%=_nCode(c.EntityAttributes.find(ea => ea.IsUnique))%>){
    <% if(mainClass(['GitHub', 'FileSystem'])!=c){%>
        return new <%=scope%>.<%=nName(mainClass(['GitHub', 'FileSystem']), true)%>().<%=mName%>(_class, obj, eaCode);
    <% }else{%>
        try{
            if(typeof(obj[eaCode])==='undefined' || !obj[eaCode]()) return null;
            
            //<%=warn()%>'scope', obj.__config('scope', '<%=scope%>'));
            return `<%=scope%>/${_class}/${obj[eaCode]()}.json`;
        }catch(ex){
            <%=error()%>ex);
        }
    <% }%>
    }
<% }%>

<% if(mainClass(['GitHub'])){%>
    async <%=mName='_github'%>(file, content, id){
    <% if(mainClass(['GitHub'])!=c){%>
        return await new <%=scope%>.<%=nName(mainClass(['GitHub']))%>(null, this.Tool).<%=mName%>(file, content, id);
    <% }else{%>
        try{
            if(!file) return null;
            
            let ret = await this._rest(null, null, content?JSON.stringify({
    			message: "deployed by <%=mName%>()",
    			sha: id || content[this.__config('idField', 'Id')],
    			content: this._btoa(typeof(content)==='object'?JSON.stringify(content, null, '\t'):content),
    		}):content, content?'put':'get', {
    		    file,
    	        headers: {
			        'Accept': 'application/vnd.github+json',
			        'X-GitHub-Api-Version': '2022-11-28',
    	        },
    		});
    		
    		if(!ret) return ret;
    		
    		ret = content?ret.content:ret;
    		if(file.indexOf('index.md')>=0) return ret;
    		
    		if(Array.isArray(ret)){
    		    // in case we are listing the contents of a folder resource
    		    return ret;
    		}
    		
    		let _this = ret.content?JSON.parse(this._atob(ret.content)):{};
    		_this[this.__config('idField', 'Id')] = ret.sha;
    		
    		<%=log()%>file, content?'put':'get', _this);
            return _this;
        }catch(ex){
            <%=error()%>ex);
        }
    <% }%>
    }
<% }%>

<% if(mainClass(['SalesForce'])){%>
    <%=mName='_toSFQuery'%>(fields, objs, bString){
        let ret = this.__export({[<%=_nCode()%>]: {params: {where: {and: [], or: []}}, edges: {node: {}}}}, {
            //OPERATORS: true,
            Id: (obj, eaCode, v) => obj[<%=_nCode()%>].params.where.and.push({Id: {eq: v}}),
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => {
                let op = 'eq';
                let cond = {[eaCode]: {[op]: 
        <% if(ea.EntityType){%>
                    {
                        inq: {
                            ApiName: 'Id',
                            [<%=_nCode(ea.EntityType)%>]: v?v.<%=mName%>()[<%=_nCode(ea.EntityType)%>].params.where.and:[],
                        },
                    }
        <% }else if(ea.IsDate){%>
                    (v?v.toISOString():null)
        <% }else{%>
                    v
        <% }%>
                }};
                obj[<%=_nCode()%>].params.where.and.push(cond);
            },
    <% }); %>
        }, "<%=mName%>");
        
        //Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);
        
        if(bString){
            ret = {query: {[<%=_nCode()%> + 'Query']: {uiapi: {query: ret}}}};
            ret = JSON.stringify(ret, null, 4);
        }

        <%=log()%>ret);
        return ret;
    }
<% }%>

<% if(mainClass(['ServiceNow'])){%>
    <%
    let _id = s => /*s?s:*/`this._uuid(${s||undefined}).replace(/-/g, '')`;
    let _tid = _c => _id("'"+scope+"."+ (_c || c).Name + "'");
    let app = () => {%>application(new <%=scope%>.<%=_cName('Application', true)%>().code(this.__config('scope', '<%=scope%>')))<%};
    
    let label = (t, n, c, p) => {n=sr.EnglishName(n); %>.<%=t%>_Field_Labels([new <%=scope%>.<%=_cName('Field Label', true)%>(<%=_id()%>).remark('<%=n%>').name('<%=n%>').code(<%=c%>).language('en').plural('<%=(p || (n + 's'))%>').<%app()%>])<%};%>

    <%=mName='_toSNTable'%>(){
        //this._defaults();

        try{
    <% if(_cName('Application')){%>
            let ret = this.__export(new <%=scope%>.<%=_cName('Table', true)%>(<%=_tid()%>).code(<%=_nCode()%>).<%app()%>.name('<%=c.Name%>').remark(`<%=c.Remark%>`).active(true).enabled(true), {
                Full: true,
                Null: true,
        <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode, v) => obj.table_Columns(new <%=scope%>.<%=_cName('Column', true)%>(<%=_id("'"+scope+"."+c.Name+"'+eaCode")%>).active(true).enabled(true).name("<%=sr.EnglishName(ea.Name)%>").code(eaCode).type('<%=_FrEMD._attr(ea)%>').reference(<%if(ea.EntityType){%>(v || new <%=scope%>.<%=_cName(ea.EntityType, true)%>()).<%=mName%>()<%}else{%>null<%}%>)/*<%label('column', ea.Name, 'eaCode', ea.Plural)%>*/),
        <% })%>
        <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => obj.reference_Columns(new <%=scope%>.<%=_cName('Column', true)%>().active(false).enabled(true).code(eaCode).type('List').name("<%=nName(ta)%> <%=ta.EntityClass.Plural%>").reference(new <%=scope%>.<%=_cName(ta.EntityClass, true)%>().<%=mName%>())/*<%label('column', ta.Name+' '+ta.EntityClass.Plural, 'eaCode', ta.EntityClass.Plural)%>*/),
        <% })%>
            }, "<%=mName%>");
            
            return ret;
    <% }else{%>
            return this;
    <% }%>
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    <%=mName='_toSNFlow'%>(bDraft, bHeader){
        try{
    <% if(_cName('Application')){%>
        <% let bOrder = 1; let _fid = _c => _id("'"+scope+".' + (bDraft?'d':'s') + 'l"+ (_c || c).Name + "'");
        let logic = (n, t, map=[]) => {%>
            new <%=scope%>.<%=_cName('Flow Logic', true)%>(<%=_id()%>).order(<%=bOrder++%>).code(this._uuid()).name('<%=n%>').remark('<%=n%>')
                .block(new <%=scope%>.<%=_cName('Flow Block', true)%>(<%=_id()%>).code(<%=_id()%>).name('<%=n%>')
                    .block_Element_Mappings([<% map.filter(m => m).forEach(m => {%>
                        new <%=scope%>.<%=_cName('Element Mapping', true)%>(<%=_id()%>).name("<%=n%> - " + <%=m.cd%>).code(<%=m.cd%>).value(<%=m.v%>)<%pCompound(m.v, m.trn)%>,
                    <%})%>])
                ).definition(new <%=scope%>.<%=_cName('Logic Definition', true)%>('<%=t%> <%=n%>').code('<%=t%>').name('<%=t%>')).<%app()%>
        <%}
        let action = (aCode, params={}) => { %>
            new <%=scope%>.<%=_cName('Action Instance', true)%>(<%=_id()%>).code(this._uuid()).action(new <%=scope%>.<%=_cName('Action Type', true)%>(<%=_id()%>).code('<%=aCode%>')).order(<%=bOrder++%>).<%app()%>
            .action_Variable_Values([
            <% Object.keys(params).forEach(p => {%>
                new <%=scope%>.<%=_cName('Variable Value', true)%>().code('<%=p%>').value(<%=params[p]%>).actionInput(
                    new <%=scope%>.<%=_cName('Action Input', true)%>().code('<%=p%>')
                ).mapping(new <%=scope%>.<%=_cName('Element Mapping', true)%>().code('<%=p%>').value("")),
            <% })%>
            ])
        <%}
        let subflow = (flow, params={}, bNoWait) => { %>
            new <%=scope%>.<%=_cName('Flow Instance', true)%>(<%=_id()%>).code(this._uuid()).subflow(<%=flow%>).order(<%=bOrder++%>).<%app()%>
            <% if(!bNoWait){%>
            .instance_Flow_Instance_Inputs([new <%=scope%>.<%=_cName('Flow Instance Input', true)%>(<%=_id()%>).code('wait_for_completion').name('Wait for Completion').type('Bool')])
            .instance_Variable_Values([
                    new <%=scope%>.<%=_cName('Variable Value', true)%>().code('wait_for_completion').value('1')
                    .mapping(new <%=scope%>.<%=_cName('Element Mapping', true)%>().code('wait_for_completion'))
            ])
            <%}%>
            .instance_Variable_Values([
            <% Object.keys(params).forEach(p => {%>
                new <%=scope%>.<%=_cName('Variable Value', true)%>().code('<%=p%>').value(<%=params[p]%>).flowInput(
                    new <%=scope%>.<%=_cName('Flow Input', true)%>().code('<%=p%>')
                ).mapping(new <%=scope%>.<%=_cName('Element Mapping', true)%>().code('<%=p%>').value(<%=params[p]%>))
            <% })%>
            ])
        <%}
        let pCompound = (v, trn) => {if(!trn) return; %>.elementMapping_Pill_Compounds([new <%=scope%>.<%=_cName('Pill Compound', true)%>(this._uuid()).code('').name(<%=v%>).order(0)/*.remark(this._btoa(`<%=JSON.stringify([])%>`))*/.<%app()%>
            .parent_Pill_Compounds([
            <% Object.keys(trn).forEach((t, i) => {%> new <%=scope%>.<%=_cName('Pill Compound', true)%>(this._uuid()).code("<%=t%>").order(<%=i+1%>).name(<%=v%>).remark(this._btoa(`<%=JSON.stringify(trn[t])%>`)).<%app()%>/*.transform(new <%=scope%>.<%=_cName('Transform', true)%>(<%=_id()%>).code('<%=t%>').transform_Transform_Compositions([new <%=scope%>.<%=_cName('Transform Composition', true)%>().code('')]))*/,
            <% })%>
            ])])
        <% }%>
            
            
            /*
             * OOB Endpoint: https://dev162570.service-now.com/api/now/processflow/flowobject/start/subflow
             * Payload: {"name":"x_78611_school_man.User_lookup","inputs":{"json":{"name":"test","gender":{"code":"M", "OPERATORS": {"code": "!="}},"user_Students":[{"name":"STA","gender":{"code":"M"}}]}}}
            */

            let flow = new <%=scope%>.<%=_cName('Flow', true)%>(<%=_fid()%>).name('<%=c.Name%> Lookup').code(<%=_nCode()%> + '_lookup').<%app()%>.active(true).enabled(true);
            if(bHeader) return flow;
            
            return this.__export(flow/*._defaults()*/
                .flow_Flow_Settings([new <%=scope%>.<%=_cName('Flow Setting', true)%>(<%=_id()%>).code('ACTION')])
                .flow_Flow_Inputs([
                    new <%=scope%>.<%=_cName('Flow Input', true)%>(<%=_id()%>).active(true).code('json').name('JSON').type('JSON')<%label('input', 'JSON', "'json'")%>
                ]).flow_Flow_Outputs([
                    new <%=scope%>.<%=_cName('Flow Output', true)%>(<%=_id()%>).active(true).code(<%=_nCode()%> + '_list').name('<%=nName(c)%> List').type('List').reference(new <%=scope%>.<%=_cName('Table', true)%>("<%=nName(c)%>").name('<%=c.Name%>').code(<%=_nCode()%>).<%app()%>)
                    <%label('output', c.Name + ' List', _nCode() + "+ '_list'")%>
                ]).flow_Flow_Variables([
                    new <%=scope%>.<%=_cName('Flow Variable', true)%>(<%=_id()%>).active(true).code('json').name('JSON').type('JSON')<%label('variable', 'JSON', '"json"')%>,
                    new <%=scope%>.<%=_cName('Flow Variable', true)%>(<%=_id()%>).active(true).code('equery').name('EQuery').type('String')<%label('variable', 'EQuery', '"equery"')%>,
                ]).flow_Flow_Logics([
                    <%logic('Set ' + c.Name + ' JSON', 'Set Flow Variables', [{cd: "'json'", v: "'{{subflow.json}}'"}])%>,
                    <% // , trn: {replace_string: {regex: "//g", replace_string: ""}}%>
                ]).securityControl(new <%=scope%>.<%=_cName('Security Control', true)%>(<%=_id()%>).code('sys_hub_flow').name(`sys_scope.scope=${this.__config('scope', '<%=scope%>')}`).type(new <%=scope%>.<%=_cName('Security Type', true)%>().code('client_callable_flow_object')).operation(new <%=scope%>.<%=_cName('Security Operation', true)%>().code('execute')).<%app()%>), {
                
                //exporter: v => v.obj = v.reused?new <%=scope%>.<%=_cName('Flow', true)%>(v.obj.Id):v.obj, /*information loss*/
                
                Null: !bHeader,
                Full: true,
                
        <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode, v) => obj<%if(0 || (['name', 'remark', 'date', 'order', 'active', 'enabled'].indexOf(ea.Name)<0)){%>.flow_Flow_Variables([
                    new <%=scope%>.<%=_cName('Flow Variable', true)%>(<%=_id()%>).code(eaCode).name('<%=sr.EnglishName(ea.Name)%>').type(<% if(ea.EntityType){%>'JSON'<% }else{%>'<%=_FrEMD._attr(ea)%>'<%}%>)<%label('variable', ea.Name, "eaCode")%>,
                    new <%=scope%>.<%=_cName('Flow Variable', true)%>(<%=_id()%>).name('<%=nName(c)%>.<%=ea.Name%>.Set').code(eaCode + '_set').name('<%=sr.EnglishName(ea.Name)%> Set').type('Bool')<%label('variable', ea.Name + ' Set', "eaCode + '_set'")%>,
                    new <%=scope%>.<%=_cName('Flow Variable', true)%>(<%=_id()%>).code(eaCode + '_op').name('<%=sr.EnglishName(ea.Name)%> Operator').type('String')<%label('variable', ea.Name + ' Operator', "eaCode + '_op'")%>,
                    ]).flow_Flow_Logics([
                    <%logic('Set '+ea.Name, 'Set Flow Variables', [
                        ea.EntityType?null:{cd: "eaCode", v: "'{{flow_variable.json}}'", trn: Object.assign({}, {value_map: {key: "${eaCode}", default: ""}}, ea._IsDate?{string_to_date: {date_format: "yyyy-MM-dd\'T\'HH:mm:ss\'Z\'", custom_format: ""}}:{})},
                        //{cd: "eaCode+'_set'", v: "'{{flow_variable.'+eaCode+'}}}'", trn: {is_null: {}}},
                        //{cd: "eaCode+'_op'", v: "'{{flow_variable.operators}}'", trn: {value_map: {key: "${eaCode}"}}},
                    ])%>.logic_Flow_Input_Scripts([
                        <%if(ea.EntityType){%>new <%=scope%>.<%=_cName('Flow Input Script', true)%>(<%=_id()%>).name('Set <%=ea.Name%>').active(true).code(eaCode).remark(`return fd_data.flow_var.json.${eaCode};`),<%}%>
                        new <%=scope%>.<%=_cName('Flow Input Script', true)%>(<%=_id()%>).name('Set <%=ea.Name%> Set').active(true).code(eaCode + '_set').remark(`return typeof(fd_data.flow_var.json.${eaCode})!\u003d\u003d\u0027undefined\u0027;`),
                        new <%=scope%>.<%=_cName('Flow Input Script', true)%>(<%=_id()%>).name('Set <%=ea.Name%> Operator').active(true).code(eaCode + '_op').remark(`return (fd_data.flow_var.json.OPERATORS || {}).${eaCode};`),
                    ]),

                    <%logic('If ' + c.Name + ' '+ea.Name+' Set', 'If', [{cd: "'condition'", v: "'{{flow_variable.' + eaCode + '_set}}=true'"}])%>
                    <%if(ea.EntityType){%>.parent_Flow_Instances(<%subflow('new '+scope+'.'+_cName(ea.EntityType, true)+'().'+mName+'(false, true)', {json: "'{{flow_variable.'+eaCode+'}}'"})%>)<%}%>
                    .parent_Flow_Logics([
                        <%logic('Add '+ea.Name+' to ' + c.Name + ' EQuery', 'Set Flow Variables', [{cd: "'equery'", v: "'{{flow_variable.equery}}^'+eaCode"}])%>,
                        <%logic('If ' + c.Name + ' '+ea.Name+' Operator is not empty', 'If', [{cd: "'condition'", v: "'{{flow_variable.'+eaCode+'_op}}!='"}])%>.parent_Flow_Logics([
                            <%logic('Append '+ea.Name+' Operator to ' + c.Name + ' EQuery', 'Set Flow Variables', [{cd: "'equery'", v: "'{{flow_variable.equery}}{{flow_variable.'+eaCode+'_op}}'"}])%>
                        ]),
                        <%logic('Else ' + c.Name + ' '+ea.Name+' not Set', 'Else')%>.parent_Flow_Logics([
                            <%logic('Append = to ' + c.Name + ' EQuery for '+ea.Name, 'Set Flow Variables', [{cd: "'equery'", v: "'{{flow_variable.equery}}='"}])%>
                        ]),
                        <%if(ea.EntityType){%><%logic('For each '+c.Name+' '+ea.Name, 'For Each', [{cd: "'items'", v: "'{{<<**#$f[internal_name=\\'"+c.Name+"_lookup\\' and $not($exists(flow_Flow_Snapshots))].snapshot_Flow_Logics.**.parent_Flow_Instances#$fi[$number(order)<="+bOrder+" and subflow.internal_name=\\'"+ea.EntityType.Name+"_lookup\\'].ui_id>>."+ea.EntityType.Name+"_list}}'"}])%>.parent_Flow_Logics([<%}%>
                        <%logic('Append '+ea.Name+' to ' + c.Name + ' EQuery', 'Set Flow Variables', [{cd: "'equery'", v: "'{{flow_variable.equery}}{{flow_variable.'+eaCode+'}}'"}])%>,
                        <%if(ea.EntityType){%>])<%}%>,
                    ]),
                ])<%}%>
                ,
        <% })%>
        <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => obj<%if(0 || ['User', 'Gender', '_Student', '_Teacher'].indexOf(ta.EntityClass.Name)>=0){%>.flow_Flow_Logics([<%logic('If '+taName+' not empty', 'If')%>.parent_Flow_Instances(<%subflow('new '+scope+'.'+_cName(ta.EntityClass, true)+'().'+mName+'(bDraft, true)', {json: "'test'"})%>)])<%}%>,
        <% })%>
                _lookup: obj => obj.flow_Flow_Logics([<%logic('If EQuery not empty', 'If', [{cd: "'condition'", v: "'{{flow_variable.equery}}!='"}])%>
                    .parent_Action_Instances([
                        <%action('look_up_records', {table: '"<<$.sys_scope.scope>>_"+('+_nCode()+').toLowerCase()'})%>,
                    ]).logic_Flow_Input_Scripts([
                        new <%=scope%>.<%=_cName('Flow Input Script', true)%>().name('Set Condition').active(true).code('conditions').remark(`return fd_data.flow_var.equery;`),
                    ])
                ]),
                _snapshot: obj => bDraft?null:obj.flow_Flow_Snapshots(new <%=scope%>.<%=_cName('Flow Snapshot', true)%>(<%=_fid()%>).snapshot_Flow_Plans([
                    new <%=scope%>.<%=_cName('Flow Plan', true)%>(<%=_id()%>).code('<%=c.Name%>_Plan').name('<%=c.Name%> Plan')
                    ]).fromFlow(this.<%=mName%>(true))),
            }, "<%=mName%>", bDraft, bHeader);
    <% }else{%>
            return [];
    <% }%>
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    async <%=mName='_toSNScript'%>(options={}){
        options._this = options._this || this;
<% if(mainClass()!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(options);
<% }else{%>
        try{
    <% if(_cName('Application')){%>
            let exp = options.raw?"_toJSON":"_toDocument";
            let rollback = (options.app && options.rollback)?await new <%=scope%>.<%=_cName('Rollback Context', true)%>().code('last')[exp](Object.assign({bJSON: true}, options)):"";
            let db = options.db?await options._this/*._toObjTree(true)*/._toSNTable()[exp](Object.assign({bJSON: true}, options)):"";
            let flow = options.flow?await options._this/*._toObjTree(true)*/._toSNFlow(options.draft)[exp](Object.assign({bJSON: true}, options)):"";
            
            if(options.gzip){
                if(flow) flow = this.Utf8ArrayToStr(await this._compress(flow));
            }
            
            let test = (options.test && options.flow && !options.draft)?`\n/*gs.cacheFlush(); */gs.info(sn_fd.FlowAPI.getRunner().subflow('${this.__config('scope', '<%=scope%>')}.User_lookup').inForeground().withInputs({json: {code:"test",date:'2024-05-03T18:44:03.177Z',gender:{code:"M", OPERATORS: {code: "!="}},user_Students:[{code:"STA",gender:{code:"M"}}], OPERATORS: {date: '<'}}}).run().getOutputs()["User_list"]);\n`:'';
            let app = options.app?(new <%=scope%>.<%=_cName('Application', true)%>()/*._toObjTree(true)*/._toSNSave(options) + `\n var config = {Application: {readOnly: true}, Table: {idKey: 'name', LogSet: 0}, Column: {LogSet: 0}, Element_Mapping: {LogSet: 0}, Action_Input: {readOnly: true}, Action_Type: {readOnly: true, idKey: 'master_snapshot'}, Action_Instance: {LogSet: 0}, Security_Type: {readOnly: true, idKey: 'name'}, Security_Operation: {readOnly: true, idKey: 'name'}, Logic_Definition: {readOnly: true}, Flow: {LogSet: 0}, Transform: {readOnly: true}, Transform_Composition: {readOnly: true}, Rollback_Context: {readOnly: true}}; \n` + (options.rollback?("var cid = saveRollback_Context("+rollback+`); if(cid){var rw = new GlideRollbackWorker(); rw.setRollbackContextID(cid.sys_id); rw.start();} \n`):"")+ (options.db?("saveTable("+db+"); \n"):"") + (options.flow?("saveFlow("+flow+"); \n"):"") + test):(rollback + db + flow);
            
            let script = this._beautify(app, 'javascript');
            
            if(!options.deploy) return script;
    <% }%>
        }catch(ex){
            <%=error()%>ex);
        }
<% }%>
    }

    <%=mName='_toSNSave'%>(options){
        try{
            <% var _fRegExp = /_f{[^}]+}/gm; %>
            let _f = (v, eaCode) => {
                if(typeof(v)==="string"){
                    let ret = v;
                    //if(v.startsWith("f(") && v.endsWith(")")) ret = '('+v.slice(2,-1)+')';
                    if(v.startsWith("s(") && v.endsWith(")")){
                        ret = `(function (obj, ${eaCode}){`+v.slice(2,-1)+`})(obj, ${eaCode})`;
                    }
                    
                    if(ret && ret.match && ret.match(<%=_fRegExp%>)) ret = `(function (obj, ${eaCode}){${ret.indexOf("return")<0?"return ":""} '`+ret.replace(<%=_fRegExp%>, m => `' + ${m.slice(3, -1)} + '`)+`';})(obj, ${eaCode})`;
                    if(ret && ret.match && ret.match(/<<[^>>]+>>/gm)) ret = '""';
                    return `(function(v){ try{ return (v && v.replace)?v.replace(<%=_fRegExp%>, function(m){return eval(m.slice(3, -1));}):v;  }catch(ex){gs.info('_f{Exception}: ${eaCode}: ' + ex); return v;} })(${ret} || ${eaCode})`;
                }
                return eaCode;
            };

            let ret = this.__export({Id: "<%=scope%>.<%=_cName(c, true)%>", vars: ``, code: ``, query: ``, set: ``, eset: ``, dset: ``, tas: ``, deps: {}}, {
                exporter: v => v.obj = (typeof(options.reused)==='undefined' || options.reused>=v.reused)?v.obj:{code: v.obj.code + `\n\n/** reused: v.obj.Id**/\n\n`, deps: '', Id: v.obj.Id},

                Full: true,
                Null: true,
                Id: (obj, idCode, v) => {
                    obj.Id = `if(obj.${idCode} && obj.${idCode}.replace(/-/g, '').length==32){_toString+='_'+obj.${idCode}.replace(/-/g, ''); gr.get('sys_id', obj.${idCode}.replace(/-/g, ''));}\n`;
                    obj.idToString = `_toString += (obj?obj.${idCode}:('gr_'+gr.sys_id)) + ': '; `;
                    obj.newUUID = `if(!obj.${idCode} || obj.${idCode}.replace(/-/g, '').length!=32){obj.${idCode} = gr.setNewGuid();}else{gr.setNewGuidValue(obj.${idCode}.replace(/-/g, ''));}}\n`;
                },
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode, v) => {
        <% if(ea.EntityType && ea.EntityType!=c){%>
                    obj.deps.<%=nName(ea.EntityType)%> = (v || new <%=scope%>.<%=_cName(ea.EntityType, true)%>()).<%=mName%>(options);
        <% }%>

                    obj.vars += `var ${eaCode} = <%if(ea.EntityType){%>(((refs.<%=nName(ea)%> = (typeof(obj.${eaCode})!=='undefined'?/*this.*/save<%=nName(ea.EntityType)%>(obj.${eaCode}, {<%=nName(c)%>: obj, <%=nName(c/*ea*/)%>Refs: refs, <%=nName(c).toLowerCase()%>: gr}, "<%=nName(c)%>", refs.<%=nName(ea)%> || /*EXP: refs.<%=nName(ea.EntityType).toLowerCase()%> || */(${_f(<%valueOf(ea.Default)%>, eaCode)})):refs.<%=nName(ea)%>)) || {sys_id: ''})[/*this.*/config.<%=nName(ea.EntityType)%>.idKey || "sys_id"]).toString()<%}else{%>obj.${eaCode}<%}%>;`;
        <% if(ea.IsUnique){%>
                    obj.query += `_toString+='_'+${eaCode}; _toQuery.${eaCode} = ${_f(v, eaCode)}; `;
        <% }%>
                    obj.set += `if(typeof(_toSet.${eaCode} = ${_f(v, eaCode)})!=='undefined'<%if(ea.EntityType){%>&& _toSet.${eaCode}<%}%>) gr.setValue('${eaCode}', _toSet.${eaCode});`;
                },
    <% })%>
    <% c.EntityFields.forEach(ef => {%>
                ef_<%=nName(ef)%>: (obj, efCode, v) => obj.eset += `if(typeof(_toSet.${efCode} = ${_f(JSON.stringify(v), 'obj.'+efCode)})!=='undefined') gr.setValue('${efCode}', _toSet.${efCode});`,
    <% })%>
    <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => {
                    obj.tas += `refs.<%=taName%> = ((obj?obj.${eaCode}:[]) || []).map(function(o){gs.info(_toString + ' => save<%=nName(ta.EntityClass)%>(${eaCode}[])'); return /*this.*/save<%=nName(ta.EntityClass)%>(o, {<%=nName(c)%>: obj, <%=nName(c).toLowerCase()%>: gr, manyRefs: refs}, "<%=nName(c)%>");});`
                    obj.deps.<%=nName(ta.EntityClass)%> = (v && v.length)?v[0]:new <%=scope%>.<%=_cName(ta.EntityClass, true)%>().<%=mName%>(options);
                },
    <% })%>
            }, "<%=mName%>");
            
            if(!ret.dset) ret.dset += `\nif(typeof(obj)==="object") Object.keys(obj).filter(function(k){return !k.startsWith('__') && ['sys_id', 'Id', 'OPERATORS'].indexOf(k)<0 && typeof(_toSet[k])==='undefined' && !Array.isArray(obj[k]);}).forEach(function(k){_toSet[k] = ${_f("obj[k]", "null")}; if(_toSet[k] && _toSet[k].__class){_toSet[k] = _toSet[k][config[_toSet[k].__class].idField || 'Id']; } gr.setValue(k, _toSet[k] ); })\n`;

            ret.code += `${Object.values(ret.deps).join('\n')}function save<%=nName(c)%>(obj, refs, source, gr){refs = refs || {}; /*this.*/config.save_${<%=_nCode()%>} = save<%=nName(c)%>; /*this.*/config.<%=nName(c)%> = /*this.*/config.<%=nName(c)%> || {}; /*this.*/config._idMap = /*this.*/config._idMap || []; var _toString = source + '[' + (refs[source].sys_id) + ']=> save<%=nName(c)%>('; if(typeof(obj)==='string' && obj.length>=32){var ret = {}; ret[/*this.*/config.<%=nName(c)%>.idKey || "sys_id"]=obj; gs.info(_toString + '): obj is uuid, returning {'+obj+'}'); return ret;} if(!obj && !gr){gs.info(_toString + '): obj is null'); return null;} ${ret.idToString} var bSave = !/*this.*/config.<%=nName(c)%>.readOnly; if(!gr){ gr = new GlideRecord('${<%=_nCode()%>}');\n${ret.Id}\n${ret.vars}\nif(!gr.isValidRecord()){gr = new GlideRecord('${<%=_nCode()%>}'); var _toQuery={}; ${ret.query} \n_toString += '): '; if(obj.__keys && (bSave || config.<%=nName(c)%>.readOnly)){if(_toQuery.__encodedQuery){gr.addEncodedQuery(_toQuery.__encodedQuery);}else{obj.__keys.forEach(function(k){gr.addQuery(k, _toQuery[k] || obj[k]);});} gr.setLimit(1); if(!gr.getEncodedQuery()) gr.addQuery('sys_id', '-1'); gs.info(_toString + 'Encoded Query: ' + gr.getEncodedQuery()); gr.query();if(!gr.next()){gs.info(_toString + 'not found');}else{gs.info(_toString + 'found [${<%=_nCode()%>}/' + gr.sys_id + '] - is valid: ' + gr.isValidRecord()); obj.Id = gr.sys_id.toString(); if(obj.__reused){/*gs.info(_toString + ': __reused: [${<%=_nCode()%>}/' + gr.sys_id + '] - is valid: ' + gr.isValidRecord()); */return gr;} }}}}else{bSave=false;} if(bSave && !gr.isValidRecord()){gs.info(_toString + 'inserting...'); gr = new GlideRecord('${<%=_nCode()%>}'); gr.initialize(); ${ret.newUUID} if(bSave && obj){var _toSet = {}; /*set*/${ret.set} /*eset*/${ret.eset}  ${ret.dset} if(/*this.*/config.<%=nName(c)%>.NoWorkflow) gr.setWorkflow(false); if(/*this.*/config.<%=nName(c)%>.LogSet) gs.info(_toString + '_toSet: ' + JSON.stringify(_toSet)); }else if(!gr.isValidRecord()){gs.info(_toString + '[bSave=' + bSave + '] - returning null.'); return null;}\nif(!bSave || gr.update()){ if(false && bSave){config._idMap.push({table: '${<%=_nCode()%>}', sys_id: gr.sys_id.toString(), keys: obj.__keys.map(function(k){return {k: k, v: _toQuery[k] || obj[k]};})});} ${ret.tas}\ngs.info(_toString + '[bSave=' + bSave + '] - returning ' + gr.sys_id); return gr;}}\n`;

            /*return Object.values(Object.assign({}, ...ret.code.split('function save').filter(s => s).sort((a, b) => a.length - b.length).map(s => ({[s.split('(obj, refs, source, gr)')[0]]: 'function save'+s})))).join('\n'); */
            return ret.code;
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    <%=mName='_toSNQuery'%>(fields, objs, bURL){
        let ret = this.__export({}, {
            OPERATORS: true,
            //_map: true,
            Id: (obj, idCode, v) => obj[idCode] = v,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => {
        <% if(ea.EntityType){%>
                obj[eaCode] = v?v.<%=mName%>():null;
        <% }else if(ea.IsDate){%>
                let d = `${v.getFullYear()}-${('0'+(v.getMonth()+1)).slice(-2)}-${v.getDate()}`;
                let t = `${v.getHours()}:${v.getMinutes()}:${v.getSeconds()}`;
                if((v.getHours()==0 && v.getMinutes()==0 && v.getSeconds()==0) || this._<%=nName(ea)%>_coop=='=' || !this._<%=nName(ea)%>_coop){
                    obj[eaCode] = `ON${d}@javascript:gs.dateGenerate('${d}','start')@javascript:gs.dateGenerate('${d}','end')`;
                }else if(this._<%=nName(ea)%>_coop!=='BETWEEN'){
                    obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')`;
                }else{
                    obj[eaCode] = `javascript:gs.dateGenerate('${d}', '${t}')@javascript:gs.dateGenerate('${d}', '${t}')`;
                }
        <% }else if(ea.IsBool){%>
                obj.OPERATORS.<%=nName(ea)%> = '=';
                obj[eaCode] = v;
        <% }else{%>
                obj[eaCode] = v;
        <% }%>
            },
    <% }); %>
        }, "<%=mName%>");
        
        Object.keys(ret.OPERATORS || {}).filter(k => typeof(ret[k])!=='undefined' && typeof(ret[k])!=='object').forEach(k => ret[k] = ret.OPERATORS[k] + ret[k]);

        delete ret.OPERATORS;
        Object.keys(ret).filter(k => !String(ret[k]).length).forEach(k => delete ret[k]);

        ret = DotObject.dot(ret);

        // avoid sending with no comparison operators
        Object.keys(ret).filter(k => !['>', '<', 'BETWEEN', 'ON', '!', '=', 'STARTSWITH', 'LIKE'].some(s => String(ret[k]).startsWith(s))).forEach(k => ret[k] = (this[`_${k}_coop`] || 'STARTSWITH') + ret[k]);
        
        <%=log()%>ret);

        if(bURL) ret = Object.entries(ret || {}).map(p => `${p[0]}${p[1]}`).join("^");
        
        return ret;
    }
<% }%>

	<%=mName='__export'%>(obj, options, fun, ...fArgs) {
	    try{
    	    if(!obj) return this;
    	    
    	    if(options.OPERATORS) obj.OPERATORS = obj.OPERATORS || {};
    	    
    	    <% /* IMPORTANT: this.Id==this.Id makes sure the Id is fixed for the tool, not getting generated every time we call it */ %>
    	    
    	    let eaCodes = {
    	        exporter: "",
    	        Id: "",
    	    };
    	    
    		if (options.Full || this.__sync_on() || this.Id==this.Id) this.__options("Id", obj, eaCodes.Id = (options._map?this._nCode('Id'):'Id'), this.Id, this, options, fun);
    		
<% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.EntityType).forEach(ea => {%>
            this.__options("<%=nName(ea)%>", obj, eaCodes.<%=nName(ea)%> = (options._map?<%=_nCode(ea)%>:<%_vCode(ea)%>), this.<%=nName(ea)%>(), this, options, fun, "<%=_cField(ea)%>");
<% })%>

<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType && ea.IsUnique).forEach(ea => {%>
            this.__options("<%=nName(ea)%>", obj, eaCodes.<%=nName(ea)%> = (options._map?<%=_nCode(ea)%>:<%_vCode(ea)%>), this.<%=nName(ea)%>(), this, options, fun, "<%=_cField(ea)%>");
<% })%>

<% c.EntityFields.forEach(ef => {%>
            this.__options("ef_<%=nName(ef)%>", obj, eaCodes.ef_<%=nName(ef)%> = (options._map?<%=_nCode(ef)%>:<%_vCode(ef)%>), <%valueOf(ef.Value)%>, this, options, fun);
<% })%>

		    <% unRecurse('obj', 'fun', 'fArgs', 'if(typeof(options.exporter)==="function") options.exporter(v)')%>

<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType && !ea.IsUnique).forEach(ea => {%>
            this.__options("<%=nName(ea)%>", obj, eaCodes.<%=nName(ea)%> = (options._map?<%=_nCode(ea)%>:<%_vCode(ea)%>), this.<%=nName(ea)%>(), this, options, fun, "<%=_cField(ea)%>");
<% })%>

            this.__options("_THIS", obj, eaCodes._THIS = (options._map?this._nCode('_THIS'):"_THIS"), this._THIS, this, options, fun);

<% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            this.__options("<%=taName%>", obj, eaCodes.<%=taName%> = (options._map?<%=_nCode(ta, true)%>:"<%=taName%>"), this.<%=taName%>(), this, options, fun, "<%=_cField(ta)%>");
<% })%>

            Object.keys(options).filter(k => typeof(options[k])==='function' && !Object.keys(eaCodes).includes(k)).forEach(k => this.__options(k, obj, k, undefined, this, options, fun));
        
            <%=scope%>._unRecurse.<%=nName(c)%>[fun] = <%=scope%>._unRecurse.<%=nName(c)%>[fun] || {};
            (<%=scope%>._unRecurse.<%=nName(c)%>[fun].Cyclic || []).forEach(n => n._c[n.eaField](n._c[n.eaField]()._toHash(null, {noCode: true, onlyUnique: true, noArgs: true, _map: options._map}, fun)));
            <%=scope%>._unRecurse.<%=nName(c)%>[fun].Cyclic = []; //??
            
    		return obj;
    	}catch(ex){
    	    <%=error()%>ex);
    	}
	}
	
	<%=mName='__options'%>(field, obj, eaCode, eaObj, _this=this, options={}, fun, eaField){
<% if(mainClass()!=c){%>
        return new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(field, obj, eaCode, eaObj, _this, options, fun, eaField);
<% }else{%>
        try{
            if(options._fields && !options._fields.includes(field)) return;
            if(!obj) return;
            if(typeof(options[field])!=="function"){
                <%=log()%>`${fun}.options.${field} is not a function`);
                return;
            }
            
            if(typeof(eaObj)!=='undefined' && !options.Null){
                if(field!='Id' && typeof(_this[field])==='function' && !_this['_'+field+'_set']) return;
                if(Array.isArray(eaObj) && typeof(eaObj.length)!=='undefined') eaObj = eaObj.filter(v => v);
            }
            
            if(!options.Null && Array.isArray(eaObj) && !eaObj.length) return;

            let _ret = options[field](obj, eaCode, eaObj, _this);
            if(options.OPERATORS && _this['_' + field + '_coop']) obj.OPERATORS = Object.assign(obj.OPERATORS || {}, {[field]: _this['_' + field + '_coop']});

            if(!options.Cyclic && eaField && obj && obj.EntityClass && typeof(obj[field])==='function'){
                <%=scope%>._unRecurse.<%=nName(c)%>[fun] = <%=scope%>._unRecurse.<%=nName(c)%>[fun] || {};
                <%=scope%>._unRecurse.<%=nName(c)%>[fun].Cyclic = <%=scope%>._unRecurse.<%=nName(c)%>[fun].Cyclic || [];
                let _cycles = obj[field]();
                if(!Array.isArray(_cycles)) _cycles = [_cycles];
                _cycles = _cycles.filter(_c => _c && typeof(_c[eaField])==='function' && _c['_' + eaField + '_set'] && obj._sameEntity(_c[eaField]())).map(_c => ({
                    /*mark _c[eaField]_set to null instead*/
                    _c,
                    eaField,
                }));
                if(_cycles.length) <%=warn()%>fun + "/_cycles", _cycles);
                <%=scope%>._unRecurse.<%=nName(c)%>[fun].Cyclic.push(..._cycles);
            }

            if(options._map) _this._map(field, typeof(eaObj)==='undefined', fun, typeof(eaObj)==='undefined'?obj:eaObj, typeof(eaObj)==='undefined'?_this:obj, eaCode);

            return _ret;
        }catch(ex){
            <%=error()%>fun, field, ex);
        }
<% }%>
	}
	
	<%=mName='__import'%>(obj, options, fun, ...fArgs) {
        if(typeof(obj)!=='object'){
            <%=warn()%>`${fun}: Not an object: ${typeof(obj)}`, obj);
            return this;
        }
	    
        let eaCodes = {};

		this.__options("Id", obj, eaCodes.Id = (options._map?this._nCode('Id'):'Id'), undefined, this, options, fun);
		
<% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.EntityType).forEach(ea => {%>
        this.__options("<%=nName(ea)%>", obj, eaCodes.<%=nName(ea)%> = (options._map?<%=_nCode(ea)%>:<%_vCode(ea)%>), undefined, this, options, fun, "<%=_cField(ea)%>");
<% })%>

<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType && ea.IsUnique).forEach(ea => {%>
        this.__options("<%=nName(ea)%>", obj, eaCodes.<%=nName(ea)%> = (options._map?<%=_nCode(ea)%>:<%_vCode(ea)%>), undefined, this, options, fun, "<%=_cField(ea)%>");
<% })%>

		<% unRecurse('this', 'fun', 'fArgs', 'if(typeof(options.importer)==="function") options.importer(v)')%>

<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType && !ea.IsUnique).forEach(ea => {%>
        this.__options("<%=nName(ea)%>", obj, eaCodes.<%=nName(ea)%> = (options._map?<%=_nCode(ea)%>:<%_vCode(ea)%>), undefined, this, options, fun, "<%=_cField(ea)%>");
<% })%>

		this.__options("_THIS", obj, eaCodes._THIS = (options._map?this._nCode('_THIS'):'_THIS'), undefined, this, options, fun);

<% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {
    let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');
%>
        this.__options("<%=taName%>", obj, eaCodes.<%=taName%> = (options._map?<%=_nCode(ta, true)%>:"<%=taName%>"), undefined, this, options, fun, "<%=_cField(ta)%>");
<% })%>

        Object.keys(options).filter(k => typeof(options[k])==='function' && !Object.keys(eaCodes).includes(k)).forEach(k => this.__options(k, obj, k, undefined, this, options, fun));

		return this;
	}

<% if(mainClass(['Neo4j'])){%>
    <%=mName='_toCyTable'%>(){
        let ret = this.__export({cql: `
CREATE CONSTRAINT IF NOT EXISTS FOR (o:${<%=_nCode()%>}) REQUIRE o.${this.__config('idField', 'Id')} IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS FOR (o:${<%=_nCode()%>}) REQUIRE o.${this.__config('idField', 'Id')} IS NOT NULL;
        `}, {
            Full: true,
            Null: true,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
            "<%=nName(ea)%>": (obj, eaCode, v) => {
        <% if(ea.EntityType){%>
                obj.cql += v?v.<%=mName%>():'';
        <% }else if(ea.IsUnique){%>
                obj.cql += `CREATE CONSTRAINT IF NOT EXISTS FOR (o:${<%=_nCode()%>}) REQUIRE o.${eaCode} IS UNIQUE;
`
        <% }%>
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => obj.cql += v.map(_v => _v.<%=mName%>()).join('\n'),
    <% })%>
        }, "<%=mName%>");

        <%=log()%>ret.cql);
        return ret.cql;
    }
    
    <%=mName='_toCyMerge'%>(fields, bRaw){
        let obj = this._toDBObject(fields, true);
        let ukeys = [];
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.IsUnique).forEach(ea => {%>
        if(<%valueOf(ea.IsUnique)%>) ukeys.push(<%=_nCode(ea)%>);
    <% })%>
        let cql = `:${<%=_nCode()%>} {` + Object.keys(obj).filter(k => ukeys.includes(k)).map(k => k + ": " + obj[k]).join(', ') + `})`;
        
        if(!bRaw){
            let match = '\nMATCH (o' + cql;
            cql = 'MERGE (o' + cql;
            
            let onSet = Object.keys(obj).filter(k => !ukeys.includes(k)).map(k => "o." + k + "=" + obj[k]).join(', ')
            cql += '\nON CREATE SET ' + onSet + '\nON MATCH SET ' + onSet;
            cql += '\nRETURN o;';

    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
            if(this._<%=nName(ea)%>_set) cql += match + ', ' + this.<%=nName(ea)%>().<%=mName%>(null, true).replace('(:', '(<%=nName(ea)%>:') + ' MERGE (o)-[:<%=nName(c)%>_<%=nName(ea)%>]->(<%=nName(ea)%>);';
    <% })%>
        }else{
            cql = '(' + cql;
        }
        
        <%=log()%>cql);
        return cql;
    }

    <%=mName='_toCyQuery'%>(fields, objs){
        let sql = "MATCH ";
        
        let tPref = `${this._Q()}${<%=_nCode()%>.toLowerCase()}${this._Q()}`;

        let header = this._toSelectHeader(fields);

        sql += ` (${tPref}:${this._Q()}${<%=_nCode()%>}${this._Q()})`;
        
        Object.keys(header.joins).forEach(k => sql += ` OPTIONAL MATCH (${this._Q()}${k}${this._Q()}:${this._Q()}${header.joins[k].table}${this._Q()}) OPTIONAL MATCH (${this._Q()}${<%=_nCode()%>.toLowerCase()}${this._Q()})-[:${this._Q()}${header.joins[k].table}_${k}${this._Q()}]->(${this._Q()}${k}${this._Q()})`);
        

        //sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
        //Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));
        
        if(this.__fieldAggregates){
            // {field: function}
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.IsText && !ea.IsImage && !ea.IsFile).forEach(ea => { %>
            if(this.__fieldAggregates.<%=nName(ea)%>) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.<%=nName(ea)%>}(${this._Q()}${<%=_nCode(ea)%>}${this._Q()})`;
    <% })%>
        }

        sql += ` where 1=1`;

        sql = this.__export({sql: sql}, {
            _fields: (this.__sync_on() || this.Id==this.Id)?['Id']:undefined,
            Null: true,
            _THIS: obj => {
                if(!this._THIS || !this._THIS.length) return;
                
                obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t.<%=mName%>(t.__config('idField', 'Id'))).join(' UNION ALL ') + ")";
            },
            Id: obj => obj.sql += ` and ${tPref}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()}='${this.Id}'`,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => {
                if(!this._<%=nName(ea)%>_set) return;
                
        <% if(ea.EntityType){%>
                let coop = this._<%=nName(ea)%>_coop;
                switch(coop){
                    case "!=":
                        coop = "NOT ";
                    case "=":
                        coop = "";
                    case "":
                        coop = "";
                }
                
                if(v){
                    obj.sql += ` and ${coop} EXISTS {${v.<%=mName%>()}}`;
                }else{
                    obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
                }
                return;
        <% }else if(ea.IsText || ea.IsImage || ea.IsFile){%>
                return;
        <% }else{%>
                obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + <%if(ea.IsBool){%>"="<%}else{%>(this._<%=nName(ea)%>_coop || "CONTAINS")<%}%> + " ";
        <% }%>
        
        <% if(ea.IsDate){ %>
                if(v && v.toISOString){
                    if(this.__config('type')=='sqlite'){
                        obj.sql += "strftime('%s', '" + v.toISOString() + "')";
                    }else{
                        obj.sql += "'" + v.toISOString() + "'";
                    }
                    return;
                }
        <% }else if(ea.IsString){ %>
                if(typeof(v)==="string"){
                    obj.sql += "'" + ((this._<%=nName(ea)%>_coop=="LIKE" || !this._<%=nName(ea)%>_coop)?"%":"") + v + ((this._<%=nName(ea)%>_coop=="LIKE" || !this._<%=nName(ea)%>_coop)?"%":"") + "'";
                    return;
                }
        <% }else if(ea.IsBool){ %>
                if(typeof(v)==="boolean"){
                    obj.sql += "'" + (v?"1":"0") + "'";
                    return;
                }
        <% } %>
                if(v && v.EntityClass){
                    obj.sql += "(" + v.<%=mName%>() + ")";
                }else{
                    obj.sql += "'" + v + "'";
                }
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => {
                if(!this._<%=taName%>_set) return;
                
                let squeries = (v || []).filter(t => t).map(t => t.<%=mName%>("<%=nName(ta)%>.id"));
                
                let jOP = 'UNION ALL';
                let inOP = 'IN';
                
                obj.sql += ``;
                
                if(this._<%=taName%>_coop=='!=' || this._<%=taName%>_coop=='NOT IN'){
                    inOP = 'NOT IN';
                }else if(this._<%=taName%>_coop=='=' || this._<%=taName%>_coop=='IN'){
                }else if(this._<%=taName%>_coop=='=='){
                    jOP = 'INTERSECT';
                }
                
                obj.sql += `and /*<%=taName%>*/ ${tPref}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()} ${inOP} (` + squeries.join(` ${jOP}/*M2M*/ `) + ')';
            },
    <% })%>
        }, "<%=mName%>", fields).sql;

        if(this.__fieldGroups){
            if(Object.keys(this.__fieldGroups).length) sql += " group by ";
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.IsText && !ea.IsImage && !ea.IsFile).forEach(ea => { %>
            if(this.__fieldGroups.<%=nName(ea)%>) sql += `${this._Q()}${<%=_nCode(ea)%><%=(ea.EntityType?'+"id"':'')%>}${this._Q()} ${this.__fieldGroups.<%=nName(ea)%>}`;
    <% })%>
        }

        if(sql.endsWith("where 1=1")){
            // sql = sql.replace("where 1=1", "where 1=0");
        }else{
            sql = sql.replace("where 1=1 and ", "where ");
        }
        
        sql += ' return ' + [tPref].concat(Object.keys(header.joins).map(k => `${this._Q()}${k}${this._Q()}`)).join(', ');
        
        <%=log()%>sql);
        
        return sql;
    }

    async <%=mName='_neo4j'%>(cql){
    <% if(mainClass(['Neo4j'])==c){%>
        let session = null;
        let ret = [];
        try{
            if(!this.Tool.db || !cql || !cql.trim()){
                if(!this.Tool.db) <%=log()%>cql, " <==SKIPPED==>");
                return [];
            }
    
            if(cql.indexOf(';\n')>0){
                for await (const sqlS of cql.split(';\n')){
                    await this.<%=mName%>(sqlS.trim());
                }
                return;
            }
            
            let bStore = ["MERGE", "CREATE", "UPDATE"].filter(n => cql.indexOf(n)>=0).find(n => n);
            let bDML = ["CONSTRAINT"].filter(n => cql.indexOf(n)>=0).find(n => n);

            if(bDML){
                this.Tool.dmlCache = this.Tool.dmlCache || {};
                if(this.Tool.dmlCache[this.hashCode(cql)]) return;
                this.Tool.dmlCache[this.hashCode(cql)] = cql;
            }

            session = this.Tool.db.session({ database: this.__config('database') });
            let fun = 'Read';
            if(bStore || bDML) fun = 'Write';
            if(fun=='Write') this.Tool.__dmlStatements.push(cql);
            <%=log()%>cql);
            //ret = (await session['execute'+fun](tx => tx.run(cql))).records;
            //<%=log()%>ret);
        }catch(ex){
            <%=error()%>ex);
        }
        if(session) await session.close();
        return ret;
    <% }else{%>
        return await new <%=scope%>.<%=nName(mainClass(['Neo4j']))%>().<%=mName%>(cql);
    <% }%>
    }
<% }%>

<% if(mainClass(['RxDB', 'MongoDB'])){%>
    <%=mName='_toJSONSchema'%>(){
        try{
            let type = this.__config('json.type', 'type');
            let schema = {
                $id: '<%=c.Id%>',
                $schema: "https://json-schema.org/draft/2020-12/schema",
                description: '<%=c.Remark%>',
                title: <%=_nCode()%>,
                [type]: 'object',
                version: 0,
                properties: {
        <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
                    [<%=_nCode(ea)%>]: {
                        description: "<%=ea.Remark%>",
            <% if(ea.IsArray){%>
                        [type]: this.__config('json.type.array', 'array'),
                        items: {
            <% }%>
            <% if(ea.EntityType){%>
                        $ref: '<%=ea.EntityClass.Id%>',
            <% }else if(ea.IsString){%>
                        [type]: this.__config('json.type.string', 'string'),
            <% }else if(ea.IsText){%>
                        [type]: this.__config('json.type.text', 'string'),
            <% }else if(ea.IsBool){%>
                        [type]: this.__config('json.type.bool', 'boolean'),
            <% }else if(ea.IsInt){%>
                        [type]: this.__config('json.type.int', 'integer'),
            <% }else if(ea.IsFloat){%>
                        [type]: this.__config('json.type.float', 'number'),
            <% }else if(ea.IsImage){%>
                        [type]: this.__config('json.type.image', 'object'),
            <% }else if(ea.IsFile){%>
                        [type]: this.__config('json.type.file', 'object'),
            <% }%>
            <% if(ea.IsArray){%>
                        },
            <% }%>
                    },
        <% })%>
                },
                required: [<%c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.Required).map(ea => {%><%=_nCode(ea)%><%}).join(',')%>],
            };

            <%=log()%>schema);
            return schema;
        }catch(ex){
            <%=error()%>ex);
        }
    }
<% }%>

<% if(mainClass(['MongoDB', 'RxDB', 'ZangoDB'])){%>
    <%=mName='_toSelectMdb'%>(){
        return this.__export({}, {
            _THIS: obj => obj._id = {$in: this._THIS.map(t => t.<%=mName%>())},
            Id: obj => obj._id = this.Id,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.IsText && !ea.IsImage && !ea.IsFile).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => {
        <% if(ea.EntityType){%>
                if(!v.<%=mName%>) return;
        <% }%>
                obj[eaCode] = {};
                let op = "$e";
                switch(this._<%=nName(ea)%>_coop){
                    case "=":
                        op = "$e";
                        break;
                    case ">":
                        op = "$gt";
                        break;
                    case "<":
                        op = "$lt";
                        break;
                    case ">=":
                        op = "$gte";
                        break;
                    case "<=":
                        op = "$lte";
                        break;
                    case "!=":
                        op = "$ne";
                        break;
                    case "IN":
                        op = "$in";
                        break;
                    default:
                        break;
                }
        <% if(ea.IsDate){ %>
                obj[eaCode][op] = v.<%=mName%>().toISOString();
        <% }else if(ea.EntityType){%>
                obj[eaCode] = v.<%=mName%>();
        <% }else{%>
                obj[eaCode] = v;
        <% } %>
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => obj[eaCode] = {$in: v.map(t => t.<%=mName%>())},
    <% })%>
        }, "<%=mName%>");
    }
<% }%>

<% if(mainClass(_sqlTools)){%>
    <%=mName='_toDBObject'%>(fields, bNoRef){
        if(!this.Id){
            <%=error()%>"Invalid ID", this.EntityClass.Name, this.Tool);
        }
        let ret = {
            [this.__config('idField', 'Id')]: "'" + this.Id + "'"
        };
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
        if(((fields && fields.indexOf("<%=ea.Name%>")) || !fields) && this._<%=nName(ea)%>_set && (!bNoRef || <%=ea.EntityType?'false':'true'%>)){
            let fValue = null;
            let v = this.<%=nName(ea)%>();
        <% if(ea.EntityType){%>
            if(v && (v.__sync_on() || v.Id==v.Id)){
                fValue = "'" + v.Id + "'";
            }else{
                fValue = "NULL";
            }
        <% }else if(ea.IsBool){%>
            fValue = v?1:0;
            if(this.Tool.type.name=='Neo4j') fValue = fValue?'True':'False';
            if(this.Tool.type.name=='SqlDB') fValue = "'" + fValue + "'";
        <% }else if(ea.IsInt || ea.IsLong || ea.IsFloat){%>
            fValue = v || '0';
        <% }else if(ea.IsDate){%>
            try{
                fValue = "'" + (v?v.toISOString():"1970-1-1") + "'";
                if(this.__config('type')=='mysql'){
                    fValue = `STR_TO_DATE(${fValue}, '%Y-%m-%dT%T.%fZ')`;
                }
            }catch(ex){
                fValue = "'" + v + "'";
            }
            if(this.Tool.type.name=='Neo4j') fValue = 'datetime(' + fValue + ')';
        <% }else if(ea.IsObject){%>
            fValue = "'" + JSON.stringify(v, null, '\t') + "'";
        <% }else if(ea.IsString){%>
            fValue = v===null?"NULL":("'" + ((false && v && v.replace)?v.replace(/\\n/g, "\\\\n")
                                      .replace(/\\'/g, "\\\\'")
                                      .replace(/\\"/g, '\\\\"')
                                      .replace(/\\&/g, "\\\\&")
                                      .replace(/\\r/g, "\\\\r")
                                      .replace(/\\t/g, "\\\\t")
                                      .replace(/\\b/g, "\\\\b")
                                      .replace(/\\f/g, "\\\\f")  :v) + "'");
        <% }else if(ea.IsText){%>
            if(v===null){
                fValue = "NULL";
            }else if(this.Tool.type.name=='SqlDB'){
                if(this.__config('type')=='mysql'){
                    fValue = `FROM_BASE64('${this._btoa(v)}')`;
                }else if(this.__config('type')=='sqlite'){
                    fValue = `cast(unhex('${v.split("").map(x => (256 + x.charCodeAt()).toString(16).substr(-2)).join("")}') as varchar)`;
                }else{
                    fValue = v;
                }
            }else{
                fValue = "'" + v + "'";
            }
        <% }else{ %>
            fValue = "'" + v + "'";
        <% } %>
            
            ret[<%=_nCode(ea)%> + "<%=(ea.EntityType?'id':'')%>"] = fValue;
        }
    <% }); %>
    
        <%=log()%>ret);
        return ret;
    }
<% }%>

<% if(mainClass(['BIServer'])){%>
    async <%=mName='get'%>(name) {
        if (!this.Id) return null;
        var t = null;
        $.each(name.split('.'), (_, f) => {
            t = {
                EntityObject: t ? {
                    Active: true,
                    ValueEntities: [t]
                } : {
                    Active: true,
                    Id: this.Id
                },
                EntityAttribute: {
                    Name: f,
                    OPERATORS: {
                        Name: "="
                    }
                }
            };
        });
        return $.when(this.sr()._("EnterpriseManager.emsEntityValueFind", null, t)).then(ev => {
            <%=log()%>ev);
            if (ev === null) return null;
            if (ev.EntityAttribute.IsString) return ev.StringValue;
            if (ev.EntityAttribute.IsFloat) return ev.FloatValue;
            if (ev.EntityAttribute.IsInt) return ev.IntValue;
            if (ev.EntityAttribute.IsLong) return ev.LongValue;
            if (ev.EntityAttribute.IsText) return ev.TextValue;
            if (ev.EntityAttribute.IsBool) return ev.BoolValue;

            if (!ev.ObjectValue) return null;

            return new <%=scope%>[$.grep(<%=scope%>.EntityClasses, c => c.Id == ev.EntityAttribute.EntityTypeid)[0].Name.replace(/ /g, '_')](ev.ObjectValue.Id);
        });
    }
<% }%>

<% if(mainClass(_sqlTools)){%>
    <%=mName='_Q'%>(){
        let _o = '"';
        let _q = _o;

        if(['SalesForce'].indexOf(this.Tool.type.name)==0){
            _o = _q = "";
        }else if(this.__config('type')=='mysql' || this.Tool.type.name=='Neo4j'){
            _o = _q = '`';
        }else if(['SalesForce'].indexOf(this.Tool.type.name)==0){
            _o = _q = `'`;
        }else if(this.__config('type')=='sqlserver'){
            _o = '[';
            _q = ']';
        }else if(this.__config('apiKey')=='airtable'){
            _o = '{';
            _q = '}';
        }
        return _o?_q:_o;
    }
    
    <%=mName='_fieldGroups'%>(fgs = {}){
        this.__fieldGroups = fgs;
        return this;
    }
    
    <%=mName='_fieldAggregates'%>(fas = {}){
        this.__fieldAggregates = fas;
        return this;
    }
    
    <%=mName='_toFieldsSQL'%>(fields){
        
        fields = fields || [this.__config('idField', 'Id'), <%=c.EntityAttributes.filter(ea => !ea.EntityMethod).map(ea => _nCode(ea) + (ea.EntityType?'+".id"':'')).join(',')%>];
        fields = Array.isArray(fields)?fields:[fields];

        if(this.__fieldGroups){
            // {field: order}
            fields = [];
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.IsText && !ea.IsImage && !ea.IsFile).forEach(ea => { %>
            if(this.__fieldGroups.<%=nName(ea)%>) fields.push(`${<%=_nCode(ea)%><%=(ea.EntityType?'+"id"':'')%>}`);
    <% })%>
        }
        return fields;
    }
    
    <%=mName='_fromDBObject'%>(r={}){
        try{
            return this.__import(r, {
                Id: obj => this.Id = obj[this.__config('idField', 'Id')],
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode) => {
                    this.<%=nName(ea)%>(obj[eaCode]);
                },
    <% })%>
            }, "<%=mName%>");
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    <%=mName='_toSelectHeader'%>(fields){
        try{
            let ret = {
                table: <%=_nCode()%>,
                fields: DotObject.object(Object.fromEntries(this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).map(f => [f, f]))),
                joins: {},
            };
            
            if(fields) return ret;
            
            ret.joins = this.__export({}, {
                Null: true,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => obj[eaCode] = new <%=scope%>.<%=_cName(ea.EntityType, true)%>().<%=mName%>(),
    <% })%>
            }, "<%=mName%>");
            
            <%=log()%>ret);
            
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    }

    <%=mName='_toSelectSQL'%>(fields){
        try{
            let sql = "select ";
            
            let tPref = `${this._Q()}${<%=_nCode()%>}${this._Q()}`;
            
            let header = this._toSelectHeader(fields);

            sql += Object.values(header.fields).map(f => `${tPref}.${f}`).join(', ');
            Object.keys(header.joins).forEach(k => sql += ", " + Object.values(header.joins[k].fields).map(f => `${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${f} as ${this._Q()}${k}.${f.replace(this._Q(), '')}`).join(', '));
    
            if(this.__fieldAggregates){
                // {field: function}
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.IsText && !ea.IsImage && !ea.IsFile).forEach(ea => { %>
                if(this.__fieldAggregates.<%=nName(ea)%>) sql += `${sql==('select ')?'':','} ${this.__fieldAggregates.<%=nName(ea)%>}(${this._Q()}${<%=_nCode(ea)%>}${this._Q()})`;
    <% })%>
            }
    
            sql += ` from ${tPref} `;
            
            Object.keys(header.joins).forEach(k => sql += `left join ${this._Q()}${header.joins[k].table}${this._Q()} as ${this._Q()}${header.joins[k].table}_${k}${this._Q()} on ${tPref}.${this._Q()}${k}id${this._Q()}=${this._Q()}${header.joins[k].table}_${k}${this._Q()}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()} `);
            
            sql += ` where 1=1`;
            
            sql = this.__export({sql: sql}, {
                Null: true,
                _fields: (this.__sync_on() || this.Id==this.Id)?['Id']:undefined,
                exporter: v => {
                    if(v.reused>2){
                        // <%=warn()%>"Reused: ", v);
                        v.obj.sql = `/*RESUED: ${v.reused}*/`;
                    }
                },
                _THIS: obj => {
                    if(!this._THIS || !this._THIS.length) return;
                    
                    obj.sql += ` /*and */${tPref}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()} ` + (this._THIS_coop || "IN") + " (" + this._THIS.map(t => t.<%=mName%>(t.__config('idField')||'Id').this).join(' UNION ALL ') + ")";
                },
                Id: (obj, idCode, v) => obj.sql += (this.Id==this.Id)?` and ${tPref}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()}='${this.Id}'`:'',
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode, v) => {
                    if(!this._<%=nName(ea)%>_set) return;
                
        <% if(ea.EntityType){%>
                let coop = this._<%=nName(ea)%>_coop;
                    switch(coop){
                        case "!=":
                            coop = "NOT IN";
                        case "=":
                            coop = "IN";
                        case "":
                            coop = "IN";
                    }
                    
                    if(v){
                        obj.sql += ` and ${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (${v.<%=mName%>(v.__config('idField', 'Id'))})`;
                    }else{
                        obj.sql += ` and (${tPref}.${this._Q()}${eaCode}id${this._Q()} ${coop} (0) OR ${tPref}.${this._Q()}${eaCode}id${this._Q()} IS NULL)`;
                    }
                    return;
        <% }else if(ea.IsText || ea.IsImage || ea.IsFile){%>
                    return;
        <% }else{%>
                    obj.sql += ` and ${tPref}.${this._Q()}${eaCode}${this._Q()} ` + <%if(ea.IsBool){%>"="<%}else{%>(this._<%=nName(ea)%>_coop || "LIKE")<%}%> + " ";
        <% }%>
        
        <% if(ea.IsDate){ %>
                    if(v && v.toISOString){
                        if(this.__config('type')=='sqlite'){
                            obj.sql += "strftime('%s', '" + v.toISOString() + "')";
                        }else{
                            obj.sql += "'" + v.toISOString() + "'";
                        }
                        return;
                    }
        <% }else if(ea.IsString){ %>
                    if(typeof(v)==="string"){
                        obj.sql += "'" + ((this._<%=nName(ea)%>_coop=="LIKE" || !this._<%=nName(ea)%>_coop)?"%":"") + v + ((this._<%=nName(ea)%>_coop=="LIKE" || !this._<%=nName(ea)%>_coop)?"%":"") + "'";
                        return;
                    }
        <% }else if(ea.IsBool){ %>
                    if(typeof(v)==="boolean"){
                        obj.sql += "'" + (v?"1":"0") + "'";
                        return;
                    }
        <% } %>
                    if(v && v.EntityClass){
                        obj.sql += "(" + v.<%=mName%>() + ")";
                    }else{
                        obj.sql += "'" + v + "'";
                    }
                },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => {
                    if(!this._<%=taName%>_set) return;
                    
                    let jOP = 'UNION ALL';
                    let inOP = 'IN';
                    
                    if(this._<%=taName%>_coop=='!=' || this._<%=taName%>_coop=='NOT IN'){
                        inOP = 'NOT IN';
                    }else if(this._<%=taName%>_coop=='=' || this._<%=taName%>_coop=='IN'){
                    }else if(this._<%=taName%>_coop=='=='){
                        jOP = 'INTERSECT';
                    }
                    
                    obj.sql += `and /*<%=taName%>*/ ${tPref}.${this._Q()}${this.__config('idField', 'Id')}${this._Q()} ${inOP} (` + (v || []).filter(t => t).map(t => t.<%=mName%>("<%=nName(ta)%>.id")).join(` ${jOP}/*M2M*/ `) + ')';
                },
    <% })%>
            }, "<%=mName%>", fields).sql;

            if(this.__fieldGroups){
                if(Object.keys(this.__fieldGroups).length) sql += " group by ";
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.IsText && !ea.IsImage && !ea.IsFile).forEach(ea => { %>
                if(this.__fieldGroups.<%=nName(ea)%>) sql += `${this._Q()}${<%=_nCode(ea)%><%=(ea.EntityType?'+"id"':'')%>}${this._Q()} ${this.__fieldGroups.<%=nName(ea)%>}`;
    <% })%>
            }

            if(!sql.endsWith("where 1=1")){
                sql = sql.replace("where 1=1 and ", "where ");
            }
            
            sql = typeof(sqlFormatter)!=='undefined'?sqlFormatter.format(sql):sql;
            <%=log()%>sql);
            
            return sql;
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    <%=mName='_toPaths'%>(){
        let ret = this.__export({}, {
            _THIS: obj => {},
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => obj.<%=nName(ea)%> = v.<%=mName%>(),
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => obj.<%=taName%> = v.map(_v => _v.<%=mName%>()),
    <% })%>
        }, "<%=mName%>");
        // return ret;
        return Object.keys(ret).map(k => ({[k]: ret[k]}));
    }

    <%=mName='_toUpdateSQL'%>(fields){
        let retFields = this._toFieldsSQL(fields).map(f => this._Q() + f.replace(/\./g, '') + this._Q()).join(', ');
        let sql = `update ${this._Q()}${<%=_nCode()%>}${this._Q()} set ` + Object.entries(this._toDBObject(fields)).map(v => this._Q() + v[0] + this._Q() + "=" + v[1]) + ` where ${this._Q()}${this.__config('idField', 'Id')}${this._Q()}='${this.Id}'`; //` returning ${retFields}`;
        <%=log()%>sql);
        return sql;
    }

    <%=mName='_toInsertSQL'%>(fields){
        let obj = this._toDBObject(fields);
        let sql = `insert into ${this._Q()}${<%=_nCode()%>}${this._Q()} (` + Object.keys(obj).map(k => this._Q() + k + this._Q()) + ") values (" + Object.values(obj) + `)`;
        <%=log()%>sql);
        return sql;
    }
<% } %>
    
    <%=mName='_copyFrom'%>(obj){
        if(!obj) return null;
        return this._revert(obj);
    }
    
    <%=mName='_toObjTree'%>(bCyclic){
        <%=warn()%>"deprecated");
        return this;
        
        this._defaults();

        return this.__export(new <%=scope%>.<%=_cName(c.Name, true)%>('<%=c.Name%>'), {
            Null: true,
            Cyclic: bCyclic,
            //exporter: v => <%=warn()%>v.reused),
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
            <%=nName(ea)%>: (obj, eaCode, v) => obj.<%=nName(ea)%>(<%if(ea.EntityType){%>new <%=scope%>.<%=_cName(ea.EntityType, true)%>().<%=mName%>(bCyclic)<%}else{%>v<%}%>),
    <% });%>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => obj.<%=taName%>(new <%=scope%>.<%=_cName(ta.EntityClass, true)%>().<%=mName%>(bCyclic)),
    <% });%>
        }, "<%=mName%>");
    }
    
    <%=mName='_unCycle'%>(source=this){
        return this.__export(this, {
            Null: true,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
            <%=nName(ea)%>: (obj, eaCode, v) => obj.<%=nName(ea)%>(source==obj.<%=nName(ea)%>()?null:undefined),
    <% });%>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => true,
    <% });%>
        }, "<%=mName%>");
    }
    
    async <%=mName='_storeEntityClass'%>(depth){
        try{
            if(typeof(depth)==="undefined") depth = this.__config("create");
            if(!depth) return;
            
            this.Tool.<%=mName%> = this.Tool.<%=mName%> || {};
            if(this.Tool.<%=mName%>.<%=nName(c)%>) return;
            this.Tool.<%=mName%>.<%=nName(c)%> = true;
            
            <%=log()%>`storing '${this.Tool.type.name}' model with depth ${depth}`);
            
<% clsTools(c).forEach(t => {%>
            await this.DSConnect();
            
            if(this.Tool.type.name=="<%=t%>"){
    <% if(t=="Neo4j"){%>
                let cql = this/*._toObjTree(true)*/._toCyTable(depth);
                <%=log()%>cql);
                await this._neo4j(cql);
    <% }else if(t=="AirTable"){%>
                await this._airtable('meta/bases', null, {name: '<%=scope%>', workspaceId: this.Tool.db.workspaceId, tables: this._toATTable(depth)});
    <% }else if(_sqlTools.indexOf(t)>=0){%>
                let sql = this/*._toObjTree(true)*/._toSQLTable({reused: 3}); <%/*depth: challenge - too low does not cover all tables, too high (max depth) results in out-of-memory on browser*/%>
                <%=log()%>sql);
                await this._sql(sql);
    <% }else if(t=="ServiceNow"){%>
                //<%=log()%>this/*._toObjTree(true)*/._toSNTable());
    <% }else if(t=="EMS"){%>
                await this._toEMSClass(depth).store();
    <% }else if(t=="BIServer"){%>
                // only do this if the module is not loaded from 
                (await this.sr()._("EnterpriseManager.emsEntityAttributeFindall", null, {
                    Active: true,
                    EntityClass: {
                        Active: true,
                        Company: {
                            Active: true,
                            Code: this.__config('company', '<%=scope%>'),
                        }
                    },
                })).forEach(ea => /* trye _eaTypes */<%=scope%>.EntityAttributes.forEach(sea => {
                    if(sea.Id!==ea.Id && sea.Name==ea.Name && (sea.EntityClass.Id==ea.EntityClass.Id || sea.EntityClass.Name==ea.EntityClass.Name)){
                        sea.Id == ea.Id;
                        sea.EntityClass.Id = ea.EntityClass.Id;
                        <%=scope%>.EntityClasses.find(c => c.Name==sea.EntityClass.Name).EntityAttributes.find(scea => scea.Name==ea.Name).Id = ea.Id;
                    }
                }));
    <% }else if(t=="MongoDB" || t=="ZangoDB"){%>
                if(this.Tool.db) await this.Tool.db.createCollection(<%=_nCode()%>, {validator: {$jsonSchema: this._toJSONSchema()}});
    <% }else if(t=="RxDB"){%>
                if(this.Tool.db) await this.Tool.db.addCollections({[<%=_nCode()%>]: {schema: this._toJSONSchema()}});
    <% }%>
            }
<% })%>
        }catch(ex){
            <%=error()%>ex);
        }
        return this;
    }

    <%=mName='_log'%>(obj=this){
<% if(mainClass()!=c){%>
        return new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(obj);
<% }else{%>
        try{
            if(Array.isArray(obj)) return obj.map(o => this._log(o));
            if(obj.EntityClass) obj = obj._toJSON({bMap: true});
            <%=log()%>obj);
            return this;
        }catch(ex){
            <%=error()%>ex);
        }
<% }%>
    }

    async <%=mName='DSConnect'%>(tool=this.Tool){
<% if(mainClass()!=c){%>
        return await new <%=scope%>.<%=_cName(mainClass(), true)%>().<%=mName%>(tool);
<% }else{%>
        try{
            if(!tool){
                <%=error()%>"Tool is null", this.Tools.length, <%=scope%>.Tools.length);
                return;
            }else if(!tool.type){
                <%=error()%>"Tool.type is null", tool, this.Tools.length, <%=scope%>.Tools.length);
                return;
            }else if(typeof(tool.db)!=="undefined"){
                <%=log()%>"Tool already connected!");
                return;
            }else if(<%=nscope%>._node && /*<%=nscope%>._node._parent_set && */<%=nscope%>._node.parent()._sameEntity(<%=nscope%>._node.parent())){
                <%=log()%>"Node has a valid parent, no local SQL possible");
                return;
            }
            
            tool.__dmlStatements = tool.__dmlStatements || [];
<% clsTools(c).forEach(t => {%>
            <%=log()%>"[<%=t%>]: Connecting...");

            if(tool.type.name=="<%=t%>"){
    <% if(t=="EMS"){%>
    <% }else if(t=="MongoDB"){%>
                //<%=log()%>this.__config('uri', null, {tool: tool}), this.__config('config', null, {tool: tool}));
                if(typeof(mongodb)!=='undefined'){
                    tool.db = (await new mongodb.MongoClient(this.__config('uri', null, {tool: tool}), this.__config('config', null, {tool: tool})).connect()).db(this.__config('database', "<%=scope%>", {tool: tool}));
                }
    <% }else if(t=='RxDB'){%>
                tool.db = await RxDB.createRxDatabase({name: this.__config('database', "<%=scope%>", {tool: tool}), storage: null});
    <% }else if(t=='ZangoDB'){%>
                tool.db = new zango.Db(this.__config('database', "<%=scope%>", {tool: tool}), {
        <% arClasses.forEach(ec => {%>
                    <%=nName(ec)%>: ["<%=ec.EntityAttributes.filter(ea => !ea.EntityMethod).map(ea => nName(ea)).join('\", \"')%>"],
        <% }) %>
                });
    <% }else if(t=='Kafka'){%>
                if(typeof(kafkajs)!=='undefined'){
                    tool.db = new kafkajs.Kafka({
                        clientId: this.__config('clientId', null, {tool: tool}),
                        brokers: [this.__config('brokers', null, {tool: tool})],
                        ssl: true,
                        sasl: {
                            username: this.__config('clientId', null, {tool: tool}),
                            password: this.__config('sasl_password', null, {tool: tool}),
                            mechanism: this.__config('sasl_mechanisms', null, {tool: tool}),
                        },
                        connectionTimeout: 3000,
                    });
                    tool.producer = tool.db.producer();
                    await tool.producer.connect();
                    
                    tool.consumer = tool.db.consumer({groupId: this.__config('clientId', null, {tool: tool})});
                    await tool.consumer.connect();
                    await tool.consumer.subscribe({
                        topic: '<%=scope%>.call',
                        fromBeginning: false,
                    });
        <% if(_cName('Event')){%>
                    tool.consumer.run({eachMessage: async ({ topic, partition, message }) => new <%=scope%>.<%=_cName('Event', true)%>()._fromDocument(message.value.toString()).process()});
        <% }%>
                }
    <%}else if(t=='Memory'){%>
                tool.db = {
        <% arClasses.forEach(ec => {%>
                    '<%=nName(ec)%>': [],
        <% }); %>
                };
    <%}else if(t=="Excel"){%>
                if(typeof(window)!=='undefined'){
                    <%=scope%>.db = <%=scope%>.xlsxData?XLSX.read(<%=scope%>.xlsxData):XLSX.utils.book_new();
                }else{
                    <%=scope%>.db = XLSX.read(await fs.promises.readFile(this.__config('filename', null, {tool: tool})));
                }
    <%}else if(t=="SnowFlake"){%>
                if(typeof(global)!=='undefined' && global.snowflake){
                    tool.db = global.snowflake.createConnection({
                        account: this.__config("account", null, {tool: tool}),
                        username: this.__config("username", null, {tool: tool}),
                        password: this.__config("password", null, {tool: tool}),
                        application: this.__config("scope", null, {tool: tool}) || "<%=scope%>",
                    });
                    await new Promise((res, rej) => {
                        tool.db.connect((err, conn)=>{
                            if (err){
                                <%=error()%>'Unable to connect: ' + err.message);
                                rej(err);
                                return;
                            }else{
                                tool.db.connection_ID = conn.getId();
                                res();
                            }
                        });
                    });
                }
    <%}else if(t=="Neo4j"){%>
                tool.db = neo4j.driver(
                    this.__config('url', null, {tool: tool}),
                    neo4j.auth.basic(this.__config('username', null, {tool: tool}), this.__config('password', null, {tool: tool}))
                );
    <%}else if(t=="AirTable"){%>
                tool.db = {
                    baseId: '',
                    workspaceId: this.__config('workspaceId', null, {tool: tool}),
                    name: '',
                    description: '',
                    userId: (await this._airtable('meta/whoami')).id,
                };

                let bases = (await this._airtable('meta/bases')).bases;
                if(bases.length){
                    tool.db.baseId = bases.filter(b => b.name=='<%=scope%>').id;
                }
                if(!this.Tool.db.baseId) tool.db.baseId = 'app' + this._uuid().split('-').slice(-1)[0];
    <%}else if(t=="SqlDB"){%>
                if(typeof(global)!=='undefined' && global[this.__config('type', null, {tool: tool})]){
                    if(global[this.__config('type', null, {tool: tool})].Database){
                        tool.db = new global[this.__config('type', null, tool)].Database(this.__config('database', null, {tool: tool}) || "./<%=scope%>.db");
                    }else if(global[this.__config('type', null, {tool: tool})].createConnection){
                        tool.db = global[this.__config('type', null, {tool: tool})].createConnection({
                            host: this.__config('server', null, {tool: tool}),
                            user: this.__config('username', null, {tool: tool}),
                            password: this.__config('password', null, {tool: tool}),
                            database: this.__config('database', null, {tool: tool}) || "<%=scope%>",
                        });
                    }else if(global[this.__config('type', null, {tool: tool})].Client){
                        tool.db = new global[this.__config('type', null, {tool: tool})].Client({connectionString: this.__config('connstr', null, {tool: tool})});
                        await tool.db.connect();
                    }
                }else if(typeof(global)==='undefined' && this.__config('type', null, {tool: tool})==='sqlite'){
                    // sqlite in browser
                    tool.db = new SQL.Database();
                }
    <%}else if(t=="ServiceNow"){%>
                if(typeof(tool.sys_scope)==="undefined"){
                    // tool.sys_scope = (await this._rest("sys_app", {sys_scope: this.__config("scope", null, {tool: tool}) || "global"}))[0].sys_id;
                }
                if(typeof(tool.sys_properties)==="undefined"){
                    // loading some platform stuff
                    tool.sys_properties = {};
                    let condition = Object.keys(tool.sys_properties).filter(k => !tool.sys_properties[k]).join(',');
                    if(condition){
                        (await this._rest("sys_properties", {name: "IN"+condition})).forEach(r => tool.sys_properties[r.name] = r.value);
                    }
                }
    <%}%>
            }
<% })%>
        }catch(ex){
            <%=error()%>ex);
        }
        return this;
<% }%>
    }
    /* End: Util functions */
    
    <%=mName='_matches'%>(query){
        try{
            if(!query || !query.EntityClass || query.EntityClass.Name!="<%=c.Name%>") return false;
            
            let oMatch = this.__export({}, {
                Full: true,
                Null: true,
                Id: (obj, eaCode, v) => obj._id = this.Id==query.Id,
        <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => {
            <% if(ea.EntityType){%>
                    obj.<%=nName(ea)%> = v?v.<%=mName%>(query?query.<%=nName(ea)%>():null):true;
            <% }else{%>
                    obj.<%=nName(ea)%> = v==query.<%=nName(ea)%>();
            <% }%>
                    if(
                        (this._<%=nName(ea)%>_set && !query._<%=nName(ea)%>_set) ||
                        false
                    ) obj.<%=nName(ea)%> = true;
                    
                    if(
                        (!this._<%=nName(ea)%>_set && query._<%=nName(ea)%>_set) ||
            <% if(ea.EntityType){%>
                        (this.<%=nName(ea)%>() && !this.<%=nName(ea)%>().<%=mName%>(query.<%=nName(ea)%>())) ||
            <% }%>
                        false
                    ) obj.<%=nName(ea)%> = false;
                },
        <% }); %>
        <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => {
                    obj.<%=taName%> = v.map(_v => query.<%=taName%>().any(q => _v.<%=mName%>(q)));
                },
        <% })%>
            }, "<%=mName%>");
            
            <%=log()%>oMatch);
            
            return Object.keys(oMatch).every(k => oMatch[k]);
        }catch(ex){
            <%=error()%>ex);
        }
    }

    <%=mName='_matching'%>(query){
        try{
            let ret = [];
            
            let matches = this.__export({}, {
        <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => {
                    <%=log()%>"For <%=nName(ea)%>");
                    obj.<%=nName(ea)%> = v?[v.<%=mName%>(query)?v:null].concat(v.<%=mName%>(query)).filter(m => m):[];
                },
        <% })%>
        <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => {
                    obj.<%=taName%> = v.map(_v => _v.<%=mName%>(query)).flat();
                },
        <% })%>
            }, "<%=mName%>");

            <%=log()%>"matches", matches);
            
            ret = [...new Set(Object.keys(matches).map(k => matches[k]).flat())].filter(m => m!=query);
            
            <%=log()%>"ret", ret);
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    <%=mName='_deReference'%>(root){
        try{
            if(!root) root=this;

            if(root!=this && this.Set_On) {
                let myMatches = root._matching(this);
                if(!myMatches.length) return this;
                <%=log()%>"Query", myMatches.legth);
                return myMatches[0];
            }
                
            this.__export({}, {
        <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => {
                    if(v){
                        let ret = v.<%=mName%>(root);
                        if(ret!=v) this.<%=nName(ea)%>(ret);
                    }
                },
        <% }); %>
        
        <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => {
                    v.filter(ta => ta).forEach((ta, i) => {
                        let ret = ta.<%=mName%>(root);
                        if(ret!=ta) this.<%=taName%>()[i] = ret;
                    });
                },
        <% })%>
            }, "<%=mName%>");

            return this;
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
    <%=mName='_fromDocument'%>(obj, bTool){
        if(!obj) return this;
        if(obj.<%=mName%>) return obj;
        
        if(typeof(obj)==='string'){
            if(<%=_b64test('obj')%>) obj = this._atob(obj);
            
            try{
                if(obj.length<33 && !obj.match(/\s/g)){
                    obj = {
                        [this.__config('idField', 'Id', {tool: obj.__tool})]: obj
                    };
                }else{
                    obj = JSON.parse(obj);
                }
            }catch(ex){
                <%=warn()%>"Invalid JSON or UUID", obj);
            }
        }else if(Array.isArray(obj)){
            return obj.map(o => this.<%=mName%>(o, bTool));
        }
        
        if(obj.__tool) this.Tool = obj.__tool;
        
        if(!Object.keys(obj).filter(k => typeof(obj[k])!=='undefined' && obj[k]!==null).length){
            <%=log()%>"Empty object or object of nulls", obj);
            return null;
        }

        <%=log()%>obj);
        return this.__import(obj, {
            _map: bTool,
            importer: v => v.obj = (v.obj&&v.obj.Set_Count<this.Set_Count)?this:v.obj,
            _THIS: obj => this.THIS(obj.THIS, obj.OPERATORS?obj.OPERATORS.THIS:undefined),
            Id: (obj, idCode) => {
                if(idCode=='Id') idCode = this.__config('idField', 'Id');
                if(obj[idCode]) this.Id = obj[idCode];
            },
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode) => {
                if(obj.OPERATORS && obj.OPERATORS[eaCode]){
                    this._<%=nName(ea)%>_coop = obj.OPERATORS[eaCode];
                }
                
                let ref = obj[eaCode];
                if(typeof(ref)==='undefined') return;
                
            <% if(ea.EntityType){ %>
                <% if(!ea.IsArray){ %>
                if(this.Tool.type.name=="RestDBIO") ref = ref[0];
                if(!ref) return;
                <% } %>

                this.<%=nName(ea)%>((this.<%=nName(ea)%>() || new <%=scope%>.<%=_cName(ea.EntityType, true)%>()).<%=mName%>(ref, bTool));
            <% }else if(ea.IsDate){ %>
                if(this.Tool.type.name=="SqlDB"){
                    if(typeof(moment)!=="undefined" && typeof(this.Tool.sys_properties)!=="undefined"){
                        ref = moment.parseZone(ref, this.Tool.sys_properties["glide.sys.date_format"] + " " + this.Tool.sys_properties["glide.sys.time_format"], this.Tool.sys_properties["glide.sys.default.tz"]).toDate();
                    }else{
                        ref = new Date(ref);
                    }
                }else{
                    if(typeof(ref)==='string'){
                        if(ref.indexOf('T')>0){
                            ref = Date.parse(ref);
                        }else{
                            ref = Date.parse(ref + " GMT");
                        }
                    }
                    ref = new Date(ref);
                }
                this.<%=nName(ea)%>(ref);
            <% }else{ %>
                this.<%=nName(ea)%>(ref);
            <% } %>
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode) => obj[eaCode]?this.<%=taName%>(obj[eaCode].map(_v => new <%=scope%>.<%=nName(ta.EntityClass, true)%>().<%=mName%>(_v, bTool)), obj.OPERATORS?obj.OPERATORS[eaCode]:undefined, true):undefined,
    <% })%>
        }, "<%=mName%>");
    }
    
<% if(_cName('Event')){%>
    <%=mName='_toProto'%>(options={}, sPath){
        try{
            let ret = this.__export({Id: <%=_nCode()%>, proto: `\n\nmessage ${<%=_nCode()%>} {`, index: 1}, {
                _map: options.bMap,
                Full: true,
                Null: true,
                exporter: v => v.obj=(v.reused>1)?{proto: `\n\n// reused[${v.reused}]: ${<%=_nCode()%>}\n\n`}:v.obj,
                _THIS: (obj, eaCode, v) => obj.proto += `\n\trepeated ${<%=_nCode()%>} ${eaCode} = ${obj.index++};`,
                Id: (obj, idCode, v) => obj.proto += `\n\tstring ${idCode} = ${obj.index++};`,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode, v) => {
        <% if(ea.EntityType){%>
                    obj.proto += `\n\t` + new <%=scope%>.<%=_cName(ea.EntityType, true)%>().<%=mName%>(options, `${sPath}.${eaCode}`);
        <% }%>
                    obj.proto += `\n\t`;
        <% if(ea.Required){%>
                    if(<%valueOf(ea.Required)%>) obj.proto += 'required ';
        <% }%>
        <% if(ea.IsArray){%>
                    obj.proto += 'repeated ';
        <% }%>
        <% if(ea.IsString || ea.IsText){%>
                    obj.proto += "string";
        <% }else if(ea.IsBool){%>
                    obj.proto += "bool";
        <% }else if(ea.IsInt){%>
                    obj.proto += "int32";
        <% }else if(ea.IsLong){%>
                    obj.proto += "int64";
        <% }else if(ea.IsFlot){%>
                    obj.proto += "float";
        <% }else if(ea.IsDouble){%>
                    obj.proto += "double";
        <% }else if(ea.IsDate){%>
                    obj.proto += "string";
        <% }else if(ea.EntityType){%>
                    obj.proto += <%=_nCode(ea.EntityType)%>;
        <% }%>
                    obj.proto += ` ${eaCode} = ${obj.index++};`;
                },
    <% })%>
    <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => obj.proto += `\n\t` + new <%=scope%>.<%=_cName(ta.EntityClass, true)%>().<%=mName%>(options, `${sPath}.${eaCode}[]`) + `\n\trepeated ${<%=_nCode(ta.EntityClass)%>} ${eaCode} = ${obj.index++};`,
    <% })%>
    <% c.EntityFields.forEach(ef => {%>
                ef_<%=nName(ef)%>: (obj, efCode, v) => obj.proto += `\n\tstring ${efCode} = ${obj.index++};`,
    <% })%>
                __close: obj => obj.proto += '\n}\n\n',
            }, "<%=mName%>", options, sPath).proto;
            
            if(ret && !sPath){
                ret = `package <%=scope%>;\n\nsyntax = "proto3";\n\n` + ret;
            }
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    }
<%}%>

    <%=mName='_toJSON'%>(options={}, sPath){
        try{
            sPath = sPath || "";
            let ret = {};
            ret.__keys = []; //!!
            
            if(!options.bMap){
                ret.__generated = '"' + new Date().toISOString() + '"';
                if(this.Tool.name){
                    ret.__tool = {
                        name: this.Tool.name,
                        type: {
                            name: this.Tool.type.name,
                        }
                    };
                    ret.__class = '"<%=nName(c)%>"';
                    ret.__type = '"'+<%=_nCode()%>+'"';
                    //ret.__path = '"'+sPath+'"';
                }
                if(<%=nscope%>._node){
                    ret.__node = {
                        code: <%=nscope%>._node.code()
                    };
                }
            }else{
                this._defaults();
            }
            
            let trMap = (obj, eaCode, v, sPath) => (v && typeof(v)==='string' && v.replace)?v.replace(/<<[^>>]+>>/gm, m => {
                <%=scope%>.__trMap = <%=scope%>.__trMap || [];

                let trid = this._uuid();
                
                let pPath = '.'+(sPath.split('.').slice(1, -1).join('.'));
                if(pPath==".") pPath = "";
                
                let tr = m.replace('<<', '').replace('>>', '').replace(/{{nr}}/gm, '$not($exists(__reused))').replace(/{{vf}}/g, obj[eaCode]);
                if(tr.startsWith('s(') && tr.endsWith(')')){
                    tr = tr.replace(/{{__}}/gm, 'oJSON'+sPath).replace(/{{ppath}}/gm, 'oJSON'+pPath);
                }else{
                    tr = tr.replace(/{{__}}/gm, `**[Id=${obj.Id}][0]`);
                }

                // <%=warn()%>eaCode, trid, tr);

                tr = this._btoa(tr);
                let map = <%=scope%>.__trMap.find(o => o.transform==tr);
                return (map?map.id:<%=scope%>.__trMap[<%=scope%>.__trMap.push({id: trid, transform: tr})-1].id);
            }):v;
            
            ret = this.__export(ret, {
                _map: options.bMap,
                Full: options.bFull,
                Null: options.bNull,
                exporter: v => {
                    if(typeof(options.reused)==='undefined' || options.reused>=v.reused) return;
                    
                    if(v && v.obj && typeof(v.obj._return)==='string' && v.obj._return.indexOf('__reused: 1')>0) return;
                    
                    let oHash = options.bHash?[this._toHash(null, {noCode: true, onlyUnique: true, noArgs: true, _map: options.bMap, noTypes: false}, "<%=mName%>")]:Object.keys(ret).filter(k => k=='Id' || k.indexOf('__')==0).map(k => {try{return { [k]: JSON.parse(ret[k]) }; }catch(ex){return {[k]: ret[k]}; } });
                    let eRet = Object.assign(...oHash, {__reused: v.reused} );
                    if(Array.isArray(eRet.__keys)) eRet.__keys.forEach(ek => {try{ eRet[ek] = JSON.parse(ret[ek]);}catch(ex){eRet[ek] = ret[ek]; } });

                    v.obj = {_return: JSON.stringify(eRet)};
                },
                _THIS: (obj, eaCode, v) => {
                    if(options.bMap) return;
                    obj.THIS = this._THIS.map(t => t.<%=mName%>(options, `${sPath}.${eaCode}`));
                    obj.OPERATORS = obj.OPERATORS || {};
                },
                Id: (obj, idCode, v) => obj[idCode] = `"${v}"`,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
                <%=nName(ea)%>: (obj, eaCode, v) => {
        <% if(ea.IsUnique){%>
                    if(obj.__keys) obj.__keys.push(eaCode);
        <% }%>
        
        <% if(ea.IsText){%>
                    if(!<%=_b64test('v')%>){ // is not base64?
                        v = this._btoa(v);
                    }
        <% }else if(ea.IsDate){%>
                    v = v&&v.toISOString?v.toISOString():v;
        <% }%>
        
        <% if(ea.EntityType){%>
                    obj[eaCode] = v?v.<%=mName%>(options, `${sPath}.${eaCode}`):'null';
        <% }else if(ea.IsBool || ea.IsInt || ea.IsLong || ea.IsFloat || ea.IsDouble){%>
                    obj[eaCode] = trMap(obj, eaCode, v, sPath);
        <% }else{%>
                    obj[eaCode] = '"' + trMap(obj, eaCode, v, sPath) + '"';
        <% }%>
                },
    <% })%>
    <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, eaCode, v) => obj[eaCode] = '[' + (v || []).map((_v, _i) => _v.<%=mName%>(options, `${sPath}.${eaCode}[${_i}]`)).filter(_v => _v).join() + ']',
    <% })%>
    <% c.EntityFields.forEach(ef => {%>
                ef_<%=nName(ef)%>: (obj, efCode, v) => {
                    if(Array.isArray(v)){
                        obj[efCode] = JSON.stringify(v);
                    }else{
                        v = trMap(obj, efCode, v, sPath);
                        if(typeof(v)==='undefined') return;
                        
                        obj[efCode] = v;
        <% if(!ef.IsBool && !ef.IsInt && !ef.IsLong && !ef.IsFloat && !ef.IsDouble){%>
                        obj[efCode] = '"' + obj[efCode] + '"';
        <% }%>
                    }
                },
    <% })%>

                __trMap: obj => {
                    if(!sPath){
                        obj.__trMap = <%=scope%>.__trMap || [];
                        delete <%=scope%>.__trMap;
                    }
                },

                _return: obj => {
                    if(obj) obj._return = (Object.keys(obj||{}).length)?('{' + Object.keys(obj).filter(k => typeof(obj[k])==="string").map(k => `"${k}": ${obj[k]}`).concat(Object.keys(obj).filter(k => typeof(obj[k])!=="string").map(k => `"${k}": ${JSON.stringify(obj[k])}`)).join() + '}'):'null';
                },
            }, "<%=mName%>", options, sPath);
            
            ret = ret?ret._return:ret;
            ret = typeof(ret)==='undefined'?null:ret;
            
            if(!sPath && ret){
                ret = this._beautify(ret, 'javascript');
                <%=log()%>ret);
                if(options.parse) return JSON.parse(ret);
                if(options.gzip) return this.Utf8ArrayToStr(this._compress(ret));
            }
            
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    }

    async <%=mName='_toDocument'%>(options={}){
        try{
            let json = this._toJSON(options);
            let oJSON = JSON.parse(json);
            let trMap = oJSON.__trMap || [];
            delete oJSON.__trMap;
            json = JSON.stringify(oJSON);
            
            let log = (...s) => <%=log()%>...s);
            let warn = (...s) => <%=warn()%>...s);
            let error = (...s) => <%=error()%>...s);

            for await (const t of trMap){
                if(!new RegExp(t.id).test(json)) continue;
                
                let trn = this._atob(t.transform);
                try{
                    oJSON = JSON.parse(json);
                    let res = undefined;
                    
                    if(trn.startsWith("s(") && trn.endsWith(")")){
                        res = this.runScript(`(oJSON, oScope, log, warn, error) => ${trn.substring(2, trn.length-1)}`)(oJSON, <%=scope%>, log, warn, error);
                    }else{
                        //res = await jsonata(trn).evaluate(oJSON);
                    }
                    
                    //<%=warn()%>t.id, res, trn);
                    json = json.replace(new RegExp(t.id, "g"), (!Array.isArray(res) && typeof(res)!=='object')?res:this._btoa(JSON.stringify(res)));
                }catch(ex){
                    <%=warn()%>t.id, trn, ex);
                }
            }

            // json = json.replace(/"__trMap":\s\[\{[^>>]+\}\]/gm, '"__trMap": ""');

            return options.bJSON?this._beautify(json, 'javascript'):JSON.parse(json);
        }catch(ex){
            <%=error()%>ex);
        }
    }

<% [{
    wObj: 'sr',
    functions: ['hashCode', 'runScript', 'Equals', 'serverDate', 'addMSeconds', 'ipAddress'].concat(mainClass(['BIServer'])?['_', 'buildURL', '$_REQUEST', 'param', '_toXML', 'coop', 'OR', 'myReplace', 'sendXML', 'processResponse', 'processResult', 'runSRScript', 'groupBy', 'ShowDebug', 'cacheResult', 'toHex', 'ShowError']:[]),
}, {
    wObj: '_FrEMD',
    functions: ['_attr', '_unique', '__scope', 'sr', '_atob', '_getStoredScript', '_btoa', '__time', '_wait', '_sqlType', '_uuid', 'require', '_include', '_beautify', '_inject', '_compress', '_decompress', 'Utf8ArrayToStr'],
}].forEach(cc => { %>
/* START: <%=cc.wObj%> function copies */
<% cc.functions.forEach(f => {%>

/* CLONE::START: <%=cc.wObj%>.<%=f%>() */<%=_FrEMD._cloneFunction(cc.wObj, f, scope, c) %>/* CLONE::END  : <%=cc.wObj%>.<%=f%>() */
<% })%>
/* END: <%=cc.wObj%> function copies */
<% }); %>
    
    <%=mName='i18n'%>(ev, v){
        if(typeof(window)==="undefined" || typeof(window.i18n_store)==="undefined") return v;
        
        if(!ev.EntityAttribute.IsText && !ev.EntityAttribute.IsString){
            return v;
        }else{
            return window.i18n_store[this.hashCode(v)] = window.i18n_store[this.hashCode(v)] || v;
        }
    }

<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
    <%=mName='by' + nName(ea.EntityType)%>(ar) {
        var ret = [];
        ar.forEach(a => {
            ret.forEach(r => {
                if (a["_<%=nName(ea)%>"] && (a["_<%=nName(ea)%>"].Equals?a["_<%=nName(ea)%>"].Equals(r):sr.Equals(a["_<%=nName(ea)%>"], r))) {
                    r._<%=nName(ea)%>_<%=c.Plural.replace(/ /g, '_')%>.push(a);
                }
            });
        });
        return ret;
    }
<% })%>

    <%=mName='toString'%>() {
<%
var sEas = c.EntityAttributes.filter(ea => !ea.EntityMethod && !ea.EntityType && (ea.IsString || ea.IsText));
var _name = sEas.find(ea => ea.Name.toLowerCase()=='name');
if(_name){
%>
        return this._<%=nName(_name)%>;
<%
}else{
%>
        return this.Id;
<%
}
%>
    }

    <%=mName='EntityValue'%>(aName) {
        let ret = [].concat(this.EntityValues, this.ValueEntities).find(ev => ev.EntityAttribute && ev.EntityAttribute.Name == aName);
        
        if(!ret){
            // an attribute that has yet no known entity value
            ret = {Active: true, OPERATORS: {}, EntityAttribute: {Name: aName, Active: true, EntityClass: {Id: this.EntityClass.Id}}};
            this.EntityValues.push(ret);
        }
        
        return ret;
    }

    async <%=mName='find'%>(depth = 1, objs, fields) {
        return (await this.findAll(depth, objs, null, null, fields))[0];
    }

    <%=mName='__assertValid'%>(bSync){
<% if(!c.Tools.length){%>
        return true;
<% }else{%>
        let error = {};

    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.Required).forEach(ea => {%>
        if(<%valueOf(ea.Required)%>){
            error.<%=nName(ea)%> = {};
            if(!this._<%=nName(ea)%>_set) error.<%=nName(ea)%>["01"] = "Not Set";
        <% if(ea.EntityType){%>
            if(!this.<%=nName(ea)%>()) error.<%=nName(ea)%>["02"] = "Empty Value";
            if(this.<%=nName(ea)%>() && bSync && !this.<%=nName(ea)%>().__sync_on()) error.<%=nName(ea)%>["03"] = "Not in Sync";
        <% }%>
            if(!Object.keys(error.<%=nName(ea)%>).length) delete error.<%=nName(ea)%>;
        }
    <% })%>

        if(Object.keys(error).length){
            this.__assertError = error;
            <%=error()%>JSON.stringify(error,null,4), this._toDocument());
            return false;
        }else{
            delete this.__assertError;
            return true;
        }
<% }%>
    }

    <%=mName='_rank'%>(_<%=mName%>=0){
		try {
            return this.__export({_<%=mName%>: _<%=mName%>}, {
                Null: true,
                exporter: v => v.reused?v.obj.__reused = v.reused:0,
                Id: (obj, idCode, v) => obj[idCode] = "<%=_cName(c, true)%>",
	<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
                <%=nName(ea)%>: (obj, eaCode, v) => obj._<%=mName%> += (obj[eaCode] = (v || new <%=scope%>.<%=_cName(ea.EntityType, true)%>()).<%=mName%>(_<%=mName%>+1))._<%=mName%>,
	<% })%>
    <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: (obj, taCode, v) => (obj[taCode] = [new <%=scope%>.<%=_cName(ta.EntityType, true)%>()].map(_v => _v.<%=mName%>(_<%=mName%>+1))).forEach(v => v._<%=mName%>),
    <% })%>
	        }, "<%=mName%>");
		} catch (ex) {
			<%=error()%>ex);
		}
	}

    <%=mName='_isQuery'%>(){
        let ret = this.__export(/*__type*/{Id: "<%=nName(c)%>", <%=mName%>Count: 0}, {
            Null: true,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            <%=nName(ea)%>: (obj, eaCode, v) => {
                obj[eaCode] = {_coop: this._<%=nName(ea)%>_coop || undefined};
                obj.<%=mName%>Count += typeof(obj[eaCode]._coop)==="undefined"?0:1;
                if(v && v.<%=mName%>){
                    obj[eaCode]._object = v.<%=mName%>();
                    obj.<%=mName%>Count += obj[eaCode]._object.<%=mName%>Count;
                }
            },
    <% }); %>
    <% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, taCode, v) => {
                obj[taCode] = {_coop: this._<%=taName%>_coop || undefined, _objects: (v||[]).map(_v => _v.<%=mName%>())};
                if(obj[taCode]._objects.length) obj[taCode].<%=mName%>Count += obj[taCode]._objects.reduce((v, o) => v += o.<%=mName%>Count);
            },
    <% })%>
        }, "<%=mName%>");
        
        return ret;
    }
    
    async <%=mName='store'%>() {
        let results = await this._execute(null, <%=alias()%>, "<%=mName%>", <%mRouting(c)%>, async () => {
            /*** START LOCAL <%=mName%>() ***/
            
        let bUpdate = false;
        let bInsert = false;

        if(this.__config('store.disabled')){
            <%=warn()%>"storing disabled");
        }else if(this._isQuery()._isQueryCount){
            <%=warn()%>"Cannot store a query!");
        }else if(!this.__sync_on()){
            let _this = new <%=scope%>.<%=nName(c, true)%>();
            
            let bFind = false;
            if(this.Id==this.Id){
                bFind = true;
                _this.Id = this.Id;
            }
<% c.EntityAttributes.filter(ea => ea.IsUnique).forEach(ea => {%>
            if(<%valueOf(ea.IsUnique)%>){
                bFind = true;
                _this.<%=nName(ea)%>(this.<%=nName(ea)%>(), '=');
            }
<% }); %>

            if(bFind){
                _this = await _this.find();
            }else _this = null;
            if(_this){
                this.Id = _this.Id;
                //<%=log()%>"_this.Id", _this.Id, this.Id, _this.Tool.name, this.Tool.name);
                bUpdate = true;
            }else{
                this.Id = this.Id; // to enforce the Id and not get a new one every time
                bInsert = true;
            }
        }else if(Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) < this.__config('store.sensitivity', 5)){
            <%=log()%>"Already stored", Math.abs((this.Set_On.getTime() - this.__sync_on().getTime()) / 1000) +"<"+this.__config('store.sensitivity', 5));
        }else{
            bUpdate = true;
        }

        if(!bUpdate && !bInsert){
            <%=log()%>"No data changes");
        }else{
<% clsTools(c).forEach(t => {%>
            if(this.Tool.type.name=="<%=t%>"){
    <% if(t=="SqlDB"){ %>
                if(typeof(<%=scope%>.__sqlTransaction)==="undefined" || <%=scope%>.__sqlTransaction.end){
                    await this._sql(`${this.__config('type')=='sqlite'?'BEGIN':'START'} TRANSACTION`);
                    <%=scope%>.__sqlTransaction = {Owner: this, sqls: [], start: new Date(), end: null};
                }
    <% }%>
            }
<% })%>

            this._defaults();

            if(this.__config("SyncEntityAttributes")){
<% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => {%>
                if(this.<%=nName(ea)%>() && !(await this.<%=nName(ea)%>().<%=mName%>())) this.clear_<%=nName(ea)%>();
<% }); %>
            }

            if(!this.__assertValid(true)) return null;
            
            <%=log()%>`===> Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
            if(bUpdate) await this.update();
            if(bInsert) await this.insert();
            <%=log()%>`<=== Insert:${bInsert}, Update:${bUpdate}, Id:[${this.Id}]`);
            
            if(this.__config("SyncTypedAttributes")){
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                for await (const ta of this.<%=taName%>()){
                    <%=log()%>"Syncing...<%=taName%>", ta);
                    await ta.<%=mName%>();
                }
<% }); %>
            }

            if(bUpdate || bInsert){
<% clsTools(c).forEach(t => {%>
                if(this.Tool.type.name=="<%=t%>"){
    <% if(t=="SqlDB"){ %>
                    if(<%=scope%>.__sqlTransaction && !<%=scope%>.__sqlTransaction.end && <%=scope%>.__sqlTransaction.Owner==this){
                        await this._sql(`COMMIT${this.__config('type')=='sqlite'?' TRANSACTION':''}`);
                        <%=scope%>.__sqlTransaction.end = new Date();
                    }
    <% }%>
                }
<% })%>
            }
        }

        return this;
        }, {__beforeRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.Before).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>], __afterRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.After).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>]});
        
        return (results.find(r => r.ret) || {ret: null}).ret; // first one to execute correctly
    }

    async <%=mName='insert'%>(){
        let results = await this._execute(null, <%=alias()%>, "<%=mName%>", <%mRouting(c)%>, async () => {
            /*** START LOCAL <%=mName%>() ***/

<% clsTools(c).forEach(t => {%>
        if(this.Tool.type.name=="<%=t%>"){
    <% if(t=="MongoDB" || t=="ZangoDB"){ %>
            await this.Tool.db.getCollection(<%=_nCode(c)%>).insertOne(this._toDocument({bMap: true}));
            this.Tool.__dmlStatements.push(`db.getCollection('${<%=_nCode()%>}').insertOne(${this._toJSON({bMap: true})})`);
    <% } else if(t == "RxDB") {%>
            await this.Tool.db[<%=_nCode(c)%>].<%=mName%>(this._toDocument({bMap: true}));
    <% } else if(t == "Kafka") {%>
            this.__time('<%=scope%>.<%=nName(c, true)%>.<%=mName%>.kafka');
            let ret = await this.Tool.producer.send({
                topic: '<%=scope%>.call',
                messages: [{
                    key: this.Id,
                    value: this._toDocument({bMap: true})
                }]
            });
            <%=log()%>'call: ' + this.__time('<%=scope%>.<%=nName(c, true)%>.<%=mName%>.kafka'));
            <%=log()%>'response: ', ret);
    <% } else if(t == "Memory") {%>
            this.Tool.db.<%=nName(c)%>.push(this);
    <% } else if(t == "Neo4j") {%>
            let ret = await this._neo4j(this._toCyMerge());
    <% } else if(t == "SalesForce") {%>
            let obj = {};
            <% $.each(c.EntityAttributes.filter(ea => !ea.EntityMethod), (_, ea) => {%>
            if(this._<%=nName(ea)%>_set){
                <% if(ea.EntityType){ %>
                obj.<%=nName(ea)%> = this._<%=nName(ea)%>.Id;
                <% }else{ %>
                obj.<%=nName(ea)%> = this.<%=nName(ea)%>();
                <% } %>
            }
            <% }); %>
    
            log("Sending to SF", obj);
    
            let res = await this.Tool.db.sobject("<%=nName(c)%>").create(obj);
            this.Id = res.id;
    <% } else if(_sqlTools.indexOf(t)>=0) {%>
            let ret = await this._sql(this._toInsertSQL());
            <%=log()%>"result", ret);
    <% } else if(t == "ServiceNow") {%>
            this._fromDocument(await this._rest(null, null, await this._toDocument({bMap: true, reused: 1})));
    <% } else if(t == "GitHub") {%>
            await this._github(this._fileName(), this._toJSON({bMap: true, reused: 1}), this.Id);
    <% } else if(t == "FileSystem") {%>
            await this._filesystem(this._fileName(), this._toJSON({bMap: true, reused: 1}));
    <% } else if(t == "EMS") {%>
            this.Id = (await this._toEMSObject().store()).Id;
    <% } else if(t == "RestDBIO") {%>
            let obj = {};
            <% $.each(c.EntityAttributes.filter(ea => !ea.EntityMethod), (_, ea) => {%>
            if(this._<%=nName(ea)%>_set){
                <% if(ea.EntityType){ %>
                obj.<%=nCode(ea)%> = this.<%=nName(ea)%>().Id/*_id()*/;
                <% }else{ %>
                obj.<%=nCode(ea)%> = this.<%=nName(ea)%>();
                <% } %>
            }
            <% }); %>
    
            let url = "https://" + this.__config('database') + ".restdb.io/rest/" + <%=_nCode()%>.toLowerCase();
            log("<%=t%> URL", url);
            let res = await axios.post(url, obj, {
                headers: {
                    "cache-control": "no-cache",
                    "x-apikey": this.__config('apikey'),
                    "content-type": "application/json",
                }
            });
    
            log("result", res.data);
            this._fromDocument(res.data);
    <% } else if(t == "BIServer") {%>
            // we need depth 2 to get the EntityValues bound to the ones we sent
            let insObj = await this.sr()._("EnterpriseManager.emsEntityObjectInsert", null, this.toEntityObject(), null, 2);
            if(!insObj) return null;
            this.Id = insObj.Id;
            this.EntityValues = insObj.EntityValues;
            this._revert();
            return this;
    <% } %>
        }
<% }) %>

        this.__sync_on(new Date());

        return this;
        }, {__beforeRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.Before).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>], __afterRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.After).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>]});
        
        return (results.find(r => r.ret) || {ret: null}).ret; // first one to execute correctly
    }
    
    async <%=mName='update'%>() {
        let results = await this._execute(null, <%=alias()%>, "<%=mName%>", <%mRouting(c)%>, async () => {
        /*** START LOCAL <%=mName%>() ***/

        let ret = null;
<% clsTools(c).forEach(t => {%>
        if(this.Tool.type.name=="<%=t%>"){

    <% if(t == "MongoDB") {%>
            ret = await this.Tool.db.collection(<%=_nCode(c)%>).updateOne({_id: this.Id}, {$set: this._toDocument({bMap: true})});
            this.Tool.__dmlStatements.push(`db.getCollection('${<%=_nCode()%>}').updateOne({_id: '${ret._id}'}, {$set: ${this._toDocument({bMap: true})})`);
    <% }else if(t == "Memory") {%>
            this.Tool.db.<%=nName(c)%>[this.Tool.db.<%=nName(c)%>.findIndex(o => o.Id==this.Id)] = this;
    <% }else if(t == "Kafka") {%>
            this.__time('<%=scope%>.<%=nName(c, true)%>.<%=mName%>.kafka');
            ret = await this.Tool.producer.send({
                topic: '<%=scope%>.call',
                messages: [{
                    key: this.Id,
                    value: this._toDocument({bMap: true})
                }]
            });
            <%=log()%>'call: ' + this.__time('<%=scope%>.<%=nName(c, true)%>.<%=mName%>.kafka'));
            <%=log()%>'response: ', ret);
    <% } else if(t == "Neo4j") {%>
            await this._neo4j(this._toCyMerge());
    <% }else if(_sqlTools.indexOf(t)>=0) {%>
            await this._sql(this._toUpdateSQL());
            ret = await this._sql(this._toSelectSQL());
            if(Array.isArray(ret)) ret = ret[0];
    <% }else if(t == "ServiceNow") {%>
            ret = (await this._rest(null, null, await this._toDocument({bMap: true, reused: 1}), 'put')).result;
    <% } else if(t == "GitHub") {%>
            await this._github(this._fileName(), this._toJSON({bMap: true, reused: 1}), this.Id);
    <% } else if(t == "FileSystem") {%>
            await this._filesystem(this._fileName(), this._toJSON({bMap: true, reused: 1}));
    <% } else if(t == "EMS") {%>
            await this._toEMSObject().store();
    <% }else if(t == "RestDBIO") {%>
            <%=log()%>"Sending update to RESTDBIO to save");

            let url = "https://" + this.__config('database') + ".restdb.io/rest/" + <%=_nCode()%>.toLowerCase() + "/" + this.Id;
            // <%=log()%>"Update to RESTDBIO", url);
            ret = (await axios.put(url, obj, {
                headers: {
                    "cache-control": "no-cache",
                    "x-apikey": this.__config('apikey'),
                    "content-type": "application/json",
                }
            })).data;
    <% }else if(t == "BIServer") {%>
            // we need depth 2 to get the EntityValues bound to the ones we sent
            let updObj = await this.sr()._("EnterpriseManager.emsEntityObjectUpdate", null, this.toEntityObject(), 2);
            if(!updObj) return null;
            this.__sync_on(new Date());
            return this._copyFrom(updObj);
    <% } %>
        }
<% })%>

            <%=log()%>"result", ret);
            this.__sync_on(new Date());
            this._fromDocument(ret, true);

            return ret;

            /*** END LOCAL <%=mName%>() ***/
        }, {__beforeRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.Before).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>], __afterRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.After).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>]});
        
        return (results.find(r => r.ret) || {ret: null}).ret; // first one to execute correctly
    }
    
    async <%=mName='findAll'%>(depth = 1, objs=[], start, end, fields) {
        let results = await this._execute(null, <%=alias()%>, "<%=mName%>", <%mRouting(c)%>, async () => {
                /*** START LOCAL <%=mName%>() ***/
        
        let ret = []; // a json array

<% clsTools(c).forEach(t => {%>
        if(this.Tool.type.name=="<%=t%>"){
    <% if(t=="MongoDB"){ %>
            if(this.Tool.db) ret = await this.Tool.db.collection(<%=_nCode(c)%>).find(this._toSelectMongoDB(fields, objs)).toArray();
    <% } else if(t == "RxDB") {%>
            await this.Tool.db[<%=_nCode(c)%>].find(this._toSelectRxDB(fields, objs)).exec();
    <% }else if(_sqlTools.indexOf(t)>=0){ %>
            ret = await this._sql(this._toSelectSQL(fields, objs));
    <% }else if(t=="EMS"){ %>
            let o = this._toEMSObject(true, true);
            if(this.__config('ems.deep.query')) o = new <%=scope%>.EntityObject().THIS([o].concat(objs.map(_o => _o._toEMSObject(true, true))));
            ret = await this._fromEMSValues(await new <%=scope%>.EntityValue().active(true).entityObject(o).<%=mName%>());
            if(this.__config('ems.deep.query')) return ret;
    <% }else if(t=="Memory"){ %>
            return this.Tool.db[<%=_nCode()%>].filter(o => o && this._sameEntity(o));
    <% }else if(t=="HubSpot"){ %>
    <% }else if(t=="ServiceNow"){ %>
            ret = (await this._rest(null, {sysparm_query: this._toSNQuery(fields, objs, true)})).result;
    <% }else if(t=="SalesForce"){ %>
            ret = await this._rest(null, null, this._toSFQuery(fields, objs, true), null, {url: 'rest.url.gql'});
    <% }else if(["GitHub", "FileSystem"].indexOf(t)>-1){ %>
            ret = [await this._<%=t.toLowerCase()%>(this._fileName())];
            for await (const f of (this.THIS() || [])){
                <%=log()%>"finding "+f.name());
                ret.push(await f._<%=t.toLowerCase()%>(f._fileName()));
            }
    <% }else if(t=="Neo4j"){ %>
            ret = await this._neo4j(this._toCyQuery(fields, objs));
    <% }else if(t=="RestDBIO"){ %>
            let thisDoc = this._toDocument({bMap: true});
            let eaCode = "";
        <% $.each(c.EntityAttributes.filter(ea => !ea.EntityMethod), (_, ea) => {%>
            eaCode = <%=_nCode(ea)%>;
            if(this._<%=nName(ea)%>_set){
            <% if(ea.EntityType){ %>
            <% }else if(ea.IsArray){ %>
                if(this._<%=nName(ea)%>_coop=="!="){
                    thisDoc[eaCode] = {"$nin": thisDoc[eaCode]};
                }else{
                    thisDoc[eaCode] = {"$in": thisDoc[eaCode]};
                }
            <% }else if(ea.IsString || ea.IsText){ %>
                if([null, '%', 'LIKE'].indexOf(this._<%=nName(ea)%>_coop)>-1){
                    thisDoc[eaCode] = {"$regex": thisDoc[eaCode] || ".*"};
                }
            <% } %>
            }
        <% }); %>

            let url = "https://" + this.__config('database') + ".restdb.io/rest/" + <%=_nCode()%>.toLowerCase() + "?q=" + JSON.stringify(conditions);
            ret = (await axios.get(url, {
                headers: {
                    "cache-control": "no-cache",
                    "x-apikey": this.__config('apikey'),
                }
            })).data;
    <% }else if(t=="BIServer"){ %>
            let q = {
                THIS: this._buildThis(depth).concat((objs || []).map(obj => obj.toEntityObject?{
                    Active: true,
                    EntityObject: obj.toEntityObject(true),
                }:obj)),
                Active: true,
                EntityObject: { // absolutely required for indexing
                    Active: true,
                    EntityClass: this._valueClass(),
                }
            };
            <%=log()%>q);
            return this._asObjects((await this.sr()._("EnterpriseManager.emsEntityValueFindall", null, q)));
    <% } %>
        }
<% })%>

        <%=log()%>"Before _fromDocument()", depth, ret);
        
        if(!Array.isArray(ret)) ret = [ret];
        ret = ret.filter(r => r).map(r => new <%=scope%>.<%=nName(c, true)%>()._fromDocument(r, true)).filter(r => r).map(r => r.__sync_on(new Date()));
        
        if(depth>1){
            for await (const r of ret){
<% c.EntityAttributes.filter(ea => ea.EntityType && !ea.EntityMethod).forEach(ea => {%>
                if(r._<%=nName(ea)%>_set){
                    // <%=log()%>"<%=nName(ea)%>", r.<%=nName(ea)%>()._toDocument());
                    r.<%=nName(ea)%>(await r._<%=nName(ea)%>.find(depth-1));
                }
<% })%>
    
<% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_'); %>
    <% clsTools(c).forEach(t => {%>
                if(this.Tool.type.name=="<%=t%>"){
        <% if(['GitHub', 'FileSystem'].indexOf(t)>=0){ %>
                    let r_<%=taName%> = [];
                    for await (const _ta of r.<%=taName%>()){
                        <%=log()%>"<%=taName%>", _ta);
                        r_<%=taName%>.push(await _ta.find(depth-1));
                    }
                    r.clear_<%=taName%>();
                    r.<%=taName%>(r_<%=taName%>);
        <% }else{ %>
                    // <%=log()%>"<%=taName%>", r.<%=taName%>());
                    r.<%=taName%>(await new <%=scope%>.<%=_cName(ta.EntityClass, true)%>().<%=nName(ta)%>(r)
            <% if(false && ['SqlDB'].indexOf(t)>=0){ // sql statements do not include left joins without explicit references %>
                        <%ta.EntityClass.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType && ea!=ta).forEach(ea => {%>.<%=nName(ea)%>(new <%=scope%>.<%=nName(ea.EntityType, true)%>())<%})%>
            <% }%>
                        .<%=mName%>(depth-1));
        <% }%>
                }
    <% })%>
<% })%>
            }
        }

        let refs = ret.filter(r => r.EntityClass);
        for await (const o of (objs || []).filter(_o => !_o.__sync_on())){
            if(o._toEMSObject){
                refs.push(...(await this._fromEMSValues(await o._toEMSObject(true, true).<%=mName%>(depth))));
            }else{
                refs.push(...(await o.<%=mName%>(depth)));
            }
        }
        refs = refs.filter(r => r);
        
        refs.forEach(r => r._resolve(refs));

        <%=log()%>"Output", ret);

        return ret;
                /*** END LOCAL <%=mName%>() ***/
        }, {depth, objs, start, end, fields, __beforeRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.Before).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>], __afterRules: [<%(c.EntityRules || []).filter(r => r[mName] && r.After).map(r => {%><%=_FrEMD._toJS(r)%><% }).join(', ')%>]});

        return (results.find(r => r.ret) || {ret: []}).ret || []; // first one to execute correctly
    }
    
    <%=mName='_resolve'%>(refs){
        try{
            if(!refs.length) return this;
            
            this.__import({}, {
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod && ea.EntityType).forEach(ea => { %>
                <%=nName(ea)%>: () => {
                    if(this.<%=nName(ea)%>()){
                        // <%=log()%>"<%=nName(ea)%>", this.<%=nName(ea)%>().Id, refs.map(r => ({id: r.Id, code: r.code()})));
                        this.<%=nName(ea)%>(refs.find(o => o.Id==this.<%=nName(ea)%>().Id) || this.<%=nName(ea)%>().<%=mName%>(refs));
                    }
                },
    <% })%>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
                <%=taName%>: () => {
                    if(this.<%=taName%>().length) this.<%=taName%>(this.<%=taName%>().map(ta => refs.find(o => o.Id==ta.Id) || ta.<%=mName%>(refs)), null, true);
                },
    <% })%>
            }, "<%=mName%>");

            return this;
        }catch(ex){
            <%=error()%>ex);
        }
    }
    
<% if(mainClass(['EMS'])){%>
    async <%=mName='_fromEMSValues'%>(evs){
    <% if(mainClass(['EMS'])==c){%>
        try{
            await this._findReferences(evs, [...new Set(evs.map(v => v.entityAttribute().Id).flat())].map(id => new <%=scope%>.EntityAttribute(id)));
            <%=log()%>evs);
        
            let objs = [];
            this.groupBy(evs, "_entityObject").forEach(evg => {
                evg.key.entityObject_EntityValues(evg.values);
                objs.push(evg.key);
            });
            
            objs.forEach(r => r.entityClass(r.entityObject_EntityValues()[0].entityAttribute().entityClass()));
            
            let ret = [];
            for await (const r of objs){
                ret.push(await new <%=scope%>[r.entityClass().name()]()._fromEMSObject(r));
            }

            <%=log()%>ret);
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    <%}else{%>
        return await new <%=scope%>.<%=nName(mainClass(['EMS'],c))%>().<%=mName%>(evs);
    <%}%>
    }
    
    <%=mName='_toEMSClass'%>(depth){
        // why not __export ?
        try{
            let ret = new <%=scope%>.EntityClass('<%=c.Id%>').name("<%=c.Name%>").code("<%=nName(c)%>").active(true).enabled(true).date(new Date()).company(new <%=scope%>.Company().name("<%=scope%>").code("<%=scope%>")).entityModule(new <%=scope%>.EntityModule().code("<%=scope%>").name("<%=scope%>"));
            if(!depth) return ret;
            
            ret.entityClass_EntityMethods([
    <% c.EntityMethods.forEach(m => {%>
                new <%=scope%>.EntityMethod('<%=m.Id%>').active(true).enabled(true).name("<%=m.Name%>").code("<%=nName(m)%>").entityMethod_EntityAttributes([
        <% m.MethodParameters.forEach(p => {%>
                    new <%=scope%>.EntityAttribute('<%=p.Id%>').active(true).enabled(true).name("<%=p.Name%>").code("<%=nName(p)%>").isArray(<%=p.IsArray?'true':'false'%>).remark("<%=c.Name%>.<%=m.Name%>()").entityClass(new <%=scope%>.<%=nName(c, true)%>().<%=mName%>())
            <% if(p.EntityType){%>
                    .entityType(new <%=scope%>.<%=nName(p.EntityType)%>().<%=mName%>(depth-1))
            <% }else{%>
                    .is<%=_FrEMD._attr(p)%>(true)
            <% }%>,
        <% })%>
                ]).responseAttribute(new <%=scope%>.EntityAttribute('<%=m.ResponseAttribute.Id%>').active(true).enabled(true).name("<%=m.ResponseAttribute.Name%>").code("<%=nName(m.ResponseAttribute)%>").entityClass(new <%=scope%>.<%=nName(c, true)%>().<%=mName%>())
        <% if(m.ResponseAttribute.EntityType){%>
                .entityType(new <%=scope%>.<%=nName(m.ResponseAttribute.EntityType)%>().<%=mName%>(depth-1))
        <% }else{%>
                .is<%=_FrEMD._attr(m.ResponseAttribute)%>(true)
        <% }%>
                ),
    <% })%>
            ]).entityClass_EntityAttributes([
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
                new <%=scope%>.EntityAttribute('<%=ea.Id%>').active(true).enabled(true).name("<%=ea.Name%>").code("<%=nName(ea)%>").remark('<%=c.Name%>.<%=ea.Name%>')
        <% if(ea.EntityType){%>
                .entityType(new <%=scope%>.<%=nName(ea.EntityType, true)%>().<%=mName%>(depth-1))
        <% }else{%>
                .is<%=_FrEMD._attr(ea)%>(true)
        <% }%>,
    <% })%>
            ]);
            <%=log()%>ret);
            return ret;
        }catch(ex){
            <%=error()%>ex);
        }
    }

    async <%=mName='_fromEMSObject'%>(obj){
        try{
            this.Id = obj.Id;
            let ev = null;
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => {%>
            ev = obj.entityObject_EntityValues().find(ev => ev.entityAttribute().code()==<%=_nCode(ea)%>);
        <% if(ea.EntityType){%>
            if(ev) this.<%=nName(ea)%>(await new <%=scope%>.<%=nName(ea.EntityType, true)%>().<%=mName%>(ev.objectValue()));
        <% }else{%>
            if(ev) this.<%=nName(ea)%>(ev.<%=_FrEMD._attr(ea).toLowerCase()%>Value());
        <% }%>
    <% })%>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
    <% })%>
            return this;
        }catch(ex){
            <%=error()%>ex);
        }
    }

    <%=mName='_toEMSObject'%>(bQuery, bTypedAttributes){
        let ret = new <%=scope%>.EntityObject().active(true).entityClass(this._toEMSClass());

        ret = this.__export(ret, {
            Full: !bQuery,
            //Null: !bQuery,
            Id: (obj, eaCode, v) => obj.Id = v,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            "<%=nName(ea)%>": (obj, eaCode, v) => {
                let ev = new <%=scope%>.EntityValue().active(true).entityAttribute(new <%=scope%>.EntityAttribute('<%=ea.Id%>').active(true).enabled(true).name("<%=ea.Name%>").code("<%=nName(ea)%>").entityClass(this._toEMSClass()));
        <% if(ea.EntityType){%>
                ev.objectValue(v?v.<%=mName%>(bQuery, bTypedAttributes):null, this._<%=nName(ea)%>_coop);
        <% }else{%>
                ev.<%=_FrEMD._attr(ea).toLowerCase()%>Value(v, this._<%=nName(ea)%>_coop);
        <% }%>
                obj.entityObject_EntityValues(ev, '==');
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => {
                if(v && bTypedAttributes) obj.objectValue_EntityValues(v.map(_v => new <%=scope%>.EntityValue().active(true).entityAttribute(new <%=scope%>.EntityAttribute('<%=ta.Id%>').active(true).enabled(true).code("<%=nName(ta)%>").name("<%=ta.Name%>").entityClass(new <%=scope%>.<%=nName(ta.EntityClass, true)%>()._toEMSClass())).objectValue(_v.<%=mName%>(bQuery, bTypedAttributes))), '==');
            },
    <% })%>
        }, "<%=mName%>");

        <%=log()%>ret);
        return ret;
    }
<% } %>

<% if(mainClass(['BIServer'])){%>
    <%=mName='_asObjects'%>(evs){
    <% if(mainClass(['BIServer'])!=c){%>
            return new <%=scope%>.<%=nName(mainClass(['BIServer'],c))%>().<%=mName%>(evs);
    <%}else{%>
        try{
            if(typeof(evs)==="undefined" || !evs || !Array.isArray(evs) || !evs.length) return [];

            evs.forEach(ev => {
                ev.EntityAttribute = <%=scope%>.EntityAttributes.find(ea => ea.Id==ev.EntityAttributeid);
                ev.EntityObject.EntityClass = ev.EntityAttribute.EntityClass;
                if(ev.ObjectValue){
                    ev.ObjectValue.EntityClass = <%=scope%>.EntityClasses.find(ec => ec.Id==ev.ObjectValue.EntityClass.Id);
                }
            });
    
            let obj = [];
            this.groupBy(evs, "EntityObject").forEach(evg => {
                let c = new <%=scope%>[evg.key.EntityClass.Name.replace(/ /g, '_')]();
                c.EntityValues = evg.values;
                c.ValueEntities = [];
                // c.EntityClass = evg.key.EntityClass;
                c.Id = evg.key.Id;
                evg.values.forEach(v => v.EntityObject = c);
                obj.push(c);
            });

            evs.filter(ev => ev.ObjectValue).forEach(ev => {
                var _f = obj.find(o => o.Id == ev.ObjectValue.Id);
                if(_f) _f.ValueEntities.push(ev);
                ev.ObjectValue = _f;
            });
        
            let ret = [];
            obj.forEach(o => {
                if(o.EntityClass && o.EntityClass.Id!=this.EntityClass.Id) return true;
                ret.push(o);
            });
            
            return ret.map(o => o._revert());
        }catch(ex){
            <%=error()%>ex);
        }
    <%}%>
    }
    
    <%=mName='_revert'%>(eo) {
        if (eo) {
            // revert from source data
            if(eo.EntityClass && ((this.EntityClass.Id && eo.EntityClass.Id!=this.EntityClass.Id) || (this.EntityClass.Name && eo.EntityClass.Name!=this.EntityClass.Name))){
                <%=error()%>"Cannot revert " + JSON.stringify(this.EntityClass) + " from " + eo.EntityClass.Name, eo);
                return this;
            }
            this.Id = eo.Id;
            this.EntityValues = eo.EntityValues || [];
            this.ValueEntities = eo.ValueEntities || [];
            return this.<%=mName%>();
        } else {
            if(this.__sync_on() && Math.abs((new Date().getTime() - this.__sync_on().getTime()) / 1000) < 5){
                <%=warn()%>"Object already reverted", this._toDocument());
                return this;
            }
            this.__sync_on(new Date());
        
            // use EntityValues and ValueEntities to revert the attribute values
            this.EntityValues.forEach(ev => {
                let ea = null;
                try{
                    ea = <%=scope%>.EntityAttributes.filter(_ea => _ea.EntityClass.Name=='<%=c.Name%>').find(_ea => {
                        if(ev.EntityAttributeid==_ea.Id) return _ea;
                        if(ev.EntityAttribute){
                            if(ev.EntityAttribute.Id==_ea.Id) return _ea;
                            if(ev.EntityAttribute.Name==_ea.Name) return _ea;
                        }

                        return null;
                    });
                    if(!ea){
                        <%=warn()%>"unable to detect attribute from value", ev);
                        return this;
                    }
                }catch(ex){
                    <%=error()%>ev, ex);
                    return this;
                }
                let v = ev[(this["_attr"]?this:_FrEMD)._attr(ea) + "Value"];
                let p = ea.Name.replace(/ /g, '_');
                
                if(typeof(this[p])!=='function'){
                    <%=warn()%>"invalid type", ea, p, v);
                }

                if(v && ea.EntityType && typeof(v)==='object'){
                    <%=log()%>"reverting " + ea.Name, v, new <%=scope%>[ea.EntityType.Name.replace(/ /g, '_')]().<%=mName%>(v));
                    if(!v.EntityValues){
                        <%=warn()%>"empty values for " + ea.Name, v);
                    }
                    v = v.<%=mName%>?v.<%=mName%>():new <%=scope%>[ea.EntityType.Name.replace(/ /g, '_')]().<%=mName%>(v);
                }
                this[p](v);
            });

            this.ValueEntities.filter(ve => ve.EntityAttribute).forEach(ve => {
                var ta = <%=scope%>.EntityAttributes.find(ea => ea.Id==ve.EntityAttribute.Id);
                if(!ta) return null;
                
                var taName = ta.EntityClass.Plural.replace(/ /g, '_');

                let v = ve.EntityObject;
                if(v){
                    v = v.<%=mName%>?v.<%=mName%>():new <%=scope%>[ta.EntityType.Name.replace(/ /g, '_')]().<%=mName%>(v);
                }
                this[ta.Name.replace(/ /g, "_") + "_" + taName](v);
            });
        }
        return this;
    }
    
    <%=mName='_valueClass'%>(){
        let _class = {Active: true};
        if(this.EntityClass.EntityModule){
            _class.EntityModule = this.EntityClass.EntityModule;
        }else{
            _class = {
                Active: true,
                Company: {Active: true, Enabled: true, EntityClasses: [this.EntityClass]}
            };
        }
        return _class;
    }

    <%=mName='_toXML'%>(){
        // an overload of the sr._toXML
        let ret = {xml: ``};
        ret = this.__export(ret, {
            Id: (obj, eaCode, v) => ret.xml += `<${this.__config('idField')||'Id'}>${v}</${this.__config('idField')||'Id'}>`,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            "<%=nName(ea)%>": (obj, eaCode, v) => {
                ret.xml += `<${eaCode}>`;
        <% if(ea.EntityType){%>
                ret.xml += v?v.<%=mName%>():null;
        <% }else{%>
                ret.xml += `<![CDATA[${v}]]>`;
        <% }%>
                ret.xml += `</${eaCode}>`;
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => {
                ret.xml += `<${eaCode}>` + v.map(_v => '<Object>' + _v.<%=mName%>() + "</Object>").join('') + `</${eaCode}>`;
            },
    <% })%>
        }, "<%=mName%>");

        <%=log()%>ret);
        return ret.xml;
    }

    <%=mName='_buildThis'%>(depth=1){
        // candidate for __export
        var ret = [{
            Active: true,
            EntityAttribute: {Active: true, EntityClass: this._valueClass()},
            EntityObject: this.toEntityObject(true),
        }];
        for (var i = 1; i <= depth; i++) {
            ret.push({
                Active: true,
                EntityObject: {
                    Active: true,
                    ValueEntities: [ret[i - 1]]
                }
            });
        }
        
<% c.TypedAttributes.filter(ta => !ta.EntityMethod).forEach(ta => {%>
        if(depth>1){
            let v = new <%=scope%>.<%=nName(ta.EntityClass, true)%>().<%=nName(ta)%>(this);
            ret.push({
                Active: true,
                EntityObject: v?v.toEntityObject(true):null,
            });
    
            ret.push({
                EntityObject: {
                    Active: true,
                    ValueEntities: [{
                        Active: true,
                        EntityObject: v?v.toEntityObject(true):null,
                    }]
                }
            });
        }
<% })%>
        
        return ret;
    }
    
    <%=mName='toEntityObject'%>(bQuery, bTypedAttributes) {
        let ret = {Active: true, EntityClass: this._valueClass(), EntityValues: [], ValueEntities: []};
        if(!bQuery) ret.Date = this.serverDate(); 

        ret = this.__export(ret, {
            Full: !bQuery,
            Id: (obj, eaCode, v) => obj.Id = v,
    <% c.EntityAttributes.filter(ea => !ea.EntityMethod).forEach(ea => { %>
            "<%=nName(ea)%>": (obj, eaCode, v) => {
                let ev = {
                    Active: true,
                    EntityAttribute: {
                        Id: <%=scope%>.EntityClasses.find(c => c.Id = this.EntityClass.Id).EntityAttributes.find(ea => ea.Name=='<%=ea.Name%>').Id,
                        Active: true,
                        Name: "<%=ea.Name%>",
                        EntityClass: this._valueClass(),
                    },
                    OPERATORS: {},
                };
        <% if(ea.EntityType){%>
                if(v){
                    ev.ObjectValue = v.<%=mName%>(bQuery, bTypedAttributes);
                    ev.OPERATORS.ObjectValue = this._<%=nName(ea)%>_coop;
                }
        <% }else{%>
                ev.<%=_FrEMD._attr(ea)%>Value = v;
                ev.OPERATORS.<%=_FrEMD._attr(ea)%>Value = this._<%=nName(ea)%>_coop;
        <% }%>
                obj.ValueEntities.push(ev);
            },
    <% }); %>
    <% c.TypedAttributes.forEach(ta => { let taName = nName(ta) + '_' + ta.EntityClass.Plural.replace(/ /g, '_');%>
            <%=taName%>: (obj, eaCode, v) => {
                if(v && bTypedAttributes) obj.EntityValues.push(v.map(_v => ({
                    Active: true,
                    EntityAttribute: {
                        Id: '<%=ta.Id%>',
                        Active: true,
                        Name: "<%=ta.Name%>",
                        EntityClass: new <%=scope%>.<%=nName(ta.EntityClass, true)%>()._valueClass(),
                    },
                    ObjectValue: _v.<%=mName%>(bQuery, bTypedAttributes),
                })));
            },
    <% })%>
        }, "<%=mName%>");

        <%=log()%>ret);
        return ret;
    }
<% } %>
}
