{
	"Id": "4ef85f0bcb547c138329f39fadf363b96b8c0d5d",
	"code": "instance_name",
	"date": "2025-06-19T15:11:57.968Z",
	"name": "SnMQTT",
	"remark": "[{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Agenda_Item","api_name":"x_78611_platform_0.shs_arbfw_Agenda_Item","name":"shs_arbfw_Agenda_Item","description":"{\n                Id: '15149a6c382acf015149a6c382acf015',\n                name: 'x_78611_platform_0_agenda_item',\n                label: 'Agenda Item',\n                remark: '',\n                rank: 16,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'agenda', label: 'agenda', remark: '', type: 'reference', reference: '15ad71d553faf515ad71d553faf515ad'},\n    \n                    {code: 'requirement', label: 'requirement', remark: '', type: 'reference', reference: '1064eefcd945a101064eefcd945a1010'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Meeting_Agenda',\n    \n                    'x_78611_platform_0.shs_arbfw_Requirement',\n    \n                ],\n                referencing: [\n    \n                ],\n            }","script":"class shs_arbfw_Agenda_Item extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Agenda_Item\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Agenda_Item.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Agenda_Item.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.agenda GETTERS AND SETTERS **********************/\n\tagenda(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._agenda = v;\n\t\t\tthis._agenda_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._agenda;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.requirement GETTERS AND SETTERS **********************/\n\trequirement(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._requirement = v;\n\t\t\tthis._requirement_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._agenda) ret += /*(this._agenda_coop || '=') + */ this.agenda()._toEQuery(sPath + 'agenda.');\n\n\t\tif (this._requirement) ret += /*(this._requirement_coop || '=') + */ this.requirement()._toEQuery(sPath + 'requirement.');\n\n\t\tgs.info(\"Agenda_Item._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Agenda_Item._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Agenda_Item._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Agenda_Item()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Agenda_Item._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Agenda_Item\" != 'ecc_queue' && obj.source == \"Agenda_Item\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Agenda_Item()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tagenda: obj.getValue(\"agenda\"),\n\n\t\t\t\t\t\trequirement: obj.getValue(\"requirement\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Agenda_Item._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Agenda_Item._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Agenda_Item()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Agenda_Item._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.agenda) !== 'undefined') {\n\n\t\t\t\t\t\tthis.agenda(new shs_arbfw_Meeting_Agenda()._fromDocument(obj.agenda));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.requirement) !== 'undefined') {\n\n\t\t\t\t\t\tthis.requirement(new shs_arbfw_Requirement()._fromDocument(obj.requirement));\n\t\t\t\t\t}\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Agenda_Item\"){\n\t\t\t\t\tgs.info(\"Agenda_Item._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Agenda_Item._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Agenda_Item._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Agenda_Item._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Agenda_Item._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._agenda) !== 'undefined') {\n\t\t\tret.agenda = this.agenda();\n\n\t\t\tif (ret.agenda) {\n\t\t\t\tret.agenda = ret.agenda._toDocument();\n\t\t\t\tif (typeof(ret.agenda) === 'object' && !Object.keys(ret.agenda).length) ret.agenda = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._requirement) !== 'undefined') {\n\t\t\tret.requirement = this.requirement();\n\n\t\t\tif (ret.requirement) {\n\t\t\t\tret.requirement = ret.requirement._toDocument();\n\t\t\t\tif (typeof(ret.requirement) === 'object' && !Object.keys(ret.requirement).length) ret.requirement = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Agenda_Item();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (typeof(this.agenda()) !== 'undefined') ret.agenda(this.agenda()._unique());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"agenda\") >= 0 && typeof(this.agenda()) !== 'undefined') ret.agenda(this.agenda()._unique());\n\n\t\t\tif (keys.indexOf(\"requirement\") >= 0 && typeof(this.requirement()) !== 'undefined') ret.requirement(this.requirement()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_agenda_item', ['*'])['x_78611_platform_0_agenda_item']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_agenda_item');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._agenda) !== 'undefined') {\n\t\t\tlet coop = this._agenda_coop || '=';\n\n\t\t\tlet v = this.agenda();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Agenda Item\"==\"Column\") gs.info(\"Agenda_Item._query(): \"+ \"agenda \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Agenda_Item._query(): \" + \"agenda[agenda] resuled in undefined: \" + JSON.stringify(this.agenda()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('agenda') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('agenda');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('agenda');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('agenda', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._requirement) !== 'undefined') {\n\t\t\tlet coop = this._requirement_coop || '=';\n\n\t\t\tlet v = this.requirement();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Agenda Item\"==\"Column\") gs.info(\"Agenda_Item._query(): \"+ \"requirement \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Agenda_Item._query(): \" + \"requirement[requirement] resuled in undefined: \" + JSON.stringify(this.requirement()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('requirement') >= 0) {\n\t\t\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('requirement');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('requirement');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('requirement', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Agenda_Item._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Agenda_Item()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Agenda_Item._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_agenda_item', ['*'])['x_78611_platform_0_agenda_item']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Agenda_Item._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Agenda_Item._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Agenda_Item()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Agenda_Item()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Agenda_Item._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Agenda_Item._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Agenda_Item._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_agenda_item');\n\t\t\t/*gs.info(\"Agenda_Item._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_agenda_item', ['*'])['x_78611_platform_0_agenda_item']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Agenda_Item._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Agenda_Item._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/************* Agenda_Item.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Agenda_Item.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Agenda_Item.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Agenda_Item.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Agenda_Item.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Agenda_Item.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Agenda_Item.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Agenda_Item.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_agenda_item');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_agenda_item', ['*'])['x_78611_platform_0_agenda_item'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Agenda_Item.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Agenda_Item.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Agenda_Item.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Agenda_Item.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Meeting_Agenda","api_name":"x_78611_platform_0.shs_arbfw_Meeting_Agenda","name":"shs_arbfw_Meeting_Agenda","description":"{\n                Id: '15ad71d553faf515ad71d553faf515ad',\n                name: 'x_78611_platform_0_meeting_agenda',\n                label: 'Meeting Agenda',\n                remark: '',\n                rank: 11,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'meeting', label: 'meeting', remark: '', type: 'reference', reference: 'ca5ab4b032fd8ca5ab4b032fd8ca5ab4'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Meeting',\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Meeting_Agenda extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting_Agenda\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Meeting_Agenda.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting_Agenda.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.meeting GETTERS AND SETTERS **********************/\n\tmeeting(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._meeting = v;\n\t\t\tthis._meeting_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.agenda_Agenda_Items GETTERS AND SETTERS **********************/\n\tagenda_Agenda_Items(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._agenda_Agenda_Items = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._agenda_Agenda_Items_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._agenda_Agenda_Items;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._meeting) ret += /*(this._meeting_coop || '=') + */ this.meeting()._toEQuery(sPath + 'meeting.');\n\n\t\t(this.agenda_Agenda_Items() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAgenda_Item.agenda,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Meeting_Agenda._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Meeting_Agenda._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Meeting_Agenda._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting_Agenda()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Meeting_Agenda._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting_Agenda\" != 'ecc_queue' && obj.source == \"Meeting_Agenda\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Meeting_Agenda()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tmeeting: obj.getValue(\"meeting\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Meeting_Agenda._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Meeting_Agenda._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Meeting_Agenda()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Meeting_Agenda._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.meeting) !== 'undefined') {\n\n\t\t\t\t\t\tthis.meeting(new shs_arbfw_Meeting()._fromDocument(obj.meeting));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.agenda_Agenda_Items) !== 'undefined') this.agenda_Agenda_Items(new shs_arbfw_Agenda_Item()._fromDocument(obj.agenda_Agenda_Items));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Meeting_Agenda\"){\n\t\t\t\t\tgs.info(\"Meeting_Agenda._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Agenda._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Agenda._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Meeting_Agenda._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Meeting_Agenda._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._meeting) !== 'undefined') {\n\t\t\tret.meeting = this.meeting();\n\n\t\t\tif (ret.meeting) {\n\t\t\t\tret.meeting = ret.meeting._toDocument();\n\t\t\t\tif (typeof(ret.meeting) === 'object' && !Object.keys(ret.meeting).length) ret.meeting = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.agenda_Agenda_Items()) !== 'undefined') ret.agenda_Agenda_Items = this.agenda_Agenda_Items().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Meeting_Agenda();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"meeting\") >= 0 && typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_meeting_agenda', ['*'])['x_78611_platform_0_meeting_agenda']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_meeting_agenda');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._meeting) !== 'undefined') {\n\t\t\tlet coop = this._meeting_coop || '=';\n\n\t\t\tlet v = this.meeting();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting Agenda\"==\"Column\") gs.info(\"Meeting_Agenda._query(): \"+ \"meeting \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting_Agenda._query(): \" + \"meeting[meeting] resuled in undefined: \" + JSON.stringify(this.meeting()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('meeting') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('meeting');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('meeting');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('meeting', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Meeting_Agenda._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Meeting_Agenda()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Meeting_Agenda._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_meeting_agenda', ['*'])['x_78611_platform_0_meeting_agenda']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Meeting_Agenda._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Meeting_Agenda._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Meeting_Agenda()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Meeting_Agenda()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Meeting_Agenda._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Meeting_Agenda._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Meeting_Agenda._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_meeting_agenda');\n\t\t\t/*gs.info(\"Meeting_Agenda._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_meeting_agenda', ['*'])['x_78611_platform_0_meeting_agenda']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Meeting_Agenda._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Meeting_Agenda._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.agenda_Agenda_Items)) this.agenda_Agenda_Items(obj.agenda_Agenda_Items.map(function(ta) {\n\t\t\treturn new shs_arbfw_Agenda_Item()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Meeting_Agenda.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Agenda.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Agenda.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Agenda.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting_Agenda.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Agenda.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Agenda.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Agenda.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_meeting_agenda');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_meeting_agenda', ['*'])['x_78611_platform_0_meeting_agenda'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting_Agenda.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Agenda.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Agenda.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Agenda.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Meeting_Minute","api_name":"x_78611_platform_0.shs_arbfw_Meeting_Minute","name":"shs_arbfw_Meeting_Minute","description":"{\n                Id: '21df52c7dca89021df52c7dca89021df',\n                name: 'x_78611_platform_0_meeting_minute',\n                label: 'Meeting Minute',\n                remark: '',\n                rank: 11,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'meeting', label: 'meeting', remark: '', type: 'reference', reference: 'ca5ab4b032fd8ca5ab4b032fd8ca5ab4'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Meeting',\n    \n                ],\n                referencing: [\n    \n                ],\n            }","script":"class shs_arbfw_Meeting_Minute extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting_Minute\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Meeting_Minute.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting_Minute.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.meeting GETTERS AND SETTERS **********************/\n\tmeeting(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._meeting = v;\n\t\t\tthis._meeting_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._meeting) ret += /*(this._meeting_coop || '=') + */ this.meeting()._toEQuery(sPath + 'meeting.');\n\n\t\tgs.info(\"Meeting_Minute._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Meeting_Minute._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Meeting_Minute._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting_Minute()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Meeting_Minute._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting_Minute\" != 'ecc_queue' && obj.source == \"Meeting_Minute\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Meeting_Minute()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tmeeting: obj.getValue(\"meeting\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Meeting_Minute._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Meeting_Minute._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Meeting_Minute()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Meeting_Minute._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.meeting) !== 'undefined') {\n\n\t\t\t\t\t\tthis.meeting(new shs_arbfw_Meeting()._fromDocument(obj.meeting));\n\t\t\t\t\t}\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Meeting_Minute\"){\n\t\t\t\t\tgs.info(\"Meeting_Minute._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Minute._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Minute._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Meeting_Minute._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Meeting_Minute._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._meeting) !== 'undefined') {\n\t\t\tret.meeting = this.meeting();\n\n\t\t\tif (ret.meeting) {\n\t\t\t\tret.meeting = ret.meeting._toDocument();\n\t\t\t\tif (typeof(ret.meeting) === 'object' && !Object.keys(ret.meeting).length) ret.meeting = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Meeting_Minute();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"meeting\") >= 0 && typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_meeting_minute', ['*'])['x_78611_platform_0_meeting_minute']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_meeting_minute');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._meeting) !== 'undefined') {\n\t\t\tlet coop = this._meeting_coop || '=';\n\n\t\t\tlet v = this.meeting();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting Minute\"==\"Column\") gs.info(\"Meeting_Minute._query(): \"+ \"meeting \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting_Minute._query(): \" + \"meeting[meeting] resuled in undefined: \" + JSON.stringify(this.meeting()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('meeting') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('meeting');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('meeting');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('meeting', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Meeting_Minute._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Meeting_Minute()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Meeting_Minute._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_meeting_minute', ['*'])['x_78611_platform_0_meeting_minute']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Meeting_Minute._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Meeting_Minute._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Meeting_Minute()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Meeting_Minute()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Meeting_Minute._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Meeting_Minute._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Meeting_Minute._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_meeting_minute');\n\t\t\t/*gs.info(\"Meeting_Minute._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_meeting_minute', ['*'])['x_78611_platform_0_meeting_minute']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Meeting_Minute._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Meeting_Minute._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/************* Meeting_Minute.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Minute.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Minute.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Minute.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting_Minute.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Minute.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Minute.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Minute.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_meeting_minute');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_meeting_minute', ['*'])['x_78611_platform_0_meeting_minute'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting_Minute.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Minute.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Minute.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Minute.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Effort_Estimate","api_name":"x_78611_platform_0.shs_arbfw_Effort_Estimate","name":"shs_arbfw_Effort_Estimate","description":"{\n                Id: '24fe1c5bc23724fe1c5bc23724fe1c5b',\n                name: 'x_78611_platform_0_effort_estimate',\n                label: 'Effort Estimate',\n                remark: '',\n                rank: 10,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'personDay', label: 'personDay', remark: '', type: 'int'},\n    \n                    {code: 'effort', label: 'effort', remark: '', type: 'reference', reference: '2af73535a1fa92af73535a1fa92af735'},\n    \n                    {code: 'requirement', label: 'requirement', remark: '', type: 'reference', reference: '1064eefcd945a101064eefcd945a1010'},\n    \n                    {code: 'role', label: 'role', remark: '', type: 'reference', reference: '1951750e675f271951750e675f271951'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Effort',\n    \n                    'x_78611_platform_0.shs_arbfw_Requirement',\n    \n                    'x_78611_platform_0.shs_arbfw_Role',\n    \n                ],\n                referencing: [\n    \n                ],\n            }","script":"class shs_arbfw_Effort_Estimate extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Effort_Estimate\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Effort_Estimate.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Effort_Estimate.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.personDay GETTERS AND SETTERS **********************/\n\tpersonDay(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._personDay = v;\n\t\t\tthis._personDay_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._personDay;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.effort GETTERS AND SETTERS **********************/\n\teffort(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._effort = v;\n\t\t\tthis._effort_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._effort;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.requirement GETTERS AND SETTERS **********************/\n\trequirement(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._requirement = v;\n\t\t\tthis._requirement_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.role GETTERS AND SETTERS **********************/\n\trole(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._role = v;\n\t\t\tthis._role_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._personDay) ret += '^' + sPath + 'personDay' + (this._personDay_coop || '=') + this.personDay();\n\n\t\tif (this._effort) ret += /*(this._effort_coop || '=') + */ this.effort()._toEQuery(sPath + 'effort.');\n\n\t\tif (this._requirement) ret += /*(this._requirement_coop || '=') + */ this.requirement()._toEQuery(sPath + 'requirement.');\n\n\t\tif (this._role) ret += /*(this._role_coop || '=') + */ this.role()._toEQuery(sPath + 'role.');\n\n\t\tgs.info(\"Effort_Estimate._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Effort_Estimate._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Effort_Estimate._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Effort_Estimate()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Effort_Estimate._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Effort_Estimate\" != 'ecc_queue' && obj.source == \"Effort_Estimate\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Effort_Estimate()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tpersonDay: obj.getValue(\"personDay\"),\n\n\t\t\t\t\t\teffort: obj.getValue(\"effort\"),\n\n\t\t\t\t\t\trequirement: obj.getValue(\"requirement\"),\n\n\t\t\t\t\t\trole: obj.getValue(\"role\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Effort_Estimate._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Effort_Estimate._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Effort_Estimate()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Effort_Estimate._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.personDay) !== 'undefined') {\n\n\t\t\t\t\t\tthis.personDay(obj.personDay);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.effort) !== 'undefined') {\n\n\t\t\t\t\t\tthis.effort(new shs_arbfw_Effort()._fromDocument(obj.effort));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.requirement) !== 'undefined') {\n\n\t\t\t\t\t\tthis.requirement(new shs_arbfw_Requirement()._fromDocument(obj.requirement));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.role) !== 'undefined') {\n\n\t\t\t\t\t\tthis.role(new shs_arbfw_Role()._fromDocument(obj.role));\n\t\t\t\t\t}\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Effort_Estimate\"){\n\t\t\t\t\tgs.info(\"Effort_Estimate._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort_Estimate._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort_Estimate._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Effort_Estimate._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Effort_Estimate._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._personDay) !== 'undefined') {\n\t\t\tret.personDay = this.personDay();\n\n\t\t}\n\n\t\tif (typeof(this._effort) !== 'undefined') {\n\t\t\tret.effort = this.effort();\n\n\t\t\tif (ret.effort) {\n\t\t\t\tret.effort = ret.effort._toDocument();\n\t\t\t\tif (typeof(ret.effort) === 'object' && !Object.keys(ret.effort).length) ret.effort = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._requirement) !== 'undefined') {\n\t\t\tret.requirement = this.requirement();\n\n\t\t\tif (ret.requirement) {\n\t\t\t\tret.requirement = ret.requirement._toDocument();\n\t\t\t\tif (typeof(ret.requirement) === 'object' && !Object.keys(ret.requirement).length) ret.requirement = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._role) !== 'undefined') {\n\t\t\tret.role = this.role();\n\n\t\t\tif (ret.role) {\n\t\t\t\tret.role = ret.role._toDocument();\n\t\t\t\tif (typeof(ret.role) === 'object' && !Object.keys(ret.role).length) ret.role = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Effort_Estimate();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"personDay\") >= 0 && typeof(this.personDay()) !== 'undefined') ret.personDay(this.personDay());\n\n\t\t\tif (keys.indexOf(\"effort\") >= 0 && typeof(this.effort()) !== 'undefined') ret.effort(this.effort()._unique());\n\n\t\t\tif (keys.indexOf(\"requirement\") >= 0 && typeof(this.requirement()) !== 'undefined') ret.requirement(this.requirement()._unique());\n\n\t\t\tif (keys.indexOf(\"role\") >= 0 && typeof(this.role()) !== 'undefined') ret.role(this.role()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_effort_estimate', ['*'])['x_78611_platform_0_effort_estimate']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_effort_estimate');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._personDay) !== 'undefined') {\n\t\t\tlet coop = this._personDay_coop || '=';\n\n\t\t\tlet v = this.personDay();\n\n\t\t\tif (arFields.indexOf('personday') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('personday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('personday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('personday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._effort) !== 'undefined') {\n\t\t\tlet coop = this._effort_coop || '=';\n\n\t\t\tlet v = this.effort();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Effort Estimate\"==\"Column\") gs.info(\"Effort_Estimate._query(): \"+ \"effort \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Effort_Estimate._query(): \" + \"effort[effort] resuled in undefined: \" + JSON.stringify(this.effort()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('effort') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('effort');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('effort');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('effort', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._requirement) !== 'undefined') {\n\t\t\tlet coop = this._requirement_coop || '=';\n\n\t\t\tlet v = this.requirement();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Effort Estimate\"==\"Column\") gs.info(\"Effort_Estimate._query(): \"+ \"requirement \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Effort_Estimate._query(): \" + \"requirement[requirement] resuled in undefined: \" + JSON.stringify(this.requirement()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('requirement') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('requirement');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('requirement');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('requirement', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._role) !== 'undefined') {\n\t\t\tlet coop = this._role_coop || '=';\n\n\t\t\tlet v = this.role();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Effort Estimate\"==\"Column\") gs.info(\"Effort_Estimate._query(): \"+ \"role \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Effort_Estimate._query(): \" + \"role[role] resuled in undefined: \" + JSON.stringify(this.role()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('role') >= 0) {\n\t\t\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('role');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('role');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('role', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Effort_Estimate._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Effort_Estimate()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Effort_Estimate._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_effort_estimate', ['*'])['x_78611_platform_0_effort_estimate']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Effort_Estimate._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Effort_Estimate._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Effort_Estimate()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Effort_Estimate()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Effort_Estimate._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Effort_Estimate._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Effort_Estimate._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_effort_estimate');\n\t\t\t/*gs.info(\"Effort_Estimate._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_effort_estimate', ['*'])['x_78611_platform_0_effort_estimate']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Effort_Estimate._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Effort_Estimate._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/************* Effort_Estimate.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Effort_Estimate.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort_Estimate.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort_Estimate.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Effort_Estimate.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Effort_Estimate.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort_Estimate.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort_Estimate.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_effort_estimate');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_effort_estimate', ['*'])['x_78611_platform_0_effort_estimate'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Effort_Estimate.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Effort_Estimate.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort_Estimate.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort_Estimate.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Meeting","api_name":"x_78611_platform_0.shs_arbfw_Meeting","name":"shs_arbfw_Meeting","description":"{\n                Id: 'ca5ab4b032fd8ca5ab4b032fd8ca5ab4',\n                name: 'x_78611_platform_0_meeting',\n                label: 'Meeting',\n                remark: '',\n                rank: 10,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'start', label: 'start', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'end', label: 'end', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'started', label: 'started', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'ended', label: 'ended', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'series', label: 'series', remark: '', type: 'reference', reference: 'a414d4adb66620a414d4adb66620a414'},\n    \n                    {code: 'organizer', label: 'organizer', remark: '', type: 'reference', reference: '9c07873ef8fb809c07873ef8fb809c07'},\n    \n                    {code: 'moderator', label: 'moderator', remark: '', type: 'reference', reference: '9c07873ef8fb809c07873ef8fb809c07'},\n    \n                    {code: 'project', label: 'project', remark: '', type: 'reference', reference: '17184adc81722017184adc8172201718'},\n    \n                    {code: 'board', label: 'board', remark: '', type: 'reference', reference: '32f96d205f95c32f96d205f95c32f96d'},\n    \n                    {code: 'decision', label: 'decision', remark: '', type: 'reference', reference: 'b24a0de45e2328b24a0de45e2328b24a'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Meeting_Series',\n    \n                    'x_78611_platform_0.shs_arbfw_User',\n    \n                    'x_78611_platform_0.shs_arbfw_User',\n    \n                    'x_78611_platform_0.shs_arbfw_Project',\n    \n                    'x_78611_platform_0.shs_arbfw_Board',\n    \n                    'x_78611_platform_0.shs_arbfw_Decision',\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Meeting extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Meeting.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting.start GETTERS AND SETTERS **********************/\n\tstart(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting.start(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._start = v;\n\t\t\tthis._start_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._start;\n\t\t}\n\t}\n\n\t/************* Meeting.end GETTERS AND SETTERS **********************/\n\tend(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting.end(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._end = v;\n\t\t\tthis._end_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._end;\n\t\t}\n\t}\n\n\t/************* Meeting.started GETTERS AND SETTERS **********************/\n\tstarted(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting.started(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._started = v;\n\t\t\tthis._started_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._started;\n\t\t}\n\t}\n\n\t/************* Meeting.ended GETTERS AND SETTERS **********************/\n\tended(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting.ended(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._ended = v;\n\t\t\tthis._ended_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._ended;\n\t\t}\n\t}\n\n\t/************* Meeting.series GETTERS AND SETTERS **********************/\n\tseries(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._series = v;\n\t\t\tthis._series_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._series;\n\t\t}\n\t}\n\n\t/************* Meeting.organizer GETTERS AND SETTERS **********************/\n\torganizer(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._organizer = v;\n\t\t\tthis._organizer_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._organizer;\n\t\t}\n\t}\n\n\t/************* Meeting.moderator GETTERS AND SETTERS **********************/\n\tmoderator(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._moderator = v;\n\t\t\tthis._moderator_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._moderator;\n\t\t}\n\t}\n\n\t/************* Meeting.project GETTERS AND SETTERS **********************/\n\tproject(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._project = v;\n\t\t\tthis._project_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project;\n\t\t}\n\t}\n\n\t/************* Meeting.board GETTERS AND SETTERS **********************/\n\tboard(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._board = v;\n\t\t\tthis._board_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board;\n\t\t}\n\t}\n\n\t/************* Meeting.decision GETTERS AND SETTERS **********************/\n\tdecision(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._decision = v;\n\t\t\tthis._decision_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision;\n\t\t}\n\t}\n\n\t/************* Meeting.meeting_Meeting_Agendas GETTERS AND SETTERS **********************/\n\tmeeting_Meeting_Agendas(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._meeting_Meeting_Agendas = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._meeting_Meeting_Agendas_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting_Meeting_Agendas;\n\t\t}\n\t}\n\n\t/************* Meeting.meeting_Meeting_Minutes GETTERS AND SETTERS **********************/\n\tmeeting_Meeting_Minutes(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._meeting_Meeting_Minutes = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._meeting_Meeting_Minutes_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting_Meeting_Minutes;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._start) ret += '^' + sPath + 'start' + (this._start_coop || '=') + this.start();\n\n\t\tif (this._end) ret += '^' + sPath + 'end' + (this._end_coop || '=') + this.end();\n\n\t\tif (this._started) ret += '^' + sPath + 'started' + (this._started_coop || '=') + this.started();\n\n\t\tif (this._ended) ret += '^' + sPath + 'ended' + (this._ended_coop || '=') + this.ended();\n\n\t\tif (this._series) ret += /*(this._series_coop || '=') + */ this.series()._toEQuery(sPath + 'series.');\n\n\t\tif (this._organizer) ret += /*(this._organizer_coop || '=') + */ this.organizer()._toEQuery(sPath + 'organizer.');\n\n\t\tif (this._moderator) ret += /*(this._moderator_coop || '=') + */ this.moderator()._toEQuery(sPath + 'moderator.');\n\n\t\tif (this._project) ret += /*(this._project_coop || '=') + */ this.project()._toEQuery(sPath + 'project.');\n\n\t\tif (this._board) ret += /*(this._board_coop || '=') + */ this.board()._toEQuery(sPath + 'board.');\n\n\t\tif (this._decision) ret += /*(this._decision_coop || '=') + */ this.decision()._toEQuery(sPath + 'decision.');\n\n\t\t(this.meeting_Meeting_Agendas() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting_Agenda.meeting,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.meeting_Meeting_Minutes() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting_Minute.meeting,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Meeting._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Meeting._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Meeting._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Meeting._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting\" != 'ecc_queue' && obj.source == \"Meeting\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Meeting()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tstart: obj.getValue(\"start\"),\n\n\t\t\t\t\t\tend: obj.getValue(\"end\"),\n\n\t\t\t\t\t\tstarted: obj.getValue(\"started\"),\n\n\t\t\t\t\t\tended: obj.getValue(\"ended\"),\n\n\t\t\t\t\t\tseries: obj.getValue(\"series\"),\n\n\t\t\t\t\t\torganizer: obj.getValue(\"organizer\"),\n\n\t\t\t\t\t\tmoderator: obj.getValue(\"moderator\"),\n\n\t\t\t\t\t\tproject: obj.getValue(\"project\"),\n\n\t\t\t\t\t\tboard: obj.getValue(\"board\"),\n\n\t\t\t\t\t\tdecision: obj.getValue(\"decision\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Meeting._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Meeting._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Meeting()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Meeting._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.start) !== 'undefined') {\n\n\t\t\t\t\t\tthis.start(obj.start);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.end) !== 'undefined') {\n\n\t\t\t\t\t\tthis.end(obj.end);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.started) !== 'undefined') {\n\n\t\t\t\t\t\tthis.started(obj.started);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.ended) !== 'undefined') {\n\n\t\t\t\t\t\tthis.ended(obj.ended);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.series) !== 'undefined') {\n\n\t\t\t\t\t\tthis.series(new shs_arbfw_Meeting_Series()._fromDocument(obj.series));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.organizer) !== 'undefined') {\n\n\t\t\t\t\t\tthis.organizer(new shs_arbfw_User()._fromDocument(obj.organizer));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.moderator) !== 'undefined') {\n\n\t\t\t\t\t\tthis.moderator(new shs_arbfw_User()._fromDocument(obj.moderator));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.project) !== 'undefined') {\n\n\t\t\t\t\t\tthis.project(new shs_arbfw_Project()._fromDocument(obj.project));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.board) !== 'undefined') {\n\n\t\t\t\t\t\tthis.board(new shs_arbfw_Board()._fromDocument(obj.board));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.decision) !== 'undefined') {\n\n\t\t\t\t\t\tthis.decision(new shs_arbfw_Decision()._fromDocument(obj.decision));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.meeting_Meeting_Agendas) !== 'undefined') this.meeting_Meeting_Agendas(new shs_arbfw_Meeting_Agenda()._fromDocument(obj.meeting_Meeting_Agendas));\n\n\t\t\t\t\tif (typeof(obj.meeting_Meeting_Minutes) !== 'undefined') this.meeting_Meeting_Minutes(new shs_arbfw_Meeting_Minute()._fromDocument(obj.meeting_Meeting_Minutes));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Meeting\"){\n\t\t\t\t\tgs.info(\"Meeting._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Meeting._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Meeting._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._start) !== 'undefined') {\n\t\t\tret.start = this.start();\n\n\t\t\tif (ret.start && typeof(ret.start.toISOString) === 'function') ret.start = ret.start.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._end) !== 'undefined') {\n\t\t\tret.end = this.end();\n\n\t\t\tif (ret.end && typeof(ret.end.toISOString) === 'function') ret.end = ret.end.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._started) !== 'undefined') {\n\t\t\tret.started = this.started();\n\n\t\t\tif (ret.started && typeof(ret.started.toISOString) === 'function') ret.started = ret.started.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._ended) !== 'undefined') {\n\t\t\tret.ended = this.ended();\n\n\t\t\tif (ret.ended && typeof(ret.ended.toISOString) === 'function') ret.ended = ret.ended.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._series) !== 'undefined') {\n\t\t\tret.series = this.series();\n\n\t\t\tif (ret.series) {\n\t\t\t\tret.series = ret.series._toDocument();\n\t\t\t\tif (typeof(ret.series) === 'object' && !Object.keys(ret.series).length) ret.series = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._organizer) !== 'undefined') {\n\t\t\tret.organizer = this.organizer();\n\n\t\t\tif (ret.organizer) {\n\t\t\t\tret.organizer = ret.organizer._toDocument();\n\t\t\t\tif (typeof(ret.organizer) === 'object' && !Object.keys(ret.organizer).length) ret.organizer = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._moderator) !== 'undefined') {\n\t\t\tret.moderator = this.moderator();\n\n\t\t\tif (ret.moderator) {\n\t\t\t\tret.moderator = ret.moderator._toDocument();\n\t\t\t\tif (typeof(ret.moderator) === 'object' && !Object.keys(ret.moderator).length) ret.moderator = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._project) !== 'undefined') {\n\t\t\tret.project = this.project();\n\n\t\t\tif (ret.project) {\n\t\t\t\tret.project = ret.project._toDocument();\n\t\t\t\tif (typeof(ret.project) === 'object' && !Object.keys(ret.project).length) ret.project = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._board) !== 'undefined') {\n\t\t\tret.board = this.board();\n\n\t\t\tif (ret.board) {\n\t\t\t\tret.board = ret.board._toDocument();\n\t\t\t\tif (typeof(ret.board) === 'object' && !Object.keys(ret.board).length) ret.board = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._decision) !== 'undefined') {\n\t\t\tret.decision = this.decision();\n\n\t\t\tif (ret.decision) {\n\t\t\t\tret.decision = ret.decision._toDocument();\n\t\t\t\tif (typeof(ret.decision) === 'object' && !Object.keys(ret.decision).length) ret.decision = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.meeting_Meeting_Agendas()) !== 'undefined') ret.meeting_Meeting_Agendas = this.meeting_Meeting_Agendas().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.meeting_Meeting_Minutes()) !== 'undefined') ret.meeting_Meeting_Minutes = this.meeting_Meeting_Minutes().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Meeting();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"start\") >= 0 && typeof(this.start()) !== 'undefined') ret.start(this.start());\n\n\t\t\tif (keys.indexOf(\"end\") >= 0 && typeof(this.end()) !== 'undefined') ret.end(this.end());\n\n\t\t\tif (keys.indexOf(\"started\") >= 0 && typeof(this.started()) !== 'undefined') ret.started(this.started());\n\n\t\t\tif (keys.indexOf(\"ended\") >= 0 && typeof(this.ended()) !== 'undefined') ret.ended(this.ended());\n\n\t\t\tif (keys.indexOf(\"series\") >= 0 && typeof(this.series()) !== 'undefined') ret.series(this.series()._unique());\n\n\t\t\tif (keys.indexOf(\"organizer\") >= 0 && typeof(this.organizer()) !== 'undefined') ret.organizer(this.organizer()._unique());\n\n\t\t\tif (keys.indexOf(\"moderator\") >= 0 && typeof(this.moderator()) !== 'undefined') ret.moderator(this.moderator()._unique());\n\n\t\t\tif (keys.indexOf(\"project\") >= 0 && typeof(this.project()) !== 'undefined') ret.project(this.project()._unique());\n\n\t\t\tif (keys.indexOf(\"board\") >= 0 && typeof(this.board()) !== 'undefined') ret.board(this.board()._unique());\n\n\t\t\tif (keys.indexOf(\"decision\") >= 0 && typeof(this.decision()) !== 'undefined') ret.decision(this.decision()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_meeting', ['*'])['x_78611_platform_0_meeting']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_meeting');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._start) !== 'undefined') {\n\t\t\tlet coop = this._start_coop || '=';\n\n\t\t\tlet v = this.start();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('start') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('start');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('start');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('start', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._end) !== 'undefined') {\n\t\t\tlet coop = this._end_coop || '=';\n\n\t\t\tlet v = this.end();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('end') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('end');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('end');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('end', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._started) !== 'undefined') {\n\t\t\tlet coop = this._started_coop || '=';\n\n\t\t\tlet v = this.started();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('started') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('started');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('started');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('started', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._ended) !== 'undefined') {\n\t\t\tlet coop = this._ended_coop || '=';\n\n\t\t\tlet v = this.ended();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('ended') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('ended');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('ended');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('ended', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._series) !== 'undefined') {\n\t\t\tlet coop = this._series_coop || '=';\n\n\t\t\tlet v = this.series();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting\"==\"Column\") gs.info(\"Meeting._query(): \"+ \"series \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting._query(): \" + \"series[series] resuled in undefined: \" + JSON.stringify(this.series()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('series') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('series');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('series');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('series', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._organizer) !== 'undefined') {\n\t\t\tlet coop = this._organizer_coop || '=';\n\n\t\t\tlet v = this.organizer();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting\"==\"Column\") gs.info(\"Meeting._query(): \"+ \"organizer \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting._query(): \" + \"organizer[organizer] resuled in undefined: \" + JSON.stringify(this.organizer()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('organizer') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('organizer');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('organizer');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('organizer', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._moderator) !== 'undefined') {\n\t\t\tlet coop = this._moderator_coop || '=';\n\n\t\t\tlet v = this.moderator();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting\"==\"Column\") gs.info(\"Meeting._query(): \"+ \"moderator \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting._query(): \" + \"moderator[moderator] resuled in undefined: \" + JSON.stringify(this.moderator()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('moderator') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('moderator');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('moderator');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('moderator', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._project) !== 'undefined') {\n\t\t\tlet coop = this._project_coop || '=';\n\n\t\t\tlet v = this.project();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting\"==\"Column\") gs.info(\"Meeting._query(): \"+ \"project \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting._query(): \" + \"project[project] resuled in undefined: \" + JSON.stringify(this.project()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('project') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('project');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('project');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('project', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._board) !== 'undefined') {\n\t\t\tlet coop = this._board_coop || '=';\n\n\t\t\tlet v = this.board();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting\"==\"Column\") gs.info(\"Meeting._query(): \"+ \"board \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting._query(): \" + \"board[board] resuled in undefined: \" + JSON.stringify(this.board()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('board') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('board');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('board');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('board', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._decision) !== 'undefined') {\n\t\t\tlet coop = this._decision_coop || '=';\n\n\t\t\tlet v = this.decision();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting\"==\"Column\") gs.info(\"Meeting._query(): \"+ \"decision \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting._query(): \" + \"decision[decision] resuled in undefined: \" + JSON.stringify(this.decision()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('decision') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('decision');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('decision');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('decision', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Meeting._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Meeting()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Meeting._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_meeting', ['*'])['x_78611_platform_0_meeting']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Meeting._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Meeting._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Meeting()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Meeting()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Meeting._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Meeting._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Meeting._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_meeting');\n\t\t\t/*gs.info(\"Meeting._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_meeting', ['*'])['x_78611_platform_0_meeting']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Meeting._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Meeting._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.meeting_Meeting_Agendas)) this.meeting_Meeting_Agendas(obj.meeting_Meeting_Agendas.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting_Agenda()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.meeting_Meeting_Minutes)) this.meeting_Meeting_Minutes(obj.meeting_Meeting_Minutes.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting_Minute()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Meeting.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_meeting');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_meeting', ['*'])['x_78611_platform_0_meeting'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Requirement","api_name":"x_78611_platform_0.shs_arbfw_Requirement","name":"shs_arbfw_Requirement","description":"{\n                Id: '1064eefcd945a101064eefcd945a1010',\n                name: 'x_78611_platform_0_requirement',\n                label: 'Requirement',\n                remark: '',\n                rank: 7,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'project', label: 'project', remark: '', type: 'reference', reference: '17184adc81722017184adc8172201718'},\n    \n                    {code: 'capability', label: 'capability', remark: '', type: 'reference', reference: '198060700c6ff2198060700c6ff21980'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Project',\n    \n                    'x_78611_platform_0.shs_arbfw_Capability',\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Requirement extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Requirement\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Requirement.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Requirement.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Requirement.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Requirement.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Requirement.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Requirement.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Requirement.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Requirement.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Requirement.project GETTERS AND SETTERS **********************/\n\tproject(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._project = v;\n\t\t\tthis._project_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project;\n\t\t}\n\t}\n\n\t/************* Requirement.capability GETTERS AND SETTERS **********************/\n\tcapability(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._capability = v;\n\t\t\tthis._capability_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._capability;\n\t\t}\n\t}\n\n\t/************* Requirement.requirement_Effort_Estimates GETTERS AND SETTERS **********************/\n\trequirement_Effort_Estimates(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._requirement_Effort_Estimates = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._requirement_Effort_Estimates_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement_Effort_Estimates;\n\t\t}\n\t}\n\n\t/************* Requirement.requirement_Agenda_Items GETTERS AND SETTERS **********************/\n\trequirement_Agenda_Items(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._requirement_Agenda_Items = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._requirement_Agenda_Items_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement_Agenda_Items;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._project) ret += /*(this._project_coop || '=') + */ this.project()._toEQuery(sPath + 'project.');\n\n\t\tif (this._capability) ret += /*(this._capability_coop || '=') + */ this.capability()._toEQuery(sPath + 'capability.');\n\n\t\t(this.requirement_Effort_Estimates() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYEffort_Estimate.requirement,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.requirement_Agenda_Items() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAgenda_Item.requirement,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Requirement._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Requirement._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Requirement._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Requirement()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Requirement._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Requirement\" != 'ecc_queue' && obj.source == \"Requirement\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Requirement()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tproject: obj.getValue(\"project\"),\n\n\t\t\t\t\t\tcapability: obj.getValue(\"capability\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Requirement._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Requirement._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Requirement()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Requirement._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.project) !== 'undefined') {\n\n\t\t\t\t\t\tthis.project(new shs_arbfw_Project()._fromDocument(obj.project));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.capability) !== 'undefined') {\n\n\t\t\t\t\t\tthis.capability(new shs_arbfw_Capability()._fromDocument(obj.capability));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.requirement_Effort_Estimates) !== 'undefined') this.requirement_Effort_Estimates(new shs_arbfw_Effort_Estimate()._fromDocument(obj.requirement_Effort_Estimates));\n\n\t\t\t\t\tif (typeof(obj.requirement_Agenda_Items) !== 'undefined') this.requirement_Agenda_Items(new shs_arbfw_Agenda_Item()._fromDocument(obj.requirement_Agenda_Items));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Requirement\"){\n\t\t\t\t\tgs.info(\"Requirement._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Requirement._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Requirement._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Requirement._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Requirement._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._project) !== 'undefined') {\n\t\t\tret.project = this.project();\n\n\t\t\tif (ret.project) {\n\t\t\t\tret.project = ret.project._toDocument();\n\t\t\t\tif (typeof(ret.project) === 'object' && !Object.keys(ret.project).length) ret.project = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._capability) !== 'undefined') {\n\t\t\tret.capability = this.capability();\n\n\t\t\tif (ret.capability) {\n\t\t\t\tret.capability = ret.capability._toDocument();\n\t\t\t\tif (typeof(ret.capability) === 'object' && !Object.keys(ret.capability).length) ret.capability = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.requirement_Effort_Estimates()) !== 'undefined') ret.requirement_Effort_Estimates = this.requirement_Effort_Estimates().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.requirement_Agenda_Items()) !== 'undefined') ret.requirement_Agenda_Items = this.requirement_Agenda_Items().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Requirement();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"project\") >= 0 && typeof(this.project()) !== 'undefined') ret.project(this.project()._unique());\n\n\t\t\tif (keys.indexOf(\"capability\") >= 0 && typeof(this.capability()) !== 'undefined') ret.capability(this.capability()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_requirement', ['*'])['x_78611_platform_0_requirement']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_requirement');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._project) !== 'undefined') {\n\t\t\tlet coop = this._project_coop || '=';\n\n\t\t\tlet v = this.project();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Requirement\"==\"Column\") gs.info(\"Requirement._query(): \"+ \"project \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Requirement._query(): \" + \"project[project] resuled in undefined: \" + JSON.stringify(this.project()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('project') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('project');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('project');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('project', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._capability) !== 'undefined') {\n\t\t\tlet coop = this._capability_coop || '=';\n\n\t\t\tlet v = this.capability();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Requirement\"==\"Column\") gs.info(\"Requirement._query(): \"+ \"capability \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Requirement._query(): \" + \"capability[capability] resuled in undefined: \" + JSON.stringify(this.capability()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('capability') >= 0) {\n\t\t\t\t/* gs.info(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('capability');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('capability');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('capability', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Requirement._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Requirement()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Requirement._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_requirement', ['*'])['x_78611_platform_0_requirement']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Requirement._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Requirement._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Requirement()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Requirement()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Requirement._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Requirement._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Requirement._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_requirement');\n\t\t\t/*gs.info(\"Requirement._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_requirement', ['*'])['x_78611_platform_0_requirement']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Requirement._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Requirement._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.requirement_Effort_Estimates)) this.requirement_Effort_Estimates(obj.requirement_Effort_Estimates.map(function(ta) {\n\t\t\treturn new shs_arbfw_Effort_Estimate()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.requirement_Agenda_Items)) this.requirement_Agenda_Items(obj.requirement_Agenda_Items.map(function(ta) {\n\t\t\treturn new shs_arbfw_Agenda_Item()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Requirement.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Requirement.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Requirement.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Requirement.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Requirement.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Requirement.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Requirement.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Requirement.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_requirement');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_requirement', ['*'])['x_78611_platform_0_requirement'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Requirement.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Requirement.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Requirement.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Requirement.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Team_Member","api_name":"x_78611_platform_0.shs_arbfw_Team_Member","name":"shs_arbfw_Team_Member","description":"{\n                Id: '120059736e6aff120059736e6aff1200',\n                name: 'x_78611_platform_0_team_member',\n                label: 'Team Member',\n                remark: '',\n                rank: 4,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'team', label: 'team', remark: '', type: 'reference', reference: 'f64f7221ec03a0f64f7221ec03a0f64f'},\n    \n                    {code: 'member', label: 'member', remark: '', type: 'reference', reference: '9c07873ef8fb809c07873ef8fb809c07'},\n    \n                    {code: 'role', label: 'role', remark: '', type: 'reference', reference: '1951750e675f271951750e675f271951'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Team',\n    \n                    'x_78611_platform_0.shs_arbfw_User',\n    \n                    'x_78611_platform_0.shs_arbfw_Role',\n    \n                ],\n                referencing: [\n    \n                ],\n            }","script":"class shs_arbfw_Team_Member extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Team_Member\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Team_Member.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Team_Member.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Team_Member.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Team_Member.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Team_Member.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Team_Member.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Team_Member.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Team_Member.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Team_Member.team GETTERS AND SETTERS **********************/\n\tteam(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._team = v;\n\t\t\tthis._team_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team;\n\t\t}\n\t}\n\n\t/************* Team_Member.member GETTERS AND SETTERS **********************/\n\tmember(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._member = v;\n\t\t\tthis._member_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member;\n\t\t}\n\t}\n\n\t/************* Team_Member.role GETTERS AND SETTERS **********************/\n\trole(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._role = v;\n\t\t\tthis._role_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._team) ret += /*(this._team_coop || '=') + */ this.team()._toEQuery(sPath + 'team.');\n\n\t\tif (this._member) ret += /*(this._member_coop || '=') + */ this.member()._toEQuery(sPath + 'member.');\n\n\t\tif (this._role) ret += /*(this._role_coop || '=') + */ this.role()._toEQuery(sPath + 'role.');\n\n\t\tgs.info(\"Team_Member._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Team_Member._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Team_Member._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Team_Member()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Team_Member._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Team_Member\" != 'ecc_queue' && obj.source == \"Team_Member\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Team_Member()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tteam: obj.getValue(\"team\"),\n\n\t\t\t\t\t\tmember: obj.getValue(\"member\"),\n\n\t\t\t\t\t\trole: obj.getValue(\"role\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Team_Member._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Team_Member._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Team_Member()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Team_Member._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.team) !== 'undefined') {\n\n\t\t\t\t\t\tthis.team(new shs_arbfw_Team()._fromDocument(obj.team));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.member) !== 'undefined') {\n\n\t\t\t\t\t\tthis.member(new shs_arbfw_User()._fromDocument(obj.member));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.role) !== 'undefined') {\n\n\t\t\t\t\t\tthis.role(new shs_arbfw_Role()._fromDocument(obj.role));\n\t\t\t\t\t}\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Team_Member\"){\n\t\t\t\t\tgs.info(\"Team_Member._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team_Member._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team_Member._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Team_Member._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Team_Member._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._team) !== 'undefined') {\n\t\t\tret.team = this.team();\n\n\t\t\tif (ret.team) {\n\t\t\t\tret.team = ret.team._toDocument();\n\t\t\t\tif (typeof(ret.team) === 'object' && !Object.keys(ret.team).length) ret.team = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._member) !== 'undefined') {\n\t\t\tret.member = this.member();\n\n\t\t\tif (ret.member) {\n\t\t\t\tret.member = ret.member._toDocument();\n\t\t\t\tif (typeof(ret.member) === 'object' && !Object.keys(ret.member).length) ret.member = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._role) !== 'undefined') {\n\t\t\tret.role = this.role();\n\n\t\t\tif (ret.role) {\n\t\t\t\tret.role = ret.role._toDocument();\n\t\t\t\tif (typeof(ret.role) === 'object' && !Object.keys(ret.role).length) ret.role = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Team_Member();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"team\") >= 0 && typeof(this.team()) !== 'undefined') ret.team(this.team()._unique());\n\n\t\t\tif (keys.indexOf(\"member\") >= 0 && typeof(this.member()) !== 'undefined') ret.member(this.member()._unique());\n\n\t\t\tif (keys.indexOf(\"role\") >= 0 && typeof(this.role()) !== 'undefined') ret.role(this.role()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_team_member', ['*'])['x_78611_platform_0_team_member']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_team_member');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._team) !== 'undefined') {\n\t\t\tlet coop = this._team_coop || '=';\n\n\t\t\tlet v = this.team();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Team Member\"==\"Column\") gs.info(\"Team_Member._query(): \"+ \"team \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Team_Member._query(): \" + \"team[team] resuled in undefined: \" + JSON.stringify(this.team()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('team') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('team');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('team');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('team', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._member) !== 'undefined') {\n\t\t\tlet coop = this._member_coop || '=';\n\n\t\t\tlet v = this.member();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Team Member\"==\"Column\") gs.info(\"Team_Member._query(): \"+ \"member \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Team_Member._query(): \" + \"member[member] resuled in undefined: \" + JSON.stringify(this.member()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('member') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('member');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('member');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('member', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._role) !== 'undefined') {\n\t\t\tlet coop = this._role_coop || '=';\n\n\t\t\tlet v = this.role();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Team Member\"==\"Column\") gs.info(\"Team_Member._query(): \"+ \"role \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Team_Member._query(): \" + \"role[role] resuled in undefined: \" + JSON.stringify(this.role()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('role') >= 0) {\n\t\t\t\t/* gs.info(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('role');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('role');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('role', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Team_Member._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Team_Member()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Team_Member._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_team_member', ['*'])['x_78611_platform_0_team_member']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Team_Member._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Team_Member._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Team_Member()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Team_Member()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Team_Member._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Team_Member._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Team_Member._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_team_member');\n\t\t\t/*gs.info(\"Team_Member._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_team_member', ['*'])['x_78611_platform_0_team_member']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Team_Member._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Team_Member._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/************* Team_Member.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Team_Member.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team_Member.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team_Member.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Team_Member.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Team_Member.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team_Member.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team_Member.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_team_member');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_team_member', ['*'])['x_78611_platform_0_team_member'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Team_Member.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Team_Member.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team_Member.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team_Member.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Board_Member","api_name":"x_78611_platform_0.shs_arbfw_Board_Member","name":"shs_arbfw_Board_Member","description":"{\n                Id: '8be0996b1cf438be0996b1cf438be099',\n                name: 'x_78611_platform_0_board_member',\n                label: 'Board Member',\n                remark: '',\n                rank: 3,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'start', label: 'start', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'end', label: 'end', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'board', label: 'board', remark: '', type: 'reference', reference: '32f96d205f95c32f96d205f95c32f96d'},\n    \n                    {code: 'member', label: 'member', remark: '', type: 'reference', reference: '9c07873ef8fb809c07873ef8fb809c07'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Board',\n    \n                    'x_78611_platform_0.shs_arbfw_User',\n    \n                ],\n                referencing: [\n    \n                ],\n            }","script":"class shs_arbfw_Board_Member extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Board_Member\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Board_Member.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Board_Member.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Board_Member.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Board_Member.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Board_Member.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Board_Member.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Board_Member.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Board_Member.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Board_Member.start GETTERS AND SETTERS **********************/\n\tstart(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Board_Member.start(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._start = v;\n\t\t\tthis._start_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._start;\n\t\t}\n\t}\n\n\t/************* Board_Member.end GETTERS AND SETTERS **********************/\n\tend(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Board_Member.end(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._end = v;\n\t\t\tthis._end_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._end;\n\t\t}\n\t}\n\n\t/************* Board_Member.board GETTERS AND SETTERS **********************/\n\tboard(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._board = v;\n\t\t\tthis._board_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board;\n\t\t}\n\t}\n\n\t/************* Board_Member.member GETTERS AND SETTERS **********************/\n\tmember(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._member = v;\n\t\t\tthis._member_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._start) ret += '^' + sPath + 'start' + (this._start_coop || '=') + this.start();\n\n\t\tif (this._end) ret += '^' + sPath + 'end' + (this._end_coop || '=') + this.end();\n\n\t\tif (this._board) ret += /*(this._board_coop || '=') + */ this.board()._toEQuery(sPath + 'board.');\n\n\t\tif (this._member) ret += /*(this._member_coop || '=') + */ this.member()._toEQuery(sPath + 'member.');\n\n\t\tgs.info(\"Board_Member._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Board_Member._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Board_Member._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Board_Member()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Board_Member._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Board_Member\" != 'ecc_queue' && obj.source == \"Board_Member\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Board_Member()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tstart: obj.getValue(\"start\"),\n\n\t\t\t\t\t\tend: obj.getValue(\"end\"),\n\n\t\t\t\t\t\tboard: obj.getValue(\"board\"),\n\n\t\t\t\t\t\tmember: obj.getValue(\"member\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Board_Member._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Board_Member._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Board_Member()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Board_Member._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.start) !== 'undefined') {\n\n\t\t\t\t\t\tthis.start(obj.start);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.end) !== 'undefined') {\n\n\t\t\t\t\t\tthis.end(obj.end);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.board) !== 'undefined') {\n\n\t\t\t\t\t\tthis.board(new shs_arbfw_Board()._fromDocument(obj.board));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.member) !== 'undefined') {\n\n\t\t\t\t\t\tthis.member(new shs_arbfw_User()._fromDocument(obj.member));\n\t\t\t\t\t}\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Board_Member\"){\n\t\t\t\t\tgs.info(\"Board_Member._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board_Member._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board_Member._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Board_Member._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Board_Member._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._start) !== 'undefined') {\n\t\t\tret.start = this.start();\n\n\t\t\tif (ret.start && typeof(ret.start.toISOString) === 'function') ret.start = ret.start.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._end) !== 'undefined') {\n\t\t\tret.end = this.end();\n\n\t\t\tif (ret.end && typeof(ret.end.toISOString) === 'function') ret.end = ret.end.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._board) !== 'undefined') {\n\t\t\tret.board = this.board();\n\n\t\t\tif (ret.board) {\n\t\t\t\tret.board = ret.board._toDocument();\n\t\t\t\tif (typeof(ret.board) === 'object' && !Object.keys(ret.board).length) ret.board = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._member) !== 'undefined') {\n\t\t\tret.member = this.member();\n\n\t\t\tif (ret.member) {\n\t\t\t\tret.member = ret.member._toDocument();\n\t\t\t\tif (typeof(ret.member) === 'object' && !Object.keys(ret.member).length) ret.member = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Board_Member();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"start\") >= 0 && typeof(this.start()) !== 'undefined') ret.start(this.start());\n\n\t\t\tif (keys.indexOf(\"end\") >= 0 && typeof(this.end()) !== 'undefined') ret.end(this.end());\n\n\t\t\tif (keys.indexOf(\"board\") >= 0 && typeof(this.board()) !== 'undefined') ret.board(this.board()._unique());\n\n\t\t\tif (keys.indexOf(\"member\") >= 0 && typeof(this.member()) !== 'undefined') ret.member(this.member()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_board_member', ['*'])['x_78611_platform_0_board_member']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_board_member');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._start) !== 'undefined') {\n\t\t\tlet coop = this._start_coop || '=';\n\n\t\t\tlet v = this.start();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('start') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('start');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('start');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('start', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._end) !== 'undefined') {\n\t\t\tlet coop = this._end_coop || '=';\n\n\t\t\tlet v = this.end();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('end') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('end');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('end');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('end', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._board) !== 'undefined') {\n\t\t\tlet coop = this._board_coop || '=';\n\n\t\t\tlet v = this.board();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Board Member\"==\"Column\") gs.info(\"Board_Member._query(): \"+ \"board \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Board_Member._query(): \" + \"board[board] resuled in undefined: \" + JSON.stringify(this.board()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('board') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('board');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('board');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('board', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._member) !== 'undefined') {\n\t\t\tlet coop = this._member_coop || '=';\n\n\t\t\tlet v = this.member();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Board Member\"==\"Column\") gs.info(\"Board_Member._query(): \"+ \"member \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Board_Member._query(): \" + \"member[member] resuled in undefined: \" + JSON.stringify(this.member()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('member') >= 0) {\n\t\t\t\t/* gs.info(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('member');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('member');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('member', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Board_Member._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Board_Member()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Board_Member._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_board_member', ['*'])['x_78611_platform_0_board_member']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Board_Member._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Board_Member._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Board_Member()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Board_Member()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Board_Member._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Board_Member._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Board_Member._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_board_member');\n\t\t\t/*gs.info(\"Board_Member._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_board_member', ['*'])['x_78611_platform_0_board_member']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Board_Member._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Board_Member._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/************* Board_Member.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Board_Member.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board_Member.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board_Member.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Board_Member.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Board_Member.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board_Member.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board_Member.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_board_member');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_board_member', ['*'])['x_78611_platform_0_board_member'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Board_Member.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Board_Member.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board_Member.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board_Member.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Capability","api_name":"x_78611_platform_0.shs_arbfw_Capability","name":"shs_arbfw_Capability","description":"{\n                Id: '198060700c6ff2198060700c6ff21980',\n                name: 'x_78611_platform_0_capability',\n                label: 'Capability',\n                remark: '',\n                rank: 3,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'module', label: 'module', remark: '', type: 'reference', reference: '54bfe1f06283f54bfe1f06283f54bfe1'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Module',\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Capability extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Capability\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Capability.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Capability.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Capability.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Capability.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Capability.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Capability.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Capability.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Capability.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Capability.module GETTERS AND SETTERS **********************/\n\tmodule(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._module = v;\n\t\t\tthis._module_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._module;\n\t\t}\n\t}\n\n\t/************* Capability.capability_Requirements GETTERS AND SETTERS **********************/\n\tcapability_Requirements(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._capability_Requirements = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._capability_Requirements_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._capability_Requirements;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._module) ret += /*(this._module_coop || '=') + */ this.module()._toEQuery(sPath + 'module.');\n\n\t\t(this.capability_Requirements() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYRequirement.capability,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Capability._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Capability._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Capability._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Capability()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Capability._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Capability\" != 'ecc_queue' && obj.source == \"Capability\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Capability()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tmodule: obj.getValue(\"module\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Capability._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Capability._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Capability()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Capability._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.module) !== 'undefined') {\n\n\t\t\t\t\t\tthis.module(new shs_arbfw_Module()._fromDocument(obj.module));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.capability_Requirements) !== 'undefined') this.capability_Requirements(new shs_arbfw_Requirement()._fromDocument(obj.capability_Requirements));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Capability\"){\n\t\t\t\t\tgs.info(\"Capability._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Capability._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Capability._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Capability._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Capability._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._module) !== 'undefined') {\n\t\t\tret.module = this.module();\n\n\t\t\tif (ret.module) {\n\t\t\t\tret.module = ret.module._toDocument();\n\t\t\t\tif (typeof(ret.module) === 'object' && !Object.keys(ret.module).length) ret.module = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.capability_Requirements()) !== 'undefined') ret.capability_Requirements = this.capability_Requirements().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Capability();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"module\") >= 0 && typeof(this.module()) !== 'undefined') ret.module(this.module()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_capability', ['*'])['x_78611_platform_0_capability']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_capability');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._module) !== 'undefined') {\n\t\t\tlet coop = this._module_coop || '=';\n\n\t\t\tlet v = this.module();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Capability\"==\"Column\") gs.info(\"Capability._query(): \"+ \"module \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Capability._query(): \" + \"module[module] resuled in undefined: \" + JSON.stringify(this.module()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('module') >= 0) {\n\t\t\t\t/* gs.info(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('module');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('module');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('module', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Capability._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Capability()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Capability._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_capability', ['*'])['x_78611_platform_0_capability']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Capability._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Capability._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Capability()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Capability()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Capability._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Capability._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Capability._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_capability');\n\t\t\t/*gs.info(\"Capability._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_capability', ['*'])['x_78611_platform_0_capability']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Capability._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Capability._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.capability_Requirements)) this.capability_Requirements(obj.capability_Requirements.map(function(ta) {\n\t\t\treturn new shs_arbfw_Requirement()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Capability.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Capability.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Capability.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Capability.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Capability.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Capability.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Capability.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Capability.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_capability');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_capability', ['*'])['x_78611_platform_0_capability'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Capability.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Capability.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Capability.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Capability.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Project","api_name":"x_78611_platform_0.shs_arbfw_Project","name":"shs_arbfw_Project","description":"{\n                Id: '17184adc81722017184adc8172201718',\n                name: 'x_78611_platform_0_project',\n                label: 'Project',\n                remark: '',\n                rank: 3,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'team', label: 'team', remark: '', type: 'reference', reference: 'f64f7221ec03a0f64f7221ec03a0f64f'},\n    \n                    {code: 'budget', label: 'budget', remark: '', type: 'reference', reference: 'b79a1e3a6d1768b79a1e3a6d1768b79a'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Team',\n    \n                    'x_78611_platform_0.shs_arbfw_Budget',\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Project extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Project\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Project.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Project.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Project.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Project.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Project.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Project.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Project.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Project.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Project.team GETTERS AND SETTERS **********************/\n\tteam(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._team = v;\n\t\t\tthis._team_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team;\n\t\t}\n\t}\n\n\t/************* Project.budget GETTERS AND SETTERS **********************/\n\tbudget(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._budget = v;\n\t\t\tthis._budget_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._budget;\n\t\t}\n\t}\n\n\t/************* Project.project_Requirements GETTERS AND SETTERS **********************/\n\tproject_Requirements(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._project_Requirements = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._project_Requirements_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project_Requirements;\n\t\t}\n\t}\n\n\t/************* Project.project_Meetings GETTERS AND SETTERS **********************/\n\tproject_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._project_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._project_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project_Meetings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._team) ret += /*(this._team_coop || '=') + */ this.team()._toEQuery(sPath + 'team.');\n\n\t\tif (this._budget) ret += /*(this._budget_coop || '=') + */ this.budget()._toEQuery(sPath + 'budget.');\n\n\t\t(this.project_Requirements() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYRequirement.project,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.project_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.project,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Project._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Project._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tcase \"actualCost\": {\n\t\t\t\treturn this.actualCost(payload[\"tillDate\"], );\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Project._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Project()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Project._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Project\" != 'ecc_queue' && obj.source == \"Project\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Project()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tteam: obj.getValue(\"team\"),\n\n\t\t\t\t\t\tbudget: obj.getValue(\"budget\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Project._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Project._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Project()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Project._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.team) !== 'undefined') {\n\n\t\t\t\t\t\tthis.team(new shs_arbfw_Team()._fromDocument(obj.team));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.budget) !== 'undefined') {\n\n\t\t\t\t\t\tthis.budget(new shs_arbfw_Budget()._fromDocument(obj.budget));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.project_Requirements) !== 'undefined') this.project_Requirements(new shs_arbfw_Requirement()._fromDocument(obj.project_Requirements));\n\n\t\t\t\t\tif (typeof(obj.project_Meetings) !== 'undefined') this.project_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.project_Meetings));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Project\"){\n\t\t\t\t\tgs.info(\"Project._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Project._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Project._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Project._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Project._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._team) !== 'undefined') {\n\t\t\tret.team = this.team();\n\n\t\t\tif (ret.team) {\n\t\t\t\tret.team = ret.team._toDocument();\n\t\t\t\tif (typeof(ret.team) === 'object' && !Object.keys(ret.team).length) ret.team = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this._budget) !== 'undefined') {\n\t\t\tret.budget = this.budget();\n\n\t\t\tif (ret.budget) {\n\t\t\t\tret.budget = ret.budget._toDocument();\n\t\t\t\tif (typeof(ret.budget) === 'object' && !Object.keys(ret.budget).length) ret.budget = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.project_Requirements()) !== 'undefined') ret.project_Requirements = this.project_Requirements().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.project_Meetings()) !== 'undefined') ret.project_Meetings = this.project_Meetings().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Project();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"team\") >= 0 && typeof(this.team()) !== 'undefined') ret.team(this.team()._unique());\n\n\t\t\tif (keys.indexOf(\"budget\") >= 0 && typeof(this.budget()) !== 'undefined') ret.budget(this.budget()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_project', ['*'])['x_78611_platform_0_project']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_project');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._team) !== 'undefined') {\n\t\t\tlet coop = this._team_coop || '=';\n\n\t\t\tlet v = this.team();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Project\"==\"Column\") gs.info(\"Project._query(): \"+ \"team \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Project._query(): \" + \"team[team] resuled in undefined: \" + JSON.stringify(this.team()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('team') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('team');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('team');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('team', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._budget) !== 'undefined') {\n\t\t\tlet coop = this._budget_coop || '=';\n\n\t\t\tlet v = this.budget();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Project\"==\"Column\") gs.info(\"Project._query(): \"+ \"budget \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Project._query(): \" + \"budget[budget] resuled in undefined: \" + JSON.stringify(this.budget()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('budget') >= 0) {\n\t\t\t\t/* gs.info(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('budget');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('budget');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('budget', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Project._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Project()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Project._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_project', ['*'])['x_78611_platform_0_project']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Project._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Project._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Project()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Project()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Project._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Project._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Project._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_project');\n\t\t\t/*gs.info(\"Project._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_project', ['*'])['x_78611_platform_0_project']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Project._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Project._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.project_Requirements)) this.project_Requirements(obj.project_Requirements.map(function(ta) {\n\t\t\treturn new shs_arbfw_Requirement()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.project_Meetings)) this.project_Meetings(obj.project_Meetings.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Project.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Project.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Project.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Project.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Project.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Project.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Project.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Project.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_project');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_project', ['*'])['x_78611_platform_0_project'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Project.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Project.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Project.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Project.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Project.actualCost() **********************/\n\tactualCost(__event, tillDate) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (typeof(evJSON.tillDate) !== 'undefined') {\n\t\t\t\ttillDate = evJSON.tillDate;\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Project.actualCost(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Project.actualCost(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = evJSON;\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Project.actualCost(): \" + \"executing locally \");\n\n\t\t\tif (typeof(this.getParameter) === 'function' && typeof(tillDate) === 'undefined' && typeof(this.getParameter('tillDate')) !== 'undefined') {\n\t\t\t\ttillDate = this.getParameter('tillDate');\n\t\t\t}\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(str(answer));\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Decision_Option","api_name":"x_78611_platform_0.shs_arbfw_Decision_Option","name":"shs_arbfw_Decision_Option","description":"{\n                Id: 'a8cb89619f1340a8cb89619f1340a8cb',\n                name: 'x_78611_platform_0_decision_option',\n                label: 'Decision Option',\n                remark: '',\n                rank: 2,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'decision', label: 'decision', remark: '', type: 'reference', reference: 'b24a0de45e2328b24a0de45e2328b24a'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Decision',\n    \n                ],\n                referencing: [\n    \n                ],\n            }","script":"class shs_arbfw_Decision_Option extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Decision_Option\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Decision_Option.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Decision_Option.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Decision_Option.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Decision_Option.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Decision_Option.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Decision_Option.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Decision_Option.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Decision_Option.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Decision_Option.decision GETTERS AND SETTERS **********************/\n\tdecision(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._decision = v;\n\t\t\tthis._decision_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._decision) ret += /*(this._decision_coop || '=') + */ this.decision()._toEQuery(sPath + 'decision.');\n\n\t\tgs.info(\"Decision_Option._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Decision_Option._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Decision_Option._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Decision_Option()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Decision_Option._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Decision_Option\" != 'ecc_queue' && obj.source == \"Decision_Option\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Decision_Option()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tdecision: obj.getValue(\"decision\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Decision_Option._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Decision_Option._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Decision_Option()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Decision_Option._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.decision) !== 'undefined') {\n\n\t\t\t\t\t\tthis.decision(new shs_arbfw_Decision()._fromDocument(obj.decision));\n\t\t\t\t\t}\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Decision_Option\"){\n\t\t\t\t\tgs.info(\"Decision_Option._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision_Option._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision_Option._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Decision_Option._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Decision_Option._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._decision) !== 'undefined') {\n\t\t\tret.decision = this.decision();\n\n\t\t\tif (ret.decision) {\n\t\t\t\tret.decision = ret.decision._toDocument();\n\t\t\t\tif (typeof(ret.decision) === 'object' && !Object.keys(ret.decision).length) ret.decision = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Decision_Option();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (typeof(this.decision()) !== 'undefined') ret.decision(this.decision()._unique());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"decision\") >= 0 && typeof(this.decision()) !== 'undefined') ret.decision(this.decision()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_decision_option', ['*'])['x_78611_platform_0_decision_option']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_decision_option');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._decision) !== 'undefined') {\n\t\t\tlet coop = this._decision_coop || '=';\n\n\t\t\tlet v = this.decision();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Decision Option\"==\"Column\") gs.info(\"Decision_Option._query(): \"+ \"decision \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Decision_Option._query(): \" + \"decision[decision] resuled in undefined: \" + JSON.stringify(this.decision()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('decision') >= 0) {\n\t\t\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('decision');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('decision');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('decision', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Decision_Option._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Decision_Option()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Decision_Option._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_decision_option', ['*'])['x_78611_platform_0_decision_option']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Decision_Option._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Decision_Option._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Decision_Option()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Decision_Option()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Decision_Option._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Decision_Option._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Decision_Option._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_decision_option');\n\t\t\t/*gs.info(\"Decision_Option._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_decision_option', ['*'])['x_78611_platform_0_decision_option']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Decision_Option._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Decision_Option._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/************* Decision_Option.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Decision_Option.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision_Option.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision_Option.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Decision_Option.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Decision_Option.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision_Option.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision_Option.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_decision_option');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_decision_option', ['*'])['x_78611_platform_0_decision_option'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Decision_Option.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Decision_Option.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision_Option.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision_Option.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Meeting_Series","api_name":"x_78611_platform_0.shs_arbfw_Meeting_Series","name":"shs_arbfw_Meeting_Series","description":"{\n                Id: 'a414d4adb66620a414d4adb66620a414',\n                name: 'x_78611_platform_0_meeting_series',\n                label: 'Meeting Series',\n                remark: '',\n                rank: 2,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'frequency', label: 'frequency', remark: '', type: 'reference', reference: '12ad27fdb92bca12ad27fdb92bca12ad'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Frequency',\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Meeting_Series extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting_Series\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Meeting_Series.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Meeting_Series.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.frequency GETTERS AND SETTERS **********************/\n\tfrequency(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._frequency = v;\n\t\t\tthis._frequency_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._frequency;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.series_Meetings GETTERS AND SETTERS **********************/\n\tseries_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._series_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._series_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._series_Meetings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._frequency) ret += /*(this._frequency_coop || '=') + */ this.frequency()._toEQuery(sPath + 'frequency.');\n\n\t\t(this.series_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.series,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Meeting_Series._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Meeting_Series._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Meeting_Series._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting_Series()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Meeting_Series._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting_Series\" != 'ecc_queue' && obj.source == \"Meeting_Series\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Meeting_Series()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tfrequency: obj.getValue(\"frequency\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Meeting_Series._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Meeting_Series._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Meeting_Series()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Meeting_Series._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.frequency) !== 'undefined') {\n\n\t\t\t\t\t\tthis.frequency(new shs_arbfw_Frequency()._fromDocument(obj.frequency));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.series_Meetings) !== 'undefined') this.series_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.series_Meetings));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Meeting_Series\"){\n\t\t\t\t\tgs.info(\"Meeting_Series._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Series._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Series._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Meeting_Series._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Meeting_Series._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._frequency) !== 'undefined') {\n\t\t\tret.frequency = this.frequency();\n\n\t\t\tif (ret.frequency) {\n\t\t\t\tret.frequency = ret.frequency._toDocument();\n\t\t\t\tif (typeof(ret.frequency) === 'object' && !Object.keys(ret.frequency).length) ret.frequency = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.series_Meetings()) !== 'undefined') ret.series_Meetings = this.series_Meetings().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Meeting_Series();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"frequency\") >= 0 && typeof(this.frequency()) !== 'undefined') ret.frequency(this.frequency()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_meeting_series', ['*'])['x_78611_platform_0_meeting_series']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_meeting_series');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._frequency) !== 'undefined') {\n\t\t\tlet coop = this._frequency_coop || '=';\n\n\t\t\tlet v = this.frequency();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Meeting Series\"==\"Column\") gs.info(\"Meeting_Series._query(): \"+ \"frequency \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Meeting_Series._query(): \" + \"frequency[frequency] resuled in undefined: \" + JSON.stringify(this.frequency()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('frequency') >= 0) {\n\t\t\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('frequency');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('frequency');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('frequency', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Meeting_Series._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Meeting_Series()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Meeting_Series._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_meeting_series', ['*'])['x_78611_platform_0_meeting_series']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Meeting_Series._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Meeting_Series._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Meeting_Series()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Meeting_Series()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Meeting_Series._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Meeting_Series._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Meeting_Series._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_meeting_series');\n\t\t\t/*gs.info(\"Meeting_Series._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_meeting_series', ['*'])['x_78611_platform_0_meeting_series']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Meeting_Series._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Meeting_Series._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.series_Meetings)) this.series_Meetings(obj.series_Meetings.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Meeting_Series.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Series.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Series.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Series.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting_Series.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Series.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Series.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Series.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_meeting_series');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_meeting_series', ['*'])['x_78611_platform_0_meeting_series'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Meeting_Series.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Meeting_Series.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Meeting_Series.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Meeting_Series.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Module","api_name":"x_78611_platform_0.shs_arbfw_Module","name":"shs_arbfw_Module","description":"{\n                Id: '54bfe1f06283f54bfe1f06283f54bfe1',\n                name: 'x_78611_platform_0_module',\n                label: 'Module',\n                remark: '',\n                rank: 2,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'platform', label: 'platform', remark: '', type: 'reference', reference: '11179d1cd48d8c11179d1cd48d8c1117'},\n    \n                ],\n                references: [\n    \n                    'x_78611_platform_0.shs_arbfw_Platform',\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Module extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Module\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Module.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Module.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Module.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Module.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Module.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Module.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Module.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Module.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Module.platform GETTERS AND SETTERS **********************/\n\tplatform(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._platform = v;\n\t\t\tthis._platform_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._platform;\n\t\t}\n\t}\n\n\t/************* Module.module_Capabilitys GETTERS AND SETTERS **********************/\n\tmodule_Capabilitys(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._module_Capabilitys = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._module_Capabilitys_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._module_Capabilitys;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._platform) ret += /*(this._platform_coop || '=') + */ this.platform()._toEQuery(sPath + 'platform.');\n\n\t\t(this.module_Capabilitys() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYCapability.module,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Module._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Module._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Module._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Module()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Module._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Module\" != 'ecc_queue' && obj.source == \"Module\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Module()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tplatform: obj.getValue(\"platform\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Module._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Module._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Module()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Module._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.platform) !== 'undefined') {\n\n\t\t\t\t\t\tthis.platform(new shs_arbfw_Platform()._fromDocument(obj.platform));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.module_Capabilitys) !== 'undefined') this.module_Capabilitys(new shs_arbfw_Capability()._fromDocument(obj.module_Capabilitys));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Module\"){\n\t\t\t\t\tgs.info(\"Module._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Module._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Module._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Module._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Module._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._platform) !== 'undefined') {\n\t\t\tret.platform = this.platform();\n\n\t\t\tif (ret.platform) {\n\t\t\t\tret.platform = ret.platform._toDocument();\n\t\t\t\tif (typeof(ret.platform) === 'object' && !Object.keys(ret.platform).length) ret.platform = null;\n\t\t\t}\n\n\t\t}\n\n\t\tif (typeof(this.module_Capabilitys()) !== 'undefined') ret.module_Capabilitys = this.module_Capabilitys().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Module();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"platform\") >= 0 && typeof(this.platform()) !== 'undefined') ret.platform(this.platform()._unique());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_module', ['*'])['x_78611_platform_0_module']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_module');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._platform) !== 'undefined') {\n\t\t\tlet coop = this._platform_coop || '=';\n\n\t\t\tlet v = this.platform();\n\n\t\t\tif (v) {\n\t\t\t\tv = v.findAll();\n\t\t\t\tif (v.length == 1) {\n\t\t\t\t\t/*if(\"Module\"==\"Column\") gs.info(\"Module._query(): \"+ \"platform \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(v[0]))));\n\t\t\t\t} else if (!v.length) {\n\t\t\t\t\tv = null;\n\t\t\t\t} else {\n\t\t\t\t\tcoop = 'IN';\n\t\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t})(r))));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(v) === 'undefined') {\n\t\t\t\tv = -1;\n\t\t\t\tgs.info(\"Module._query(): \" + \"platform[platform] resuled in undefined: \" + JSON.stringify(this.platform()));\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('platform') >= 0) {\n\t\t\t\t/* gs.info(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('platform');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('platform');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('platform', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Module._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Module()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Module._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_module', ['*'])['x_78611_platform_0_module']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Module._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Module._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Module()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Module()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Module._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Module._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Module._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_module');\n\t\t\t/*gs.info(\"Module._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_module', ['*'])['x_78611_platform_0_module']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Module._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Module._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.module_Capabilitys)) this.module_Capabilitys(obj.module_Capabilitys.map(function(ta) {\n\t\t\treturn new shs_arbfw_Capability()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Module.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Module.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Module.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Module.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Module.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Module.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Module.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Module.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_module');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_module', ['*'])['x_78611_platform_0_module'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Module.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Module.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Module.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Module.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","__consumer":"\n    (function(s){\n\t//gs.info(s.api_name + ': ' + s.sys_id);\n\n\tvar sgr = new GlideRecord('sys_script_include');\n\tsgr.addQuery('api_name', '=', s.api_name);\n\tsgr.query();\n\tif (!sgr.next()) sgr = new GlideRecord(sgr.getTableName());\n\tObject.keys(s).filter(function(k) {\n\t\treturn k.indexOf('__') < 0;\n\t}).forEach(function(k) {\n\t\tsgr.setValue(k, s[k]);\n\t});\n\tsgr.update();\n\t})\n    ","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Platform","api_name":"x_78611_platform_0.shs_arbfw_Platform","name":"shs_arbfw_Platform","description":"{\n                Id: '11179d1cd48d8c11179d1cd48d8c1117',\n                name: 'x_78611_platform_0_platform',\n                label: 'Platform',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Platform extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Platform\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Platform.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Platform.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Platform.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Platform.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Platform.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Platform.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Platform.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Platform.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Platform.platform_Modules GETTERS AND SETTERS **********************/\n\tplatform_Modules(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._platform_Modules = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._platform_Modules_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._platform_Modules;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.platform_Modules() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYModule.platform,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Platform._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Platform._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tcase \"init\": {\n\t\t\t\treturn this.init();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Platform._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Platform()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Platform._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Platform\" != 'ecc_queue' && obj.source == \"Platform\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Platform()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Platform._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Platform._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Platform()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Platform._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.platform_Modules) !== 'undefined') this.platform_Modules(new shs_arbfw_Module()._fromDocument(obj.platform_Modules));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Platform\"){\n\t\t\t\t\tgs.info(\"Platform._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Platform._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Platform._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Platform._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Platform._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\tif (!c) c = this.__type;\n\t\tif (c.indexOf('shs_arbfw_') != 0) c = ({\n\t\t\tPlatform: \"shs_arbfw_Platform\",\n\t\t\tUser: \"shs_arbfw_User\",\n\t\t\tRequirement: \"shs_arbfw_Requirement\",\n\t\t\tEffort_Estimate: \"shs_arbfw_Effort_Estimate\",\n\t\t\tEffort: \"shs_arbfw_Effort\",\n\t\t\tBudget: \"shs_arbfw_Budget\",\n\t\t\tAgenda_Item: \"shs_arbfw_Agenda_Item\",\n\t\t\tMeeting_Agenda: \"shs_arbfw_Meeting_Agenda\",\n\t\t\tDecision_Option: \"shs_arbfw_Decision_Option\",\n\t\t\tDecision: \"shs_arbfw_Decision\",\n\t\t\tMeeting_Minute: \"shs_arbfw_Meeting_Minute\",\n\t\t\tMeeting_Series: \"shs_arbfw_Meeting_Series\",\n\t\t\tMeeting: \"shs_arbfw_Meeting\",\n\t\t\tBoard: \"shs_arbfw_Board\",\n\t\t\tBoard_Member: \"shs_arbfw_Board_Member\",\n\t\t\tFrequency: \"shs_arbfw_Frequency\",\n\t\t\tModule: \"shs_arbfw_Module\",\n\t\t\tCapability: \"shs_arbfw_Capability\",\n\t\t\tTeam: \"shs_arbfw_Team\",\n\t\t\tProject: \"shs_arbfw_Project\",\n\t\t\tTeam_Member: \"shs_arbfw_Team_Member\",\n\t\t\tRole: \"shs_arbfw_Role\",\n\t\t})[c];\n\t\treturn new(gs.getCurrentScopeName() == 'rhino.global' ? global : x_78611_platform_0)[c]();\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.platform_Modules()) !== 'undefined') ret.platform_Modules = this.platform_Modules().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Platform();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_platform', ['*'])['x_78611_platform_0_platform']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_platform');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Platform._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Platform()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Platform._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_platform', ['*'])['x_78611_platform_0_platform']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Platform._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Platform._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Platform()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Platform()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Platform._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Platform._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Platform._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_platform');\n\t\t\t/*gs.info(\"Platform._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_platform', ['*'])['x_78611_platform_0_platform']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Platform._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Platform._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.platform_Modules)) this.platform_Modules(obj.platform_Modules.map(function(ta) {\n\t\t\treturn new shs_arbfw_Module()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Platform.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Platform.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Platform.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Platform.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Platform.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Platform.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Platform.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Platform.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_platform');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_platform', ['*'])['x_78611_platform_0_platform'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Platform.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Platform.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Platform.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Platform.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Platform.init() **********************/\n\tinit(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Platform.init(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Platform.init(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = evJSON;\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Platform.init(): \" + \"executing locally \");\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(str(answer));\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_User","api_name":"x_78611_platform_0.shs_arbfw_User","name":"shs_arbfw_User","description":"{\n                Id: '9c07873ef8fb809c07873ef8fb809c07',\n                name: 'sys_user',\n                label: 'User',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'user_name', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_User extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_User\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* User.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* User.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* User.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* User.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* User.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"User.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* User.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* User.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* User.organizer_Meetings GETTERS AND SETTERS **********************/\n\torganizer_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._organizer_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._organizer_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._organizer_Meetings;\n\t\t}\n\t}\n\n\t/************* User.moderator_Meetings GETTERS AND SETTERS **********************/\n\tmoderator_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._moderator_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._moderator_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._moderator_Meetings;\n\t\t}\n\t}\n\n\t/************* User.member_Board_Members GETTERS AND SETTERS **********************/\n\tmember_Board_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._member_Board_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._member_Board_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member_Board_Members;\n\t\t}\n\t}\n\n\t/************* User.member_Team_Members GETTERS AND SETTERS **********************/\n\tmember_Team_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._member_Team_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._member_Team_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member_Team_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'user_name' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.organizer_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.organizer,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.moderator_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.moderator,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.member_Board_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYBoard_Member.member,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.member_Team_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTeam_Member.member,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"User._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"User._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"User._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_User()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"User._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"sys_user\" != 'ecc_queue' && obj.source == \"User\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_User()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tuser_name: obj.getValue(\"user_name\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"User._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"User._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_User()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"User._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.user_name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.user_name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.organizer_Meetings) !== 'undefined') this.organizer_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.organizer_Meetings));\n\n\t\t\t\t\tif (typeof(obj.moderator_Meetings) !== 'undefined') this.moderator_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.moderator_Meetings));\n\n\t\t\t\t\tif (typeof(obj.member_Board_Members) !== 'undefined') this.member_Board_Members(new shs_arbfw_Board_Member()._fromDocument(obj.member_Board_Members));\n\n\t\t\t\t\tif (typeof(obj.member_Team_Members) !== 'undefined') this.member_Team_Members(new shs_arbfw_Team_Member()._fromDocument(obj.member_Team_Members));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"User\"){\n\t\t\t\t\tgs.info(\"User._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"User._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"User._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"User._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"User._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.user_name = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.organizer_Meetings()) !== 'undefined') ret.organizer_Meetings = this.organizer_Meetings().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.moderator_Meetings()) !== 'undefined') ret.moderator_Meetings = this.moderator_Meetings().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.member_Board_Members()) !== 'undefined') ret.member_Board_Members = this.member_Board_Members().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.member_Team_Members()) !== 'undefined') ret.member_Team_Members = this.member_Team_Members().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_User();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"user_name\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('sys_user', ['*'])['sys_user']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_user');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('user_name') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('user_name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('user_name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('user_name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"User._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_User()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"User._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('sys_user', ['*'])['sys_user']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"User._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"User._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_User()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_User()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"User._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"User._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"User._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_user');\n\t\t\t/*gs.info(\"User._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_user', ['*'])['sys_user']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"User._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"User._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.organizer_Meetings)) this.organizer_Meetings(obj.organizer_Meetings.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.moderator_Meetings)) this.moderator_Meetings(obj.moderator_Meetings.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.member_Board_Members)) this.member_Board_Members(obj.member_Board_Members.map(function(ta) {\n\t\t\treturn new shs_arbfw_Board_Member()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.member_Team_Members)) this.member_Team_Members(obj.member_Team_Members.map(function(ta) {\n\t\t\treturn new shs_arbfw_Team_Member()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* User.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"User.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"User.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"User.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* User.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"User.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"User.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"User.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('sys_user');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_user', ['*'])['sys_user'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* User.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"User.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"User.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"User.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Effort","api_name":"x_78611_platform_0.shs_arbfw_Effort","name":"shs_arbfw_Effort","description":"{\n                Id: '2af73535a1fa92af73535a1fa92af735',\n                name: 'x_78611_platform_0_effort',\n                label: 'Effort',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Effort extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Effort\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Effort.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Effort.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Effort.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Effort.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Effort.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Effort.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Effort.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Effort.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Effort.effort_Effort_Estimates GETTERS AND SETTERS **********************/\n\teffort_Effort_Estimates(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._effort_Effort_Estimates = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._effort_Effort_Estimates_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._effort_Effort_Estimates;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.effort_Effort_Estimates() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYEffort_Estimate.effort,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Effort._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Effort._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Effort._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Effort()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Effort._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Effort\" != 'ecc_queue' && obj.source == \"Effort\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Effort()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Effort._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Effort._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Effort()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Effort._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.effort_Effort_Estimates) !== 'undefined') this.effort_Effort_Estimates(new shs_arbfw_Effort_Estimate()._fromDocument(obj.effort_Effort_Estimates));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Effort\"){\n\t\t\t\t\tgs.info(\"Effort._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Effort._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Effort._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.effort_Effort_Estimates()) !== 'undefined') ret.effort_Effort_Estimates = this.effort_Effort_Estimates().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Effort();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_effort', ['*'])['x_78611_platform_0_effort']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_effort');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Effort._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Effort()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Effort._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_effort', ['*'])['x_78611_platform_0_effort']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Effort._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Effort._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Effort()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Effort()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Effort._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Effort._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Effort._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_effort');\n\t\t\t/*gs.info(\"Effort._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_effort', ['*'])['x_78611_platform_0_effort']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Effort._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Effort._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.effort_Effort_Estimates)) this.effort_Effort_Estimates(obj.effort_Effort_Estimates.map(function(ta) {\n\t\t\treturn new shs_arbfw_Effort_Estimate()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Effort.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Effort.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Effort.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Effort.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_effort');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_effort', ['*'])['x_78611_platform_0_effort'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Effort.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Effort.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Effort.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Effort.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Budget","api_name":"x_78611_platform_0.shs_arbfw_Budget","name":"shs_arbfw_Budget","description":"{\n                Id: 'b79a1e3a6d1768b79a1e3a6d1768b79a',\n                name: 'x_78611_platform_0_budget',\n                label: 'Budget',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Budget extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Budget\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Budget.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Budget.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Budget.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Budget.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Budget.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Budget.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Budget.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Budget.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Budget.budget_Projects GETTERS AND SETTERS **********************/\n\tbudget_Projects(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._budget_Projects = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._budget_Projects_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._budget_Projects;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.budget_Projects() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYProject.budget,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Budget._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Budget._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Budget._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Budget()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Budget._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Budget\" != 'ecc_queue' && obj.source == \"Budget\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Budget()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Budget._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Budget._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Budget()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Budget._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.budget_Projects) !== 'undefined') this.budget_Projects(new shs_arbfw_Project()._fromDocument(obj.budget_Projects));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Budget\"){\n\t\t\t\t\tgs.info(\"Budget._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Budget._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Budget._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Budget._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Budget._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.budget_Projects()) !== 'undefined') ret.budget_Projects = this.budget_Projects().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Budget();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_budget', ['*'])['x_78611_platform_0_budget']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_budget');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Budget._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Budget()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Budget._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_budget', ['*'])['x_78611_platform_0_budget']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Budget._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Budget._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Budget()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Budget()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Budget._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Budget._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Budget._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_budget');\n\t\t\t/*gs.info(\"Budget._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_budget', ['*'])['x_78611_platform_0_budget']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Budget._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Budget._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.budget_Projects)) this.budget_Projects(obj.budget_Projects.map(function(ta) {\n\t\t\treturn new shs_arbfw_Project()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Budget.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Budget.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Budget.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Budget.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Budget.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Budget.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Budget.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Budget.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_budget');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_budget', ['*'])['x_78611_platform_0_budget'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Budget.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Budget.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Budget.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Budget.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Decision","api_name":"x_78611_platform_0.shs_arbfw_Decision","name":"shs_arbfw_Decision","description":"{\n                Id: 'b24a0de45e2328b24a0de45e2328b24a',\n                name: 'x_78611_platform_0_decision',\n                label: 'Decision',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Decision extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Decision\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Decision.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Decision.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Decision.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Decision.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Decision.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Decision.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Decision.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Decision.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Decision.decision_Decision_Options GETTERS AND SETTERS **********************/\n\tdecision_Decision_Options(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._decision_Decision_Options = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._decision_Decision_Options_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision_Decision_Options;\n\t\t}\n\t}\n\n\t/************* Decision.decision_Meetings GETTERS AND SETTERS **********************/\n\tdecision_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._decision_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._decision_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision_Meetings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.decision_Decision_Options() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYDecision_Option.decision,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.decision_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.decision,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Decision._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Decision._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Decision._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Decision()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Decision._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Decision\" != 'ecc_queue' && obj.source == \"Decision\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Decision()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Decision._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Decision._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Decision()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Decision._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.decision_Decision_Options) !== 'undefined') this.decision_Decision_Options(new shs_arbfw_Decision_Option()._fromDocument(obj.decision_Decision_Options));\n\n\t\t\t\t\tif (typeof(obj.decision_Meetings) !== 'undefined') this.decision_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.decision_Meetings));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Decision\"){\n\t\t\t\t\tgs.info(\"Decision._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Decision._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Decision._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.decision_Decision_Options()) !== 'undefined') ret.decision_Decision_Options = this.decision_Decision_Options().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.decision_Meetings()) !== 'undefined') ret.decision_Meetings = this.decision_Meetings().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Decision();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_decision', ['*'])['x_78611_platform_0_decision']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_decision');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Decision._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Decision()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Decision._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_decision', ['*'])['x_78611_platform_0_decision']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Decision._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Decision._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Decision()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Decision()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Decision._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Decision._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Decision._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_decision');\n\t\t\t/*gs.info(\"Decision._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_decision', ['*'])['x_78611_platform_0_decision']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Decision._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Decision._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.decision_Decision_Options)) this.decision_Decision_Options(obj.decision_Decision_Options.map(function(ta) {\n\t\t\treturn new shs_arbfw_Decision_Option()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.decision_Meetings)) this.decision_Meetings(obj.decision_Meetings.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Decision.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Decision.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Decision.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Decision.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_decision');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_decision', ['*'])['x_78611_platform_0_decision'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Decision.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Decision.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Decision.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Decision.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Board","api_name":"x_78611_platform_0.shs_arbfw_Board","name":"shs_arbfw_Board","description":"{\n                Id: '32f96d205f95c32f96d205f95c32f96d',\n                name: 'x_78611_platform_0_board',\n                label: 'Board',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Board extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Board\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Board.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Board.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Board.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Board.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Board.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Board.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Board.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Board.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Board.board_Meetings GETTERS AND SETTERS **********************/\n\tboard_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._board_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._board_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board_Meetings;\n\t\t}\n\t}\n\n\t/************* Board.board_Board_Members GETTERS AND SETTERS **********************/\n\tboard_Board_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._board_Board_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._board_Board_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board_Board_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.board_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.board,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.board_Board_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYBoard_Member.board,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Board._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Board._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Board._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Board()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Board._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Board\" != 'ecc_queue' && obj.source == \"Board\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Board()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Board._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Board._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Board()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Board._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.board_Meetings) !== 'undefined') this.board_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.board_Meetings));\n\n\t\t\t\t\tif (typeof(obj.board_Board_Members) !== 'undefined') this.board_Board_Members(new shs_arbfw_Board_Member()._fromDocument(obj.board_Board_Members));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Board\"){\n\t\t\t\t\tgs.info(\"Board._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Board._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Board._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.board_Meetings()) !== 'undefined') ret.board_Meetings = this.board_Meetings().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.board_Board_Members()) !== 'undefined') ret.board_Board_Members = this.board_Board_Members().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Board();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_board', ['*'])['x_78611_platform_0_board']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_board');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Board._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Board()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Board._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_board', ['*'])['x_78611_platform_0_board']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Board._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Board._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Board()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Board()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Board._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Board._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Board._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_board');\n\t\t\t/*gs.info(\"Board._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_board', ['*'])['x_78611_platform_0_board']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Board._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Board._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.board_Meetings)) this.board_Meetings(obj.board_Meetings.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.board_Board_Members)) this.board_Board_Members(obj.board_Board_Members.map(function(ta) {\n\t\t\treturn new shs_arbfw_Board_Member()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Board.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Board.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Board.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Board.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_board');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_board', ['*'])['x_78611_platform_0_board'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Board.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Board.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Board.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Board.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Frequency","api_name":"x_78611_platform_0.shs_arbfw_Frequency","name":"shs_arbfw_Frequency","description":"{\n                Id: '12ad27fdb92bca12ad27fdb92bca12ad',\n                name: 'x_78611_platform_0_frequency',\n                label: 'Frequency',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                    {code: 'daily', label: 'daily', remark: '', type: 'boolean'},\n    \n                    {code: 'weekly', label: 'weekly', remark: '', type: 'boolean'},\n    \n                    {code: 'monthly', label: 'monthly', remark: '', type: 'boolean'},\n    \n                    {code: 'quarterly', label: 'quarterly', remark: '', type: 'boolean'},\n    \n                    {code: 'days', label: 'days', remark: '', type: 'int'},\n    \n                    {code: 'monday', label: 'monday', remark: '', type: 'boolean'},\n    \n                    {code: 'tuesday', label: 'tuesday', remark: '', type: 'boolean'},\n    \n                    {code: 'wednesday', label: 'wednesday', remark: '', type: 'boolean'},\n    \n                    {code: 'thursday', label: 'thursday', remark: '', type: 'boolean'},\n    \n                    {code: 'friday', label: 'friday', remark: '', type: 'boolean'},\n    \n                    {code: 'saturday', label: 'saturday', remark: '', type: 'boolean'},\n    \n                    {code: 'sunday', label: 'sunday', remark: '', type: 'boolean'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n                ],\n            }","script":"class shs_arbfw_Frequency extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Frequency\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Frequency.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Frequency.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Frequency.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Frequency.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Frequency.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Frequency.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Frequency.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Frequency.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Frequency.daily GETTERS AND SETTERS **********************/\n\tdaily(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._daily = v;\n\t\t\tthis._daily_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._daily;\n\t\t}\n\t}\n\n\t/************* Frequency.weekly GETTERS AND SETTERS **********************/\n\tweekly(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._weekly = v;\n\t\t\tthis._weekly_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._weekly;\n\t\t}\n\t}\n\n\t/************* Frequency.monthly GETTERS AND SETTERS **********************/\n\tmonthly(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._monthly = v;\n\t\t\tthis._monthly_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._monthly;\n\t\t}\n\t}\n\n\t/************* Frequency.quarterly GETTERS AND SETTERS **********************/\n\tquarterly(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._quarterly = v;\n\t\t\tthis._quarterly_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._quarterly;\n\t\t}\n\t}\n\n\t/************* Frequency.days GETTERS AND SETTERS **********************/\n\tdays(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._days = v;\n\t\t\tthis._days_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._days;\n\t\t}\n\t}\n\n\t/************* Frequency.monday GETTERS AND SETTERS **********************/\n\tmonday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._monday = v;\n\t\t\tthis._monday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._monday;\n\t\t}\n\t}\n\n\t/************* Frequency.tuesday GETTERS AND SETTERS **********************/\n\ttuesday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._tuesday = v;\n\t\t\tthis._tuesday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._tuesday;\n\t\t}\n\t}\n\n\t/************* Frequency.wednesday GETTERS AND SETTERS **********************/\n\twednesday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._wednesday = v;\n\t\t\tthis._wednesday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._wednesday;\n\t\t}\n\t}\n\n\t/************* Frequency.thursday GETTERS AND SETTERS **********************/\n\tthursday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._thursday = v;\n\t\t\tthis._thursday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._thursday;\n\t\t}\n\t}\n\n\t/************* Frequency.friday GETTERS AND SETTERS **********************/\n\tfriday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._friday = v;\n\t\t\tthis._friday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._friday;\n\t\t}\n\t}\n\n\t/************* Frequency.saturday GETTERS AND SETTERS **********************/\n\tsaturday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._saturday = v;\n\t\t\tthis._saturday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._saturday;\n\t\t}\n\t}\n\n\t/************* Frequency.sunday GETTERS AND SETTERS **********************/\n\tsunday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._sunday = v;\n\t\t\tthis._sunday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._sunday;\n\t\t}\n\t}\n\n\t/************* Frequency.frequency_Meeting_Seriess GETTERS AND SETTERS **********************/\n\tfrequency_Meeting_Seriess(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._frequency_Meeting_Seriess = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._frequency_Meeting_Seriess_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._frequency_Meeting_Seriess;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._daily) ret += '^' + sPath + 'daily' + (this._daily_coop || '=') + this.daily();\n\n\t\tif (this._weekly) ret += '^' + sPath + 'weekly' + (this._weekly_coop || '=') + this.weekly();\n\n\t\tif (this._monthly) ret += '^' + sPath + 'monthly' + (this._monthly_coop || '=') + this.monthly();\n\n\t\tif (this._quarterly) ret += '^' + sPath + 'quarterly' + (this._quarterly_coop || '=') + this.quarterly();\n\n\t\tif (this._days) ret += '^' + sPath + 'days' + (this._days_coop || '=') + this.days();\n\n\t\tif (this._monday) ret += '^' + sPath + 'monday' + (this._monday_coop || '=') + this.monday();\n\n\t\tif (this._tuesday) ret += '^' + sPath + 'tuesday' + (this._tuesday_coop || '=') + this.tuesday();\n\n\t\tif (this._wednesday) ret += '^' + sPath + 'wednesday' + (this._wednesday_coop || '=') + this.wednesday();\n\n\t\tif (this._thursday) ret += '^' + sPath + 'thursday' + (this._thursday_coop || '=') + this.thursday();\n\n\t\tif (this._friday) ret += '^' + sPath + 'friday' + (this._friday_coop || '=') + this.friday();\n\n\t\tif (this._saturday) ret += '^' + sPath + 'saturday' + (this._saturday_coop || '=') + this.saturday();\n\n\t\tif (this._sunday) ret += '^' + sPath + 'sunday' + (this._sunday_coop || '=') + this.sunday();\n\n\t\t(this.frequency_Meeting_Seriess() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting_Series.frequency,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Frequency._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Frequency._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Frequency._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Frequency()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Frequency._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Frequency\" != 'ecc_queue' && obj.source == \"Frequency\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Frequency()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tdaily: obj.getValue(\"daily\"),\n\n\t\t\t\t\t\tweekly: obj.getValue(\"weekly\"),\n\n\t\t\t\t\t\tmonthly: obj.getValue(\"monthly\"),\n\n\t\t\t\t\t\tquarterly: obj.getValue(\"quarterly\"),\n\n\t\t\t\t\t\tdays: obj.getValue(\"days\"),\n\n\t\t\t\t\t\tmonday: obj.getValue(\"monday\"),\n\n\t\t\t\t\t\ttuesday: obj.getValue(\"tuesday\"),\n\n\t\t\t\t\t\twednesday: obj.getValue(\"wednesday\"),\n\n\t\t\t\t\t\tthursday: obj.getValue(\"thursday\"),\n\n\t\t\t\t\t\tfriday: obj.getValue(\"friday\"),\n\n\t\t\t\t\t\tsaturday: obj.getValue(\"saturday\"),\n\n\t\t\t\t\t\tsunday: obj.getValue(\"sunday\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Frequency._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Frequency._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Frequency()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Frequency._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.daily) !== 'undefined') {\n\n\t\t\t\t\t\tthis.daily(obj.daily);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.weekly) !== 'undefined') {\n\n\t\t\t\t\t\tthis.weekly(obj.weekly);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.monthly) !== 'undefined') {\n\n\t\t\t\t\t\tthis.monthly(obj.monthly);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.quarterly) !== 'undefined') {\n\n\t\t\t\t\t\tthis.quarterly(obj.quarterly);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.days) !== 'undefined') {\n\n\t\t\t\t\t\tthis.days(obj.days);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.monday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.monday(obj.monday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.tuesday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.tuesday(obj.tuesday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.wednesday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.wednesday(obj.wednesday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.thursday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.thursday(obj.thursday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.friday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.friday(obj.friday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.saturday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.saturday(obj.saturday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.sunday) !== 'undefined') {\n\n\t\t\t\t\t\tthis.sunday(obj.sunday);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.frequency_Meeting_Seriess) !== 'undefined') this.frequency_Meeting_Seriess(new shs_arbfw_Meeting_Series()._fromDocument(obj.frequency_Meeting_Seriess));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Frequency\"){\n\t\t\t\t\tgs.info(\"Frequency._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Frequency._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Frequency._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Frequency._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Frequency._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this._daily) !== 'undefined') {\n\t\t\tret.daily = this.daily();\n\n\t\t}\n\n\t\tif (typeof(this._weekly) !== 'undefined') {\n\t\t\tret.weekly = this.weekly();\n\n\t\t}\n\n\t\tif (typeof(this._monthly) !== 'undefined') {\n\t\t\tret.monthly = this.monthly();\n\n\t\t}\n\n\t\tif (typeof(this._quarterly) !== 'undefined') {\n\t\t\tret.quarterly = this.quarterly();\n\n\t\t}\n\n\t\tif (typeof(this._days) !== 'undefined') {\n\t\t\tret.days = this.days();\n\n\t\t}\n\n\t\tif (typeof(this._monday) !== 'undefined') {\n\t\t\tret.monday = this.monday();\n\n\t\t}\n\n\t\tif (typeof(this._tuesday) !== 'undefined') {\n\t\t\tret.tuesday = this.tuesday();\n\n\t\t}\n\n\t\tif (typeof(this._wednesday) !== 'undefined') {\n\t\t\tret.wednesday = this.wednesday();\n\n\t\t}\n\n\t\tif (typeof(this._thursday) !== 'undefined') {\n\t\t\tret.thursday = this.thursday();\n\n\t\t}\n\n\t\tif (typeof(this._friday) !== 'undefined') {\n\t\t\tret.friday = this.friday();\n\n\t\t}\n\n\t\tif (typeof(this._saturday) !== 'undefined') {\n\t\t\tret.saturday = this.saturday();\n\n\t\t}\n\n\t\tif (typeof(this._sunday) !== 'undefined') {\n\t\t\tret.sunday = this.sunday();\n\n\t\t}\n\n\t\tif (typeof(this.frequency_Meeting_Seriess()) !== 'undefined') ret.frequency_Meeting_Seriess = this.frequency_Meeting_Seriess().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Frequency();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t\tif (keys.indexOf(\"daily\") >= 0 && typeof(this.daily()) !== 'undefined') ret.daily(this.daily());\n\n\t\t\tif (keys.indexOf(\"weekly\") >= 0 && typeof(this.weekly()) !== 'undefined') ret.weekly(this.weekly());\n\n\t\t\tif (keys.indexOf(\"monthly\") >= 0 && typeof(this.monthly()) !== 'undefined') ret.monthly(this.monthly());\n\n\t\t\tif (keys.indexOf(\"quarterly\") >= 0 && typeof(this.quarterly()) !== 'undefined') ret.quarterly(this.quarterly());\n\n\t\t\tif (keys.indexOf(\"days\") >= 0 && typeof(this.days()) !== 'undefined') ret.days(this.days());\n\n\t\t\tif (keys.indexOf(\"monday\") >= 0 && typeof(this.monday()) !== 'undefined') ret.monday(this.monday());\n\n\t\t\tif (keys.indexOf(\"tuesday\") >= 0 && typeof(this.tuesday()) !== 'undefined') ret.tuesday(this.tuesday());\n\n\t\t\tif (keys.indexOf(\"wednesday\") >= 0 && typeof(this.wednesday()) !== 'undefined') ret.wednesday(this.wednesday());\n\n\t\t\tif (keys.indexOf(\"thursday\") >= 0 && typeof(this.thursday()) !== 'undefined') ret.thursday(this.thursday());\n\n\t\t\tif (keys.indexOf(\"friday\") >= 0 && typeof(this.friday()) !== 'undefined') ret.friday(this.friday());\n\n\t\t\tif (keys.indexOf(\"saturday\") >= 0 && typeof(this.saturday()) !== 'undefined') ret.saturday(this.saturday());\n\n\t\t\tif (keys.indexOf(\"sunday\") >= 0 && typeof(this.sunday()) !== 'undefined') ret.sunday(this.sunday());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_frequency', ['*'])['x_78611_platform_0_frequency']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_frequency');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._daily) !== 'undefined') {\n\t\t\tlet coop = this._daily_coop || '=';\n\n\t\t\tlet v = this.daily();\n\n\t\t\tif (arFields.indexOf('daily') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('daily');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('daily');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('daily', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._weekly) !== 'undefined') {\n\t\t\tlet coop = this._weekly_coop || '=';\n\n\t\t\tlet v = this.weekly();\n\n\t\t\tif (arFields.indexOf('weekly') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('weekly');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('weekly');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('weekly', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._monthly) !== 'undefined') {\n\t\t\tlet coop = this._monthly_coop || '=';\n\n\t\t\tlet v = this.monthly();\n\n\t\t\tif (arFields.indexOf('monthly') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('monthly');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('monthly');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('monthly', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._quarterly) !== 'undefined') {\n\t\t\tlet coop = this._quarterly_coop || '=';\n\n\t\t\tlet v = this.quarterly();\n\n\t\t\tif (arFields.indexOf('quarterly') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('quarterly');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('quarterly');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('quarterly', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._days) !== 'undefined') {\n\t\t\tlet coop = this._days_coop || '=';\n\n\t\t\tlet v = this.days();\n\n\t\t\tif (arFields.indexOf('days') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('days');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('days');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('days', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._monday) !== 'undefined') {\n\t\t\tlet coop = this._monday_coop || '=';\n\n\t\t\tlet v = this.monday();\n\n\t\t\tif (arFields.indexOf('monday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('monday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('monday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('monday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._tuesday) !== 'undefined') {\n\t\t\tlet coop = this._tuesday_coop || '=';\n\n\t\t\tlet v = this.tuesday();\n\n\t\t\tif (arFields.indexOf('tuesday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('tuesday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('tuesday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('tuesday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._wednesday) !== 'undefined') {\n\t\t\tlet coop = this._wednesday_coop || '=';\n\n\t\t\tlet v = this.wednesday();\n\n\t\t\tif (arFields.indexOf('wednesday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('wednesday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('wednesday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('wednesday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._thursday) !== 'undefined') {\n\t\t\tlet coop = this._thursday_coop || '=';\n\n\t\t\tlet v = this.thursday();\n\n\t\t\tif (arFields.indexOf('thursday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('thursday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('thursday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('thursday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._friday) !== 'undefined') {\n\t\t\tlet coop = this._friday_coop || '=';\n\n\t\t\tlet v = this.friday();\n\n\t\t\tif (arFields.indexOf('friday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('friday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('friday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('friday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._saturday) !== 'undefined') {\n\t\t\tlet coop = this._saturday_coop || '=';\n\n\t\t\tlet v = this.saturday();\n\n\t\t\tif (arFields.indexOf('saturday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('saturday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('saturday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('saturday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._sunday) !== 'undefined') {\n\t\t\tlet coop = this._sunday_coop || '=';\n\n\t\t\tlet v = this.sunday();\n\n\t\t\tif (arFields.indexOf('sunday') >= 0) {\n\t\t\t\t/* gs.info(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('sunday');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('sunday');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('sunday', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Frequency._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Frequency()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Frequency._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_frequency', ['*'])['x_78611_platform_0_frequency']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Frequency._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Frequency._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Frequency()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Frequency()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Frequency._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Frequency._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Frequency._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_frequency');\n\t\t\t/*gs.info(\"Frequency._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_frequency', ['*'])['x_78611_platform_0_frequency']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Frequency._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Frequency._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.frequency_Meeting_Seriess)) this.frequency_Meeting_Seriess(obj.frequency_Meeting_Seriess.map(function(ta) {\n\t\t\treturn new shs_arbfw_Meeting_Series()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Frequency.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Frequency.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Frequency.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Frequency.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Frequency.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Frequency.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Frequency.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Frequency.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_frequency');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_frequency', ['*'])['x_78611_platform_0_frequency'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Frequency.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Frequency.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Frequency.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Frequency.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Team","api_name":"x_78611_platform_0.shs_arbfw_Team","name":"shs_arbfw_Team","description":"{\n                Id: 'f64f7221ec03a0f64f7221ec03a0f64f',\n                name: 'x_78611_platform_0_team',\n                label: 'Team',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Team extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Team\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Team.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Team.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Team.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Team.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Team.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Team.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Team.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Team.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Team.team_Projects GETTERS AND SETTERS **********************/\n\tteam_Projects(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._team_Projects = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._team_Projects_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team_Projects;\n\t\t}\n\t}\n\n\t/************* Team.team_Team_Members GETTERS AND SETTERS **********************/\n\tteam_Team_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._team_Team_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._team_Team_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team_Team_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.team_Projects() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYProject.team,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.team_Team_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTeam_Member.team,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Team._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Team._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Team._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Team()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Team._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Team\" != 'ecc_queue' && obj.source == \"Team\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Team()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Team._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Team._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Team()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Team._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.team_Projects) !== 'undefined') this.team_Projects(new shs_arbfw_Project()._fromDocument(obj.team_Projects));\n\n\t\t\t\t\tif (typeof(obj.team_Team_Members) !== 'undefined') this.team_Team_Members(new shs_arbfw_Team_Member()._fromDocument(obj.team_Team_Members));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Team\"){\n\t\t\t\t\tgs.info(\"Team._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Team._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Team._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.team_Projects()) !== 'undefined') ret.team_Projects = this.team_Projects().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.team_Team_Members()) !== 'undefined') ret.team_Team_Members = this.team_Team_Members().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Team();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_team', ['*'])['x_78611_platform_0_team']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_team');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Team._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Team()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Team._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_team', ['*'])['x_78611_platform_0_team']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Team._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Team._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Team()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Team()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Team._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Team._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Team._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_team');\n\t\t\t/*gs.info(\"Team._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_team', ['*'])['x_78611_platform_0_team']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Team._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Team._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.team_Projects)) this.team_Projects(obj.team_Projects.map(function(ta) {\n\t\t\treturn new shs_arbfw_Project()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.team_Team_Members)) this.team_Team_Members(obj.team_Team_Members.map(function(ta) {\n\t\t\treturn new shs_arbfw_Team_Member()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Team.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Team.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Team.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Team.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_team');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_team', ['*'])['x_78611_platform_0_team'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Team.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Team.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Team.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Team.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"client_callable":true,"sys_name":"shs_arbfw_Role","api_name":"x_78611_platform_0.shs_arbfw_Role","name":"shs_arbfw_Role","description":"{\n                Id: '1951750e675f271951750e675f271951',\n                name: 'x_78611_platform_0_role',\n                label: 'Role',\n                remark: '',\n                rank: 1,\n                columns: [\n    \n                    {code: 'active', label: 'active', remark: '', type: 'boolean'},\n    \n                    {code: 'enabled', label: 'enabled', remark: '', type: 'boolean'},\n    \n                    {code: 'code', label: 'code', remark: '', type: 'string'},\n    \n                    {code: 'order', label: 'order', remark: '', type: 'int'},\n    \n                    {code: 'date', label: 'date', remark: '', type: 'glide_date_time'},\n    \n                    {code: 'name', label: 'name', remark: '', type: 'string'},\n    \n                    {code: 'remark', label: 'remark', remark: '', type: 'string'},\n    \n                ],\n                references: [\n    \n                ],\n                referencing: [\n    \n    \n    \n                ],\n            }","script":"class shs_arbfw_Role extends AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Role\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\n\t\t/** START: Data Model **/\n\t\tthis.__dataModel = null;\n\t\t/** END  : Data Model **/\n\t}\n\n\t/************* Role.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Role.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Role.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Role.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Role.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//gs.info(\"Role.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Role.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Role.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Role.role_Effort_Estimates GETTERS AND SETTERS **********************/\n\trole_Effort_Estimates(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._role_Effort_Estimates = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._role_Effort_Estimates_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role_Effort_Estimates;\n\t\t}\n\t}\n\n\t/************* Role.role_Team_Members GETTERS AND SETTERS **********************/\n\trole_Team_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._role_Team_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._role_Team_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role_Team_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.role_Effort_Estimates() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYEffort_Estimate.role,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.role_Team_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTeam_Member.role,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\tgs.info(\"Role._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn this._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\tgs.info(\"Role._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\tgs.info(\"Role._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*AbstractAjaxProcessor.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Role()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\ttry {\n\t\t\t\tobj = JSON.parse(obj);\n\t\t\t} catch (ex) {\n\t\t\t\t/*gs.info(\"Role._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\t\tlet _obj = {\n\t\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(this))\n\t\t\t\t};\n\t\t\t\t_obj[((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))] = obj;\n\t\t\t\tobj = _obj;\n\t\t\t}\n\t\t\treturn this._fromDocument(obj);\n\t\t} else if (typeof(obj) === 'object') {\n\t\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\t\tif (obj.isValidRecord()) {\n\t\t\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Role\" != 'ecc_queue' && obj.source == \"Role\") {\n\t\t\t\t\t\tobj.state = \"processing\"; // test\n\t\t\t\t\t\tobj.update();\n\n\t\t\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\t\t\tresp.queue = 'output';\n\t\t\t\t\t\tresp.agent = obj.agent;\n\t\t\t\t\t\tresp.topic = obj.topic;\n\t\t\t\t\t\tresp.name = obj.name;\n\t\t\t\t\t\tresp.source = obj.source;\n\t\t\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\t\t\tlet ret = new shs_arbfw_Role()._fromDocument()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\t\t\tresp.insert();\n\n\t\t\t\t\t\tobj.state = \"processed\";\n\t\t\t\t\t\tobj.update();\n\t\t\t\t\t\treturn resp;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tobj.query();\n\t\t\t\t\tlet grRet = [];\n\t\t\t\t\twhile (obj.next()) grRet.push(this._fromDocument(obj));\n\t\t\t\t\t/*gs.info(\"Role._fromDocument(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\t\t\treturn grRet;\n\t\t\t\t}\n\t\t\t} else if (obj._fromDocument) {\n\t\t\t\tgs.info(\"Role._fromDocument(): \" + \"redundent call\");\n\t\t\t\treturn obj;\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\treturn obj.map(function(o) {\n\t\t\t\t\treturn new shs_arbfw_Role()._fromDocument(o)\n\t\t\t\t});\n\t\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(obj))));\n\n\t\t\t\t\t/*gs.info(\"Role._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof(obj.role_Effort_Estimates) !== 'undefined') this.role_Effort_Estimates(new shs_arbfw_Effort_Estimate()._fromDocument(obj.role_Effort_Estimates));\n\n\t\t\t\t\tif (typeof(obj.role_Team_Members) !== 'undefined') this.role_Team_Members(new shs_arbfw_Team_Member()._fromDocument(obj.role_Team_Members));\n\n\t\t\t\t} else { // if(obj.constructor.name==\"Role\"){\n\t\t\t\t\tgs.info(\"Role._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgs.info(\"Role._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Role._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t\t}\n\n\t\t/*gs.info(\"Role._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t\t/*gs.info(\"Role._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\t\treturn this;\n\t}\n\n\t_new(c) {\n\n\t\treturn new shs_arbfw_Platform._new(c);\n\n\t}\n\n\t_toDocument(arFields) {\n\n\t\tlet ret = /*AbstractAjaxProcessor.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\t\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tret.active = this.active();\n\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tret.enabled = this.enabled();\n\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tret.code = this.code();\n\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tret.order = this.order();\n\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tret.date = this.date();\n\n\t\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tret.name = this.name();\n\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tret.remark = this.remark();\n\n\t\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t\t}\n\n\t\tif (typeof(this.role_Effort_Estimates()) !== 'undefined') ret.role_Effort_Estimates = this.role_Effort_Estimates().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (typeof(this.role_Team_Members()) !== 'undefined') ret.role_Team_Members = this.role_Team_Members().map(function(ta) {\n\t\t\treturn ta._toDocument();\n\t\t});\n\n\t\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\t\treturn !arFields.find(function(_k) {\n\t\t\t\treturn _k == k;\n\t\t\t});\n\t\t}).forEach(function(k) {\n\t\t\tdelete ret[k];\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\t_unique(keys, ret) {\n\t\tret = ret || new shs_arbfw_Role();\n\n\t\t/*AbstractAjaxProcessor.prototype._unique.call(this, */\n\t\tsuper._unique(keys, ret)\n\n\t\t// if(this.Id) ret.Id = this.Id;\n\t\tif (!keys) {\n\n\t\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t} else {\n\n\t\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t_query(gq) {\n\t\tlet arFields = Object.keys(global.Schema.of('x_78611_platform_0_role', ['*'])['x_78611_platform_0_role']);\n\n\t\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_78611_platform_0_role');\n\n\t\t/*AbstractAjaxProcessor.prototype._query.call(this, */\n\t\tsuper._query(gq)\n\n\t\tlet idf = ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(this));\n\t\tif (idf == 'Id') idf = 'sys_id';\n\t\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\t\tif (typeof(this._active) !== 'undefined') {\n\t\t\tlet coop = this._active_coop || '=';\n\n\t\t\tlet v = this.active();\n\n\t\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._enabled) !== 'undefined') {\n\t\t\tlet coop = this._enabled_coop || '=';\n\n\t\t\tlet v = this.enabled();\n\n\t\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._code) !== 'undefined') {\n\t\t\tlet coop = this._code_coop || '=';\n\n\t\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.code();\n\n\t\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._order) !== 'undefined') {\n\t\t\tlet coop = this._order_coop || '=';\n\n\t\t\tlet v = this.order();\n\n\t\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._date) !== 'undefined') {\n\t\t\tlet coop = this._date_coop || '=';\n\n\t\t\tlet v = this.date();\n\n\t\t\tif (v) {\n\t\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t\t}\n\n\t\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._name) !== 'undefined') {\n\t\t\tlet coop = this._name_coop || '=';\n\n\t\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.name();\n\n\t\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(this._remark) !== 'undefined') {\n\t\t\tlet coop = this._remark_coop || '=';\n\n\t\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\t\tlet v = this.remark();\n\n\t\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t\t/* gs.info(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\t\tif (v == null && coop == '=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t\t} else {\n\t\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t\t/* gs.info(\"Role._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\t\treturn this._queryGQ;\n\t}\n\n\t_save(obj) {\n\t\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\t\treturn new shs_arbfw_Role()._save(o)\n\t\t});\n\n\t\tlet _obj = {};\n\n\t\t/*gs.info(\"Role._save(): \"+ \"... \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\tObject.keys(obj).filter(function(k) {\n\t\t\treturn Object.keys(global.Schema.of('x_78611_platform_0_role', ['*'])['x_78611_platform_0_role']).filter(function(_k) {\n\t\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t\t}).indexOf(k.toLowerCase()) >= 0\n\t\t}).forEach(function(k) {\n\t\t\t_obj[k.toLowerCase()] = obj[k]\n\t\t});\n\n\t\tObject.keys(_obj).forEach(function(k) {\n\t\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t\tgs.info(\"Role._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tdelete _obj[k];\n\t\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t\tgs.info(\"Role._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t\t}\n\t\t});\n\n\t\tlet _this = null;\n\t\tif (obj.__keys) {\n\t\t\tlet kObj = {};\n\t\t\tkObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(_obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(_obj))));\n\t\t\tobj.__keys.forEach(function(k) {\n\t\t\t\tkObj[k] = _obj[k]\n\t\t\t});\n\t\t\t_this = new shs_arbfw_Role()._fromDocument(kObj);\n\t\t} else {\n\t\t\t_this = new shs_arbfw_Role()._fromDocument(_obj)._unique();\n\t\t}\n\n\t\t/*gs.info(\"Role._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\t\tdelete _obj.__idField;\n\n\t\ttry {\n\t\t\tgs.info(\"Role._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\t\tObject.keys(_obj).filter(function(k) {\n\t\t\t\treturn k.toLowerCase() != k;\n\t\t\t}).forEach(function(k) {\n\t\t\t\tgs.info(\"Role._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t\tvar lk = k.toLowerCase();\n\t\t\t\t_obj[lk] = _obj[k];\n\t\t\t\tdelete _obj[k];\n\t\t\t});\n\n\t\t\tlet gq = new global.GlideQuery(obj.__type || 'x_78611_platform_0_role');\n\t\t\t/*gs.info(\"Role._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\t\tif (_obj.sys_id) {\n\t\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t\t} else {\n\t\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\t\tgq = gq.insert(_obj);\n\t\t\t}\n\t\t\tlet _fObj = {};\n\t\t\t_fObj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))] = ((function(r, f) {\n\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r[f];\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t})(obj, ((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(obj))));\n\t\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_78611_platform_0_role', ['*'])['x_78611_platform_0_role']))));\n\t\t} catch (ex) {\n\t\t\tgs.info(\"Role._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t\tgs.info(\"Role._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\t\treturn this;\n\t\t}\n\n\t\tif (Array.isArray(obj.role_Effort_Estimates)) this.role_Effort_Estimates(obj.role_Effort_Estimates.map(function(ta) {\n\t\t\treturn new shs_arbfw_Effort_Estimate()._save(ta)\n\t\t}));\n\n\t\tif (Array.isArray(obj.role_Team_Members)) this.role_Team_Members(obj.role_Team_Members.map(function(ta) {\n\t\t\treturn new shs_arbfw_Team_Member()._save(ta)\n\t\t}));\n\n\t\treturn this;\n\t}\n\n\t/************* Role.store() **********************/\n\tstore(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Role.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Role.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Role.store(): \" + \"executing locally \");\n\n\t\t\t// store locally\n\t\t\tlet _this = this._unique().find();\n\t\t\tif (_this) this.Id = _this.Id;\n\n\t\t\treturn this._save(this._toDocument());\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Role.findAll() **********************/\n\tfindAll(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Role.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Role.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Role.findAll(): \" + \"executing locally \");\n\n\t\t\t// findAll locally\n\t\t\tlet gr = new GlideRecord('x_78611_platform_0_role');\n\t\t\tgr.addEncodedQuery(this._toEQuery());\n\t\t\treturn this._fromDocument(gr);\n\n\t\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_78611_platform_0_role', ['*'])['x_78611_platform_0_role'])));\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n\t/************* Role.find() **********************/\n\tfind(__event) {\n\t\tlet answer = undefined;\n\n\t\tlet node = null;\n\n\t\tlet __response = null;\n\n\t\tlet evJSON = null;\n\t\tif (__event) {\n\t\t\tevJSON = JSON.parse(__event.payload());\n\t\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\t\tthis._fromDocument(evJSON.__this);\n\t\t\t}\n\n\t\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\t\tif (!__event.responseTo()) {\n\t\t\t\tgs.info(\"Role.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t\t} else {\n\t\t\t\tgs.info(\"Role.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t\t}\n\t\t} else {\n\t\t\tgs.info(\"Role.find(): \" + \"executing locally \");\n\n\t\t\tlet ret = this.findAll();\n\t\t\treturn ret.length ? ret[0] : null;\n\n\t\t}\n\n\t\tif (__response && (!__event || !__event.responseTo())) {\n\t\t\tif (answer) {\n\n\t\t\t\t__response.payload(answer._toDocument());\n\n\t\t\t} else {\n\t\t\t\t__response.payload({\n\t\t\t\t\t__this: this._toDocument()\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t__response.trigger();\n\n\t\t}\n\n\t\treturn answer;\n\t}\n\n}"}]",
	"__keys": ["code"],
	"active": true,
	"enabled": true,
	"__trMap": []
}